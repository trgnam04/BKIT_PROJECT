
Modbus_Project_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ea8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe0  08008030  08008030  00018030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b010  0800b010  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800b010  0800b010  0001b010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b018  0800b018  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b018  0800b018  0001b018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b01c  0800b01c  0001b01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800b020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020214  2**0
                  CONTENTS
 10 .bss          0000058c  20000214  20000214  00020214  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007a0  200007a0  00020214  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001adb9  00000000  00000000  00020287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004655  00000000  00000000  0003b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001770  00000000  00000000  0003f698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001227  00000000  00000000  00040e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002654f  00000000  00000000  0004202f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020cd7  00000000  00000000  0006857e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dff27  00000000  00000000  00089255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006120  00000000  00000000  0016917c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0016f29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000214 	.word	0x20000214
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008018 	.word	0x08008018

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000218 	.word	0x20000218
 80001c4:	08008018 	.word	0x08008018

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b970 	b.w	8000cfc <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	460d      	mov	r5, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	460f      	mov	r7, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4694      	mov	ip, r2
 8000a48:	d965      	bls.n	8000b16 <__udivmoddi4+0xe2>
 8000a4a:	fab2 f382 	clz	r3, r2
 8000a4e:	b143      	cbz	r3, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a54:	f1c3 0220 	rsb	r2, r3, #32
 8000a58:	409f      	lsls	r7, r3
 8000a5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a5e:	4317      	orrs	r7, r2
 8000a60:	409c      	lsls	r4, r3
 8000a62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a66:	fa1f f58c 	uxth.w	r5, ip
 8000a6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a6e:	0c22      	lsrs	r2, r4, #16
 8000a70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a78:	fb01 f005 	mul.w	r0, r1, r5
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	d90a      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a80:	eb1c 0202 	adds.w	r2, ip, r2
 8000a84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a88:	f080 811c 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	f240 8119 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000a92:	3902      	subs	r1, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a12      	subs	r2, r2, r0
 8000a98:	b2a4      	uxth	r4, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aa6:	fb00 f505 	mul.w	r5, r0, r5
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	d90a      	bls.n	8000ac4 <__udivmoddi4+0x90>
 8000aae:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab6:	f080 8107 	bcs.w	8000cc8 <__udivmoddi4+0x294>
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	f240 8104 	bls.w	8000cc8 <__udivmoddi4+0x294>
 8000ac0:	4464      	add	r4, ip
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac8:	1b64      	subs	r4, r4, r5
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11e      	cbz	r6, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40dc      	lsrs	r4, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0xbc>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80ed 	beq.w	8000cbe <__udivmoddi4+0x28a>
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aea:	4608      	mov	r0, r1
 8000aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af0:	fab3 f183 	clz	r1, r3
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d149      	bne.n	8000b8c <__udivmoddi4+0x158>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	d302      	bcc.n	8000b02 <__udivmoddi4+0xce>
 8000afc:	4282      	cmp	r2, r0
 8000afe:	f200 80f8 	bhi.w	8000cf2 <__udivmoddi4+0x2be>
 8000b02:	1a84      	subs	r4, r0, r2
 8000b04:	eb65 0203 	sbc.w	r2, r5, r3
 8000b08:	2001      	movs	r0, #1
 8000b0a:	4617      	mov	r7, r2
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d0e2      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	e9c6 4700 	strd	r4, r7, [r6]
 8000b14:	e7df      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b16:	b902      	cbnz	r2, 8000b1a <__udivmoddi4+0xe6>
 8000b18:	deff      	udf	#255	; 0xff
 8000b1a:	fab2 f382 	clz	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8090 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b24:	1a8a      	subs	r2, r1, r2
 8000b26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2a:	fa1f fe8c 	uxth.w	lr, ip
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b34:	fb07 2015 	mls	r0, r7, r5, r2
 8000b38:	0c22      	lsrs	r2, r4, #16
 8000b3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b3e:	fb0e f005 	mul.w	r0, lr, r5
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b46:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4290      	cmp	r0, r2
 8000b52:	f200 80cb 	bhi.w	8000cec <__udivmoddi4+0x2b8>
 8000b56:	4645      	mov	r5, r8
 8000b58:	1a12      	subs	r2, r2, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b60:	fb07 2210 	mls	r2, r7, r0, r2
 8000b64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b68:	fb0e fe00 	mul.w	lr, lr, r0
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x14e>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x14c>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f200 80bb 	bhi.w	8000cf6 <__udivmoddi4+0x2c2>
 8000b80:	4610      	mov	r0, r2
 8000b82:	eba4 040e 	sub.w	r4, r4, lr
 8000b86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b8a:	e79f      	b.n	8000acc <__udivmoddi4+0x98>
 8000b8c:	f1c1 0720 	rsb	r7, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ba2:	40fd      	lsrs	r5, r7
 8000ba4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba8:	4323      	orrs	r3, r4
 8000baa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bae:	fa1f fe8c 	uxth.w	lr, ip
 8000bb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bb6:	0c1c      	lsrs	r4, r3, #16
 8000bb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc0:	42a5      	cmp	r5, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4464      	add	r4, ip
 8000be4:	1b64      	subs	r4, r4, r5
 8000be6:	b29d      	uxth	r5, r3
 8000be8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bec:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c04:	d26c      	bcs.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	d96a      	bls.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	4464      	add	r4, ip
 8000c0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c12:	fba3 9502 	umull	r9, r5, r3, r2
 8000c16:	eba4 040e 	sub.w	r4, r4, lr
 8000c1a:	42ac      	cmp	r4, r5
 8000c1c:	46c8      	mov	r8, r9
 8000c1e:	46ae      	mov	lr, r5
 8000c20:	d356      	bcc.n	8000cd0 <__udivmoddi4+0x29c>
 8000c22:	d053      	beq.n	8000ccc <__udivmoddi4+0x298>
 8000c24:	b156      	cbz	r6, 8000c3c <__udivmoddi4+0x208>
 8000c26:	ebb0 0208 	subs.w	r2, r0, r8
 8000c2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c32:	40ca      	lsrs	r2, r1
 8000c34:	40cc      	lsrs	r4, r1
 8000c36:	4317      	orrs	r7, r2
 8000c38:	e9c6 7400 	strd	r7, r4, [r6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	f1c3 0120 	rsb	r1, r3, #32
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c50:	fa25 f101 	lsr.w	r1, r5, r1
 8000c54:	409d      	lsls	r5, r3
 8000c56:	432a      	orrs	r2, r5
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c64:	fb07 1510 	mls	r5, r7, r0, r1
 8000c68:	0c11      	lsrs	r1, r2, #16
 8000c6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c72:	428d      	cmp	r5, r1
 8000c74:	fa04 f403 	lsl.w	r4, r4, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x258>
 8000c7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c82:	d22f      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c84:	428d      	cmp	r5, r1
 8000c86:	d92d      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	1b49      	subs	r1, r1, r5
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c94:	fb07 1115 	mls	r1, r7, r5, r1
 8000c98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca0:	4291      	cmp	r1, r2
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x282>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cac:	d216      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000cae:	4291      	cmp	r1, r2
 8000cb0:	d914      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000cb2:	3d02      	subs	r5, #2
 8000cb4:	4462      	add	r2, ip
 8000cb6:	1a52      	subs	r2, r2, r1
 8000cb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cbc:	e738      	b.n	8000b30 <__udivmoddi4+0xfc>
 8000cbe:	4631      	mov	r1, r6
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	e708      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e6e6      	b.n	8000a96 <__udivmoddi4+0x62>
 8000cc8:	4610      	mov	r0, r2
 8000cca:	e6fb      	b.n	8000ac4 <__udivmoddi4+0x90>
 8000ccc:	4548      	cmp	r0, r9
 8000cce:	d2a9      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000cd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	e7a3      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cdc:	4645      	mov	r5, r8
 8000cde:	e7ea      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000ce0:	462b      	mov	r3, r5
 8000ce2:	e794      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce4:	4640      	mov	r0, r8
 8000ce6:	e7d1      	b.n	8000c8c <__udivmoddi4+0x258>
 8000ce8:	46d0      	mov	r8, sl
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cec:	3d02      	subs	r5, #2
 8000cee:	4462      	add	r2, ip
 8000cf0:	e732      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e70a      	b.n	8000b0c <__udivmoddi4+0xd8>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e742      	b.n	8000b82 <__udivmoddi4+0x14e>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <InitSlave>:
#include "lcd.h"

Slave_Device BKIT01;


void InitSlave(Slave_Device* hDev){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	hDev->signal = IDLE;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	705a      	strb	r2, [r3, #1]
	hDev->subsignal.s = 0;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
	hDev->Address = SLAVE_ADDRESS;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	739a      	strb	r2, [r3, #14]
	memset(hDev->Register, 0, sizeof(hDev->Register));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	220a      	movs	r2, #10
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f007 f94c 	bl	8007fc0 <memset>
	memset(hDev->RegisterCoil, 0, sizeof(hDev->RegisterCoil));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	330c      	adds	r3, #12
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f007 f945 	bl	8007fc0 <memset>
	Modbus_Init(&slave, &huart3);
 8000d36:	4904      	ldr	r1, [pc, #16]	; (8000d48 <InitSlave+0x48>)
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <InitSlave+0x4c>)
 8000d3a:	f001 fdb7 	bl	80028ac <Modbus_Init>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000754 	.word	0x20000754
 8000d4c:	2000039c 	.word	0x2000039c

08000d50 <CommandParser_handler>:

void CommandParser_handler(Slave_Device* hDev){
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	switch(slave.Rx_buf[1]){
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <CommandParser_handler+0x84>)
 8000d5a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d831      	bhi.n	8000dc8 <CommandParser_handler+0x78>
 8000d64:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <CommandParser_handler+0x1c>)
 8000d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6a:	bf00      	nop
 8000d6c:	08000dc5 	.word	0x08000dc5
 8000d70:	08000dc5 	.word	0x08000dc5
 8000d74:	08000dad 	.word	0x08000dad
 8000d78:	08000dc5 	.word	0x08000dc5
 8000d7c:	08000dc5 	.word	0x08000dc5
 8000d80:	08000db5 	.word	0x08000db5
 8000d84:	08000dc9 	.word	0x08000dc9
 8000d88:	08000dc9 	.word	0x08000dc9
 8000d8c:	08000dc9 	.word	0x08000dc9
 8000d90:	08000dc9 	.word	0x08000dc9
 8000d94:	08000dc9 	.word	0x08000dc9
 8000d98:	08000dc9 	.word	0x08000dc9
 8000d9c:	08000dc9 	.word	0x08000dc9
 8000da0:	08000dc9 	.word	0x08000dc9
 8000da4:	08000dc5 	.word	0x08000dc5
 8000da8:	08000dbd 	.word	0x08000dbd
	}
	case READ_DISCRETE_INPUT:{
		break;
	}
	case READ_HOLDING_REGISTER:{
		hDev->signal = READ_MULTIPLE_HOLDING_REGISTER_HANDLER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2203      	movs	r2, #3
 8000db0:	705a      	strb	r2, [r3, #1]
		break;
 8000db2:	e008      	b.n	8000dc6 <CommandParser_handler+0x76>
	}
	case WRITE_SINGLE_COIL:{
		break;
	}
	case WRITE_SINGLE_HOLDING_REGISTER:{
		hDev->signal = WRITE_HOLDING_REGISTER_HANDLER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2205      	movs	r2, #5
 8000db8:	705a      	strb	r2, [r3, #1]
		break;
 8000dba:	e004      	b.n	8000dc6 <CommandParser_handler+0x76>
	}
	case WRITE_MULTIPLE_COIL:{
		break;
	}
	case WRITE_MULTIPLE_HOLDING_REGISTER:{
		hDev->signal = READ_MULTIPLE_HOLDING_REGISTER_HANDLER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	705a      	strb	r2, [r3, #1]
		break;
 8000dc2:	e000      	b.n	8000dc6 <CommandParser_handler+0x76>
		break;
 8000dc4:	bf00      	nop
	}
	}
	return;
 8000dc6:	bf00      	nop
 8000dc8:	bf00      	nop
}
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	2000039c 	.word	0x2000039c

08000dd8 <splitFloat>:

void splitFloat(float input, uint8_t *integerPart, uint8_t *decimalPart) {
 8000dd8:	b480      	push	{r7}
 8000dda:	b087      	sub	sp, #28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	ed87 0a03 	vstr	s0, [r7, #12]
 8000de2:	60b8      	str	r0, [r7, #8]
 8000de4:	6079      	str	r1, [r7, #4]
    // Lấy phần nguyên
    *integerPart = (uint8_t)input;
 8000de6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dee:	edc7 7a00 	vstr	s15, [r7]
 8000df2:	783b      	ldrb	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	701a      	strb	r2, [r3, #0]

    // Lấy phần thập phân
    float fractional = input - *integerPart; // Tính phần thập phân
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e06:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e0e:	edc7 7a05 	vstr	s15, [r7, #20]
    *decimalPart = (uint8_t)(fractional * 100); // Chuyển thành số nguyên trong khoảng 0-99
 8000e12:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e16:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000e3c <splitFloat+0x64>
 8000e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e22:	edc7 7a00 	vstr	s15, [r7]
 8000e26:	783b      	ldrb	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	701a      	strb	r2, [r3, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	42c80000 	.word	0x42c80000

08000e40 <splitUint16>:

void splitUint16(uint16_t input, uint8_t *higherByte, uint8_t *lowerByte) {
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	81fb      	strh	r3, [r7, #14]
    *higherByte = (input >> 8) & 0xFF; // Lấy 8 bit cao
 8000e4e:	89fb      	ldrh	r3, [r7, #14]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	701a      	strb	r2, [r3, #0]
    *lowerByte = input & 0xFF;        // Lấy 8 bit thấp
 8000e5a:	89fb      	ldrh	r3, [r7, #14]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	701a      	strb	r2, [r3, #0]
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <Read_multiple_holding_register_handler>:


void Read_multiple_holding_register_handler(Slave_Device* hDev){
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af02      	add	r7, sp, #8
 8000e76:	6078      	str	r0, [r7, #4]
	uint16_t startReg = (uint16_t)(slave.Rx_buf[2]) << 8 | (uint16_t)(slave.Rx_buf[3]);
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <Read_multiple_holding_register_handler+0x6c>)
 8000e7a:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b21a      	sxth	r2, r3
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <Read_multiple_holding_register_handler+0x6c>)
 8000e84:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	81fb      	strh	r3, [r7, #14]
	uint16_t numberOfReg = (uint16_t)(slave.Rx_buf[4]) << 8 | (uint16_t)(slave.Rx_buf[5]);
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <Read_multiple_holding_register_handler+0x6c>)
 8000e92:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8000e96:	021b      	lsls	r3, r3, #8
 8000e98:	b21a      	sxth	r2, r3
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <Read_multiple_holding_register_handler+0x6c>)
 8000e9c:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8000ea0:	b21b      	sxth	r3, r3
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	81bb      	strh	r3, [r7, #12]
	Modbus_Transmit_Slave(&slave, hDev->Address, slave.Rx_buf[1], &hDev->Register[startReg], numberOfReg * 2, 100);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7b99      	ldrb	r1, [r3, #14]
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <Read_multiple_holding_register_handler+0x6c>)
 8000eae:	f893 0109 	ldrb.w	r0, [r3, #265]	; 0x109
 8000eb2:	89fb      	ldrh	r3, [r7, #14]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	1c9a      	adds	r2, r3, #2
 8000eba:	89bb      	ldrh	r3, [r7, #12]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2464      	movs	r4, #100	; 0x64
 8000ec4:	9401      	str	r4, [sp, #4]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	4602      	mov	r2, r0
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <Read_multiple_holding_register_handler+0x6c>)
 8000ece:	f001 fc4a 	bl	8002766 <Modbus_Transmit_Slave>
	return;
 8000ed2:	bf00      	nop
}
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd90      	pop	{r4, r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000039c 	.word	0x2000039c

08000ee0 <Read_holding_register_handler>:

void Read_holding_register_handler(Slave_Device* hDev){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	data[0] = 3;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	733b      	strb	r3, [r7, #12]
	data[1] = hDev->Register[slave.Rx_buf[2]];
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <Read_holding_register_handler+0x50>)
 8000eee:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	789b      	ldrb	r3, [r3, #2]
 8000efa:	737b      	strb	r3, [r7, #13]
	data[2] = hDev->Register[slave.Rx_buf[2] + 1];
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <Read_holding_register_handler+0x50>)
 8000efe:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000f02:	3301      	adds	r3, #1
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	789b      	ldrb	r3, [r3, #2]
 8000f0a:	73bb      	strb	r3, [r7, #14]
	Modbus_Transmit_Slave(&slave, hDev->Address, slave.Rx_buf[1], data, 3, 100);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7b99      	ldrb	r1, [r3, #14]
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <Read_holding_register_handler+0x50>)
 8000f12:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	2064      	movs	r0, #100	; 0x64
 8000f1c:	9001      	str	r0, [sp, #4]
 8000f1e:	2003      	movs	r0, #3
 8000f20:	9000      	str	r0, [sp, #0]
 8000f22:	4803      	ldr	r0, [pc, #12]	; (8000f30 <Read_holding_register_handler+0x50>)
 8000f24:	f001 fc1f 	bl	8002766 <Modbus_Transmit_Slave>
	return;
 8000f28:	bf00      	nop
}
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000039c 	.word	0x2000039c

08000f34 <ReadData>:

static void ReadData(Slave_Device* hDev){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	float tempCur = sensor_get_current();
 8000f3c:	f001 fd58 	bl	80029f0 <sensor_get_current>
 8000f40:	ed87 0a05 	vstr	s0, [r7, #20]
	uint16_t tempLt = sensor_get_light();
 8000f44:	f001 fcfe 	bl	8002944 <sensor_get_light>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	827b      	strh	r3, [r7, #18]
	uint16_t tempPt =sensor_get_potentiometer();
 8000f4c:	f001 fd06 	bl	800295c <sensor_get_potentiometer>
 8000f50:	4603      	mov	r3, r0
 8000f52:	823b      	strh	r3, [r7, #16]
	float tempT = sensor_get_temperature();
 8000f54:	f001 fda8 	bl	8002aa8 <sensor_get_temperature>
 8000f58:	ed87 0a03 	vstr	s0, [r7, #12]
	float tempVol = sensor_get_voltage();
 8000f5c:	f001 fd0c 	bl	8002978 <sensor_get_voltage>
 8000f60:	ed87 0a02 	vstr	s0, [r7, #8]

	// Current
	splitFloat(tempCur, &hDev->Register[CURRENT_REGISTER_ADDRESS], &hDev->Register[CURRENT_REGISTER_ADDRESS + 1]);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1d9a      	adds	r2, r3, #6
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3307      	adds	r3, #7
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4610      	mov	r0, r2
 8000f70:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f74:	f7ff ff30 	bl	8000dd8 <splitFloat>
	// Temperature
	splitFloat(tempT, &hDev->Register[TEMPERATURE_REGISTER_ADDRESS], &hDev->Register[TEMPERATURE_REGISTER_ADDRESS + 1]);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	1c9a      	adds	r2, r3, #2
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3303      	adds	r3, #3
 8000f80:	4619      	mov	r1, r3
 8000f82:	4610      	mov	r0, r2
 8000f84:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f88:	f7ff ff26 	bl	8000dd8 <splitFloat>
	// Voltage
	splitFloat(tempVol, &hDev->Register[VOLTAGE_REGISTER_ADDRESS], &hDev->Register[VOLTAGE_REGISTER_ADDRESS + 1]);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f103 0208 	add.w	r2, r3, #8
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3309      	adds	r3, #9
 8000f96:	4619      	mov	r1, r3
 8000f98:	4610      	mov	r0, r2
 8000f9a:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f9e:	f7ff ff1b 	bl	8000dd8 <splitFloat>
	// Light
	splitUint16(tempLt, &hDev->Register[LIGHT_REGISTER_ADDRESS], &hDev->Register[LIGHT_REGISTER_ADDRESS + 1]);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	1d19      	adds	r1, r3, #4
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	1d5a      	adds	r2, r3, #5
 8000faa:	8a7b      	ldrh	r3, [r7, #18]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff47 	bl	8000e40 <splitUint16>
	// Potentiometer
	splitUint16(tempPt, &hDev->Register[POTENTIOMETER_REGISTER_ADDRESS], &hDev->Register[POTENTIOMETER_REGISTER_ADDRESS + 1]);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f103 010a 	add.w	r1, r3, #10
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f103 020b 	add.w	r2, r3, #11
 8000fbe:	8a3b      	ldrh	r3, [r7, #16]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff3d 	bl	8000e40 <splitUint16>

}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <Write_holding_register_handler>:

void Write_holding_register_handler(Slave_Device* hDev){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, slave.Rx_buf, slave.Rx_size, 1000);
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <Write_holding_register_handler+0xa8>)
 8000fda:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	4926      	ldr	r1, [pc, #152]	; (800107c <Write_holding_register_handler+0xac>)
 8000fe4:	4826      	ldr	r0, [pc, #152]	; (8001080 <Write_holding_register_handler+0xb0>)
 8000fe6:	f005 fed7 	bl	8006d98 <HAL_UART_Transmit>
	hDev->RegisterCoil[0] = slave.Rx_buf[4];
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <Write_holding_register_handler+0xa8>)
 8000fec:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	731a      	strb	r2, [r3, #12]
	hDev->RegisterCoil[1] = slave.Rx_buf[5];
 8000ff4:	4b20      	ldr	r3, [pc, #128]	; (8001078 <Write_holding_register_handler+0xa8>)
 8000ff6:	f893 210d 	ldrb.w	r2, [r3, #269]	; 0x10d
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	735a      	strb	r2, [r3, #13]
	uint8_t CoilState = hDev->RegisterCoil[1];
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7b5b      	ldrb	r3, [r3, #13]
 8001002:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, CoilState & COIL_A);
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	2120      	movs	r1, #32
 8001010:	481c      	ldr	r0, [pc, #112]	; (8001084 <Write_holding_register_handler+0xb4>)
 8001012:	f003 fd3f 	bl	8004a94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, CoilState & COIL_B);
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	b2db      	uxtb	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	2140      	movs	r1, #64	; 0x40
 8001022:	4818      	ldr	r0, [pc, #96]	; (8001084 <Write_holding_register_handler+0xb4>)
 8001024:	f003 fd36 	bl	8004a94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X0_GPIO_Port, OUTPUT_X0_Pin, CoilState & COIL_C);
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	2140      	movs	r1, #64	; 0x40
 8001034:	4814      	ldr	r0, [pc, #80]	; (8001088 <Write_holding_register_handler+0xb8>)
 8001036:	f003 fd2d 	bl	8004a94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X1_GPIO_Port, OUTPUT_X1_Pin, CoilState & COIL_D);
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	b2db      	uxtb	r3, r3
 8001042:	461a      	mov	r2, r3
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	4810      	ldr	r0, [pc, #64]	; (8001088 <Write_holding_register_handler+0xb8>)
 8001048:	f003 fd24 	bl	8004a94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X2_GPIO_Port, OUTPUT_X2_Pin, CoilState & COIL_E);
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	f003 0310 	and.w	r3, r3, #16
 8001052:	b2db      	uxtb	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	2110      	movs	r1, #16
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <Write_holding_register_handler+0xbc>)
 800105a:	f003 fd1b 	bl	8004a94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X3_GPIO_Port, OUTPUT_X3_Pin, CoilState & COIL_F);
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	f003 0320 	and.w	r3, r3, #32
 8001064:	b2db      	uxtb	r3, r3
 8001066:	461a      	mov	r2, r3
 8001068:	2120      	movs	r1, #32
 800106a:	4808      	ldr	r0, [pc, #32]	; (800108c <Write_holding_register_handler+0xbc>)
 800106c:	f003 fd12 	bl	8004a94 <HAL_GPIO_WritePin>
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000039c 	.word	0x2000039c
 800107c:	200004a4 	.word	0x200004a4
 8001080:	20000754 	.word	0x20000754
 8001084:	40021000 	.word	0x40021000
 8001088:	40020000 	.word	0x40020000
 800108c:	40020800 	.word	0x40020800

08001090 <slave_behavior>:

void slave_behavior(Slave_Device* hDev){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	switch(hDev->signal){
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	785b      	ldrb	r3, [r3, #1]
 800109c:	2b05      	cmp	r3, #5
 800109e:	d83b      	bhi.n	8001118 <slave_behavior+0x88>
 80010a0:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <slave_behavior+0x18>)
 80010a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a6:	bf00      	nop
 80010a8:	080010c1 	.word	0x080010c1
 80010ac:	080010c9 	.word	0x080010c9
 80010b0:	080010e5 	.word	0x080010e5
 80010b4:	080010fb 	.word	0x080010fb
 80010b8:	080010ed 	.word	0x080010ed
 80010bc:	08001109 	.word	0x08001109
	case IDLE:{
		hDev->signal = WAITTING_FOR_CMD;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	705a      	strb	r2, [r3, #1]
		break;
 80010c6:	e027      	b.n	8001118 <slave_behavior+0x88>
	}
	case WAITTING_FOR_CMD:{
		ReadData(hDev);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff33 	bl	8000f34 <ReadData>
		if(Receive_Flag){
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <slave_behavior+0x90>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d01f      	beq.n	8001116 <slave_behavior+0x86>
			hDev->signal = COMMAND_PARSER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2202      	movs	r2, #2
 80010da:	705a      	strb	r2, [r3, #1]
			Receive_Flag = 0;
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <slave_behavior+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
			break;
 80010e2:	e019      	b.n	8001118 <slave_behavior+0x88>
		}
		break;
	}
	case COMMAND_PARSER:{
		CommandParser_handler(hDev);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff fe33 	bl	8000d50 <CommandParser_handler>
		break;
 80010ea:	e015      	b.n	8001118 <slave_behavior+0x88>
	}
	case READ_HOLDING_REGISTER_HANDLER:{
		Read_holding_register_handler(hDev);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fef7 	bl	8000ee0 <Read_holding_register_handler>
		hDev->signal = IDLE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	705a      	strb	r2, [r3, #1]
		break;
 80010f8:	e00e      	b.n	8001118 <slave_behavior+0x88>
	}
	case READ_MULTIPLE_HOLDING_REGISTER_HANDLER:{
		Read_multiple_holding_register_handler(hDev);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff feb8 	bl	8000e70 <Read_multiple_holding_register_handler>
		hDev->signal = IDLE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	705a      	strb	r2, [r3, #1]
		break;
 8001106:	e007      	b.n	8001118 <slave_behavior+0x88>
	}
	case WRITE_HOLDING_REGISTER_HANDLER:{
		Write_holding_register_handler(hDev);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff61 	bl	8000fd0 <Write_holding_register_handler>
		hDev->signal = IDLE;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	705a      	strb	r2, [r3, #1]
		break;
 8001114:	e000      	b.n	8001118 <slave_behavior+0x88>
		break;
 8001116:	bf00      	nop
	}
	}
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000399 	.word	0x20000399

08001124 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112a:	463b      	mov	r3, r7
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001136:	4b3d      	ldr	r3, [pc, #244]	; (800122c <MX_ADC1_Init+0x108>)
 8001138:	4a3d      	ldr	r2, [pc, #244]	; (8001230 <MX_ADC1_Init+0x10c>)
 800113a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800113c:	4b3b      	ldr	r3, [pc, #236]	; (800122c <MX_ADC1_Init+0x108>)
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001142:	4b3a      	ldr	r3, [pc, #232]	; (800122c <MX_ADC1_Init+0x108>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001148:	4b38      	ldr	r3, [pc, #224]	; (800122c <MX_ADC1_Init+0x108>)
 800114a:	2201      	movs	r2, #1
 800114c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800114e:	4b37      	ldr	r3, [pc, #220]	; (800122c <MX_ADC1_Init+0x108>)
 8001150:	2200      	movs	r2, #0
 8001152:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001154:	4b35      	ldr	r3, [pc, #212]	; (800122c <MX_ADC1_Init+0x108>)
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800115c:	4b33      	ldr	r3, [pc, #204]	; (800122c <MX_ADC1_Init+0x108>)
 800115e:	2200      	movs	r2, #0
 8001160:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <MX_ADC1_Init+0x108>)
 8001164:	4a33      	ldr	r2, [pc, #204]	; (8001234 <MX_ADC1_Init+0x110>)
 8001166:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001168:	4b30      	ldr	r3, [pc, #192]	; (800122c <MX_ADC1_Init+0x108>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <MX_ADC1_Init+0x108>)
 8001170:	2205      	movs	r2, #5
 8001172:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001174:	4b2d      	ldr	r3, [pc, #180]	; (800122c <MX_ADC1_Init+0x108>)
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <MX_ADC1_Init+0x108>)
 800117e:	2201      	movs	r2, #1
 8001180:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001182:	482a      	ldr	r0, [pc, #168]	; (800122c <MX_ADC1_Init+0x108>)
 8001184:	f002 f9c4 	bl	8003510 <HAL_ADC_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800118e:	f001 fa73 	bl	8002678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001192:	2308      	movs	r3, #8
 8001194:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001196:	2301      	movs	r3, #1
 8001198:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	4619      	mov	r1, r3
 80011a2:	4822      	ldr	r0, [pc, #136]	; (800122c <MX_ADC1_Init+0x108>)
 80011a4:	f002 fb26 	bl	80037f4 <HAL_ADC_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011ae:	f001 fa63 	bl	8002678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80011b2:	2309      	movs	r3, #9
 80011b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ba:	463b      	mov	r3, r7
 80011bc:	4619      	mov	r1, r3
 80011be:	481b      	ldr	r0, [pc, #108]	; (800122c <MX_ADC1_Init+0x108>)
 80011c0:	f002 fb18 	bl	80037f4 <HAL_ADC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80011ca:	f001 fa55 	bl	8002678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011ce:	230a      	movs	r3, #10
 80011d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80011d2:	2303      	movs	r3, #3
 80011d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d6:	463b      	mov	r3, r7
 80011d8:	4619      	mov	r1, r3
 80011da:	4814      	ldr	r0, [pc, #80]	; (800122c <MX_ADC1_Init+0x108>)
 80011dc:	f002 fb0a 	bl	80037f4 <HAL_ADC_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80011e6:	f001 fa47 	bl	8002678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011ea:	230b      	movs	r3, #11
 80011ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80011ee:	2304      	movs	r3, #4
 80011f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_ADC1_Init+0x108>)
 80011f8:	f002 fafc 	bl	80037f4 <HAL_ADC_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001202:	f001 fa39 	bl	8002678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001206:	230c      	movs	r3, #12
 8001208:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800120a:	2305      	movs	r3, #5
 800120c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120e:	463b      	mov	r3, r7
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <MX_ADC1_Init+0x108>)
 8001214:	f002 faee 	bl	80037f4 <HAL_ADC_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800121e:	f001 fa2b 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000240 	.word	0x20000240
 8001230:	40012000 	.word	0x40012000
 8001234:	0f000001 	.word	0x0f000001

08001238 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a3c      	ldr	r2, [pc, #240]	; (8001348 <HAL_ADC_MspInit+0x110>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d171      	bne.n	800133e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <HAL_ADC_MspInit+0x114>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a3a      	ldr	r2, [pc, #232]	; (800134c <HAL_ADC_MspInit+0x114>)
 8001264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b38      	ldr	r3, [pc, #224]	; (800134c <HAL_ADC_MspInit+0x114>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b34      	ldr	r3, [pc, #208]	; (800134c <HAL_ADC_MspInit+0x114>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a33      	ldr	r2, [pc, #204]	; (800134c <HAL_ADC_MspInit+0x114>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b31      	ldr	r3, [pc, #196]	; (800134c <HAL_ADC_MspInit+0x114>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <HAL_ADC_MspInit+0x114>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a2c      	ldr	r2, [pc, #176]	; (800134c <HAL_ADC_MspInit+0x114>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <HAL_ADC_MspInit+0x114>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80012ae:	2307      	movs	r3, #7
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b2:	2303      	movs	r3, #3
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4823      	ldr	r0, [pc, #140]	; (8001350 <HAL_ADC_MspInit+0x118>)
 80012c2:	f003 fa4b 	bl	800475c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012c6:	2303      	movs	r3, #3
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	481e      	ldr	r0, [pc, #120]	; (8001354 <HAL_ADC_MspInit+0x11c>)
 80012da:	f003 fa3f 	bl	800475c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <HAL_ADC_MspInit+0x120>)
 80012e0:	4a1e      	ldr	r2, [pc, #120]	; (800135c <HAL_ADC_MspInit+0x124>)
 80012e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <HAL_ADC_MspInit+0x120>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_ADC_MspInit+0x120>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_ADC_MspInit+0x120>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <HAL_ADC_MspInit+0x120>)
 80012f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <HAL_ADC_MspInit+0x120>)
 8001300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001304:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <HAL_ADC_MspInit+0x120>)
 8001308:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_ADC_MspInit+0x120>)
 8001310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001314:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_ADC_MspInit+0x120>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_ADC_MspInit+0x120>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <HAL_ADC_MspInit+0x120>)
 8001324:	f002 fe18 	bl	8003f58 <HAL_DMA_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800132e:	f001 f9a3 	bl	8002678 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_ADC_MspInit+0x120>)
 8001336:	639a      	str	r2, [r3, #56]	; 0x38
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_ADC_MspInit+0x120>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40012000 	.word	0x40012000
 800134c:	40023800 	.word	0x40023800
 8001350:	40020800 	.word	0x40020800
 8001354:	40020400 	.word	0x40020400
 8001358:	20000288 	.word	0x20000288
 800135c:	40026410 	.word	0x40026410

08001360 <button_init>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void button_init() {
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001364:	2201      	movs	r2, #1
 8001366:	2108      	movs	r1, #8
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <button_init+0x14>)
 800136a:	f003 fb93 	bl	8004a94 <HAL_GPIO_WritePin>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40020c00 	.word	0x40020c00

08001378 <buzzer_init>:

/* Variables */
uint8_t buzzerduty_cycle = 0;

/* Functions */
void buzzer_init() {
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800137c:	2100      	movs	r1, #0
 800137e:	4802      	ldr	r0, [pc, #8]	; (8001388 <buzzer_init+0x10>)
 8001380:	f004 fda4 	bl	8005ecc <HAL_TIM_PWM_Start>
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200006c4 	.word	0x200006c4

0800138c <crc16>:
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

uint16_t crc16(const uint8_t *data, uint16_t num_bytes)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8001398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139c:	82fb      	strh	r3, [r7, #22]
    const uint8_t *ptr = data;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	613b      	str	r3, [r7, #16]

    if (ptr != NULL)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d018      	beq.n	80013da <crc16+0x4e>
    {
        for (uint16_t i = 0; i < num_bytes; i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	81fb      	strh	r3, [r7, #14]
 80013ac:	e011      	b.n	80013d2 <crc16+0x46>
        {
            crc = (crc >> 8) ^ crc16_lookup_table[(crc ^ (uint16_t)*ptr++) & 0x00FF];
 80013ae:	8afb      	ldrh	r3, [r7, #22]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	8af9      	ldrh	r1, [r7, #22]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1c58      	adds	r0, r3, #1
 80013ba:	6138      	str	r0, [r7, #16]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	404b      	eors	r3, r1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	4909      	ldr	r1, [pc, #36]	; (80013e8 <crc16+0x5c>)
 80013c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013c8:	4053      	eors	r3, r2
 80013ca:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < num_bytes; i++)
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	3301      	adds	r3, #1
 80013d0:	81fb      	strh	r3, [r7, #14]
 80013d2:	89fa      	ldrh	r2, [r7, #14]
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3e9      	bcc.n	80013ae <crc16+0x22>
        }
    }

    return crc;
 80013da:	8afb      	ldrh	r3, [r7, #22]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	20000000 	.word	0x20000000

080013ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_DMA_Init+0x3c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <MX_DMA_Init+0x3c>)
 80013fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_DMA_Init+0x3c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	2038      	movs	r0, #56	; 0x38
 8001414:	f002 fd69 	bl	8003eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001418:	2038      	movs	r0, #56	; 0x38
 800141a:	f002 fd82 	bl	8003f22 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08e      	sub	sp, #56	; 0x38
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]
 8001442:	615a      	str	r2, [r3, #20]
 8001444:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001446:	463b      	mov	r3, r7
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001458:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <MX_FSMC_Init+0xec>)
 800145a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800145e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001460:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <MX_FSMC_Init+0xec>)
 8001462:	4a2e      	ldr	r2, [pc, #184]	; (800151c <MX_FSMC_Init+0xf0>)
 8001464:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001466:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <MX_FSMC_Init+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800146c:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <MX_FSMC_Init+0xec>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001472:	4b29      	ldr	r3, [pc, #164]	; (8001518 <MX_FSMC_Init+0xec>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <MX_FSMC_Init+0xec>)
 800147a:	2210      	movs	r2, #16
 800147c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <MX_FSMC_Init+0xec>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <MX_FSMC_Init+0xec>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <MX_FSMC_Init+0xec>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <MX_FSMC_Init+0xec>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <MX_FSMC_Init+0xec>)
 8001498:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800149c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <MX_FSMC_Init+0xec>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_FSMC_Init+0xec>)
 80014a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014aa:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_FSMC_Init+0xec>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_FSMC_Init+0xec>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <MX_FSMC_Init+0xec>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80014be:	230f      	movs	r3, #15
 80014c0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80014c2:	230f      	movs	r3, #15
 80014c4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80014c6:	233c      	movs	r3, #60	; 0x3c
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80014ce:	2310      	movs	r3, #16
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80014d2:	2311      	movs	r3, #17
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80014d6:	2300      	movs	r3, #0
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80014da:	2308      	movs	r3, #8
 80014dc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80014de:	230f      	movs	r3, #15
 80014e0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80014e2:	2309      	movs	r3, #9
 80014e4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80014ea:	2310      	movs	r3, #16
 80014ec:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80014ee:	2311      	movs	r3, #17
 80014f0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80014f6:	463a      	mov	r2, r7
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <MX_FSMC_Init+0xec>)
 8001500:	f004 fb82 	bl	8005c08 <HAL_SRAM_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800150a:	f001 f8b5 	bl	8002678 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800150e:	bf00      	nop
 8001510:	3738      	adds	r7, #56	; 0x38
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200002e8 	.word	0x200002e8
 800151c:	a0000104 	.word	0xa0000104

08001520 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_FSMC_MspInit+0x88>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d131      	bne.n	80015a0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_FSMC_MspInit+0x88>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_FSMC_MspInit+0x8c>)
 8001548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154a:	4a18      	ldr	r2, [pc, #96]	; (80015ac <HAL_FSMC_MspInit+0x8c>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6393      	str	r3, [r2, #56]	; 0x38
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_FSMC_MspInit+0x8c>)
 8001554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800155e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001562:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001570:	230c      	movs	r3, #12
 8001572:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	4619      	mov	r1, r3
 8001578:	480d      	ldr	r0, [pc, #52]	; (80015b0 <HAL_FSMC_MspInit+0x90>)
 800157a:	f003 f8ef 	bl	800475c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800157e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001582:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001590:	230c      	movs	r3, #12
 8001592:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	4806      	ldr	r0, [pc, #24]	; (80015b4 <HAL_FSMC_MspInit+0x94>)
 800159a:	f003 f8df 	bl	800475c <HAL_GPIO_Init>
 800159e:	e000      	b.n	80015a2 <HAL_FSMC_MspInit+0x82>
    return;
 80015a0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000338 	.word	0x20000338
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40020c00 	.word	0x40020c00

080015b8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80015c0:	f7ff ffae 	bl	8001520 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	; 0x38
 80015d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
 80015e6:	4b76      	ldr	r3, [pc, #472]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a75      	ldr	r2, [pc, #468]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 80015ec:	f043 0310 	orr.w	r3, r3, #16
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b73      	ldr	r3, [pc, #460]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	623b      	str	r3, [r7, #32]
 80015fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	4b6f      	ldr	r3, [pc, #444]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a6e      	ldr	r2, [pc, #440]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b6c      	ldr	r3, [pc, #432]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	61fb      	str	r3, [r7, #28]
 8001618:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
 800161e:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a67      	ldr	r2, [pc, #412]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 8001624:	f043 0320 	orr.w	r3, r3, #32
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b65      	ldr	r3, [pc, #404]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0320 	and.w	r3, r3, #32
 8001632:	61bb      	str	r3, [r7, #24]
 8001634:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	4b61      	ldr	r3, [pc, #388]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a60      	ldr	r2, [pc, #384]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 8001640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b5e      	ldr	r3, [pc, #376]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	4b5a      	ldr	r3, [pc, #360]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a59      	ldr	r2, [pc, #356]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b57      	ldr	r3, [pc, #348]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a52      	ldr	r2, [pc, #328]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	4b4c      	ldr	r3, [pc, #304]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a4b      	ldr	r2, [pc, #300]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 8001694:	f043 0308 	orr.w	r3, r3, #8
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b45      	ldr	r3, [pc, #276]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a44      	ldr	r2, [pc, #272]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 80016b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b42      	ldr	r3, [pc, #264]	; (80017c0 <MX_GPIO_Init+0x1f4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2170      	movs	r1, #112	; 0x70
 80016c6:	483f      	ldr	r0, [pc, #252]	; (80017c4 <MX_GPIO_Init+0x1f8>)
 80016c8:	f003 f9e4 	bl	8004a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|OUTPUT_X3_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	f242 0120 	movw	r1, #8224	; 0x2020
 80016d2:	483d      	ldr	r0, [pc, #244]	; (80017c8 <MX_GPIO_Init+0x1fc>)
 80016d4:	f003 f9de 	bl	8004a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUTPUT_X0_Pin|FSMC_BLK_Pin|MODBUS_EN_Pin, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f248 1140 	movw	r1, #33088	; 0x8140
 80016de:	483b      	ldr	r0, [pc, #236]	; (80017cc <MX_GPIO_Init+0x200>)
 80016e0:	f003 f9d8 	bl	8004a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2140      	movs	r1, #64	; 0x40
 80016e8:	4839      	ldr	r0, [pc, #228]	; (80017d0 <MX_GPIO_Init+0x204>)
 80016ea:	f003 f9d3 	bl	8004a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2108      	movs	r1, #8
 80016f2:	4838      	ldr	r0, [pc, #224]	; (80017d4 <MX_GPIO_Init+0x208>)
 80016f4:	f003 f9ce 	bl	8004a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80016f8:	2370      	movs	r3, #112	; 0x70
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	4619      	mov	r1, r3
 800170e:	482d      	ldr	r0, [pc, #180]	; (80017c4 <MX_GPIO_Init+0x1f8>)
 8001710:	f003 f824 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|OUTPUT_X3_Pin;
 8001714:	f242 0320 	movw	r3, #8224	; 0x2020
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172a:	4619      	mov	r1, r3
 800172c:	4826      	ldr	r0, [pc, #152]	; (80017c8 <MX_GPIO_Init+0x1fc>)
 800172e:	f003 f815 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OUTPUT_X0_Pin|FSMC_BLK_Pin|MODBUS_EN_Pin;
 8001732:	f248 1340 	movw	r3, #33088	; 0x8140
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001748:	4619      	mov	r1, r3
 800174a:	4820      	ldr	r0, [pc, #128]	; (80017cc <MX_GPIO_Init+0x200>)
 800174c:	f003 f806 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUTPUT_X1_Pin;
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OUTPUT_X1_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	481a      	ldr	r0, [pc, #104]	; (80017cc <MX_GPIO_Init+0x200>)
 8001764:	f002 fffa 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUTPUT_X2_Pin;
 8001768:	2310      	movs	r3, #16
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OUTPUT_X2_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	4813      	ldr	r0, [pc, #76]	; (80017c8 <MX_GPIO_Init+0x1fc>)
 800177c:	f002 ffee 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001780:	2340      	movs	r3, #64	; 0x40
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	480e      	ldr	r0, [pc, #56]	; (80017d0 <MX_GPIO_Init+0x204>)
 8001798:	f002 ffe0 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800179c:	2308      	movs	r3, #8
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	4808      	ldr	r0, [pc, #32]	; (80017d4 <MX_GPIO_Init+0x208>)
 80017b4:	f002 ffd2 	bl	800475c <HAL_GPIO_Init>

}
 80017b8:	bf00      	nop
 80017ba:	3738      	adds	r7, #56	; 0x38
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40021800 	.word	0x40021800
 80017d4:	40020c00 	.word	0x40020c00

080017d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_I2C1_Init+0x50>)
 80017de:	4a13      	ldr	r2, [pc, #76]	; (800182c <MX_I2C1_Init+0x54>)
 80017e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_I2C1_Init+0x50>)
 80017e4:	4a12      	ldr	r2, [pc, #72]	; (8001830 <MX_I2C1_Init+0x58>)
 80017e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_I2C1_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_I2C1_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_I2C1_Init+0x50>)
 80017f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <MX_I2C1_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_I2C1_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <MX_I2C1_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_I2C1_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <MX_I2C1_Init+0x50>)
 8001816:	f003 f971 	bl	8004afc <HAL_I2C_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001820:	f000 ff2a 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000033c 	.word	0x2000033c
 800182c:	40005400 	.word	0x40005400
 8001830:	000186a0 	.word	0x000186a0

08001834 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <HAL_I2C_MspInit+0x84>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d12b      	bne.n	80018ae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_I2C_MspInit+0x88>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a17      	ldr	r2, [pc, #92]	; (80018bc <HAL_I2C_MspInit+0x88>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_I2C_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001872:	23c0      	movs	r3, #192	; 0xc0
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001876:	2312      	movs	r3, #18
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001882:	2304      	movs	r3, #4
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	480c      	ldr	r0, [pc, #48]	; (80018c0 <HAL_I2C_MspInit+0x8c>)
 800188e:	f002 ff65 	bl	800475c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_I2C_MspInit+0x88>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a08      	ldr	r2, [pc, #32]	; (80018bc <HAL_I2C_MspInit+0x88>)
 800189c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_I2C_MspInit+0x88>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40005400 	.word	0x40005400
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020400 	.word	0x40020400

080018c4 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 80018ce:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <LCD_WR_REG+0x1c>)
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	8013      	strh	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	600ffffe 	.word	0x600ffffe

080018e4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 80018ee:	4a04      	ldr	r2, [pc, #16]	; (8001900 <LCD_WR_DATA+0x1c>)
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	8053      	strh	r3, [r2, #2]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	600ffffe 	.word	0x600ffffe

08001904 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <LCD_RD_DATA+0x20>)
 800190c:	885b      	ldrh	r3, [r3, #2]
 800190e:	b29b      	uxth	r3, r3
 8001910:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	b29b      	uxth	r3, r3
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	600ffffe 	.word	0x600ffffe

08001928 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4604      	mov	r4, r0
 8001930:	4608      	mov	r0, r1
 8001932:	4611      	mov	r1, r2
 8001934:	461a      	mov	r2, r3
 8001936:	4623      	mov	r3, r4
 8001938:	80fb      	strh	r3, [r7, #6]
 800193a:	4603      	mov	r3, r0
 800193c:	80bb      	strh	r3, [r7, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	807b      	strh	r3, [r7, #2]
 8001942:	4613      	mov	r3, r2
 8001944:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8001946:	202a      	movs	r0, #42	; 0x2a
 8001948:	f7ff ffbc 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	b29b      	uxth	r3, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ffc6 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	b29b      	uxth	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ffc0 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	b29b      	uxth	r3, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ffba 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8001970:	887b      	ldrh	r3, [r7, #2]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	b29b      	uxth	r3, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ffb4 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 800197c:	202b      	movs	r0, #43	; 0x2b
 800197e:	f7ff ffa1 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 8001982:	88bb      	ldrh	r3, [r7, #4]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	b29b      	uxth	r3, r3
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ffab 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 800198e:	88bb      	ldrh	r3, [r7, #4]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	b29b      	uxth	r3, r3
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ffa5 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 800199a:	883b      	ldrh	r3, [r7, #0]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	b29b      	uxth	r3, r3
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff9f 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 80019a6:	883b      	ldrh	r3, [r7, #0]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff99 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 80019b2:	202c      	movs	r0, #44	; 0x2c
 80019b4:	f7ff ff86 	bl	80018c4 <LCD_WR_REG>
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}

080019c0 <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <lcd_clear+0x60>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <lcd_clear+0x60>)
 80019d4:	885b      	ldrh	r3, [r3, #2]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29b      	uxth	r3, r3
 80019da:	2100      	movs	r1, #0
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff ffa3 	bl	8001928 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 80019e2:	2300      	movs	r3, #0
 80019e4:	81fb      	strh	r3, [r7, #14]
 80019e6:	e011      	b.n	8001a0c <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 80019e8:	2300      	movs	r3, #0
 80019ea:	81bb      	strh	r3, [r7, #12]
 80019ec:	e006      	b.n	80019fc <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff77 	bl	80018e4 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 80019f6:	89bb      	ldrh	r3, [r7, #12]
 80019f8:	3301      	adds	r3, #1
 80019fa:	81bb      	strh	r3, [r7, #12]
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <lcd_clear+0x60>)
 80019fe:	885b      	ldrh	r3, [r3, #2]
 8001a00:	89ba      	ldrh	r2, [r7, #12]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d3f3      	bcc.n	80019ee <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 8001a06:	89fb      	ldrh	r3, [r7, #14]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	81fb      	strh	r3, [r7, #14]
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <lcd_clear+0x60>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	89fa      	ldrh	r2, [r7, #14]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d3e8      	bcc.n	80019e8 <lcd_clear+0x28>
		}
	}
}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000390 	.word	0x20000390

08001a24 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	80bb      	strh	r3, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8001a36:	88bb      	ldrh	r3, [r7, #4]
 8001a38:	88fa      	ldrh	r2, [r7, #6]
 8001a3a:	88b9      	ldrh	r1, [r7, #4]
 8001a3c:	88f8      	ldrh	r0, [r7, #6]
 8001a3e:	f7ff ff73 	bl	8001928 <lcd_set_address>
	LCD_WR_DATA(color);
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff4d 	bl	80018e4 <LCD_WR_DATA>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	4608      	mov	r0, r1
 8001a5e:	4611      	mov	r1, r2
 8001a60:	461a      	mov	r2, r3
 8001a62:	4623      	mov	r3, r4
 8001a64:	80fb      	strh	r3, [r7, #6]
 8001a66:	4603      	mov	r3, r0
 8001a68:	80bb      	strh	r3, [r7, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	70fb      	strb	r3, [r7, #3]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8001a7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a7e:	085b      	lsrs	r3, r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	08db      	lsrs	r3, r3, #3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf14      	ite	ne
 8001a96:	2301      	movne	r3, #1
 8001a98:	2300      	moveq	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	fb12 f303 	smulbb	r3, r2, r3
 8001aaa:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	3b20      	subs	r3, #32
 8001ab0:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	4413      	add	r3, r2
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29c      	uxth	r4, r3
 8001ac0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	88bb      	ldrh	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	88b9      	ldrh	r1, [r7, #4]
 8001ad2:	88f8      	ldrh	r0, [r7, #6]
 8001ad4:	4622      	mov	r2, r4
 8001ad6:	f7ff ff27 	bl	8001928 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8001ada:	2300      	movs	r3, #0
 8001adc:	827b      	strh	r3, [r7, #18]
 8001ade:	e07a      	b.n	8001bd6 <lcd_show_char+0x182>
		if (sizey == 12)
 8001ae0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ae4:	2b0c      	cmp	r3, #12
 8001ae6:	d028      	beq.n	8001b3a <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8001ae8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aec:	2b10      	cmp	r3, #16
 8001aee:	d108      	bne.n	8001b02 <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	8a7b      	ldrh	r3, [r7, #18]
 8001af4:	493c      	ldr	r1, [pc, #240]	; (8001be8 <lcd_show_char+0x194>)
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	440a      	add	r2, r1
 8001afa:	4413      	add	r3, r2
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	75fb      	strb	r3, [r7, #23]
 8001b00:	e01b      	b.n	8001b3a <lcd_show_char+0xe6>
		else if (sizey == 24)
 8001b02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b06:	2b18      	cmp	r3, #24
 8001b08:	d10b      	bne.n	8001b22 <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	8a79      	ldrh	r1, [r7, #18]
 8001b0e:	4837      	ldr	r0, [pc, #220]	; (8001bec <lcd_show_char+0x198>)
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	4403      	add	r3, r0
 8001b1a:	440b      	add	r3, r1
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	75fb      	strb	r3, [r7, #23]
 8001b20:	e00b      	b.n	8001b3a <lcd_show_char+0xe6>
		else if (sizey == 32)
 8001b22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d15a      	bne.n	8001be0 <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	8a7b      	ldrh	r3, [r7, #18]
 8001b2e:	4930      	ldr	r1, [pc, #192]	; (8001bf0 <lcd_show_char+0x19c>)
 8001b30:	0192      	lsls	r2, r2, #6
 8001b32:	440a      	add	r2, r1
 8001b34:	4413      	add	r3, r2
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	75bb      	strb	r3, [r7, #22]
 8001b3e:	e044      	b.n	8001bca <lcd_show_char+0x176>
			if (!mode) {
 8001b40:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d120      	bne.n	8001b8a <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8001b48:	7dfa      	ldrb	r2, [r7, #23]
 8001b4a:	7dbb      	ldrb	r3, [r7, #22]
 8001b4c:	fa42 f303 	asr.w	r3, r2, r3
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d004      	beq.n	8001b62 <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8001b58:	883b      	ldrh	r3, [r7, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fec2 	bl	80018e4 <LCD_WR_DATA>
 8001b60:	e003      	b.n	8001b6a <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8001b62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff febd 	bl	80018e4 <LCD_WR_DATA>
				m++;
 8001b6a:	7d7b      	ldrb	r3, [r7, #21]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8001b70:	7d7b      	ldrb	r3, [r7, #21]
 8001b72:	7bfa      	ldrb	r2, [r7, #15]
 8001b74:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b78:	fb01 f202 	mul.w	r2, r1, r2
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d11f      	bne.n	8001bc4 <lcd_show_char+0x170>
					m = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	757b      	strb	r3, [r7, #21]
					break;
 8001b88:	e022      	b.n	8001bd0 <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8001b8a:	7dfa      	ldrb	r2, [r7, #23]
 8001b8c:	7dbb      	ldrb	r3, [r7, #22]
 8001b8e:	fa42 f303 	asr.w	r3, r2, r3
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8001b9a:	883a      	ldrh	r2, [r7, #0]
 8001b9c:	88b9      	ldrh	r1, [r7, #4]
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff3f 	bl	8001a24 <lcd_draw_point>
				x++;
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8001bac:	88fa      	ldrh	r2, [r7, #6]
 8001bae:	8a3b      	ldrh	r3, [r7, #16]
 8001bb0:	1ad2      	subs	r2, r2, r3
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d105      	bne.n	8001bc4 <lcd_show_char+0x170>
					x = x0;
 8001bb8:	8a3b      	ldrh	r3, [r7, #16]
 8001bba:	80fb      	strh	r3, [r7, #6]
					y++;
 8001bbc:	88bb      	ldrh	r3, [r7, #4]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	80bb      	strh	r3, [r7, #4]
					break;
 8001bc2:	e005      	b.n	8001bd0 <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8001bc4:	7dbb      	ldrb	r3, [r7, #22]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	75bb      	strb	r3, [r7, #22]
 8001bca:	7dbb      	ldrb	r3, [r7, #22]
 8001bcc:	2b07      	cmp	r3, #7
 8001bce:	d9b7      	bls.n	8001b40 <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8001bd0:	8a7b      	ldrh	r3, [r7, #18]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	827b      	strh	r3, [r7, #18]
 8001bd6:	8a7a      	ldrh	r2, [r7, #18]
 8001bd8:	89bb      	ldrh	r3, [r7, #12]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d380      	bcc.n	8001ae0 <lcd_show_char+0x8c>
 8001bde:	e000      	b.n	8001be2 <lcd_show_char+0x18e>
			return;
 8001be0:	bf00      	nop
				}
			}
		}
	}
}
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd90      	pop	{r4, r7, pc}
 8001be8:	08008070 	.word	0x08008070
 8001bec:	08008660 	.word	0x08008660
 8001bf0:	08009830 	.word	0x08009830

08001bf4 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	71fb      	strb	r3, [r7, #7]
 8001c00:	4613      	mov	r3, r2
 8001c02:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001c04:	2301      	movs	r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001c08:	e004      	b.n	8001c14 <mypow+0x20>
		result *= m;
 8001c0a:	79fa      	ldrb	r2, [r7, #7]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001c14:	79bb      	ldrb	r3, [r7, #6]
 8001c16:	1e5a      	subs	r2, r3, #1
 8001c18:	71ba      	strb	r2, [r7, #6]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f5      	bne.n	8001c0a <mypow+0x16>
	return result;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af04      	add	r7, sp, #16
 8001c32:	4604      	mov	r4, r0
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	80fb      	strh	r3, [r7, #6]
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80bb      	strh	r3, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	807b      	strh	r3, [r7, #2]
 8001c46:	4613      	mov	r3, r2
 8001c48:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 8001c4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c52:	085b      	lsrs	r3, r3, #1
 8001c54:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8001c56:	2300      	movs	r3, #0
 8001c58:	73fb      	strb	r3, [r7, #15]
 8001c5a:	e059      	b.n	8001d10 <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 8001c5c:	887c      	ldrh	r4, [r7, #2]
 8001c5e:	787a      	ldrb	r2, [r7, #1]
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	200a      	movs	r0, #10
 8001c6e:	f7ff ffc1 	bl	8001bf4 <mypow>
 8001c72:	4603      	mov	r3, r0
 8001c74:	fbb4 f1f3 	udiv	r1, r4, r3
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <lcd_show_int_num+0xf8>)
 8001c7a:	fba3 2301 	umull	r2, r3, r3, r1
 8001c7e:	08da      	lsrs	r2, r3, #3
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	1aca      	subs	r2, r1, r3
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8001c8e:	7bbb      	ldrb	r3, [r7, #14]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d121      	bne.n	8001cd8 <lcd_show_int_num+0xac>
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	787b      	ldrb	r3, [r7, #1]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	da1c      	bge.n	8001cd8 <lcd_show_int_num+0xac>
			if (temp == 0) {
 8001c9e:	7b3b      	ldrb	r3, [r7, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d117      	bne.n	8001cd4 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	7b7b      	ldrb	r3, [r7, #13]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	fb12 f303 	smulbb	r3, r2, r3
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b298      	uxth	r0, r3
 8001cb8:	8c3a      	ldrh	r2, [r7, #32]
 8001cba:	88b9      	ldrh	r1, [r7, #4]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f7ff fec1 	bl	8001a54 <lcd_show_char>
				continue;
 8001cd2:	e01a      	b.n	8001d0a <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	7b7b      	ldrb	r3, [r7, #13]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	fb12 f303 	smulbb	r3, r2, r3
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	4413      	add	r3, r2
 8001cea:	b298      	uxth	r0, r3
 8001cec:	7b3b      	ldrb	r3, [r7, #12]
 8001cee:	3330      	adds	r3, #48	; 0x30
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	8c3c      	ldrh	r4, [r7, #32]
 8001cf4:	88b9      	ldrh	r1, [r7, #4]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	9302      	str	r3, [sp, #8]
 8001cfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	4623      	mov	r3, r4
 8001d06:	f7ff fea5 	bl	8001a54 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	787b      	ldrb	r3, [r7, #1]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d3a1      	bcc.n	8001c5c <lcd_show_int_num+0x30>
	}
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd90      	pop	{r4, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	cccccccd 	.word	0xcccccccd

08001d28 <lcd_show_float_num>:

void lcd_show_float_num(uint16_t x, uint16_t y, float num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b08b      	sub	sp, #44	; 0x2c
 8001d2c:	af04      	add	r7, sp, #16
 8001d2e:	4604      	mov	r4, r0
 8001d30:	4608      	mov	r0, r1
 8001d32:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d36:	4611      	mov	r1, r2
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	81fb      	strh	r3, [r7, #14]
 8001d3e:	4603      	mov	r3, r0
 8001d40:	81bb      	strh	r3, [r7, #12]
 8001d42:	460b      	mov	r3, r1
 8001d44:	71fb      	strb	r3, [r7, #7]
 8001d46:	4613      	mov	r3, r2
 8001d48:	80bb      	strh	r3, [r7, #4]
	uint8_t t, temp, sizex;
	uint16_t num1;
	sizex = sizey / 2;
 8001d4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d4e:	085b      	lsrs	r3, r3, #1
 8001d50:	75bb      	strb	r3, [r7, #22]
	num1 = num * 100;
 8001d52:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d56:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001e30 <lcd_show_float_num+0x108>
 8001d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d62:	ee17 3a90 	vmov	r3, s15
 8001d66:	82bb      	strh	r3, [r7, #20]
	for (t = 0; t < len; t++) {
 8001d68:	2300      	movs	r3, #0
 8001d6a:	75fb      	strb	r3, [r7, #23]
 8001d6c:	e057      	b.n	8001e1e <lcd_show_float_num+0xf6>
		temp = (num1 / mypow(10, len - t - 1)) % 10;
 8001d6e:	8abc      	ldrh	r4, [r7, #20]
 8001d70:	79fa      	ldrb	r2, [r7, #7]
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	200a      	movs	r0, #10
 8001d80:	f7ff ff38 	bl	8001bf4 <mypow>
 8001d84:	4603      	mov	r3, r0
 8001d86:	fbb4 f1f3 	udiv	r1, r4, r3
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <lcd_show_float_num+0x10c>)
 8001d8c:	fba3 2301 	umull	r2, r3, r3, r1
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	1aca      	subs	r2, r1, r3
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	74fb      	strb	r3, [r7, #19]
		if (t == (len - 2)) {
 8001da0:	7dfa      	ldrb	r2, [r7, #23]
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	3b02      	subs	r3, #2
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d11d      	bne.n	8001de6 <lcd_show_float_num+0xbe>
			lcd_show_char(x + (len - 2) * sizex, y, '.', fc, bc, sizey, 0);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	3b02      	subs	r3, #2
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	7dbb      	ldrb	r3, [r7, #22]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	fb12 f303 	smulbb	r3, r2, r3
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	89fb      	ldrh	r3, [r7, #14]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b298      	uxth	r0, r3
 8001dc0:	88ba      	ldrh	r2, [r7, #4]
 8001dc2:	89b9      	ldrh	r1, [r7, #12]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9302      	str	r3, [sp, #8]
 8001dc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	222e      	movs	r2, #46	; 0x2e
 8001dd6:	f7ff fe3d 	bl	8001a54 <lcd_show_char>
			t++;
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	75fb      	strb	r3, [r7, #23]
			len += 1;
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	3301      	adds	r3, #1
 8001de4:	71fb      	strb	r3, [r7, #7]
		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	7dbb      	ldrb	r3, [r7, #22]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	fb12 f303 	smulbb	r3, r2, r3
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	89fb      	ldrh	r3, [r7, #14]
 8001df6:	4413      	add	r3, r2
 8001df8:	b298      	uxth	r0, r3
 8001dfa:	7cfb      	ldrb	r3, [r7, #19]
 8001dfc:	3330      	adds	r3, #48	; 0x30
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	88bc      	ldrh	r4, [r7, #4]
 8001e02:	89b9      	ldrh	r1, [r7, #12]
 8001e04:	2300      	movs	r3, #0
 8001e06:	9302      	str	r3, [sp, #8]
 8001e08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	4623      	mov	r3, r4
 8001e14:	f7ff fe1e 	bl	8001a54 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	75fb      	strb	r3, [r7, #23]
 8001e1e:	7dfa      	ldrb	r2, [r7, #23]
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d3a3      	bcc.n	8001d6e <lcd_show_float_num+0x46>
	}
}
 8001e26:	bf00      	nop
 8001e28:	bf00      	nop
 8001e2a:	371c      	adds	r7, #28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	42c80000 	.word	0x42c80000
 8001e34:	cccccccd 	.word	0xcccccccd

08001e38 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <lcd_set_direction+0x44>)
 8001e54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e58:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <lcd_set_direction+0x44>)
 8001e5c:	22f0      	movs	r2, #240	; 0xf0
 8001e5e:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8001e60:	e006      	b.n	8001e70 <lcd_set_direction+0x38>
		lcddev.width = 240;
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <lcd_set_direction+0x44>)
 8001e64:	22f0      	movs	r2, #240	; 0xf0
 8001e66:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <lcd_set_direction+0x44>)
 8001e6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e6e:	805a      	strh	r2, [r3, #2]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	20000390 	.word	0x20000390

08001e80 <lcd_init>:

void lcd_init(void) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001e84:	2200      	movs	r2, #0
 8001e86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e8a:	48aa      	ldr	r0, [pc, #680]	; (8002134 <lcd_init+0x2b4>)
 8001e8c:	f002 fe02 	bl	8004a94 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e94:	f001 fb18 	bl	80034c8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e9e:	48a5      	ldr	r0, [pc, #660]	; (8002134 <lcd_init+0x2b4>)
 8001ea0:	f002 fdf8 	bl	8004a94 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001ea4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ea8:	f001 fb0e 	bl	80034c8 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff ffc3 	bl	8001e38 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8001eb2:	20d3      	movs	r0, #211	; 0xd3
 8001eb4:	f7ff fd06 	bl	80018c4 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001eb8:	f7ff fd24 	bl	8001904 <LCD_RD_DATA>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b9d      	ldr	r3, [pc, #628]	; (8002138 <lcd_init+0x2b8>)
 8001ec2:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001ec4:	f7ff fd1e 	bl	8001904 <LCD_RD_DATA>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b9a      	ldr	r3, [pc, #616]	; (8002138 <lcd_init+0x2b8>)
 8001ece:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001ed0:	f7ff fd18 	bl	8001904 <LCD_RD_DATA>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b97      	ldr	r3, [pc, #604]	; (8002138 <lcd_init+0x2b8>)
 8001eda:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8001edc:	4b96      	ldr	r3, [pc, #600]	; (8002138 <lcd_init+0x2b8>)
 8001ede:	889b      	ldrh	r3, [r3, #4]
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	4b94      	ldr	r3, [pc, #592]	; (8002138 <lcd_init+0x2b8>)
 8001ee6:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8001ee8:	f7ff fd0c 	bl	8001904 <LCD_RD_DATA>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b91      	ldr	r3, [pc, #580]	; (8002138 <lcd_init+0x2b8>)
 8001ef2:	889b      	ldrh	r3, [r3, #4]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	4b8f      	ldr	r3, [pc, #572]	; (8002138 <lcd_init+0x2b8>)
 8001efa:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001efc:	20cf      	movs	r0, #207	; 0xcf
 8001efe:	f7ff fce1 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff fcee 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001f08:	20c1      	movs	r0, #193	; 0xc1
 8001f0a:	f7ff fceb 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001f0e:	2030      	movs	r0, #48	; 0x30
 8001f10:	f7ff fce8 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001f14:	20ed      	movs	r0, #237	; 0xed
 8001f16:	f7ff fcd5 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001f1a:	2064      	movs	r0, #100	; 0x64
 8001f1c:	f7ff fce2 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f7ff fcdf 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001f26:	2012      	movs	r0, #18
 8001f28:	f7ff fcdc 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001f2c:	2081      	movs	r0, #129	; 0x81
 8001f2e:	f7ff fcd9 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001f32:	20e8      	movs	r0, #232	; 0xe8
 8001f34:	f7ff fcc6 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001f38:	2085      	movs	r0, #133	; 0x85
 8001f3a:	f7ff fcd3 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f3e:	2010      	movs	r0, #16
 8001f40:	f7ff fcd0 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001f44:	207a      	movs	r0, #122	; 0x7a
 8001f46:	f7ff fccd 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001f4a:	20cb      	movs	r0, #203	; 0xcb
 8001f4c:	f7ff fcba 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001f50:	2039      	movs	r0, #57	; 0x39
 8001f52:	f7ff fcc7 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001f56:	202c      	movs	r0, #44	; 0x2c
 8001f58:	f7ff fcc4 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7ff fcc1 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001f62:	2034      	movs	r0, #52	; 0x34
 8001f64:	f7ff fcbe 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001f68:	2002      	movs	r0, #2
 8001f6a:	f7ff fcbb 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001f6e:	20f7      	movs	r0, #247	; 0xf7
 8001f70:	f7ff fca8 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001f74:	2020      	movs	r0, #32
 8001f76:	f7ff fcb5 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001f7a:	20ea      	movs	r0, #234	; 0xea
 8001f7c:	f7ff fca2 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff fcaf 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f86:	2000      	movs	r0, #0
 8001f88:	f7ff fcac 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001f8c:	20c0      	movs	r0, #192	; 0xc0
 8001f8e:	f7ff fc99 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001f92:	201b      	movs	r0, #27
 8001f94:	f7ff fca6 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001f98:	20c1      	movs	r0, #193	; 0xc1
 8001f9a:	f7ff fc93 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7ff fca0 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001fa4:	20c5      	movs	r0, #197	; 0xc5
 8001fa6:	f7ff fc8d 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001faa:	2030      	movs	r0, #48	; 0x30
 8001fac:	f7ff fc9a 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001fb0:	2030      	movs	r0, #48	; 0x30
 8001fb2:	f7ff fc97 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001fb6:	20c7      	movs	r0, #199	; 0xc7
 8001fb8:	f7ff fc84 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001fbc:	20b7      	movs	r0, #183	; 0xb7
 8001fbe:	f7ff fc91 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001fc2:	2036      	movs	r0, #54	; 0x36
 8001fc4:	f7ff fc7e 	bl	80018c4 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8001fc8:	2008      	movs	r0, #8
 8001fca:	f7ff fc8b 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001fce:	203a      	movs	r0, #58	; 0x3a
 8001fd0:	f7ff fc78 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001fd4:	2055      	movs	r0, #85	; 0x55
 8001fd6:	f7ff fc85 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001fda:	20b1      	movs	r0, #177	; 0xb1
 8001fdc:	f7ff fc72 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff fc7f 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001fe6:	201a      	movs	r0, #26
 8001fe8:	f7ff fc7c 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001fec:	20b6      	movs	r0, #182	; 0xb6
 8001fee:	f7ff fc69 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001ff2:	200a      	movs	r0, #10
 8001ff4:	f7ff fc76 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001ff8:	20a2      	movs	r0, #162	; 0xa2
 8001ffa:	f7ff fc73 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001ffe:	20f2      	movs	r0, #242	; 0xf2
 8002000:	f7ff fc60 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002004:	2000      	movs	r0, #0
 8002006:	f7ff fc6d 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800200a:	2026      	movs	r0, #38	; 0x26
 800200c:	f7ff fc5a 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002010:	2001      	movs	r0, #1
 8002012:	f7ff fc67 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002016:	20e0      	movs	r0, #224	; 0xe0
 8002018:	f7ff fc54 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800201c:	200f      	movs	r0, #15
 800201e:	f7ff fc61 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002022:	202a      	movs	r0, #42	; 0x2a
 8002024:	f7ff fc5e 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002028:	2028      	movs	r0, #40	; 0x28
 800202a:	f7ff fc5b 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800202e:	2008      	movs	r0, #8
 8002030:	f7ff fc58 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002034:	200e      	movs	r0, #14
 8002036:	f7ff fc55 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800203a:	2008      	movs	r0, #8
 800203c:	f7ff fc52 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002040:	2054      	movs	r0, #84	; 0x54
 8002042:	f7ff fc4f 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002046:	20a9      	movs	r0, #169	; 0xa9
 8002048:	f7ff fc4c 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 800204c:	2043      	movs	r0, #67	; 0x43
 800204e:	f7ff fc49 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002052:	200a      	movs	r0, #10
 8002054:	f7ff fc46 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002058:	200f      	movs	r0, #15
 800205a:	f7ff fc43 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800205e:	2000      	movs	r0, #0
 8002060:	f7ff fc40 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff fc3d 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800206a:	2000      	movs	r0, #0
 800206c:	f7ff fc3a 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff fc37 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002076:	20e1      	movs	r0, #225	; 0xe1
 8002078:	f7ff fc24 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800207c:	2000      	movs	r0, #0
 800207e:	f7ff fc31 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002082:	2015      	movs	r0, #21
 8002084:	f7ff fc2e 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002088:	2017      	movs	r0, #23
 800208a:	f7ff fc2b 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800208e:	2007      	movs	r0, #7
 8002090:	f7ff fc28 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002094:	2011      	movs	r0, #17
 8002096:	f7ff fc25 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800209a:	2006      	movs	r0, #6
 800209c:	f7ff fc22 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80020a0:	202b      	movs	r0, #43	; 0x2b
 80020a2:	f7ff fc1f 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80020a6:	2056      	movs	r0, #86	; 0x56
 80020a8:	f7ff fc1c 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80020ac:	203c      	movs	r0, #60	; 0x3c
 80020ae:	f7ff fc19 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80020b2:	2005      	movs	r0, #5
 80020b4:	f7ff fc16 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80020b8:	2010      	movs	r0, #16
 80020ba:	f7ff fc13 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020be:	200f      	movs	r0, #15
 80020c0:	f7ff fc10 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80020c4:	203f      	movs	r0, #63	; 0x3f
 80020c6:	f7ff fc0d 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80020ca:	203f      	movs	r0, #63	; 0x3f
 80020cc:	f7ff fc0a 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020d0:	200f      	movs	r0, #15
 80020d2:	f7ff fc07 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80020d6:	202b      	movs	r0, #43	; 0x2b
 80020d8:	f7ff fbf4 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020dc:	2000      	movs	r0, #0
 80020de:	f7ff fc01 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff fbfe 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80020e8:	2001      	movs	r0, #1
 80020ea:	f7ff fbfb 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80020ee:	203f      	movs	r0, #63	; 0x3f
 80020f0:	f7ff fbf8 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80020f4:	202a      	movs	r0, #42	; 0x2a
 80020f6:	f7ff fbe5 	bl	80018c4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f7ff fbf2 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002100:	2000      	movs	r0, #0
 8002102:	f7ff fbef 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002106:	2000      	movs	r0, #0
 8002108:	f7ff fbec 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800210c:	20ef      	movs	r0, #239	; 0xef
 800210e:	f7ff fbe9 	bl	80018e4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8002112:	2011      	movs	r0, #17
 8002114:	f7ff fbd6 	bl	80018c4 <LCD_WR_REG>
	HAL_Delay(120);
 8002118:	2078      	movs	r0, #120	; 0x78
 800211a:	f001 f9d5 	bl	80034c8 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 800211e:	2029      	movs	r0, #41	; 0x29
 8002120:	f7ff fbd0 	bl	80018c4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002124:	2201      	movs	r2, #1
 8002126:	f44f 7180 	mov.w	r1, #256	; 0x100
 800212a:	4804      	ldr	r0, [pc, #16]	; (800213c <lcd_init+0x2bc>)
 800212c:	f002 fcb2 	bl	8004a94 <HAL_GPIO_WritePin>
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40020800 	.word	0x40020800
 8002138:	20000390 	.word	0x20000390
 800213c:	40020000 	.word	0x40020000

08002140 <lcd_show_string>:
		}
	}
}

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b08b      	sub	sp, #44	; 0x2c
 8002144:	af04      	add	r7, sp, #16
 8002146:	60ba      	str	r2, [r7, #8]
 8002148:	461a      	mov	r2, r3
 800214a:	4603      	mov	r3, r0
 800214c:	81fb      	strh	r3, [r7, #14]
 800214e:	460b      	mov	r3, r1
 8002150:	81bb      	strh	r3, [r7, #12]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8002156:	89fb      	ldrh	r3, [r7, #14]
 8002158:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 800215e:	e048      	b.n	80021f2 <lcd_show_string+0xb2>
		if (!bHz) {
 8002160:	7dfb      	ldrb	r3, [r7, #23]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d145      	bne.n	80021f2 <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8002166:	89fa      	ldrh	r2, [r7, #14]
 8002168:	4b26      	ldr	r3, [pc, #152]	; (8002204 <lcd_show_string+0xc4>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002172:	085b      	lsrs	r3, r3, #1
 8002174:	b2db      	uxtb	r3, r3
 8002176:	1acb      	subs	r3, r1, r3
 8002178:	429a      	cmp	r2, r3
 800217a:	dc3f      	bgt.n	80021fc <lcd_show_string+0xbc>
 800217c:	89ba      	ldrh	r2, [r7, #12]
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <lcd_show_string+0xc4>)
 8002180:	885b      	ldrh	r3, [r3, #2]
 8002182:	4619      	mov	r1, r3
 8002184:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002188:	1acb      	subs	r3, r1, r3
 800218a:	429a      	cmp	r2, r3
 800218c:	dc36      	bgt.n	80021fc <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b80      	cmp	r3, #128	; 0x80
 8002194:	d902      	bls.n	800219c <lcd_show_string+0x5c>
				bHz = 1;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
 800219a:	e02a      	b.n	80021f2 <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b0d      	cmp	r3, #13
 80021a2:	d10b      	bne.n	80021bc <lcd_show_string+0x7c>
					y += sizey;
 80021a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4413      	add	r3, r2
 80021ae:	81bb      	strh	r3, [r7, #12]
					x = x0;
 80021b0:	8abb      	ldrh	r3, [r7, #20]
 80021b2:	81fb      	strh	r3, [r7, #14]
					str++;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	3301      	adds	r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	e017      	b.n	80021ec <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	781a      	ldrb	r2, [r3, #0]
 80021c0:	88fc      	ldrh	r4, [r7, #6]
 80021c2:	89b9      	ldrh	r1, [r7, #12]
 80021c4:	89f8      	ldrh	r0, [r7, #14]
 80021c6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80021ca:	9302      	str	r3, [sp, #8]
 80021cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	4623      	mov	r3, r4
 80021d8:	f7ff fc3c 	bl	8001a54 <lcd_show_char>
					x += sizey / 2;
 80021dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021e0:	085b      	lsrs	r3, r3, #1
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	89fb      	ldrh	r3, [r7, #14]
 80021e8:	4413      	add	r3, r2
 80021ea:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	3301      	adds	r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1b2      	bne.n	8002160 <lcd_show_string+0x20>
 80021fa:	e000      	b.n	80021fe <lcd_show_string+0xbe>
				return;
 80021fc:	bf00      	nop
			}
		}
	}
}
 80021fe:	371c      	adds	r7, #28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd90      	pop	{r4, r7, pc}
 8002204:	20000390 	.word	0x20000390

08002208 <led_7seg_display>:
 * @brief	Scan led 7 segment
 * @param	None
 * @note	Call in 1ms interrupt
 * @retval 	None
 */
void led_7seg_display() {
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800220c:	4b3f      	ldr	r3, [pc, #252]	; (800230c <led_7seg_display+0x104>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	b29a      	uxth	r2, r3
 8002214:	4b3d      	ldr	r3, [pc, #244]	; (800230c <led_7seg_display+0x104>)
 8002216:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 8002218:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <led_7seg_display+0x108>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <led_7seg_display+0x10c>)
 8002220:	5c9b      	ldrb	r3, [r3, r2]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	b21a      	sxth	r2, r3
 8002226:	4b39      	ldr	r3, [pc, #228]	; (800230c <led_7seg_display+0x104>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b21b      	sxth	r3, r3
 800222c:	4313      	orrs	r3, r2
 800222e:	b21b      	sxth	r3, r3
 8002230:	b29a      	uxth	r2, r3
 8002232:	4b36      	ldr	r3, [pc, #216]	; (800230c <led_7seg_display+0x104>)
 8002234:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 8002236:	4b36      	ldr	r3, [pc, #216]	; (8002310 <led_7seg_display+0x108>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d846      	bhi.n	80022cc <led_7seg_display+0xc4>
 800223e:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <led_7seg_display+0x3c>)
 8002240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002244:	08002255 	.word	0x08002255
 8002248:	08002273 	.word	0x08002273
 800224c:	08002291 	.word	0x08002291
 8002250:	080022af 	.word	0x080022af
	case 0:
		spi_buffer |= 0x00b0;
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <led_7seg_display+0x104>)
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800225c:	b29a      	uxth	r2, r3
 800225e:	4b2b      	ldr	r3, [pc, #172]	; (800230c <led_7seg_display+0x104>)
 8002260:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8002262:	4b2a      	ldr	r3, [pc, #168]	; (800230c <led_7seg_display+0x104>)
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800226a:	b29a      	uxth	r2, r3
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <led_7seg_display+0x104>)
 800226e:	801a      	strh	r2, [r3, #0]
		break;
 8002270:	e02d      	b.n	80022ce <led_7seg_display+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002272:	4b26      	ldr	r3, [pc, #152]	; (800230c <led_7seg_display+0x104>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800227a:	b29a      	uxth	r2, r3
 800227c:	4b23      	ldr	r3, [pc, #140]	; (800230c <led_7seg_display+0x104>)
 800227e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8002280:	4b22      	ldr	r3, [pc, #136]	; (800230c <led_7seg_display+0x104>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	f023 0320 	bic.w	r3, r3, #32
 8002288:	b29a      	uxth	r2, r3
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <led_7seg_display+0x104>)
 800228c:	801a      	strh	r2, [r3, #0]
		break;
 800228e:	e01e      	b.n	80022ce <led_7seg_display+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002290:	4b1e      	ldr	r3, [pc, #120]	; (800230c <led_7seg_display+0x104>)
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002298:	b29a      	uxth	r2, r3
 800229a:	4b1c      	ldr	r3, [pc, #112]	; (800230c <led_7seg_display+0x104>)
 800229c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800229e:	4b1b      	ldr	r3, [pc, #108]	; (800230c <led_7seg_display+0x104>)
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	f023 0310 	bic.w	r3, r3, #16
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	4b18      	ldr	r3, [pc, #96]	; (800230c <led_7seg_display+0x104>)
 80022aa:	801a      	strh	r2, [r3, #0]
		break;
 80022ac:	e00f      	b.n	80022ce <led_7seg_display+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80022ae:	4b17      	ldr	r3, [pc, #92]	; (800230c <led_7seg_display+0x104>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <led_7seg_display+0x104>)
 80022ba:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <led_7seg_display+0x104>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <led_7seg_display+0x104>)
 80022c8:	801a      	strh	r2, [r3, #0]
		break;
 80022ca:	e000      	b.n	80022ce <led_7seg_display+0xc6>
	default:
		break;
 80022cc:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <led_7seg_display+0x108>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	3301      	adds	r3, #1
 80022d4:	425a      	negs	r2, r3
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	f002 0203 	and.w	r2, r2, #3
 80022de:	bf58      	it	pl
 80022e0:	4253      	negpl	r3, r2
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <led_7seg_display+0x108>)
 80022e6:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2140      	movs	r1, #64	; 0x40
 80022ec:	480a      	ldr	r0, [pc, #40]	; (8002318 <led_7seg_display+0x110>)
 80022ee:	f002 fbd1 	bl	8004a94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 80022f2:	2301      	movs	r3, #1
 80022f4:	2202      	movs	r2, #2
 80022f6:	4905      	ldr	r1, [pc, #20]	; (800230c <led_7seg_display+0x104>)
 80022f8:	4808      	ldr	r0, [pc, #32]	; (800231c <led_7seg_display+0x114>)
 80022fa:	f003 fa64 	bl	80057c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80022fe:	2201      	movs	r2, #1
 8002300:	2140      	movs	r1, #64	; 0x40
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <led_7seg_display+0x110>)
 8002304:	f002 fbc6 	bl	8004a94 <HAL_GPIO_WritePin>
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000204 	.word	0x20000204
 8002310:	20000396 	.word	0x20000396
 8002314:	20000200 	.word	0x20000200
 8002318:	40021800 	.word	0x40021800
 800231c:	200005dc 	.word	0x200005dc

08002320 <HAL_UARTEx_RxEventCallback>:
void TestADC();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
	Modbus_CallBack(&slave, huart, Size);
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	461a      	mov	r2, r3
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4803      	ldr	r0, [pc, #12]	; (8002340 <HAL_UARTEx_RxEventCallback+0x20>)
 8002334:	f000 fa94 	bl	8002860 <Modbus_CallBack>
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	2000039c 	.word	0x2000039c

08002344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002348:	f001 f84c 	bl	80033e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800234c:	f000 f858 	bl	8002400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002350:	f7ff f93c 	bl	80015cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002354:	f7ff f84a 	bl	80013ec <MX_DMA_Init>
  MX_SPI1_Init();
 8002358:	f000 fca6 	bl	8002ca8 <MX_SPI1_Init>
  MX_FSMC_Init();
 800235c:	f7ff f866 	bl	800142c <MX_FSMC_Init>
  MX_I2C1_Init();
 8002360:	f7ff fa3a 	bl	80017d8 <MX_I2C1_Init>
  MX_TIM13_Init();
 8002364:	f000 fe4e 	bl	8003004 <MX_TIM13_Init>
  MX_TIM2_Init();
 8002368:	f000 fdb2 	bl	8002ed0 <MX_TIM2_Init>
  MX_ADC1_Init();
 800236c:	f7fe feda 	bl	8001124 <MX_ADC1_Init>
  MX_TIM4_Init();
 8002370:	f000 fdfa 	bl	8002f68 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002374:	f000 ff28 	bl	80031c8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002378:	f000 ff50 	bl	800321c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	system_init();
 800237c:	f000 f8aa 	bl	80024d4 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	InitSlave(&BKIT01);
 8002380:	481c      	ldr	r0, [pc, #112]	; (80023f4 <main+0xb0>)
 8002382:	f7fe fcbd 	bl	8000d00 <InitSlave>
	InitTimer();
 8002386:	f000 fbd3 	bl	8002b30 <InitTimer>
	lcd_clear(BLACK);
 800238a:	2000      	movs	r0, #0
 800238c:	f7ff fb18 	bl	80019c0 <lcd_clear>
	set_timer(10, 0);
 8002390:	2100      	movs	r1, #0
 8002392:	200a      	movs	r0, #10
 8002394:	f000 fbee 	bl	8002b74 <set_timer>
	set_timer(1000, 1);
 8002398:	2101      	movs	r1, #1
 800239a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800239e:	f000 fbe9 	bl	8002b74 <set_timer>
	set_timer(5000, 2);
 80023a2:	2102      	movs	r1, #2
 80023a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80023a8:	f000 fbe4 	bl	8002b74 <set_timer>


	while (1) {
		if(timer_flag[0]){
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <main+0xb4>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <main+0x82>
			slave_behavior(&BKIT01);
 80023b4:	480f      	ldr	r0, [pc, #60]	; (80023f4 <main+0xb0>)
 80023b6:	f7fe fe6b 	bl	8001090 <slave_behavior>
			TestADC();
 80023ba:	f000 f89d 	bl	80024f8 <TestADC>
			set_timer(10, 0);
 80023be:	2100      	movs	r1, #0
 80023c0:	200a      	movs	r0, #10
 80023c2:	f000 fbd7 	bl	8002b74 <set_timer>
		}
		if(timer_flag[1]){
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <main+0xb4>)
 80023c8:	785b      	ldrb	r3, [r3, #1]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d008      	beq.n	80023e0 <main+0x9c>
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80023ce:	2110      	movs	r1, #16
 80023d0:	480a      	ldr	r0, [pc, #40]	; (80023fc <main+0xb8>)
 80023d2:	f002 fb78 	bl	8004ac6 <HAL_GPIO_TogglePin>
			set_timer(1000, 1);
 80023d6:	2101      	movs	r1, #1
 80023d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023dc:	f000 fbca 	bl	8002b74 <set_timer>
		}
		if(timer_flag[2]){
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <main+0xb4>)
 80023e2:	789b      	ldrb	r3, [r3, #2]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0e1      	beq.n	80023ac <main+0x68>
			set_timer(5000, 2);
 80023e8:	2102      	movs	r1, #2
 80023ea:	f241 3088 	movw	r0, #5000	; 0x1388
 80023ee:	f000 fbc1 	bl	8002b74 <set_timer>
		if(timer_flag[0]){
 80023f2:	e7db      	b.n	80023ac <main+0x68>
 80023f4:	20000230 	.word	0x20000230
 80023f8:	200005b4 	.word	0x200005b4
 80023fc:	40021000 	.word	0x40021000

08002400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b094      	sub	sp, #80	; 0x50
 8002404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002406:	f107 0320 	add.w	r3, r7, #32
 800240a:	2230      	movs	r2, #48	; 0x30
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f005 fdd6 	bl	8007fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002414:	f107 030c 	add.w	r3, r7, #12
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	4b28      	ldr	r3, [pc, #160]	; (80024cc <SystemClock_Config+0xcc>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	4a27      	ldr	r2, [pc, #156]	; (80024cc <SystemClock_Config+0xcc>)
 800242e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002432:	6413      	str	r3, [r2, #64]	; 0x40
 8002434:	4b25      	ldr	r3, [pc, #148]	; (80024cc <SystemClock_Config+0xcc>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002440:	2300      	movs	r3, #0
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <SystemClock_Config+0xd0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a21      	ldr	r2, [pc, #132]	; (80024d0 <SystemClock_Config+0xd0>)
 800244a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <SystemClock_Config+0xd0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800245c:	2302      	movs	r3, #2
 800245e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002460:	2301      	movs	r3, #1
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002464:	2310      	movs	r3, #16
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002468:	2302      	movs	r3, #2
 800246a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800246c:	2300      	movs	r3, #0
 800246e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002470:	2308      	movs	r3, #8
 8002472:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002474:	23a8      	movs	r3, #168	; 0xa8
 8002476:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002478:	2302      	movs	r3, #2
 800247a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800247c:	2304      	movs	r3, #4
 800247e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002480:	f107 0320 	add.w	r3, r7, #32
 8002484:	4618      	mov	r0, r3
 8002486:	f002 fc7d 	bl	8004d84 <HAL_RCC_OscConfig>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002490:	f000 f8f2 	bl	8002678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002494:	230f      	movs	r3, #15
 8002496:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002498:	2302      	movs	r3, #2
 800249a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80024a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024ac:	f107 030c 	add.w	r3, r7, #12
 80024b0:	2105      	movs	r1, #5
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 fede 	bl	8005274 <HAL_RCC_ClockConfig>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80024be:	f000 f8db 	bl	8002678 <Error_Handler>
  }
}
 80024c2:	bf00      	nop
 80024c4:	3750      	adds	r7, #80	; 0x50
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40007000 	.word	0x40007000

080024d4 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	button_init();
 80024d8:	f7fe ff42 	bl	8001360 <button_init>
	lcd_init();
 80024dc:	f7ff fcd0 	bl	8001e80 <lcd_init>

	sensor_init();
 80024e0:	f000 fa14 	bl	800290c <sensor_init>
	buzzer_init();
 80024e4:	f7fe ff48 	bl	8001378 <buzzer_init>

	timer2_init();
 80024e8:	f000 fafc 	bl	8002ae4 <timer2_init>
	timer2_set(500);
 80024ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024f0:	f000 fb02 	bl	8002af8 <timer2_set>
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <TestADC>:
	else
		return 0;
}

uint8_t count_adc = 0;
void TestADC() {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1) % 20;
 80024fe:	4b57      	ldr	r3, [pc, #348]	; (800265c <TestADC+0x164>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	4b56      	ldr	r3, [pc, #344]	; (8002660 <TestADC+0x168>)
 8002506:	fb83 1302 	smull	r1, r3, r3, r2
 800250a:	10d9      	asrs	r1, r3, #3
 800250c:	17d3      	asrs	r3, r2, #31
 800250e:	1ac9      	subs	r1, r1, r3
 8002510:	460b      	mov	r3, r1
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	1ad1      	subs	r1, r2, r3
 800251a:	b2ca      	uxtb	r2, r1
 800251c:	4b4f      	ldr	r3, [pc, #316]	; (800265c <TestADC+0x164>)
 800251e:	701a      	strb	r2, [r3, #0]
	if (count_adc == 0) {
 8002520:	4b4e      	ldr	r3, [pc, #312]	; (800265c <TestADC+0x164>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	f040 8096 	bne.w	8002656 <TestADC+0x15e>
		sensor_read();
 800252a:	f000 f9fd 	bl	8002928 <sensor_read>
		lcd_show_string(10, 100, "Voltage:", RED, BLACK, 16, 0);
 800252e:	2300      	movs	r3, #0
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	2310      	movs	r3, #16
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	2300      	movs	r3, #0
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800253e:	4a49      	ldr	r2, [pc, #292]	; (8002664 <TestADC+0x16c>)
 8002540:	2164      	movs	r1, #100	; 0x64
 8002542:	200a      	movs	r0, #10
 8002544:	f7ff fdfc 	bl	8002140 <lcd_show_string>
		lcd_show_float_num(130, 100, sensor_get_voltage(), 4, RED, BLACK, 16);
 8002548:	f000 fa16 	bl	8002978 <sensor_get_voltage>
 800254c:	eef0 7a40 	vmov.f32	s15, s0
 8002550:	2310      	movs	r3, #16
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	2300      	movs	r3, #0
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800255c:	2204      	movs	r2, #4
 800255e:	eeb0 0a67 	vmov.f32	s0, s15
 8002562:	2164      	movs	r1, #100	; 0x64
 8002564:	2082      	movs	r0, #130	; 0x82
 8002566:	f7ff fbdf 	bl	8001d28 <lcd_show_float_num>
		lcd_show_string(10, 120, "Current:", RED, BLACK, 16, 0);
 800256a:	2300      	movs	r3, #0
 800256c:	9302      	str	r3, [sp, #8]
 800256e:	2310      	movs	r3, #16
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	2300      	movs	r3, #0
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800257a:	4a3b      	ldr	r2, [pc, #236]	; (8002668 <TestADC+0x170>)
 800257c:	2178      	movs	r1, #120	; 0x78
 800257e:	200a      	movs	r0, #10
 8002580:	f7ff fdde 	bl	8002140 <lcd_show_string>
		lcd_show_float_num(130, 120, sensor_get_current(), 4, RED, BLACK, 16);
 8002584:	f000 fa34 	bl	80029f0 <sensor_get_current>
 8002588:	eef0 7a40 	vmov.f32	s15, s0
 800258c:	2310      	movs	r3, #16
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	2300      	movs	r3, #0
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002598:	2204      	movs	r2, #4
 800259a:	eeb0 0a67 	vmov.f32	s0, s15
 800259e:	2178      	movs	r1, #120	; 0x78
 80025a0:	2082      	movs	r0, #130	; 0x82
 80025a2:	f7ff fbc1 	bl	8001d28 <lcd_show_float_num>
		lcd_show_string(10, 140, "Light:", RED, BLACK, 16, 0);
 80025a6:	2300      	movs	r3, #0
 80025a8:	9302      	str	r3, [sp, #8]
 80025aa:	2310      	movs	r3, #16
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	2300      	movs	r3, #0
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025b6:	4a2d      	ldr	r2, [pc, #180]	; (800266c <TestADC+0x174>)
 80025b8:	218c      	movs	r1, #140	; 0x8c
 80025ba:	200a      	movs	r0, #10
 80025bc:	f7ff fdc0 	bl	8002140 <lcd_show_string>
		lcd_show_int_num(130, 140, sensor_get_light(), 4, RED, BLACK, 16);
 80025c0:	f000 f9c0 	bl	8002944 <sensor_get_light>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	2310      	movs	r3, #16
 80025ca:	9302      	str	r3, [sp, #8]
 80025cc:	2300      	movs	r3, #0
 80025ce:	9301      	str	r3, [sp, #4]
 80025d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2304      	movs	r3, #4
 80025d8:	218c      	movs	r1, #140	; 0x8c
 80025da:	2082      	movs	r0, #130	; 0x82
 80025dc:	f7ff fb26 	bl	8001c2c <lcd_show_int_num>
		lcd_show_string(10, 160, "Potentiometer:", RED, BLACK, 16, 0);
 80025e0:	2300      	movs	r3, #0
 80025e2:	9302      	str	r3, [sp, #8]
 80025e4:	2310      	movs	r3, #16
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	2300      	movs	r3, #0
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025f0:	4a1f      	ldr	r2, [pc, #124]	; (8002670 <TestADC+0x178>)
 80025f2:	21a0      	movs	r1, #160	; 0xa0
 80025f4:	200a      	movs	r0, #10
 80025f6:	f7ff fda3 	bl	8002140 <lcd_show_string>
		lcd_show_int_num(130, 160, sensor_get_potentiometer(), 4, RED, BLACK,
 80025fa:	f000 f9af 	bl	800295c <sensor_get_potentiometer>
 80025fe:	4603      	mov	r3, r0
 8002600:	461a      	mov	r2, r3
 8002602:	2310      	movs	r3, #16
 8002604:	9302      	str	r3, [sp, #8]
 8002606:	2300      	movs	r3, #0
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2304      	movs	r3, #4
 8002612:	21a0      	movs	r1, #160	; 0xa0
 8002614:	2082      	movs	r0, #130	; 0x82
 8002616:	f7ff fb09 	bl	8001c2c <lcd_show_int_num>
				16);
		lcd_show_string(10, 180, "Temperature:", RED, BLACK, 16, 0);
 800261a:	2300      	movs	r3, #0
 800261c:	9302      	str	r3, [sp, #8]
 800261e:	2310      	movs	r3, #16
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	2300      	movs	r3, #0
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800262a:	4a12      	ldr	r2, [pc, #72]	; (8002674 <TestADC+0x17c>)
 800262c:	21b4      	movs	r1, #180	; 0xb4
 800262e:	200a      	movs	r0, #10
 8002630:	f7ff fd86 	bl	8002140 <lcd_show_string>
		lcd_show_float_num(130, 180, sensor_get_temperature(), 4, RED, BLACK,
 8002634:	f000 fa38 	bl	8002aa8 <sensor_get_temperature>
 8002638:	eef0 7a40 	vmov.f32	s15, s0
 800263c:	2310      	movs	r3, #16
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	2300      	movs	r3, #0
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002648:	2204      	movs	r2, #4
 800264a:	eeb0 0a67 	vmov.f32	s0, s15
 800264e:	21b4      	movs	r1, #180	; 0xb4
 8002650:	2082      	movs	r0, #130	; 0x82
 8002652:	f7ff fb69 	bl	8001d28 <lcd_show_float_num>
				16);
	}
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000398 	.word	0x20000398
 8002660:	66666667 	.word	0x66666667
 8002664:	08008030 	.word	0x08008030
 8002668:	0800803c 	.word	0x0800803c
 800266c:	08008048 	.word	0x08008048
 8002670:	08008050 	.word	0x08008050
 8002674:	08008060 	.word	0x08008060

08002678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800267c:	b672      	cpsid	i
}
 800267e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002680:	e7fe      	b.n	8002680 <Error_Handler+0x8>
	...

08002684 <Modbus_Send>:

Modbus_HandleTypeDef master;
Modbus_HandleTypeDef slave;


HAL_StatusTypeDef Modbus_Send(Modbus_HandleTypeDef* hModbus){
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,hModbus->Tx_buf,hModbus->Tx_size,HAL_MAX_DELAY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	1d59      	adds	r1, r3, #5
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8b3 2106 	ldrh.w	r2, [r3, #262]	; 0x106
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
 800269a:	4815      	ldr	r0, [pc, #84]	; (80026f0 <Modbus_Send+0x6c>)
 800269c:	f004 fb7c 	bl	8006d98 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,SET);
 80026a0:	2201      	movs	r2, #1
 80026a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a6:	4813      	ldr	r0, [pc, #76]	; (80026f4 <Modbus_Send+0x70>)
 80026a8:	f002 f9f4 	bl	8004a94 <HAL_GPIO_WritePin>
	if(HAL_UART_Transmit(hModbus->huart,hModbus->Tx_buf,hModbus->Tx_size,HAL_MAX_DELAY) != HAL_OK){
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	1d59      	adds	r1, r3, #5
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8b3 2106 	ldrh.w	r2, [r3, #262]	; 0x106
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
 80026be:	f004 fb6b 	bl	8006d98 <HAL_UART_Transmit>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <Modbus_Send+0x54>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 80026c8:	2200      	movs	r2, #0
 80026ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026ce:	4809      	ldr	r0, [pc, #36]	; (80026f4 <Modbus_Send+0x70>)
 80026d0:	f002 f9e0 	bl	8004a94 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e006      	b.n	80026e6 <Modbus_Send+0x62>
	};

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <Modbus_Send+0x70>)
 80026e0:	f002 f9d8 	bl	8004a94 <HAL_GPIO_WritePin>
	return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000070c 	.word	0x2000070c
 80026f4:	40020000 	.word	0x40020000

080026f8 <Modbus_CheckData>:

unsigned char Modbus_CheckData(Modbus_HandleTypeDef* hModbus){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	uint16_t rx_crc = crc16(hModbus->Rx_buf, hModbus->Rx_size - 2);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800270c:	3b02      	subs	r3, #2
 800270e:	b29b      	uxth	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	4610      	mov	r0, r2
 8002714:	f7fe fe3a 	bl	800138c <crc16>
 8002718:	4603      	mov	r3, r0
 800271a:	81fb      	strh	r3, [r7, #14]
	uint16_t high_crc = hModbus->Rx_buf[hModbus->Rx_size - 1];
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8002722:	3b01      	subs	r3, #1
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800272c:	81bb      	strh	r3, [r7, #12]
	uint16_t low_crc =  hModbus->Rx_buf[hModbus->Rx_size - 2];
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8002734:	3b02      	subs	r3, #2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800273e:	817b      	strh	r3, [r7, #10]
	uint16_t receive_crc = (high_crc<<8)|(low_crc);
 8002740:	89bb      	ldrh	r3, [r7, #12]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	b21a      	sxth	r2, r3
 8002746:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800274a:	4313      	orrs	r3, r2
 800274c:	b21b      	sxth	r3, r3
 800274e:	813b      	strh	r3, [r7, #8]
//	if(status){
//		HAL_UART_Transmit(&huart1, (uint8_t*)"oke", 3, 100);
//	}else{
//		HAL_UART_Transmit(&huart1, (uint8_t*)"NO", 2, 100);
//	}
	return (receive_crc == rx_crc) ? 1 : 0;
 8002750:	893a      	ldrh	r2, [r7, #8]
 8002752:	89fb      	ldrh	r3, [r7, #14]
 8002754:	429a      	cmp	r2, r3
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <Modbus_Transmit_Slave>:
	hModbus->RxFlag = 0;
	HAL_Delay(5);
	return MODBUS_OKE;
}

Modbus_Status Modbus_Transmit_Slave(Modbus_HandleTypeDef* hModbus, uint8_t Address, uint8_t Function, uint8_t* Data, uint8_t Size, uint32_t Timeout){
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	72fb      	strb	r3, [r7, #11]
 8002774:	4613      	mov	r3, r2
 8002776:	72bb      	strb	r3, [r7, #10]
	hModbus->Tx_buf[0] = Address;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	7afa      	ldrb	r2, [r7, #11]
 800277c:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_buf[1] = Function;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	7aba      	ldrb	r2, [r7, #10]
 8002782:	719a      	strb	r2, [r3, #6]
	hModbus->Tx_buf[2] = Size;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f897 2020 	ldrb.w	r2, [r7, #32]
 800278a:	71da      	strb	r2, [r3, #7]
	int i;
	uint16_t crc = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	827b      	strh	r3, [r7, #18]
	for(i=0; i<Size; i++){
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	e00c      	b.n	80027b0 <Modbus_Transmit_Slave+0x4a>
		hModbus->Tx_buf[i+3] = *(Data + i);
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	441a      	add	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3303      	adds	r3, #3
 80027a0:	7811      	ldrb	r1, [r2, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4413      	add	r3, r2
 80027a6:	460a      	mov	r2, r1
 80027a8:	715a      	strb	r2, [r3, #5]
	for(i=0; i<Size; i++){
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	3301      	adds	r3, #1
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	dbed      	blt.n	8002796 <Modbus_Transmit_Slave+0x30>
	}
	crc = crc16(hModbus->Tx_buf, i+3);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1d5a      	adds	r2, r3, #5
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3303      	adds	r3, #3
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	4619      	mov	r1, r3
 80027c8:	4610      	mov	r0, r2
 80027ca:	f7fe fddf 	bl	800138c <crc16>
 80027ce:	4603      	mov	r3, r0
 80027d0:	827b      	strh	r3, [r7, #18]
	hModbus->Tx_buf[i+3] = crc & 0x00FF; // LOW
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3303      	adds	r3, #3
 80027d6:	8a7a      	ldrh	r2, [r7, #18]
 80027d8:	b2d1      	uxtb	r1, r2
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4413      	add	r3, r2
 80027de:	460a      	mov	r2, r1
 80027e0:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_buf[i+4] = crc >> 8; //HIGH
 80027e2:	8a7b      	ldrh	r3, [r7, #18]
 80027e4:	0a1b      	lsrs	r3, r3, #8
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3304      	adds	r3, #4
 80027ec:	b2d1      	uxtb	r1, r2
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4413      	add	r3, r2
 80027f2:	460a      	mov	r2, r1
 80027f4:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_size = Size + 5;
 80027f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3305      	adds	r3, #5
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	if(Modbus_Send(hModbus) == HAL_OK){
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7ff ff3c 	bl	8002684 <Modbus_Send>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <Modbus_Transmit_Slave+0xb0>
		return MODBUS_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e003      	b.n	800281e <Modbus_Transmit_Slave+0xb8>
	}
	HAL_Delay(5);
 8002816:	2005      	movs	r0, #5
 8002818:	f000 fe56 	bl	80034c8 <HAL_Delay>
	return MODBUS_OKE;
 800281c:	2302      	movs	r3, #2
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <Modbus_Receive>:

Modbus_Status Modbus_Receive(Modbus_HandleTypeDef* hModbus){ //Thieu timeout
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800283a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800283e:	4619      	mov	r1, r3
 8002840:	f004 fb35 	bl	8006eae <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 8002844:	2200      	movs	r2, #0
 8002846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800284a:	4804      	ldr	r0, [pc, #16]	; (800285c <Modbus_Receive+0x34>)
 800284c:	f002 f922 	bl	8004a94 <HAL_GPIO_WritePin>
	return MODBUS_OKE;
 8002850:	2302      	movs	r3, #2
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40020000 	.word	0x40020000

08002860 <Modbus_CallBack>:

void Modbus_CallBack(Modbus_HandleTypeDef* hModbus, UART_HandleTypeDef* huart, uint16_t Size){
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	4613      	mov	r3, r2
 800286c:	80fb      	strh	r3, [r7, #6]
	hModbus->Rx_size = Size;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	88fa      	ldrh	r2, [r7, #6]
 8002872:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	hModbus->RxFlag = 1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
	Receive_Flag = Modbus_CheckData(hModbus);
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f7ff ff3a 	bl	80026f8 <Modbus_CheckData>
 8002884:	4603      	mov	r3, r0
 8002886:	461a      	mov	r2, r3
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <Modbus_CallBack+0x48>)
 800288a:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Transmit(&huart1, hModbus->Rx_buf, hModbus->Rx_size, HAL_MAX_DELAY);
	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800289a:	4619      	mov	r1, r3
 800289c:	f004 fb07 	bl	8006eae <HAL_UARTEx_ReceiveToIdle_IT>
}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000399 	.word	0x20000399

080028ac <Modbus_Init>:

void Modbus_Init(Modbus_HandleTypeDef* hModbus, UART_HandleTypeDef* huart){
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
	hModbus->huart = huart;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	601a      	str	r2, [r3, #0]
	hModbus->Address = 0;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	711a      	strb	r2, [r3, #4]
	memset(hModbus->Rx_buf,0,sizeof(hModbus->Rx_buf));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80028c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f005 fb76 	bl	8007fc0 <memset>
	hModbus->Rx_size = 256;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028da:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	memset(hModbus->Tx_buf,0,sizeof(hModbus->Tx_buf));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3305      	adds	r3, #5
 80028e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f005 fb69 	bl	8007fc0 <memset>
	hModbus->Tx_size = 0;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	hModbus->RxFlag = 0;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
	Modbus_Receive(hModbus);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ff92 	bl	8002828 <Modbus_Receive>
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <sensor_init>:

/* Variables */
uint16_t adc_receive[5];

/* Functions */
void sensor_init() {
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*) adc_receive, 5);
 8002910:	2205      	movs	r2, #5
 8002912:	4903      	ldr	r1, [pc, #12]	; (8002920 <sensor_init+0x14>)
 8002914:	4803      	ldr	r0, [pc, #12]	; (8002924 <sensor_init+0x18>)
 8002916:	f000 fe3f 	bl	8003598 <HAL_ADC_Start_DMA>
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	200005a8 	.word	0x200005a8
 8002924:	20000240 	.word	0x20000240

08002928 <sensor_read>:

void sensor_read() {
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_receive, 5);
 800292c:	2205      	movs	r2, #5
 800292e:	4903      	ldr	r1, [pc, #12]	; (800293c <sensor_read+0x14>)
 8002930:	4803      	ldr	r0, [pc, #12]	; (8002940 <sensor_read+0x18>)
 8002932:	f000 fe31 	bl	8003598 <HAL_ADC_Start_DMA>
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200005a8 	.word	0x200005a8
 8002940:	20000240 	.word	0x20000240

08002944 <sensor_get_light>:

uint16_t sensor_get_light() {
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <sensor_get_light+0x14>)
 800294a:	889b      	ldrh	r3, [r3, #4]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	200005a8 	.word	0x200005a8

0800295c <sensor_get_potentiometer>:

uint16_t sensor_get_potentiometer() {
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002960:	4b03      	ldr	r3, [pc, #12]	; (8002970 <sensor_get_potentiometer+0x14>)
 8002962:	88db      	ldrh	r3, [r3, #6]
}
 8002964:	4618      	mov	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	200005a8 	.word	0x200005a8
 8002974:	00000000 	.word	0x00000000

08002978 <sensor_get_voltage>:

float sensor_get_voltage() {
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
	return ((float) adc_receive[0] * 3.3 * 12) / (4095 * 1.565);
 800297c:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <sensor_get_voltage+0x70>)
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	ee07 3a90 	vmov	s15, r3
 8002984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002988:	ee17 0a90 	vmov	r0, s15
 800298c:	f7fd fd80 	bl	8000490 <__aeabi_f2d>
 8002990:	a311      	add	r3, pc, #68	; (adr r3, 80029d8 <sensor_get_voltage+0x60>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fd fdd3 	bl	8000540 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <sensor_get_voltage+0x74>)
 80029a8:	f7fd fdca 	bl	8000540 <__aeabi_dmul>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	a30a      	add	r3, pc, #40	; (adr r3, 80029e0 <sensor_get_voltage+0x68>)
 80029b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ba:	f7fd feeb 	bl	8000794 <__aeabi_ddiv>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	f7fd ffcd 	bl	8000964 <__aeabi_d2f>
 80029ca:	4603      	mov	r3, r0
 80029cc:	ee07 3a90 	vmov	s15, r3
}
 80029d0:	eeb0 0a67 	vmov.f32	s0, s15
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	66666666 	.word	0x66666666
 80029dc:	400a6666 	.word	0x400a6666
 80029e0:	cccccccd 	.word	0xcccccccd
 80029e4:	40b908ac 	.word	0x40b908ac
 80029e8:	200005a8 	.word	0x200005a8
 80029ec:	40280000 	.word	0x40280000

080029f0 <sensor_get_current>:

float sensor_get_current() {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
	return (((float) adc_receive[1] * 3.3 * 1000) / (4095 * 0.647) - 2.5) * 5
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <sensor_get_current+0xa8>)
 80029f6:	885b      	ldrh	r3, [r3, #2]
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a00:	ee17 0a90 	vmov	r0, s15
 8002a04:	f7fd fd44 	bl	8000490 <__aeabi_f2d>
 8002a08:	a31f      	add	r3, pc, #124	; (adr r3, 8002a88 <sensor_get_current+0x98>)
 8002a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0e:	f7fd fd97 	bl	8000540 <__aeabi_dmul>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <sensor_get_current+0xac>)
 8002a20:	f7fd fd8e 	bl	8000540 <__aeabi_dmul>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	a318      	add	r3, pc, #96	; (adr r3, 8002a90 <sensor_get_current+0xa0>)
 8002a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a32:	f7fd feaf 	bl	8000794 <__aeabi_ddiv>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <sensor_get_current+0xb0>)
 8002a44:	f7fd fbc4 	bl	80001d0 <__aeabi_dsub>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <sensor_get_current+0xb4>)
 8002a56:	f7fd fd73 	bl	8000540 <__aeabi_dmul>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
			/ 2.5;
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <sensor_get_current+0xb0>)
 8002a68:	f7fd fe94 	bl	8000794 <__aeabi_ddiv>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	f7fd ff76 	bl	8000964 <__aeabi_d2f>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	ee07 3a90 	vmov	s15, r3
}
 8002a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	f3af 8000 	nop.w
 8002a88:	66666666 	.word	0x66666666
 8002a8c:	400a6666 	.word	0x400a6666
 8002a90:	147ae148 	.word	0x147ae148
 8002a94:	40a4b2ee 	.word	0x40a4b2ee
 8002a98:	200005a8 	.word	0x200005a8
 8002a9c:	408f4000 	.word	0x408f4000
 8002aa0:	40040000 	.word	0x40040000
 8002aa4:	40140000 	.word	0x40140000

08002aa8 <sensor_get_temperature>:

float sensor_get_temperature() {
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
	return ((float) adc_receive[4] * 330) / (4095);
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <sensor_get_temperature+0x30>)
 8002aae:	891b      	ldrh	r3, [r3, #8]
 8002ab0:	ee07 3a90 	vmov	s15, r3
 8002ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002adc <sensor_get_temperature+0x34>
 8002abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002ae0 <sensor_get_temperature+0x38>
 8002ac4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ac8:	eef0 7a66 	vmov.f32	s15, s13
}
 8002acc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	200005a8 	.word	0x200005a8
 8002adc:	43a50000 	.word	0x43a50000
 8002ae0:	457ff000 	.word	0x457ff000

08002ae4 <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <timer2_init+0x10>)
 8002aea:	f003 f925 	bl	8005d38 <HAL_TIM_Base_Start_IT>
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000634 	.word	0x20000634

08002af8 <timer2_set>:
	timer1_mul = ms / TIMER_CYCLE_2;
	timer1_counter = timer2_mul;
	timer1_flag = 0;
}

void timer2_set(int ms) {
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	timer2_mul = ms / TIMER_CYCLE_2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <timer2_set+0x2c>)
 8002b06:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_mul;
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <timer2_set+0x2c>)
 8002b0a:	881a      	ldrh	r2, [r3, #0]
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <timer2_set+0x30>)
 8002b0e:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <timer2_set+0x34>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	701a      	strb	r2, [r3, #0]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	200005d4 	.word	0x200005d4
 8002b28:	200005d2 	.word	0x200005d2
 8002b2c:	200005d0 	.word	0x200005d0

08002b30 <InitTimer>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void InitTimer(void){
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
	for(int i = 0; i < __MAX_TIM; i++){
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	e00c      	b.n	8002b56 <InitTimer+0x26>
		timer_counter[i] = 0;
 8002b3c:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <InitTimer+0x3c>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2100      	movs	r1, #0
 8002b42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timer_flag[i] = 0;
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <InitTimer+0x40>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < __MAX_TIM; i++){
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3301      	adds	r3, #1
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	ddef      	ble.n	8002b3c <InitTimer+0xc>
	}
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	200005bc 	.word	0x200005bc
 8002b70:	200005b4 	.word	0x200005b4

08002b74 <set_timer>:

void set_timer(uint32_t ms, uint8_t idx){
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	70fb      	strb	r3, [r7, #3]
	timer_flag[idx] = 0;
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	4a07      	ldr	r2, [pc, #28]	; (8002ba0 <set_timer+0x2c>)
 8002b84:	2100      	movs	r1, #0
 8002b86:	54d1      	strb	r1, [r2, r3]
	timer_counter[idx] = ms;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	4906      	ldr	r1, [pc, #24]	; (8002ba4 <set_timer+0x30>)
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	200005b4 	.word	0x200005b4
 8002ba4:	200005bc 	.word	0x200005bc

08002ba8 <TimerRun>:

void TimerRun(void){
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
	for(int i = 0; i < __MAX_TIM; i++){
 8002bae:	2300      	movs	r3, #0
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	e01c      	b.n	8002bee <TimerRun+0x46>
		if(timer_counter[i] > 0){
 8002bb4:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <TimerRun+0x5c>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d013      	beq.n	8002be8 <TimerRun+0x40>
			timer_counter[i]--;
 8002bc0:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <TimerRun+0x5c>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc8:	1e5a      	subs	r2, r3, #1
 8002bca:	490e      	ldr	r1, [pc, #56]	; (8002c04 <TimerRun+0x5c>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] == 0){
 8002bd2:	4a0c      	ldr	r2, [pc, #48]	; (8002c04 <TimerRun+0x5c>)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d104      	bne.n	8002be8 <TimerRun+0x40>
				timer_flag[i] = 1;
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <TimerRun+0x60>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4413      	add	r3, r2
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < __MAX_TIM; i++){
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3301      	adds	r3, #1
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	dddf      	ble.n	8002bb4 <TimerRun+0xc>
			}
		}
	}
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	200005bc 	.word	0x200005bc
 8002c08:	200005b4 	.word	0x200005b4

08002c0c <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1c:	d116      	bne.n	8002c4c <HAL_TIM_PeriodElapsedCallback+0x40>
		TimerRun();
 8002c1e:	f7ff ffc3 	bl	8002ba8 <TimerRun>
		if (timer2_counter > 0) {
 8002c22:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d010      	beq.n	8002c4c <HAL_TIM_PeriodElapsedCallback+0x40>
			timer2_counter--;
 8002c2a:	4b18      	ldr	r3, [pc, #96]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002c34:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_TIM_PeriodElapsedCallback+0x40>
				timer2_flag = 1;
 8002c3e:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
				timer2_counter = timer2_mul;
 8002c44:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002c46:	881a      	ldrh	r2, [r3, #0]
 8002c48:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002c4a:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	if (htim->Instance == TIM4) {
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a11      	ldr	r2, [pc, #68]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d116      	bne.n	8002c84 <HAL_TIM_PeriodElapsedCallback+0x78>
		if (timer4_counter > 0) {
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d010      	beq.n	8002c80 <HAL_TIM_PeriodElapsedCallback+0x74>
			timer4_counter--;
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c68:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_TIM_PeriodElapsedCallback+0x74>
				timer4_flag = 1;
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
				timer4_counter = timer4_mul;
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002c7a:	881a      	ldrh	r2, [r3, #0]
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c7e:	801a      	strh	r2, [r3, #0]
			}
		}

		led_7seg_display();
 8002c80:	f7ff fac2 	bl	8002208 <led_7seg_display>
	}
}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	200005d2 	.word	0x200005d2
 8002c90:	200005d0 	.word	0x200005d0
 8002c94:	200005d4 	.word	0x200005d4
 8002c98:	40000800 	.word	0x40000800
 8002c9c:	200005d8 	.word	0x200005d8
 8002ca0:	200005d6 	.word	0x200005d6
 8002ca4:	200005da 	.word	0x200005da

08002ca8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002cac:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <MX_SPI1_Init+0x64>)
 8002cae:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <MX_SPI1_Init+0x68>)
 8002cb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <MX_SPI1_Init+0x64>)
 8002cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <MX_SPI1_Init+0x64>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cc0:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <MX_SPI1_Init+0x64>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cc6:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <MX_SPI1_Init+0x64>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <MX_SPI1_Init+0x64>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <MX_SPI1_Init+0x64>)
 8002cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cda:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <MX_SPI1_Init+0x64>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <MX_SPI1_Init+0x64>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <MX_SPI1_Init+0x64>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cec:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <MX_SPI1_Init+0x64>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <MX_SPI1_Init+0x64>)
 8002cf4:	220a      	movs	r2, #10
 8002cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cf8:	4804      	ldr	r0, [pc, #16]	; (8002d0c <MX_SPI1_Init+0x64>)
 8002cfa:	f002 fcdb 	bl	80056b4 <HAL_SPI_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d04:	f7ff fcb8 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	200005dc 	.word	0x200005dc
 8002d10:	40013000 	.word	0x40013000

08002d14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	; 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a19      	ldr	r2, [pc, #100]	; (8002d98 <HAL_SPI_MspInit+0x84>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d12b      	bne.n	8002d8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d44:	6453      	str	r3, [r2, #68]	; 0x44
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a10      	ldr	r2, [pc, #64]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <HAL_SPI_MspInit+0x88>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002d6e:	2338      	movs	r3, #56	; 0x38
 8002d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d7e:	2305      	movs	r3, #5
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	4619      	mov	r1, r3
 8002d88:	4805      	ldr	r0, [pc, #20]	; (8002da0 <HAL_SPI_MspInit+0x8c>)
 8002d8a:	f001 fce7 	bl	800475c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d8e:	bf00      	nop
 8002d90:	3728      	adds	r7, #40	; 0x28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40013000 	.word	0x40013000
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40020400 	.word	0x40020400

08002da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <HAL_MspInit+0x4c>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	4a0f      	ldr	r2, [pc, #60]	; (8002df0 <HAL_MspInit+0x4c>)
 8002db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_MspInit+0x4c>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc2:	607b      	str	r3, [r7, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_MspInit+0x4c>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <HAL_MspInit+0x4c>)
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_MspInit+0x4c>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800

08002df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002df8:	e7fe      	b.n	8002df8 <NMI_Handler+0x4>

08002dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dfe:	e7fe      	b.n	8002dfe <HardFault_Handler+0x4>

08002e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e04:	e7fe      	b.n	8002e04 <MemManage_Handler+0x4>

08002e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e0a:	e7fe      	b.n	8002e0a <BusFault_Handler+0x4>

08002e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e10:	e7fe      	b.n	8002e10 <UsageFault_Handler+0x4>

08002e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e40:	f000 fb22 	bl	8003488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e4c:	4802      	ldr	r0, [pc, #8]	; (8002e58 <TIM2_IRQHandler+0x10>)
 8002e4e:	f003 f905 	bl	800605c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000634 	.word	0x20000634

08002e5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <TIM4_IRQHandler+0x10>)
 8002e62:	f003 f8fb 	bl	800605c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000067c 	.word	0x2000067c

08002e70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e74:	4802      	ldr	r0, [pc, #8]	; (8002e80 <USART1_IRQHandler+0x10>)
 8002e76:	f004 f877 	bl	8006f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	2000070c 	.word	0x2000070c

08002e84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e88:	4802      	ldr	r0, [pc, #8]	; (8002e94 <USART3_IRQHandler+0x10>)
 8002e8a:	f004 f86d 	bl	8006f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000754 	.word	0x20000754

08002e98 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e9c:	4802      	ldr	r0, [pc, #8]	; (8002ea8 <DMA2_Stream0_IRQHandler+0x10>)
 8002e9e:	f001 f9f3 	bl	8004288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000288 	.word	0x20000288

08002eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <SystemInit+0x20>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <SystemInit+0x20>)
 8002eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ed6:	f107 0308 	add.w	r3, r7, #8
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <MX_TIM2_Init+0x94>)
 8002eee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ef2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <MX_TIM2_Init+0x94>)
 8002ef6:	f240 3247 	movw	r2, #839	; 0x347
 8002efa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <MX_TIM2_Init+0x94>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <MX_TIM2_Init+0x94>)
 8002f04:	2263      	movs	r2, #99	; 0x63
 8002f06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <MX_TIM2_Init+0x94>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <MX_TIM2_Init+0x94>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f14:	4813      	ldr	r0, [pc, #76]	; (8002f64 <MX_TIM2_Init+0x94>)
 8002f16:	f002 febf 	bl	8005c98 <HAL_TIM_Base_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002f20:	f7ff fbaa 	bl	8002678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f2a:	f107 0308 	add.w	r3, r7, #8
 8002f2e:	4619      	mov	r1, r3
 8002f30:	480c      	ldr	r0, [pc, #48]	; (8002f64 <MX_TIM2_Init+0x94>)
 8002f32:	f003 fa45 	bl	80063c0 <HAL_TIM_ConfigClockSource>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002f3c:	f7ff fb9c 	bl	8002678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f40:	2300      	movs	r3, #0
 8002f42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f48:	463b      	mov	r3, r7
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4805      	ldr	r0, [pc, #20]	; (8002f64 <MX_TIM2_Init+0x94>)
 8002f4e:	f003 fe43 	bl	8006bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f58:	f7ff fb8e 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f5c:	bf00      	nop
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20000634 	.word	0x20000634

08002f68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f6e:	f107 0308 	add.w	r3, r7, #8
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f7c:	463b      	mov	r3, r7
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <MX_TIM4_Init+0x94>)
 8002f86:	4a1e      	ldr	r2, [pc, #120]	; (8003000 <MX_TIM4_Init+0x98>)
 8002f88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8002f8a:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <MX_TIM4_Init+0x94>)
 8002f8c:	f240 3247 	movw	r2, #839	; 0x347
 8002f90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <MX_TIM4_Init+0x94>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002f98:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <MX_TIM4_Init+0x94>)
 8002f9a:	2263      	movs	r2, #99	; 0x63
 8002f9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <MX_TIM4_Init+0x94>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fa4:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <MX_TIM4_Init+0x94>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002faa:	4814      	ldr	r0, [pc, #80]	; (8002ffc <MX_TIM4_Init+0x94>)
 8002fac:	f002 fe74 	bl	8005c98 <HAL_TIM_Base_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002fb6:	f7ff fb5f 	bl	8002678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002fc0:	f107 0308 	add.w	r3, r7, #8
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	480d      	ldr	r0, [pc, #52]	; (8002ffc <MX_TIM4_Init+0x94>)
 8002fc8:	f003 f9fa 	bl	80063c0 <HAL_TIM_ConfigClockSource>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002fd2:	f7ff fb51 	bl	8002678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fde:	463b      	mov	r3, r7
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4806      	ldr	r0, [pc, #24]	; (8002ffc <MX_TIM4_Init+0x94>)
 8002fe4:	f003 fdf8 	bl	8006bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002fee:	f7ff fb43 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ff2:	bf00      	nop
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000067c 	.word	0x2000067c
 8003000:	40000800 	.word	0x40000800

08003004 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]
 8003018:	615a      	str	r2, [r3, #20]
 800301a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800301c:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <MX_TIM13_Init+0x94>)
 800301e:	4a1f      	ldr	r2, [pc, #124]	; (800309c <MX_TIM13_Init+0x98>)
 8003020:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8003022:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <MX_TIM13_Init+0x94>)
 8003024:	f240 3247 	movw	r2, #839	; 0x347
 8003028:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <MX_TIM13_Init+0x94>)
 800302c:	2200      	movs	r2, #0
 800302e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <MX_TIM13_Init+0x94>)
 8003032:	2263      	movs	r2, #99	; 0x63
 8003034:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <MX_TIM13_Init+0x94>)
 8003038:	2200      	movs	r2, #0
 800303a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800303c:	4b16      	ldr	r3, [pc, #88]	; (8003098 <MX_TIM13_Init+0x94>)
 800303e:	2200      	movs	r2, #0
 8003040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003042:	4815      	ldr	r0, [pc, #84]	; (8003098 <MX_TIM13_Init+0x94>)
 8003044:	f002 fe28 	bl	8005c98 <HAL_TIM_Base_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800304e:	f7ff fb13 	bl	8002678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003052:	4811      	ldr	r0, [pc, #68]	; (8003098 <MX_TIM13_Init+0x94>)
 8003054:	f002 fee0 	bl	8005e18 <HAL_TIM_PWM_Init>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800305e:	f7ff fb0b 	bl	8002678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003062:	2360      	movs	r3, #96	; 0x60
 8003064:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	2200      	movs	r2, #0
 8003076:	4619      	mov	r1, r3
 8003078:	4807      	ldr	r0, [pc, #28]	; (8003098 <MX_TIM13_Init+0x94>)
 800307a:	f003 f8df 	bl	800623c <HAL_TIM_PWM_ConfigChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003084:	f7ff faf8 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003088:	4803      	ldr	r0, [pc, #12]	; (8003098 <MX_TIM13_Init+0x94>)
 800308a:	f000 f863 	bl	8003154 <HAL_TIM_MspPostInit>

}
 800308e:	bf00      	nop
 8003090:	3720      	adds	r7, #32
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	200006c4 	.word	0x200006c4
 800309c:	40001c00 	.word	0x40001c00

080030a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b0:	d116      	bne.n	80030e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	4b24      	ldr	r3, [pc, #144]	; (8003148 <HAL_TIM_Base_MspInit+0xa8>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	4a23      	ldr	r2, [pc, #140]	; (8003148 <HAL_TIM_Base_MspInit+0xa8>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6413      	str	r3, [r2, #64]	; 0x40
 80030c2:	4b21      	ldr	r3, [pc, #132]	; (8003148 <HAL_TIM_Base_MspInit+0xa8>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2100      	movs	r1, #0
 80030d2:	201c      	movs	r0, #28
 80030d4:	f000 ff09 	bl	8003eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030d8:	201c      	movs	r0, #28
 80030da:	f000 ff22 	bl	8003f22 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80030de:	e02e      	b.n	800313e <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_TIM_Base_MspInit+0xac>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d116      	bne.n	8003118 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <HAL_TIM_Base_MspInit+0xa8>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a15      	ldr	r2, [pc, #84]	; (8003148 <HAL_TIM_Base_MspInit+0xa8>)
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b13      	ldr	r3, [pc, #76]	; (8003148 <HAL_TIM_Base_MspInit+0xa8>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003106:	2200      	movs	r2, #0
 8003108:	2100      	movs	r1, #0
 800310a:	201e      	movs	r0, #30
 800310c:	f000 feed 	bl	8003eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003110:	201e      	movs	r0, #30
 8003112:	f000 ff06 	bl	8003f22 <HAL_NVIC_EnableIRQ>
}
 8003116:	e012      	b.n	800313e <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM13)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <HAL_TIM_Base_MspInit+0xb0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d10d      	bne.n	800313e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_TIM_Base_MspInit+0xa8>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a07      	ldr	r2, [pc, #28]	; (8003148 <HAL_TIM_Base_MspInit+0xa8>)
 800312c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003130:	6413      	str	r3, [r2, #64]	; 0x40
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_TIM_Base_MspInit+0xa8>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
}
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800
 800314c:	40000800 	.word	0x40000800
 8003150:	40001c00 	.word	0x40001c00

08003154 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 030c 	add.w	r3, r7, #12
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a12      	ldr	r2, [pc, #72]	; (80031bc <HAL_TIM_MspPostInit+0x68>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d11e      	bne.n	80031b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <HAL_TIM_MspPostInit+0x6c>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	4a10      	ldr	r2, [pc, #64]	; (80031c0 <HAL_TIM_MspPostInit+0x6c>)
 8003180:	f043 0320 	orr.w	r3, r3, #32
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <HAL_TIM_MspPostInit+0x6c>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003196:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003198:	2302      	movs	r3, #2
 800319a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80031a4:	2309      	movs	r3, #9
 80031a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	4619      	mov	r1, r3
 80031ae:	4805      	ldr	r0, [pc, #20]	; (80031c4 <HAL_TIM_MspPostInit+0x70>)
 80031b0:	f001 fad4 	bl	800475c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80031b4:	bf00      	nop
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40001c00 	.word	0x40001c00
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40021400 	.word	0x40021400

080031c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <MX_USART1_UART_Init+0x50>)
 80031d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031dc:	2200      	movs	r2, #0
 80031de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031e6:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031ee:	220c      	movs	r2, #12
 80031f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031fe:	4805      	ldr	r0, [pc, #20]	; (8003214 <MX_USART1_UART_Init+0x4c>)
 8003200:	f003 fd7a 	bl	8006cf8 <HAL_UART_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800320a:	f7ff fa35 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	2000070c 	.word	0x2000070c
 8003218:	40011000 	.word	0x40011000

0800321c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <MX_USART3_UART_Init+0x4c>)
 8003222:	4a12      	ldr	r2, [pc, #72]	; (800326c <MX_USART3_UART_Init+0x50>)
 8003224:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <MX_USART3_UART_Init+0x4c>)
 8003228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800322c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <MX_USART3_UART_Init+0x4c>)
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <MX_USART3_UART_Init+0x4c>)
 8003236:	2200      	movs	r2, #0
 8003238:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <MX_USART3_UART_Init+0x4c>)
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <MX_USART3_UART_Init+0x4c>)
 8003242:	220c      	movs	r2, #12
 8003244:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <MX_USART3_UART_Init+0x4c>)
 8003248:	2200      	movs	r2, #0
 800324a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <MX_USART3_UART_Init+0x4c>)
 800324e:	2200      	movs	r2, #0
 8003250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003252:	4805      	ldr	r0, [pc, #20]	; (8003268 <MX_USART3_UART_Init+0x4c>)
 8003254:	f003 fd50 	bl	8006cf8 <HAL_UART_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800325e:	f7ff fa0b 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000754 	.word	0x20000754
 800326c:	40004800 	.word	0x40004800

08003270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08c      	sub	sp, #48	; 0x30
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 031c 	add.w	r3, r7, #28
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a3b      	ldr	r2, [pc, #236]	; (800337c <HAL_UART_MspInit+0x10c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d135      	bne.n	80032fe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	4b3a      	ldr	r3, [pc, #232]	; (8003380 <HAL_UART_MspInit+0x110>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	4a39      	ldr	r2, [pc, #228]	; (8003380 <HAL_UART_MspInit+0x110>)
 800329c:	f043 0310 	orr.w	r3, r3, #16
 80032a0:	6453      	str	r3, [r2, #68]	; 0x44
 80032a2:	4b37      	ldr	r3, [pc, #220]	; (8003380 <HAL_UART_MspInit+0x110>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	61bb      	str	r3, [r7, #24]
 80032ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	4b33      	ldr	r3, [pc, #204]	; (8003380 <HAL_UART_MspInit+0x110>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a32      	ldr	r2, [pc, #200]	; (8003380 <HAL_UART_MspInit+0x110>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b30      	ldr	r3, [pc, #192]	; (8003380 <HAL_UART_MspInit+0x110>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d8:	2303      	movs	r3, #3
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032dc:	2307      	movs	r3, #7
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 031c 	add.w	r3, r7, #28
 80032e4:	4619      	mov	r1, r3
 80032e6:	4827      	ldr	r0, [pc, #156]	; (8003384 <HAL_UART_MspInit+0x114>)
 80032e8:	f001 fa38 	bl	800475c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2100      	movs	r1, #0
 80032f0:	2025      	movs	r0, #37	; 0x25
 80032f2:	f000 fdfa 	bl	8003eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032f6:	2025      	movs	r0, #37	; 0x25
 80032f8:	f000 fe13 	bl	8003f22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80032fc:	e039      	b.n	8003372 <HAL_UART_MspInit+0x102>
  else if(uartHandle->Instance==USART3)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a21      	ldr	r2, [pc, #132]	; (8003388 <HAL_UART_MspInit+0x118>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d134      	bne.n	8003372 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <HAL_UART_MspInit+0x110>)
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <HAL_UART_MspInit+0x110>)
 8003312:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003316:	6413      	str	r3, [r2, #64]	; 0x40
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_UART_MspInit+0x110>)
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_UART_MspInit+0x110>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	4a14      	ldr	r2, [pc, #80]	; (8003380 <HAL_UART_MspInit+0x110>)
 800332e:	f043 0304 	orr.w	r3, r3, #4
 8003332:	6313      	str	r3, [r2, #48]	; 0x30
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <HAL_UART_MspInit+0x110>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003340:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334e:	2303      	movs	r3, #3
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003352:	2307      	movs	r3, #7
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003356:	f107 031c 	add.w	r3, r7, #28
 800335a:	4619      	mov	r1, r3
 800335c:	480b      	ldr	r0, [pc, #44]	; (800338c <HAL_UART_MspInit+0x11c>)
 800335e:	f001 f9fd 	bl	800475c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003362:	2200      	movs	r2, #0
 8003364:	2100      	movs	r1, #0
 8003366:	2027      	movs	r0, #39	; 0x27
 8003368:	f000 fdbf 	bl	8003eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800336c:	2027      	movs	r0, #39	; 0x27
 800336e:	f000 fdd8 	bl	8003f22 <HAL_NVIC_EnableIRQ>
}
 8003372:	bf00      	nop
 8003374:	3730      	adds	r7, #48	; 0x30
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40011000 	.word	0x40011000
 8003380:	40023800 	.word	0x40023800
 8003384:	40020000 	.word	0x40020000
 8003388:	40004800 	.word	0x40004800
 800338c:	40020800 	.word	0x40020800

08003390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003394:	480d      	ldr	r0, [pc, #52]	; (80033cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003396:	490e      	ldr	r1, [pc, #56]	; (80033d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003398:	4a0e      	ldr	r2, [pc, #56]	; (80033d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800339a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800339c:	e002      	b.n	80033a4 <LoopCopyDataInit>

0800339e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800339e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033a2:	3304      	adds	r3, #4

080033a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033a8:	d3f9      	bcc.n	800339e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033aa:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033ac:	4c0b      	ldr	r4, [pc, #44]	; (80033dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80033ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033b0:	e001      	b.n	80033b6 <LoopFillZerobss>

080033b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033b4:	3204      	adds	r2, #4

080033b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033b8:	d3fb      	bcc.n	80033b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033ba:	f7ff fd77 	bl	8002eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033be:	f004 fe07 	bl	8007fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033c2:	f7fe ffbf 	bl	8002344 <main>
  bx  lr    
 80033c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80033c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80033d4:	0800b020 	.word	0x0800b020
  ldr r2, =_sbss
 80033d8:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80033dc:	200007a0 	.word	0x200007a0

080033e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033e0:	e7fe      	b.n	80033e0 <ADC_IRQHandler>
	...

080033e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_Init+0x40>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0d      	ldr	r2, [pc, #52]	; (8003424 <HAL_Init+0x40>)
 80033ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_Init+0x40>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <HAL_Init+0x40>)
 80033fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003400:	4b08      	ldr	r3, [pc, #32]	; (8003424 <HAL_Init+0x40>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a07      	ldr	r2, [pc, #28]	; (8003424 <HAL_Init+0x40>)
 8003406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800340c:	2003      	movs	r0, #3
 800340e:	f000 fd61 	bl	8003ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003412:	200f      	movs	r0, #15
 8003414:	f000 f808 	bl	8003428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003418:	f7ff fcc4 	bl	8002da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023c00 	.word	0x40023c00

08003428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <HAL_InitTick+0x54>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_InitTick+0x58>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	4619      	mov	r1, r3
 800343a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800343e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fd79 	bl	8003f3e <HAL_SYSTICK_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e00e      	b.n	8003474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b0f      	cmp	r3, #15
 800345a:	d80a      	bhi.n	8003472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800345c:	2200      	movs	r2, #0
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	f000 fd41 	bl	8003eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003468:	4a06      	ldr	r2, [pc, #24]	; (8003484 <HAL_InitTick+0x5c>)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	e000      	b.n	8003474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20000208 	.word	0x20000208
 8003480:	20000210 	.word	0x20000210
 8003484:	2000020c 	.word	0x2000020c

08003488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_IncTick+0x20>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_IncTick+0x24>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4413      	add	r3, r2
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <HAL_IncTick+0x24>)
 800349a:	6013      	str	r3, [r2, #0]
}
 800349c:	bf00      	nop
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000210 	.word	0x20000210
 80034ac:	2000079c 	.word	0x2000079c

080034b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return uwTick;
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <HAL_GetTick+0x14>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	2000079c 	.word	0x2000079c

080034c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034d0:	f7ff ffee 	bl	80034b0 <HAL_GetTick>
 80034d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d005      	beq.n	80034ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <HAL_Delay+0x44>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4413      	add	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034ee:	bf00      	nop
 80034f0:	f7ff ffde 	bl	80034b0 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d8f7      	bhi.n	80034f0 <HAL_Delay+0x28>
  {
  }
}
 8003500:	bf00      	nop
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000210 	.word	0x20000210

08003510 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e033      	b.n	800358e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fd fe82 	bl	8001238 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b00      	cmp	r3, #0
 800354c:	d118      	bne.n	8003580 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003556:	f023 0302 	bic.w	r3, r3, #2
 800355a:	f043 0202 	orr.w	r2, r3, #2
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fa68 	bl	8003a38 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	f043 0201 	orr.w	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
 800357e:	e001      	b.n	8003584 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_ADC_Start_DMA+0x1e>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e0e9      	b.n	800378a <HAL_ADC_Start_DMA+0x1f2>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d018      	beq.n	80035fe <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035dc:	4b6d      	ldr	r3, [pc, #436]	; (8003794 <HAL_ADC_Start_DMA+0x1fc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a6d      	ldr	r2, [pc, #436]	; (8003798 <HAL_ADC_Start_DMA+0x200>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	0c9a      	lsrs	r2, r3, #18
 80035e8:	4613      	mov	r3, r2
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	4413      	add	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80035f0:	e002      	b.n	80035f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f9      	bne.n	80035f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360c:	d107      	bne.n	800361e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800361c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b01      	cmp	r3, #1
 800362a:	f040 80a1 	bne.w	8003770 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d007      	beq.n	8003660 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003658:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366c:	d106      	bne.n	800367c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f023 0206 	bic.w	r2, r3, #6
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
 800367a:	e002      	b.n	8003682 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800368a:	4b44      	ldr	r3, [pc, #272]	; (800379c <HAL_ADC_Start_DMA+0x204>)
 800368c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	4a43      	ldr	r2, [pc, #268]	; (80037a0 <HAL_ADC_Start_DMA+0x208>)
 8003694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369a:	4a42      	ldr	r2, [pc, #264]	; (80037a4 <HAL_ADC_Start_DMA+0x20c>)
 800369c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	4a41      	ldr	r2, [pc, #260]	; (80037a8 <HAL_ADC_Start_DMA+0x210>)
 80036a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80036ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036be:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ce:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	334c      	adds	r3, #76	; 0x4c
 80036da:	4619      	mov	r1, r3
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f000 fce8 	bl	80040b4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d12a      	bne.n	8003746 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a2d      	ldr	r2, [pc, #180]	; (80037ac <HAL_ADC_Start_DMA+0x214>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d015      	beq.n	8003726 <HAL_ADC_Start_DMA+0x18e>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a2c      	ldr	r2, [pc, #176]	; (80037b0 <HAL_ADC_Start_DMA+0x218>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d105      	bne.n	8003710 <HAL_ADC_Start_DMA+0x178>
 8003704:	4b25      	ldr	r3, [pc, #148]	; (800379c <HAL_ADC_Start_DMA+0x204>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a27      	ldr	r2, [pc, #156]	; (80037b4 <HAL_ADC_Start_DMA+0x21c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d136      	bne.n	8003788 <HAL_ADC_Start_DMA+0x1f0>
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <HAL_ADC_Start_DMA+0x204>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	2b00      	cmp	r3, #0
 8003724:	d130      	bne.n	8003788 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d129      	bne.n	8003788 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	e020      	b.n	8003788 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_ADC_Start_DMA+0x214>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d11b      	bne.n	8003788 <HAL_ADC_Start_DMA+0x1f0>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d114      	bne.n	8003788 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800376c:	609a      	str	r2, [r3, #8]
 800376e:	e00b      	b.n	8003788 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	f043 0210 	orr.w	r2, r3, #16
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003780:	f043 0201 	orr.w	r2, r3, #1
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000208 	.word	0x20000208
 8003798:	431bde83 	.word	0x431bde83
 800379c:	40012300 	.word	0x40012300
 80037a0:	08003c31 	.word	0x08003c31
 80037a4:	08003ceb 	.word	0x08003ceb
 80037a8:	08003d07 	.word	0x08003d07
 80037ac:	40012000 	.word	0x40012000
 80037b0:	40012100 	.word	0x40012100
 80037b4:	40012200 	.word	0x40012200

080037b8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x1c>
 800380c:	2302      	movs	r3, #2
 800380e:	e105      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x228>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b09      	cmp	r3, #9
 800381e:	d925      	bls.n	800386c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68d9      	ldr	r1, [r3, #12]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	3b1e      	subs	r3, #30
 8003836:	2207      	movs	r2, #7
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43da      	mvns	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	400a      	ands	r2, r1
 8003844:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68d9      	ldr	r1, [r3, #12]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	4618      	mov	r0, r3
 8003858:	4603      	mov	r3, r0
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4403      	add	r3, r0
 800385e:	3b1e      	subs	r3, #30
 8003860:	409a      	lsls	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	e022      	b.n	80038b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6919      	ldr	r1, [r3, #16]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	2207      	movs	r2, #7
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	400a      	ands	r2, r1
 800388e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6919      	ldr	r1, [r3, #16]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	4618      	mov	r0, r3
 80038a2:	4603      	mov	r3, r0
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4403      	add	r3, r0
 80038a8:	409a      	lsls	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b06      	cmp	r3, #6
 80038b8:	d824      	bhi.n	8003904 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	3b05      	subs	r3, #5
 80038cc:	221f      	movs	r2, #31
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43da      	mvns	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	400a      	ands	r2, r1
 80038da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	4618      	mov	r0, r3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	3b05      	subs	r3, #5
 80038f6:	fa00 f203 	lsl.w	r2, r0, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	635a      	str	r2, [r3, #52]	; 0x34
 8003902:	e04c      	b.n	800399e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b0c      	cmp	r3, #12
 800390a:	d824      	bhi.n	8003956 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	3b23      	subs	r3, #35	; 0x23
 800391e:	221f      	movs	r2, #31
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43da      	mvns	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	400a      	ands	r2, r1
 800392c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	b29b      	uxth	r3, r3
 800393a:	4618      	mov	r0, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	3b23      	subs	r3, #35	; 0x23
 8003948:	fa00 f203 	lsl.w	r2, r0, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
 8003954:	e023      	b.n	800399e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	3b41      	subs	r3, #65	; 0x41
 8003968:	221f      	movs	r2, #31
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	43da      	mvns	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	400a      	ands	r2, r1
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	b29b      	uxth	r3, r3
 8003984:	4618      	mov	r0, r3
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	3b41      	subs	r3, #65	; 0x41
 8003992:	fa00 f203 	lsl.w	r2, r0, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800399e:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <HAL_ADC_ConfigChannel+0x234>)
 80039a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a21      	ldr	r2, [pc, #132]	; (8003a2c <HAL_ADC_ConfigChannel+0x238>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d109      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x1cc>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b12      	cmp	r3, #18
 80039b2:	d105      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <HAL_ADC_ConfigChannel+0x238>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d123      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x21e>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d003      	beq.n	80039da <HAL_ADC_ConfigChannel+0x1e6>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b11      	cmp	r3, #17
 80039d8:	d11b      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d111      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <HAL_ADC_ConfigChannel+0x23c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a10      	ldr	r2, [pc, #64]	; (8003a34 <HAL_ADC_ConfigChannel+0x240>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	0c9a      	lsrs	r2, r3, #18
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a04:	e002      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f9      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40012300 	.word	0x40012300
 8003a2c:	40012000 	.word	0x40012000
 8003a30:	20000208 	.word	0x20000208
 8003a34:	431bde83 	.word	0x431bde83

08003a38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a40:	4b79      	ldr	r3, [pc, #484]	; (8003c28 <ADC_Init+0x1f0>)
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	021a      	lsls	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6899      	ldr	r1, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	4a58      	ldr	r2, [pc, #352]	; (8003c2c <ADC_Init+0x1f4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d022      	beq.n	8003b16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ade:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6899      	ldr	r1, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	e00f      	b.n	8003b36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b34:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0202 	bic.w	r2, r2, #2
 8003b44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6899      	ldr	r1, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7e1b      	ldrb	r3, [r3, #24]
 8003b50:	005a      	lsls	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01b      	beq.n	8003b9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b72:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	035a      	lsls	r2, r3, #13
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	e007      	b.n	8003bac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003baa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	051a      	lsls	r2, r3, #20
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6899      	ldr	r1, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bee:	025a      	lsls	r2, r3, #9
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6899      	ldr	r1, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	029a      	lsls	r2, r3, #10
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	40012300 	.word	0x40012300
 8003c2c:	0f000001 	.word	0x0f000001

08003c30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d13c      	bne.n	8003cc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d12b      	bne.n	8003cbc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d127      	bne.n	8003cbc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d006      	beq.n	8003c88 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d119      	bne.n	8003cbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0220 	bic.w	r2, r2, #32
 8003c96:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f043 0201 	orr.w	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff fd7b 	bl	80037b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cc2:	e00e      	b.n	8003ce2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff fd85 	bl	80037e0 <HAL_ADC_ErrorCallback>
}
 8003cd6:	e004      	b.n	8003ce2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
}
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7ff fd67 	bl	80037cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2240      	movs	r2, #64	; 0x40
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	f043 0204 	orr.w	r2, r3, #4
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff fd5a 	bl	80037e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <__NVIC_SetPriorityGrouping+0x44>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d50:	4013      	ands	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d66:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <__NVIC_SetPriorityGrouping+0x44>)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	60d3      	str	r3, [r2, #12]
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d80:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <__NVIC_GetPriorityGrouping+0x18>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	0a1b      	lsrs	r3, r3, #8
 8003d86:	f003 0307 	and.w	r3, r3, #7
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	db0b      	blt.n	8003dc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	f003 021f 	and.w	r2, r3, #31
 8003db0:	4907      	ldr	r1, [pc, #28]	; (8003dd0 <__NVIC_EnableIRQ+0x38>)
 8003db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	2001      	movs	r0, #1
 8003dba:	fa00 f202 	lsl.w	r2, r0, r2
 8003dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	e000e100 	.word	0xe000e100

08003dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	db0a      	blt.n	8003dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	490c      	ldr	r1, [pc, #48]	; (8003e20 <__NVIC_SetPriority+0x4c>)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	0112      	lsls	r2, r2, #4
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	440b      	add	r3, r1
 8003df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dfc:	e00a      	b.n	8003e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4908      	ldr	r1, [pc, #32]	; (8003e24 <__NVIC_SetPriority+0x50>)
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	3b04      	subs	r3, #4
 8003e0c:	0112      	lsls	r2, r2, #4
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	440b      	add	r3, r1
 8003e12:	761a      	strb	r2, [r3, #24]
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	e000e100 	.word	0xe000e100
 8003e24:	e000ed00 	.word	0xe000ed00

08003e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	; 0x24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f1c3 0307 	rsb	r3, r3, #7
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	bf28      	it	cs
 8003e46:	2304      	movcs	r3, #4
 8003e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d902      	bls.n	8003e58 <NVIC_EncodePriority+0x30>
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3b03      	subs	r3, #3
 8003e56:	e000      	b.n	8003e5a <NVIC_EncodePriority+0x32>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43da      	mvns	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e70:	f04f 31ff 	mov.w	r1, #4294967295
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7a:	43d9      	mvns	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e80:	4313      	orrs	r3, r2
         );
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3724      	adds	r7, #36	; 0x24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
	...

08003e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ea0:	d301      	bcc.n	8003ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e00f      	b.n	8003ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <SysTick_Config+0x40>)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eae:	210f      	movs	r1, #15
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb4:	f7ff ff8e 	bl	8003dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <SysTick_Config+0x40>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ebe:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <SysTick_Config+0x40>)
 8003ec0:	2207      	movs	r2, #7
 8003ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	e000e010 	.word	0xe000e010

08003ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff ff29 	bl	8003d34 <__NVIC_SetPriorityGrouping>
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b086      	sub	sp, #24
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003efc:	f7ff ff3e 	bl	8003d7c <__NVIC_GetPriorityGrouping>
 8003f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	6978      	ldr	r0, [r7, #20]
 8003f08:	f7ff ff8e 	bl	8003e28 <NVIC_EncodePriority>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f12:	4611      	mov	r1, r2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff5d 	bl	8003dd4 <__NVIC_SetPriority>
}
 8003f1a:	bf00      	nop
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	4603      	mov	r3, r0
 8003f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff ff31 	bl	8003d98 <__NVIC_EnableIRQ>
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff ffa2 	bl	8003e90 <SysTick_Config>
 8003f4c:	4603      	mov	r3, r0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f64:	f7ff faa4 	bl	80034b0 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e099      	b.n	80040a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0201 	bic.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f94:	e00f      	b.n	8003fb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f96:	f7ff fa8b 	bl	80034b0 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b05      	cmp	r3, #5
 8003fa2:	d908      	bls.n	8003fb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2203      	movs	r2, #3
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e078      	b.n	80040a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e8      	bne.n	8003f96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4b38      	ldr	r3, [pc, #224]	; (80040b0 <HAL_DMA_Init+0x158>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	2b04      	cmp	r3, #4
 800400e:	d107      	bne.n	8004020 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	4313      	orrs	r3, r2
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f023 0307 	bic.w	r3, r3, #7
 8004036:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	2b04      	cmp	r3, #4
 8004048:	d117      	bne.n	800407a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00e      	beq.n	800407a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fb01 	bl	8004664 <DMA_CheckFifoParam>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2240      	movs	r2, #64	; 0x40
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004076:	2301      	movs	r3, #1
 8004078:	e016      	b.n	80040a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fab8 	bl	80045f8 <DMA_CalcBaseAndBitshift>
 8004088:	4603      	mov	r3, r0
 800408a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004090:	223f      	movs	r2, #63	; 0x3f
 8004092:	409a      	lsls	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	f010803f 	.word	0xf010803f

080040b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_DMA_Start_IT+0x26>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e040      	b.n	800415c <HAL_DMA_Start_IT+0xa8>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d12f      	bne.n	800414e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fa4a 	bl	800459c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410c:	223f      	movs	r2, #63	; 0x3f
 800410e:	409a      	lsls	r2, r3
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0216 	orr.w	r2, r2, #22
 8004122:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0208 	orr.w	r2, r2, #8
 800413a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	e005      	b.n	800415a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004156:	2302      	movs	r3, #2
 8004158:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800415a:	7dfb      	ldrb	r3, [r7, #23]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004170:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004172:	f7ff f99d 	bl	80034b0 <HAL_GetTick>
 8004176:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d008      	beq.n	8004196 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2280      	movs	r2, #128	; 0x80
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e052      	b.n	800423c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0216 	bic.w	r2, r2, #22
 80041a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <HAL_DMA_Abort+0x62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0208 	bic.w	r2, r2, #8
 80041d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0201 	bic.w	r2, r2, #1
 80041e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041e6:	e013      	b.n	8004210 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041e8:	f7ff f962 	bl	80034b0 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	d90c      	bls.n	8004210 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2203      	movs	r2, #3
 8004200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e015      	b.n	800423c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e4      	bne.n	80041e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004222:	223f      	movs	r2, #63	; 0x3f
 8004224:	409a      	lsls	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d004      	beq.n	8004262 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2280      	movs	r2, #128	; 0x80
 800425c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e00c      	b.n	800427c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2205      	movs	r2, #5
 8004266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004294:	4b8e      	ldr	r3, [pc, #568]	; (80044d0 <HAL_DMA_IRQHandler+0x248>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a8e      	ldr	r2, [pc, #568]	; (80044d4 <HAL_DMA_IRQHandler+0x24c>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	0a9b      	lsrs	r3, r3, #10
 80042a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b2:	2208      	movs	r2, #8
 80042b4:	409a      	lsls	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01a      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d013      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0204 	bic.w	r2, r2, #4
 80042da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	2208      	movs	r2, #8
 80042e2:	409a      	lsls	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ec:	f043 0201 	orr.w	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f8:	2201      	movs	r2, #1
 80042fa:	409a      	lsls	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4013      	ands	r3, r2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d012      	beq.n	800432a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004316:	2201      	movs	r2, #1
 8004318:	409a      	lsls	r2, r3
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f043 0202 	orr.w	r2, r3, #2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432e:	2204      	movs	r2, #4
 8004330:	409a      	lsls	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d012      	beq.n	8004360 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	2204      	movs	r2, #4
 800434e:	409a      	lsls	r2, r3
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	f043 0204 	orr.w	r2, r3, #4
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004364:	2210      	movs	r2, #16
 8004366:	409a      	lsls	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d043      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d03c      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004382:	2210      	movs	r2, #16
 8004384:	409a      	lsls	r2, r3
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d018      	beq.n	80043ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d108      	bne.n	80043b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d024      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	4798      	blx	r3
 80043b6:	e01f      	b.n	80043f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01b      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	4798      	blx	r3
 80043c8:	e016      	b.n	80043f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d107      	bne.n	80043e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0208 	bic.w	r2, r2, #8
 80043e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	2220      	movs	r2, #32
 80043fe:	409a      	lsls	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 808f 	beq.w	8004528 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 8087 	beq.w	8004528 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	2220      	movs	r2, #32
 8004420:	409a      	lsls	r2, r3
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b05      	cmp	r3, #5
 8004430:	d136      	bne.n	80044a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0216 	bic.w	r2, r2, #22
 8004440:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004450:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d103      	bne.n	8004462 <HAL_DMA_IRQHandler+0x1da>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0208 	bic.w	r2, r2, #8
 8004470:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004476:	223f      	movs	r2, #63	; 0x3f
 8004478:	409a      	lsls	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004492:	2b00      	cmp	r3, #0
 8004494:	d07e      	beq.n	8004594 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	4798      	blx	r3
        }
        return;
 800449e:	e079      	b.n	8004594 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01d      	beq.n	80044ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10d      	bne.n	80044d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d031      	beq.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	4798      	blx	r3
 80044cc:	e02c      	b.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
 80044ce:	bf00      	nop
 80044d0:	20000208 	.word	0x20000208
 80044d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d023      	beq.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
 80044e8:	e01e      	b.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10f      	bne.n	8004518 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0210 	bic.w	r2, r2, #16
 8004506:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	2b00      	cmp	r3, #0
 800452e:	d032      	beq.n	8004596 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d022      	beq.n	8004582 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2205      	movs	r2, #5
 8004540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	3301      	adds	r3, #1
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	429a      	cmp	r2, r3
 800455e:	d307      	bcc.n	8004570 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f2      	bne.n	8004554 <HAL_DMA_IRQHandler+0x2cc>
 800456e:	e000      	b.n	8004572 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004570:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
 8004592:	e000      	b.n	8004596 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004594:	bf00      	nop
    }
  }
}
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	d108      	bne.n	80045dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045da:	e007      	b.n	80045ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]
}
 80045ec:	bf00      	nop
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	3b10      	subs	r3, #16
 8004608:	4a14      	ldr	r2, [pc, #80]	; (800465c <DMA_CalcBaseAndBitshift+0x64>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004612:	4a13      	ldr	r2, [pc, #76]	; (8004660 <DMA_CalcBaseAndBitshift+0x68>)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b03      	cmp	r3, #3
 8004624:	d909      	bls.n	800463a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800462e:	f023 0303 	bic.w	r3, r3, #3
 8004632:	1d1a      	adds	r2, r3, #4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	659a      	str	r2, [r3, #88]	; 0x58
 8004638:	e007      	b.n	800464a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	aaaaaaab 	.word	0xaaaaaaab
 8004660:	0800b008 	.word	0x0800b008

08004664 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d11f      	bne.n	80046be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d856      	bhi.n	8004732 <DMA_CheckFifoParam+0xce>
 8004684:	a201      	add	r2, pc, #4	; (adr r2, 800468c <DMA_CheckFifoParam+0x28>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	0800469d 	.word	0x0800469d
 8004690:	080046af 	.word	0x080046af
 8004694:	0800469d 	.word	0x0800469d
 8004698:	08004733 	.word	0x08004733
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d046      	beq.n	8004736 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ac:	e043      	b.n	8004736 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046b6:	d140      	bne.n	800473a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046bc:	e03d      	b.n	800473a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c6:	d121      	bne.n	800470c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d837      	bhi.n	800473e <DMA_CheckFifoParam+0xda>
 80046ce:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <DMA_CheckFifoParam+0x70>)
 80046d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d4:	080046e5 	.word	0x080046e5
 80046d8:	080046eb 	.word	0x080046eb
 80046dc:	080046e5 	.word	0x080046e5
 80046e0:	080046fd 	.word	0x080046fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
      break;
 80046e8:	e030      	b.n	800474c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d025      	beq.n	8004742 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046fa:	e022      	b.n	8004742 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004704:	d11f      	bne.n	8004746 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800470a:	e01c      	b.n	8004746 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d903      	bls.n	800471a <DMA_CheckFifoParam+0xb6>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d003      	beq.n	8004720 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004718:	e018      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
      break;
 800471e:	e015      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00e      	beq.n	800474a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
      break;
 8004730:	e00b      	b.n	800474a <DMA_CheckFifoParam+0xe6>
      break;
 8004732:	bf00      	nop
 8004734:	e00a      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      break;
 8004736:	bf00      	nop
 8004738:	e008      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      break;
 800473a:	bf00      	nop
 800473c:	e006      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      break;
 800473e:	bf00      	nop
 8004740:	e004      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      break;
 8004742:	bf00      	nop
 8004744:	e002      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      break;   
 8004746:	bf00      	nop
 8004748:	e000      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      break;
 800474a:	bf00      	nop
    }
  } 
  
  return status; 
 800474c:	7bfb      	ldrb	r3, [r7, #15]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop

0800475c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800476e:	2300      	movs	r3, #0
 8004770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004772:	2300      	movs	r3, #0
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	e16b      	b.n	8004a50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004778:	2201      	movs	r2, #1
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4013      	ands	r3, r2
 800478a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	429a      	cmp	r2, r3
 8004792:	f040 815a 	bne.w	8004a4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d005      	beq.n	80047ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d130      	bne.n	8004810 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	2203      	movs	r2, #3
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43db      	mvns	r3, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4013      	ands	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047e4:	2201      	movs	r2, #1
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f003 0201 	and.w	r2, r3, #1
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4313      	orrs	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b03      	cmp	r3, #3
 800481a:	d017      	beq.n	800484c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	2203      	movs	r2, #3
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d123      	bne.n	80048a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	08da      	lsrs	r2, r3, #3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3208      	adds	r2, #8
 8004860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	220f      	movs	r2, #15
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4013      	ands	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	08da      	lsrs	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3208      	adds	r2, #8
 800489a:	69b9      	ldr	r1, [r7, #24]
 800489c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	2203      	movs	r2, #3
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4013      	ands	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 0203 	and.w	r2, r3, #3
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80b4 	beq.w	8004a4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	4b60      	ldr	r3, [pc, #384]	; (8004a68 <HAL_GPIO_Init+0x30c>)
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	4a5f      	ldr	r2, [pc, #380]	; (8004a68 <HAL_GPIO_Init+0x30c>)
 80048ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048f0:	6453      	str	r3, [r2, #68]	; 0x44
 80048f2:	4b5d      	ldr	r3, [pc, #372]	; (8004a68 <HAL_GPIO_Init+0x30c>)
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048fe:	4a5b      	ldr	r2, [pc, #364]	; (8004a6c <HAL_GPIO_Init+0x310>)
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	089b      	lsrs	r3, r3, #2
 8004904:	3302      	adds	r3, #2
 8004906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	220f      	movs	r2, #15
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43db      	mvns	r3, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4013      	ands	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a52      	ldr	r2, [pc, #328]	; (8004a70 <HAL_GPIO_Init+0x314>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d02b      	beq.n	8004982 <HAL_GPIO_Init+0x226>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a51      	ldr	r2, [pc, #324]	; (8004a74 <HAL_GPIO_Init+0x318>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d025      	beq.n	800497e <HAL_GPIO_Init+0x222>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a50      	ldr	r2, [pc, #320]	; (8004a78 <HAL_GPIO_Init+0x31c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d01f      	beq.n	800497a <HAL_GPIO_Init+0x21e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a4f      	ldr	r2, [pc, #316]	; (8004a7c <HAL_GPIO_Init+0x320>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d019      	beq.n	8004976 <HAL_GPIO_Init+0x21a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a4e      	ldr	r2, [pc, #312]	; (8004a80 <HAL_GPIO_Init+0x324>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_GPIO_Init+0x216>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a4d      	ldr	r2, [pc, #308]	; (8004a84 <HAL_GPIO_Init+0x328>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00d      	beq.n	800496e <HAL_GPIO_Init+0x212>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a4c      	ldr	r2, [pc, #304]	; (8004a88 <HAL_GPIO_Init+0x32c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d007      	beq.n	800496a <HAL_GPIO_Init+0x20e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a4b      	ldr	r2, [pc, #300]	; (8004a8c <HAL_GPIO_Init+0x330>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d101      	bne.n	8004966 <HAL_GPIO_Init+0x20a>
 8004962:	2307      	movs	r3, #7
 8004964:	e00e      	b.n	8004984 <HAL_GPIO_Init+0x228>
 8004966:	2308      	movs	r3, #8
 8004968:	e00c      	b.n	8004984 <HAL_GPIO_Init+0x228>
 800496a:	2306      	movs	r3, #6
 800496c:	e00a      	b.n	8004984 <HAL_GPIO_Init+0x228>
 800496e:	2305      	movs	r3, #5
 8004970:	e008      	b.n	8004984 <HAL_GPIO_Init+0x228>
 8004972:	2304      	movs	r3, #4
 8004974:	e006      	b.n	8004984 <HAL_GPIO_Init+0x228>
 8004976:	2303      	movs	r3, #3
 8004978:	e004      	b.n	8004984 <HAL_GPIO_Init+0x228>
 800497a:	2302      	movs	r3, #2
 800497c:	e002      	b.n	8004984 <HAL_GPIO_Init+0x228>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <HAL_GPIO_Init+0x228>
 8004982:	2300      	movs	r3, #0
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	f002 0203 	and.w	r2, r2, #3
 800498a:	0092      	lsls	r2, r2, #2
 800498c:	4093      	lsls	r3, r2
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004994:	4935      	ldr	r1, [pc, #212]	; (8004a6c <HAL_GPIO_Init+0x310>)
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	089b      	lsrs	r3, r3, #2
 800499a:	3302      	adds	r3, #2
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049a2:	4b3b      	ldr	r3, [pc, #236]	; (8004a90 <HAL_GPIO_Init+0x334>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049c6:	4a32      	ldr	r2, [pc, #200]	; (8004a90 <HAL_GPIO_Init+0x334>)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049cc:	4b30      	ldr	r3, [pc, #192]	; (8004a90 <HAL_GPIO_Init+0x334>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4013      	ands	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049f0:	4a27      	ldr	r2, [pc, #156]	; (8004a90 <HAL_GPIO_Init+0x334>)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049f6:	4b26      	ldr	r3, [pc, #152]	; (8004a90 <HAL_GPIO_Init+0x334>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a1a:	4a1d      	ldr	r2, [pc, #116]	; (8004a90 <HAL_GPIO_Init+0x334>)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a20:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <HAL_GPIO_Init+0x334>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a44:	4a12      	ldr	r2, [pc, #72]	; (8004a90 <HAL_GPIO_Init+0x334>)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b0f      	cmp	r3, #15
 8004a54:	f67f ae90 	bls.w	8004778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	3724      	adds	r7, #36	; 0x24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40013800 	.word	0x40013800
 8004a70:	40020000 	.word	0x40020000
 8004a74:	40020400 	.word	0x40020400
 8004a78:	40020800 	.word	0x40020800
 8004a7c:	40020c00 	.word	0x40020c00
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40021400 	.word	0x40021400
 8004a88:	40021800 	.word	0x40021800
 8004a8c:	40021c00 	.word	0x40021c00
 8004a90:	40013c00 	.word	0x40013c00

08004a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	807b      	strh	r3, [r7, #2]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aa4:	787b      	ldrb	r3, [r7, #1]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aaa:	887a      	ldrh	r2, [r7, #2]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ab0:	e003      	b.n	8004aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ab2:	887b      	ldrh	r3, [r7, #2]
 8004ab4:	041a      	lsls	r2, r3, #16
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	619a      	str	r2, [r3, #24]
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ad8:	887a      	ldrh	r2, [r7, #2]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4013      	ands	r3, r2
 8004ade:	041a      	lsls	r2, r3, #16
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	43d9      	mvns	r1, r3
 8004ae4:	887b      	ldrh	r3, [r7, #2]
 8004ae6:	400b      	ands	r3, r1
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	619a      	str	r2, [r3, #24]
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e12b      	b.n	8004d66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fc fe86 	bl	8001834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2224      	movs	r2, #36	; 0x24
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b60:	f000 fd80 	bl	8005664 <HAL_RCC_GetPCLK1Freq>
 8004b64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4a81      	ldr	r2, [pc, #516]	; (8004d70 <HAL_I2C_Init+0x274>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d807      	bhi.n	8004b80 <HAL_I2C_Init+0x84>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4a80      	ldr	r2, [pc, #512]	; (8004d74 <HAL_I2C_Init+0x278>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	bf94      	ite	ls
 8004b78:	2301      	movls	r3, #1
 8004b7a:	2300      	movhi	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e006      	b.n	8004b8e <HAL_I2C_Init+0x92>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a7d      	ldr	r2, [pc, #500]	; (8004d78 <HAL_I2C_Init+0x27c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	bf94      	ite	ls
 8004b88:	2301      	movls	r3, #1
 8004b8a:	2300      	movhi	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e0e7      	b.n	8004d66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4a78      	ldr	r2, [pc, #480]	; (8004d7c <HAL_I2C_Init+0x280>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	0c9b      	lsrs	r3, r3, #18
 8004ba0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	4a6a      	ldr	r2, [pc, #424]	; (8004d70 <HAL_I2C_Init+0x274>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d802      	bhi.n	8004bd0 <HAL_I2C_Init+0xd4>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	e009      	b.n	8004be4 <HAL_I2C_Init+0xe8>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	4a69      	ldr	r2, [pc, #420]	; (8004d80 <HAL_I2C_Init+0x284>)
 8004bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004be0:	099b      	lsrs	r3, r3, #6
 8004be2:	3301      	adds	r3, #1
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	430b      	orrs	r3, r1
 8004bea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	495c      	ldr	r1, [pc, #368]	; (8004d70 <HAL_I2C_Init+0x274>)
 8004c00:	428b      	cmp	r3, r1
 8004c02:	d819      	bhi.n	8004c38 <HAL_I2C_Init+0x13c>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	1e59      	subs	r1, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c12:	1c59      	adds	r1, r3, #1
 8004c14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c18:	400b      	ands	r3, r1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_I2C_Init+0x138>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1e59      	subs	r1, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c32:	e051      	b.n	8004cd8 <HAL_I2C_Init+0x1dc>
 8004c34:	2304      	movs	r3, #4
 8004c36:	e04f      	b.n	8004cd8 <HAL_I2C_Init+0x1dc>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d111      	bne.n	8004c64 <HAL_I2C_Init+0x168>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	1e58      	subs	r0, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6859      	ldr	r1, [r3, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	440b      	add	r3, r1
 8004c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c52:	3301      	adds	r3, #1
 8004c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e012      	b.n	8004c8a <HAL_I2C_Init+0x18e>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	1e58      	subs	r0, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6859      	ldr	r1, [r3, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	0099      	lsls	r1, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf0c      	ite	eq
 8004c84:	2301      	moveq	r3, #1
 8004c86:	2300      	movne	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_I2C_Init+0x196>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e022      	b.n	8004cd8 <HAL_I2C_Init+0x1dc>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10e      	bne.n	8004cb8 <HAL_I2C_Init+0x1bc>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	1e58      	subs	r0, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6859      	ldr	r1, [r3, #4]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	440b      	add	r3, r1
 8004ca8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cac:	3301      	adds	r3, #1
 8004cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb6:	e00f      	b.n	8004cd8 <HAL_I2C_Init+0x1dc>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	1e58      	subs	r0, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6859      	ldr	r1, [r3, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	0099      	lsls	r1, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	6809      	ldr	r1, [r1, #0]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69da      	ldr	r2, [r3, #28]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6911      	ldr	r1, [r2, #16]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68d2      	ldr	r2, [r2, #12]
 8004d12:	4311      	orrs	r1, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695a      	ldr	r2, [r3, #20]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	000186a0 	.word	0x000186a0
 8004d74:	001e847f 	.word	0x001e847f
 8004d78:	003d08ff 	.word	0x003d08ff
 8004d7c:	431bde83 	.word	0x431bde83
 8004d80:	10624dd3 	.word	0x10624dd3

08004d84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e267      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d075      	beq.n	8004e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004da2:	4b88      	ldr	r3, [pc, #544]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d00c      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dae:	4b85      	ldr	r3, [pc, #532]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d112      	bne.n	8004de0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dba:	4b82      	ldr	r3, [pc, #520]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dc6:	d10b      	bne.n	8004de0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc8:	4b7e      	ldr	r3, [pc, #504]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d05b      	beq.n	8004e8c <HAL_RCC_OscConfig+0x108>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d157      	bne.n	8004e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e242      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de8:	d106      	bne.n	8004df8 <HAL_RCC_OscConfig+0x74>
 8004dea:	4b76      	ldr	r3, [pc, #472]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a75      	ldr	r2, [pc, #468]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	e01d      	b.n	8004e34 <HAL_RCC_OscConfig+0xb0>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e00:	d10c      	bne.n	8004e1c <HAL_RCC_OscConfig+0x98>
 8004e02:	4b70      	ldr	r3, [pc, #448]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a6f      	ldr	r2, [pc, #444]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	4b6d      	ldr	r3, [pc, #436]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a6c      	ldr	r2, [pc, #432]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	e00b      	b.n	8004e34 <HAL_RCC_OscConfig+0xb0>
 8004e1c:	4b69      	ldr	r3, [pc, #420]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a68      	ldr	r2, [pc, #416]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	4b66      	ldr	r3, [pc, #408]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a65      	ldr	r2, [pc, #404]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d013      	beq.n	8004e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fe fb38 	bl	80034b0 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e44:	f7fe fb34 	bl	80034b0 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	; 0x64
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e207      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e56:	4b5b      	ldr	r3, [pc, #364]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0xc0>
 8004e62:	e014      	b.n	8004e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fe fb24 	bl	80034b0 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e6c:	f7fe fb20 	bl	80034b0 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	; 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e1f3      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e7e:	4b51      	ldr	r3, [pc, #324]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0xe8>
 8004e8a:	e000      	b.n	8004e8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d063      	beq.n	8004f62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e9a:	4b4a      	ldr	r3, [pc, #296]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 030c 	and.w	r3, r3, #12
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00b      	beq.n	8004ebe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ea6:	4b47      	ldr	r3, [pc, #284]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d11c      	bne.n	8004eec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eb2:	4b44      	ldr	r3, [pc, #272]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d116      	bne.n	8004eec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ebe:	4b41      	ldr	r3, [pc, #260]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d005      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x152>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d001      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e1c7      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed6:	4b3b      	ldr	r3, [pc, #236]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	4937      	ldr	r1, [pc, #220]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eea:	e03a      	b.n	8004f62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d020      	beq.n	8004f36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ef4:	4b34      	ldr	r3, [pc, #208]	; (8004fc8 <HAL_RCC_OscConfig+0x244>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7fe fad9 	bl	80034b0 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f02:	f7fe fad5 	bl	80034b0 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e1a8      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f14:	4b2b      	ldr	r3, [pc, #172]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0f0      	beq.n	8004f02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f20:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	4925      	ldr	r1, [pc, #148]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	600b      	str	r3, [r1, #0]
 8004f34:	e015      	b.n	8004f62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f36:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <HAL_RCC_OscConfig+0x244>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3c:	f7fe fab8 	bl	80034b0 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f44:	f7fe fab4 	bl	80034b0 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e187      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f56:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d036      	beq.n	8004fdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f76:	4b15      	ldr	r3, [pc, #84]	; (8004fcc <HAL_RCC_OscConfig+0x248>)
 8004f78:	2201      	movs	r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7c:	f7fe fa98 	bl	80034b0 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f84:	f7fe fa94 	bl	80034b0 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e167      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f96:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <HAL_RCC_OscConfig+0x240>)
 8004f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCC_OscConfig+0x200>
 8004fa2:	e01b      	b.n	8004fdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fa4:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <HAL_RCC_OscConfig+0x248>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004faa:	f7fe fa81 	bl	80034b0 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb0:	e00e      	b.n	8004fd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fb2:	f7fe fa7d 	bl	80034b0 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d907      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e150      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	42470000 	.word	0x42470000
 8004fcc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd0:	4b88      	ldr	r3, [pc, #544]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8004fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1ea      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8097 	beq.w	8005118 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fea:	2300      	movs	r3, #0
 8004fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fee:	4b81      	ldr	r3, [pc, #516]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10f      	bne.n	800501a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	4b7d      	ldr	r3, [pc, #500]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	4a7c      	ldr	r2, [pc, #496]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8005004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005008:	6413      	str	r3, [r2, #64]	; 0x40
 800500a:	4b7a      	ldr	r3, [pc, #488]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005012:	60bb      	str	r3, [r7, #8]
 8005014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005016:	2301      	movs	r3, #1
 8005018:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800501a:	4b77      	ldr	r3, [pc, #476]	; (80051f8 <HAL_RCC_OscConfig+0x474>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	2b00      	cmp	r3, #0
 8005024:	d118      	bne.n	8005058 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005026:	4b74      	ldr	r3, [pc, #464]	; (80051f8 <HAL_RCC_OscConfig+0x474>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a73      	ldr	r2, [pc, #460]	; (80051f8 <HAL_RCC_OscConfig+0x474>)
 800502c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005032:	f7fe fa3d 	bl	80034b0 <HAL_GetTick>
 8005036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005038:	e008      	b.n	800504c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800503a:	f7fe fa39 	bl	80034b0 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e10c      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504c:	4b6a      	ldr	r3, [pc, #424]	; (80051f8 <HAL_RCC_OscConfig+0x474>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0f0      	beq.n	800503a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d106      	bne.n	800506e <HAL_RCC_OscConfig+0x2ea>
 8005060:	4b64      	ldr	r3, [pc, #400]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	4a63      	ldr	r2, [pc, #396]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	6713      	str	r3, [r2, #112]	; 0x70
 800506c:	e01c      	b.n	80050a8 <HAL_RCC_OscConfig+0x324>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2b05      	cmp	r3, #5
 8005074:	d10c      	bne.n	8005090 <HAL_RCC_OscConfig+0x30c>
 8005076:	4b5f      	ldr	r3, [pc, #380]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	4a5e      	ldr	r2, [pc, #376]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 800507c:	f043 0304 	orr.w	r3, r3, #4
 8005080:	6713      	str	r3, [r2, #112]	; 0x70
 8005082:	4b5c      	ldr	r3, [pc, #368]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	4a5b      	ldr	r2, [pc, #364]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	6713      	str	r3, [r2, #112]	; 0x70
 800508e:	e00b      	b.n	80050a8 <HAL_RCC_OscConfig+0x324>
 8005090:	4b58      	ldr	r3, [pc, #352]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	4a57      	ldr	r2, [pc, #348]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8005096:	f023 0301 	bic.w	r3, r3, #1
 800509a:	6713      	str	r3, [r2, #112]	; 0x70
 800509c:	4b55      	ldr	r3, [pc, #340]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	4a54      	ldr	r2, [pc, #336]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 80050a2:	f023 0304 	bic.w	r3, r3, #4
 80050a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d015      	beq.n	80050dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b0:	f7fe f9fe 	bl	80034b0 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b6:	e00a      	b.n	80050ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b8:	f7fe f9fa 	bl	80034b0 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e0cb      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ce:	4b49      	ldr	r3, [pc, #292]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0ee      	beq.n	80050b8 <HAL_RCC_OscConfig+0x334>
 80050da:	e014      	b.n	8005106 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050dc:	f7fe f9e8 	bl	80034b0 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e2:	e00a      	b.n	80050fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e4:	f7fe f9e4 	bl	80034b0 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e0b5      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050fa:	4b3e      	ldr	r3, [pc, #248]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1ee      	bne.n	80050e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005106:	7dfb      	ldrb	r3, [r7, #23]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d105      	bne.n	8005118 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800510c:	4b39      	ldr	r3, [pc, #228]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	4a38      	ldr	r2, [pc, #224]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8005112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005116:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80a1 	beq.w	8005264 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005122:	4b34      	ldr	r3, [pc, #208]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	2b08      	cmp	r3, #8
 800512c:	d05c      	beq.n	80051e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d141      	bne.n	80051ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005136:	4b31      	ldr	r3, [pc, #196]	; (80051fc <HAL_RCC_OscConfig+0x478>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fe f9b8 	bl	80034b0 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005144:	f7fe f9b4 	bl	80034b0 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e087      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005156:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69da      	ldr	r2, [r3, #28]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	019b      	lsls	r3, r3, #6
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	085b      	lsrs	r3, r3, #1
 800517a:	3b01      	subs	r3, #1
 800517c:	041b      	lsls	r3, r3, #16
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	061b      	lsls	r3, r3, #24
 8005186:	491b      	ldr	r1, [pc, #108]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 8005188:	4313      	orrs	r3, r2
 800518a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800518c:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <HAL_RCC_OscConfig+0x478>)
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005192:	f7fe f98d 	bl	80034b0 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519a:	f7fe f989 	bl	80034b0 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e05c      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ac:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x416>
 80051b8:	e054      	b.n	8005264 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ba:	4b10      	ldr	r3, [pc, #64]	; (80051fc <HAL_RCC_OscConfig+0x478>)
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c0:	f7fe f976 	bl	80034b0 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c8:	f7fe f972 	bl	80034b0 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e045      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <HAL_RCC_OscConfig+0x470>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x444>
 80051e6:	e03d      	b.n	8005264 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d107      	bne.n	8005200 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e038      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40007000 	.word	0x40007000
 80051fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005200:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <HAL_RCC_OscConfig+0x4ec>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d028      	beq.n	8005260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005218:	429a      	cmp	r2, r3
 800521a:	d121      	bne.n	8005260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005226:	429a      	cmp	r2, r3
 8005228:	d11a      	bne.n	8005260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005230:	4013      	ands	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005236:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005238:	4293      	cmp	r3, r2
 800523a:	d111      	bne.n	8005260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	3b01      	subs	r3, #1
 800524a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800524c:	429a      	cmp	r2, r3
 800524e:	d107      	bne.n	8005260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800525c:	429a      	cmp	r2, r3
 800525e:	d001      	beq.n	8005264 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40023800 	.word	0x40023800

08005274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0cc      	b.n	8005422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005288:	4b68      	ldr	r3, [pc, #416]	; (800542c <HAL_RCC_ClockConfig+0x1b8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d90c      	bls.n	80052b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005296:	4b65      	ldr	r3, [pc, #404]	; (800542c <HAL_RCC_ClockConfig+0x1b8>)
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529e:	4b63      	ldr	r3, [pc, #396]	; (800542c <HAL_RCC_ClockConfig+0x1b8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d001      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0b8      	b.n	8005422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d020      	beq.n	80052fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052c8:	4b59      	ldr	r3, [pc, #356]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	4a58      	ldr	r2, [pc, #352]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052e0:	4b53      	ldr	r3, [pc, #332]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	4a52      	ldr	r2, [pc, #328]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ec:	4b50      	ldr	r3, [pc, #320]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	494d      	ldr	r1, [pc, #308]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d044      	beq.n	8005394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d107      	bne.n	8005322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005312:	4b47      	ldr	r3, [pc, #284]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d119      	bne.n	8005352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e07f      	b.n	8005422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d003      	beq.n	8005332 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800532e:	2b03      	cmp	r3, #3
 8005330:	d107      	bne.n	8005342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005332:	4b3f      	ldr	r3, [pc, #252]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d109      	bne.n	8005352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e06f      	b.n	8005422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005342:	4b3b      	ldr	r3, [pc, #236]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e067      	b.n	8005422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005352:	4b37      	ldr	r3, [pc, #220]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f023 0203 	bic.w	r2, r3, #3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	4934      	ldr	r1, [pc, #208]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 8005360:	4313      	orrs	r3, r2
 8005362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005364:	f7fe f8a4 	bl	80034b0 <HAL_GetTick>
 8005368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536a:	e00a      	b.n	8005382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800536c:	f7fe f8a0 	bl	80034b0 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	f241 3288 	movw	r2, #5000	; 0x1388
 800537a:	4293      	cmp	r3, r2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e04f      	b.n	8005422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005382:	4b2b      	ldr	r3, [pc, #172]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 020c 	and.w	r2, r3, #12
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	429a      	cmp	r2, r3
 8005392:	d1eb      	bne.n	800536c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005394:	4b25      	ldr	r3, [pc, #148]	; (800542c <HAL_RCC_ClockConfig+0x1b8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d20c      	bcs.n	80053bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b22      	ldr	r3, [pc, #136]	; (800542c <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b20      	ldr	r3, [pc, #128]	; (800542c <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e032      	b.n	8005422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053c8:	4b19      	ldr	r3, [pc, #100]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	4916      	ldr	r1, [pc, #88]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053e6:	4b12      	ldr	r3, [pc, #72]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	490e      	ldr	r1, [pc, #56]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053fa:	f000 f821 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 80053fe:	4602      	mov	r2, r0
 8005400:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	091b      	lsrs	r3, r3, #4
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	490a      	ldr	r1, [pc, #40]	; (8005434 <HAL_RCC_ClockConfig+0x1c0>)
 800540c:	5ccb      	ldrb	r3, [r1, r3]
 800540e:	fa22 f303 	lsr.w	r3, r2, r3
 8005412:	4a09      	ldr	r2, [pc, #36]	; (8005438 <HAL_RCC_ClockConfig+0x1c4>)
 8005414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005416:	4b09      	ldr	r3, [pc, #36]	; (800543c <HAL_RCC_ClockConfig+0x1c8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe f804 	bl	8003428 <HAL_InitTick>

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40023c00 	.word	0x40023c00
 8005430:	40023800 	.word	0x40023800
 8005434:	0800aff0 	.word	0x0800aff0
 8005438:	20000208 	.word	0x20000208
 800543c:	2000020c 	.word	0x2000020c

08005440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005444:	b094      	sub	sp, #80	; 0x50
 8005446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005458:	4b79      	ldr	r3, [pc, #484]	; (8005640 <HAL_RCC_GetSysClockFreq+0x200>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 030c 	and.w	r3, r3, #12
 8005460:	2b08      	cmp	r3, #8
 8005462:	d00d      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0x40>
 8005464:	2b08      	cmp	r3, #8
 8005466:	f200 80e1 	bhi.w	800562c <HAL_RCC_GetSysClockFreq+0x1ec>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <HAL_RCC_GetSysClockFreq+0x34>
 800546e:	2b04      	cmp	r3, #4
 8005470:	d003      	beq.n	800547a <HAL_RCC_GetSysClockFreq+0x3a>
 8005472:	e0db      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005474:	4b73      	ldr	r3, [pc, #460]	; (8005644 <HAL_RCC_GetSysClockFreq+0x204>)
 8005476:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005478:	e0db      	b.n	8005632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800547a:	4b73      	ldr	r3, [pc, #460]	; (8005648 <HAL_RCC_GetSysClockFreq+0x208>)
 800547c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800547e:	e0d8      	b.n	8005632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005480:	4b6f      	ldr	r3, [pc, #444]	; (8005640 <HAL_RCC_GetSysClockFreq+0x200>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005488:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800548a:	4b6d      	ldr	r3, [pc, #436]	; (8005640 <HAL_RCC_GetSysClockFreq+0x200>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d063      	beq.n	800555e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005496:	4b6a      	ldr	r3, [pc, #424]	; (8005640 <HAL_RCC_GetSysClockFreq+0x200>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	099b      	lsrs	r3, r3, #6
 800549c:	2200      	movs	r2, #0
 800549e:	63bb      	str	r3, [r7, #56]	; 0x38
 80054a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a8:	633b      	str	r3, [r7, #48]	; 0x30
 80054aa:	2300      	movs	r3, #0
 80054ac:	637b      	str	r3, [r7, #52]	; 0x34
 80054ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054b2:	4622      	mov	r2, r4
 80054b4:	462b      	mov	r3, r5
 80054b6:	f04f 0000 	mov.w	r0, #0
 80054ba:	f04f 0100 	mov.w	r1, #0
 80054be:	0159      	lsls	r1, r3, #5
 80054c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054c4:	0150      	lsls	r0, r2, #5
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4621      	mov	r1, r4
 80054cc:	1a51      	subs	r1, r2, r1
 80054ce:	6139      	str	r1, [r7, #16]
 80054d0:	4629      	mov	r1, r5
 80054d2:	eb63 0301 	sbc.w	r3, r3, r1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054e4:	4659      	mov	r1, fp
 80054e6:	018b      	lsls	r3, r1, #6
 80054e8:	4651      	mov	r1, sl
 80054ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054ee:	4651      	mov	r1, sl
 80054f0:	018a      	lsls	r2, r1, #6
 80054f2:	4651      	mov	r1, sl
 80054f4:	ebb2 0801 	subs.w	r8, r2, r1
 80054f8:	4659      	mov	r1, fp
 80054fa:	eb63 0901 	sbc.w	r9, r3, r1
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800550a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800550e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005512:	4690      	mov	r8, r2
 8005514:	4699      	mov	r9, r3
 8005516:	4623      	mov	r3, r4
 8005518:	eb18 0303 	adds.w	r3, r8, r3
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	462b      	mov	r3, r5
 8005520:	eb49 0303 	adc.w	r3, r9, r3
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005532:	4629      	mov	r1, r5
 8005534:	024b      	lsls	r3, r1, #9
 8005536:	4621      	mov	r1, r4
 8005538:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800553c:	4621      	mov	r1, r4
 800553e:	024a      	lsls	r2, r1, #9
 8005540:	4610      	mov	r0, r2
 8005542:	4619      	mov	r1, r3
 8005544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005546:	2200      	movs	r2, #0
 8005548:	62bb      	str	r3, [r7, #40]	; 0x28
 800554a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800554c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005550:	f7fb fa58 	bl	8000a04 <__aeabi_uldivmod>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4613      	mov	r3, r2
 800555a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800555c:	e058      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800555e:	4b38      	ldr	r3, [pc, #224]	; (8005640 <HAL_RCC_GetSysClockFreq+0x200>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	099b      	lsrs	r3, r3, #6
 8005564:	2200      	movs	r2, #0
 8005566:	4618      	mov	r0, r3
 8005568:	4611      	mov	r1, r2
 800556a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800556e:	623b      	str	r3, [r7, #32]
 8005570:	2300      	movs	r3, #0
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
 8005574:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	f04f 0000 	mov.w	r0, #0
 8005580:	f04f 0100 	mov.w	r1, #0
 8005584:	0159      	lsls	r1, r3, #5
 8005586:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800558a:	0150      	lsls	r0, r2, #5
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4641      	mov	r1, r8
 8005592:	ebb2 0a01 	subs.w	sl, r2, r1
 8005596:	4649      	mov	r1, r9
 8005598:	eb63 0b01 	sbc.w	fp, r3, r1
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055b0:	ebb2 040a 	subs.w	r4, r2, sl
 80055b4:	eb63 050b 	sbc.w	r5, r3, fp
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	00eb      	lsls	r3, r5, #3
 80055c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055c6:	00e2      	lsls	r2, r4, #3
 80055c8:	4614      	mov	r4, r2
 80055ca:	461d      	mov	r5, r3
 80055cc:	4643      	mov	r3, r8
 80055ce:	18e3      	adds	r3, r4, r3
 80055d0:	603b      	str	r3, [r7, #0]
 80055d2:	464b      	mov	r3, r9
 80055d4:	eb45 0303 	adc.w	r3, r5, r3
 80055d8:	607b      	str	r3, [r7, #4]
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055e6:	4629      	mov	r1, r5
 80055e8:	028b      	lsls	r3, r1, #10
 80055ea:	4621      	mov	r1, r4
 80055ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055f0:	4621      	mov	r1, r4
 80055f2:	028a      	lsls	r2, r1, #10
 80055f4:	4610      	mov	r0, r2
 80055f6:	4619      	mov	r1, r3
 80055f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055fa:	2200      	movs	r2, #0
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	61fa      	str	r2, [r7, #28]
 8005600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005604:	f7fb f9fe 	bl	8000a04 <__aeabi_uldivmod>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4613      	mov	r3, r2
 800560e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <HAL_RCC_GetSysClockFreq+0x200>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	0c1b      	lsrs	r3, r3, #16
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	3301      	adds	r3, #1
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005620:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005624:	fbb2 f3f3 	udiv	r3, r2, r3
 8005628:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800562a:	e002      	b.n	8005632 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800562c:	4b05      	ldr	r3, [pc, #20]	; (8005644 <HAL_RCC_GetSysClockFreq+0x204>)
 800562e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005634:	4618      	mov	r0, r3
 8005636:	3750      	adds	r7, #80	; 0x50
 8005638:	46bd      	mov	sp, r7
 800563a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800563e:	bf00      	nop
 8005640:	40023800 	.word	0x40023800
 8005644:	00f42400 	.word	0x00f42400
 8005648:	007a1200 	.word	0x007a1200

0800564c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005650:	4b03      	ldr	r3, [pc, #12]	; (8005660 <HAL_RCC_GetHCLKFreq+0x14>)
 8005652:	681b      	ldr	r3, [r3, #0]
}
 8005654:	4618      	mov	r0, r3
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	20000208 	.word	0x20000208

08005664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005668:	f7ff fff0 	bl	800564c <HAL_RCC_GetHCLKFreq>
 800566c:	4602      	mov	r2, r0
 800566e:	4b05      	ldr	r3, [pc, #20]	; (8005684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	0a9b      	lsrs	r3, r3, #10
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	4903      	ldr	r1, [pc, #12]	; (8005688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800567a:	5ccb      	ldrb	r3, [r1, r3]
 800567c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005680:	4618      	mov	r0, r3
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40023800 	.word	0x40023800
 8005688:	0800b000 	.word	0x0800b000

0800568c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005690:	f7ff ffdc 	bl	800564c <HAL_RCC_GetHCLKFreq>
 8005694:	4602      	mov	r2, r0
 8005696:	4b05      	ldr	r3, [pc, #20]	; (80056ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	0b5b      	lsrs	r3, r3, #13
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	4903      	ldr	r1, [pc, #12]	; (80056b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056a2:	5ccb      	ldrb	r3, [r1, r3]
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40023800 	.word	0x40023800
 80056b0:	0800b000 	.word	0x0800b000

080056b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e07b      	b.n	80057be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d108      	bne.n	80056e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056d6:	d009      	beq.n	80056ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	61da      	str	r2, [r3, #28]
 80056de:	e005      	b.n	80056ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fd fb04 	bl	8002d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005722:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005770:	ea42 0103 	orr.w	r1, r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	0c1b      	lsrs	r3, r3, #16
 800578a:	f003 0104 	and.w	r1, r3, #4
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	f003 0210 	and.w	r2, r3, #16
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b088      	sub	sp, #32
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	4613      	mov	r3, r2
 80057d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057d6:	f7fd fe6b 	bl	80034b0 <HAL_GetTick>
 80057da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d001      	beq.n	80057f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
 80057ee:	e12a      	b.n	8005a46 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_SPI_Transmit+0x36>
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e122      	b.n	8005a46 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005806:	2b01      	cmp	r3, #1
 8005808:	d101      	bne.n	800580e <HAL_SPI_Transmit+0x48>
 800580a:	2302      	movs	r3, #2
 800580c:	e11b      	b.n	8005a46 <HAL_SPI_Transmit+0x280>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2203      	movs	r2, #3
 800581a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	88fa      	ldrh	r2, [r7, #6]
 800582e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	88fa      	ldrh	r2, [r7, #6]
 8005834:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800585c:	d10f      	bne.n	800587e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800587c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	d007      	beq.n	800589c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800589a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a4:	d152      	bne.n	800594c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_SPI_Transmit+0xee>
 80058ae:	8b7b      	ldrh	r3, [r7, #26]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d145      	bne.n	8005940 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b8:	881a      	ldrh	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	1c9a      	adds	r2, r3, #2
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058d8:	e032      	b.n	8005940 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d112      	bne.n	800590e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	881a      	ldrh	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	1c9a      	adds	r2, r3, #2
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	86da      	strh	r2, [r3, #54]	; 0x36
 800590c:	e018      	b.n	8005940 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800590e:	f7fd fdcf 	bl	80034b0 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d803      	bhi.n	8005926 <HAL_SPI_Transmit+0x160>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005924:	d102      	bne.n	800592c <HAL_SPI_Transmit+0x166>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d109      	bne.n	8005940 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e082      	b.n	8005a46 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1c7      	bne.n	80058da <HAL_SPI_Transmit+0x114>
 800594a:	e053      	b.n	80059f4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <HAL_SPI_Transmit+0x194>
 8005954:	8b7b      	ldrh	r3, [r7, #26]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d147      	bne.n	80059ea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005980:	e033      	b.n	80059ea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b02      	cmp	r3, #2
 800598e:	d113      	bne.n	80059b8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	330c      	adds	r3, #12
 800599a:	7812      	ldrb	r2, [r2, #0]
 800599c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80059b6:	e018      	b.n	80059ea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059b8:	f7fd fd7a 	bl	80034b0 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d803      	bhi.n	80059d0 <HAL_SPI_Transmit+0x20a>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ce:	d102      	bne.n	80059d6 <HAL_SPI_Transmit+0x210>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d109      	bne.n	80059ea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e02d      	b.n	8005a46 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1c6      	bne.n	8005982 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	6839      	ldr	r1, [r7, #0]
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f8b1 	bl	8005b60 <SPI_EndRxTxTransaction>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005a44:	2300      	movs	r3, #0
  }
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a60:	f7fd fd26 	bl	80034b0 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a70:	f7fd fd1e 	bl	80034b0 <HAL_GetTick>
 8005a74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a76:	4b39      	ldr	r3, [pc, #228]	; (8005b5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	015b      	lsls	r3, r3, #5
 8005a7c:	0d1b      	lsrs	r3, r3, #20
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	fb02 f303 	mul.w	r3, r2, r3
 8005a84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a86:	e054      	b.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d050      	beq.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a90:	f7fd fd0e 	bl	80034b0 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d902      	bls.n	8005aa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d13d      	bne.n	8005b22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ab4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005abe:	d111      	bne.n	8005ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac8:	d004      	beq.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad2:	d107      	bne.n	8005ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aec:	d10f      	bne.n	8005b0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e017      	b.n	8005b52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	bf0c      	ite	eq
 8005b42:	2301      	moveq	r3, #1
 8005b44:	2300      	movne	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d19b      	bne.n	8005a88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000208 	.word	0x20000208

08005b60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2201      	movs	r2, #1
 8005b74:	2102      	movs	r1, #2
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f7ff ff6a 	bl	8005a50 <SPI_WaitFlagStateUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	f043 0220 	orr.w	r2, r3, #32
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e032      	b.n	8005bf8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b92:	4b1b      	ldr	r3, [pc, #108]	; (8005c00 <SPI_EndRxTxTransaction+0xa0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1b      	ldr	r2, [pc, #108]	; (8005c04 <SPI_EndRxTxTransaction+0xa4>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	0d5b      	lsrs	r3, r3, #21
 8005b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bb0:	d112      	bne.n	8005bd8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2180      	movs	r1, #128	; 0x80
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff ff47 	bl	8005a50 <SPI_WaitFlagStateUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d016      	beq.n	8005bf6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bcc:	f043 0220 	orr.w	r2, r3, #32
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e00f      	b.n	8005bf8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bee:	2b80      	cmp	r3, #128	; 0x80
 8005bf0:	d0f2      	beq.n	8005bd8 <SPI_EndRxTxTransaction+0x78>
 8005bf2:	e000      	b.n	8005bf6 <SPI_EndRxTxTransaction+0x96>
        break;
 8005bf4:	bf00      	nop
  }

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000208 	.word	0x20000208
 8005c04:	165e9f81 	.word	0x165e9f81

08005c08 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e038      	b.n	8005c90 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d106      	bne.n	8005c38 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7fb fcc0 	bl	80015b8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	4619      	mov	r1, r3
 8005c42:	4610      	mov	r0, r2
 8005c44:	f002 f8e4 	bl	8007e10 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	461a      	mov	r2, r3
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	f002 f946 	bl	8007ee4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6858      	ldr	r0, [r3, #4]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	f002 f973 	bl	8007f50 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	6892      	ldr	r2, [r2, #8]
 8005c72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	6892      	ldr	r2, [r2, #8]
 8005c7e:	f041 0101 	orr.w	r1, r1, #1
 8005c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e041      	b.n	8005d2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fd f9ee 	bl	80030a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f000 fc62 	bl	80065a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d001      	beq.n	8005d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e04e      	b.n	8005dee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a23      	ldr	r2, [pc, #140]	; (8005dfc <HAL_TIM_Base_Start_IT+0xc4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d022      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x80>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d7a:	d01d      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x80>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1f      	ldr	r2, [pc, #124]	; (8005e00 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d018      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x80>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1e      	ldr	r2, [pc, #120]	; (8005e04 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d013      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x80>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1c      	ldr	r2, [pc, #112]	; (8005e08 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00e      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x80>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1b      	ldr	r2, [pc, #108]	; (8005e0c <HAL_TIM_Base_Start_IT+0xd4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d009      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x80>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a19      	ldr	r2, [pc, #100]	; (8005e10 <HAL_TIM_Base_Start_IT+0xd8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d004      	beq.n	8005db8 <HAL_TIM_Base_Start_IT+0x80>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a18      	ldr	r2, [pc, #96]	; (8005e14 <HAL_TIM_Base_Start_IT+0xdc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d111      	bne.n	8005ddc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b06      	cmp	r3, #6
 8005dc8:	d010      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0201 	orr.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dda:	e007      	b.n	8005dec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0201 	orr.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40010000 	.word	0x40010000
 8005e00:	40000400 	.word	0x40000400
 8005e04:	40000800 	.word	0x40000800
 8005e08:	40000c00 	.word	0x40000c00
 8005e0c:	40010400 	.word	0x40010400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40001800 	.word	0x40001800

08005e18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e041      	b.n	8005eae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d106      	bne.n	8005e44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f839 	bl	8005eb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4619      	mov	r1, r3
 8005e56:	4610      	mov	r0, r2
 8005e58:	f000 fba2 	bl	80065a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
	...

08005ecc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d109      	bne.n	8005ef0 <HAL_TIM_PWM_Start+0x24>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	bf14      	ite	ne
 8005ee8:	2301      	movne	r3, #1
 8005eea:	2300      	moveq	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	e022      	b.n	8005f36 <HAL_TIM_PWM_Start+0x6a>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d109      	bne.n	8005f0a <HAL_TIM_PWM_Start+0x3e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	bf14      	ite	ne
 8005f02:	2301      	movne	r3, #1
 8005f04:	2300      	moveq	r3, #0
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	e015      	b.n	8005f36 <HAL_TIM_PWM_Start+0x6a>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d109      	bne.n	8005f24 <HAL_TIM_PWM_Start+0x58>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	bf14      	ite	ne
 8005f1c:	2301      	movne	r3, #1
 8005f1e:	2300      	moveq	r3, #0
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	e008      	b.n	8005f36 <HAL_TIM_PWM_Start+0x6a>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	bf14      	ite	ne
 8005f30:	2301      	movne	r3, #1
 8005f32:	2300      	moveq	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e07c      	b.n	8006038 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d104      	bne.n	8005f4e <HAL_TIM_PWM_Start+0x82>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f4c:	e013      	b.n	8005f76 <HAL_TIM_PWM_Start+0xaa>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d104      	bne.n	8005f5e <HAL_TIM_PWM_Start+0x92>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f5c:	e00b      	b.n	8005f76 <HAL_TIM_PWM_Start+0xaa>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d104      	bne.n	8005f6e <HAL_TIM_PWM_Start+0xa2>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f6c:	e003      	b.n	8005f76 <HAL_TIM_PWM_Start+0xaa>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	6839      	ldr	r1, [r7, #0]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fe04 	bl	8006b8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a2d      	ldr	r2, [pc, #180]	; (8006040 <HAL_TIM_PWM_Start+0x174>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d004      	beq.n	8005f98 <HAL_TIM_PWM_Start+0xcc>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a2c      	ldr	r2, [pc, #176]	; (8006044 <HAL_TIM_PWM_Start+0x178>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d101      	bne.n	8005f9c <HAL_TIM_PWM_Start+0xd0>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e000      	b.n	8005f9e <HAL_TIM_PWM_Start+0xd2>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d007      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a22      	ldr	r2, [pc, #136]	; (8006040 <HAL_TIM_PWM_Start+0x174>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d022      	beq.n	8006002 <HAL_TIM_PWM_Start+0x136>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc4:	d01d      	beq.n	8006002 <HAL_TIM_PWM_Start+0x136>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1f      	ldr	r2, [pc, #124]	; (8006048 <HAL_TIM_PWM_Start+0x17c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d018      	beq.n	8006002 <HAL_TIM_PWM_Start+0x136>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1d      	ldr	r2, [pc, #116]	; (800604c <HAL_TIM_PWM_Start+0x180>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d013      	beq.n	8006002 <HAL_TIM_PWM_Start+0x136>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1c      	ldr	r2, [pc, #112]	; (8006050 <HAL_TIM_PWM_Start+0x184>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00e      	beq.n	8006002 <HAL_TIM_PWM_Start+0x136>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a16      	ldr	r2, [pc, #88]	; (8006044 <HAL_TIM_PWM_Start+0x178>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d009      	beq.n	8006002 <HAL_TIM_PWM_Start+0x136>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a18      	ldr	r2, [pc, #96]	; (8006054 <HAL_TIM_PWM_Start+0x188>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d004      	beq.n	8006002 <HAL_TIM_PWM_Start+0x136>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a16      	ldr	r2, [pc, #88]	; (8006058 <HAL_TIM_PWM_Start+0x18c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d111      	bne.n	8006026 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b06      	cmp	r3, #6
 8006012:	d010      	beq.n	8006036 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006024:	e007      	b.n	8006036 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f042 0201 	orr.w	r2, r2, #1
 8006034:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40010000 	.word	0x40010000
 8006044:	40010400 	.word	0x40010400
 8006048:	40000400 	.word	0x40000400
 800604c:	40000800 	.word	0x40000800
 8006050:	40000c00 	.word	0x40000c00
 8006054:	40014000 	.word	0x40014000
 8006058:	40001800 	.word	0x40001800

0800605c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d020      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01b      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f06f 0202 	mvn.w	r2, #2
 8006090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa5b 	bl	8006562 <HAL_TIM_IC_CaptureCallback>
 80060ac:	e005      	b.n	80060ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa4d 	bl	800654e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fa5e 	bl	8006576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d020      	beq.n	800610c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01b      	beq.n	800610c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0204 	mvn.w	r2, #4
 80060dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fa35 	bl	8006562 <HAL_TIM_IC_CaptureCallback>
 80060f8:	e005      	b.n	8006106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fa27 	bl	800654e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fa38 	bl	8006576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d020      	beq.n	8006158 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01b      	beq.n	8006158 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f06f 0208 	mvn.w	r2, #8
 8006128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2204      	movs	r2, #4
 800612e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa0f 	bl	8006562 <HAL_TIM_IC_CaptureCallback>
 8006144:	e005      	b.n	8006152 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fa01 	bl	800654e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fa12 	bl	8006576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f003 0310 	and.w	r3, r3, #16
 800615e:	2b00      	cmp	r3, #0
 8006160:	d020      	beq.n	80061a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01b      	beq.n	80061a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f06f 0210 	mvn.w	r2, #16
 8006174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2208      	movs	r2, #8
 800617a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f9e9 	bl	8006562 <HAL_TIM_IC_CaptureCallback>
 8006190:	e005      	b.n	800619e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f9db 	bl	800654e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f9ec 	bl	8006576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00c      	beq.n	80061c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0201 	mvn.w	r2, #1
 80061c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fc fd22 	bl	8002c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00c      	beq.n	80061ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fd7c 	bl	8006ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00c      	beq.n	8006210 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d007      	beq.n	8006210 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f9bd 	bl	800658a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00c      	beq.n	8006234 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0220 	mvn.w	r2, #32
 800622c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fd4e 	bl	8006cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006256:	2302      	movs	r3, #2
 8006258:	e0ae      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b0c      	cmp	r3, #12
 8006266:	f200 809f 	bhi.w	80063a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800626a:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	080062a5 	.word	0x080062a5
 8006274:	080063a9 	.word	0x080063a9
 8006278:	080063a9 	.word	0x080063a9
 800627c:	080063a9 	.word	0x080063a9
 8006280:	080062e5 	.word	0x080062e5
 8006284:	080063a9 	.word	0x080063a9
 8006288:	080063a9 	.word	0x080063a9
 800628c:	080063a9 	.word	0x080063a9
 8006290:	08006327 	.word	0x08006327
 8006294:	080063a9 	.word	0x080063a9
 8006298:	080063a9 	.word	0x080063a9
 800629c:	080063a9 	.word	0x080063a9
 80062a0:	08006367 	.word	0x08006367
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fa24 	bl	80066f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0208 	orr.w	r2, r2, #8
 80062be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0204 	bic.w	r2, r2, #4
 80062ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6999      	ldr	r1, [r3, #24]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	691a      	ldr	r2, [r3, #16]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	619a      	str	r2, [r3, #24]
      break;
 80062e2:	e064      	b.n	80063ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fa74 	bl	80067d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699a      	ldr	r2, [r3, #24]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699a      	ldr	r2, [r3, #24]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800630e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6999      	ldr	r1, [r3, #24]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	021a      	lsls	r2, r3, #8
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	619a      	str	r2, [r3, #24]
      break;
 8006324:	e043      	b.n	80063ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fac9 	bl	80068c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69da      	ldr	r2, [r3, #28]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0208 	orr.w	r2, r2, #8
 8006340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69da      	ldr	r2, [r3, #28]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0204 	bic.w	r2, r2, #4
 8006350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69d9      	ldr	r1, [r3, #28]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	61da      	str	r2, [r3, #28]
      break;
 8006364:	e023      	b.n	80063ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	4618      	mov	r0, r3
 800636e:	f000 fb1d 	bl	80069ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69da      	ldr	r2, [r3, #28]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69d9      	ldr	r1, [r3, #28]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	021a      	lsls	r2, r3, #8
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	61da      	str	r2, [r3, #28]
      break;
 80063a6:	e002      	b.n	80063ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	75fb      	strb	r3, [r7, #23]
      break;
 80063ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_TIM_ConfigClockSource+0x1c>
 80063d8:	2302      	movs	r3, #2
 80063da:	e0b4      	b.n	8006546 <HAL_TIM_ConfigClockSource+0x186>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006402:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006414:	d03e      	beq.n	8006494 <HAL_TIM_ConfigClockSource+0xd4>
 8006416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800641a:	f200 8087 	bhi.w	800652c <HAL_TIM_ConfigClockSource+0x16c>
 800641e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006422:	f000 8086 	beq.w	8006532 <HAL_TIM_ConfigClockSource+0x172>
 8006426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642a:	d87f      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
 800642c:	2b70      	cmp	r3, #112	; 0x70
 800642e:	d01a      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0xa6>
 8006430:	2b70      	cmp	r3, #112	; 0x70
 8006432:	d87b      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
 8006434:	2b60      	cmp	r3, #96	; 0x60
 8006436:	d050      	beq.n	80064da <HAL_TIM_ConfigClockSource+0x11a>
 8006438:	2b60      	cmp	r3, #96	; 0x60
 800643a:	d877      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
 800643c:	2b50      	cmp	r3, #80	; 0x50
 800643e:	d03c      	beq.n	80064ba <HAL_TIM_ConfigClockSource+0xfa>
 8006440:	2b50      	cmp	r3, #80	; 0x50
 8006442:	d873      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
 8006444:	2b40      	cmp	r3, #64	; 0x40
 8006446:	d058      	beq.n	80064fa <HAL_TIM_ConfigClockSource+0x13a>
 8006448:	2b40      	cmp	r3, #64	; 0x40
 800644a:	d86f      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
 800644c:	2b30      	cmp	r3, #48	; 0x30
 800644e:	d064      	beq.n	800651a <HAL_TIM_ConfigClockSource+0x15a>
 8006450:	2b30      	cmp	r3, #48	; 0x30
 8006452:	d86b      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
 8006454:	2b20      	cmp	r3, #32
 8006456:	d060      	beq.n	800651a <HAL_TIM_ConfigClockSource+0x15a>
 8006458:	2b20      	cmp	r3, #32
 800645a:	d867      	bhi.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d05c      	beq.n	800651a <HAL_TIM_ConfigClockSource+0x15a>
 8006460:	2b10      	cmp	r3, #16
 8006462:	d05a      	beq.n	800651a <HAL_TIM_ConfigClockSource+0x15a>
 8006464:	e062      	b.n	800652c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006476:	f000 fb69 	bl	8006b4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006488:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	609a      	str	r2, [r3, #8]
      break;
 8006492:	e04f      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064a4:	f000 fb52 	bl	8006b4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064b6:	609a      	str	r2, [r3, #8]
      break;
 80064b8:	e03c      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c6:	461a      	mov	r2, r3
 80064c8:	f000 fac6 	bl	8006a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2150      	movs	r1, #80	; 0x50
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fb1f 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 80064d8:	e02c      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064e6:	461a      	mov	r2, r3
 80064e8:	f000 fae5 	bl	8006ab6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2160      	movs	r1, #96	; 0x60
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fb0f 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 80064f8:	e01c      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006506:	461a      	mov	r2, r3
 8006508:	f000 faa6 	bl	8006a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2140      	movs	r1, #64	; 0x40
 8006512:	4618      	mov	r0, r3
 8006514:	f000 faff 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 8006518:	e00c      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4619      	mov	r1, r3
 8006524:	4610      	mov	r0, r2
 8006526:	f000 faf6 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 800652a:	e003      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	73fb      	strb	r3, [r7, #15]
      break;
 8006530:	e000      	b.n	8006534 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006532:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006544:	7bfb      	ldrb	r3, [r7, #15]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
	...

080065a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a46      	ldr	r2, [pc, #280]	; (80066cc <TIM_Base_SetConfig+0x12c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d013      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065be:	d00f      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a43      	ldr	r2, [pc, #268]	; (80066d0 <TIM_Base_SetConfig+0x130>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00b      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a42      	ldr	r2, [pc, #264]	; (80066d4 <TIM_Base_SetConfig+0x134>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d007      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a41      	ldr	r2, [pc, #260]	; (80066d8 <TIM_Base_SetConfig+0x138>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <TIM_Base_SetConfig+0x40>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a40      	ldr	r2, [pc, #256]	; (80066dc <TIM_Base_SetConfig+0x13c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d108      	bne.n	80065f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a35      	ldr	r2, [pc, #212]	; (80066cc <TIM_Base_SetConfig+0x12c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d02b      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006600:	d027      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a32      	ldr	r2, [pc, #200]	; (80066d0 <TIM_Base_SetConfig+0x130>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d023      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a31      	ldr	r2, [pc, #196]	; (80066d4 <TIM_Base_SetConfig+0x134>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d01f      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a30      	ldr	r2, [pc, #192]	; (80066d8 <TIM_Base_SetConfig+0x138>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d01b      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a2f      	ldr	r2, [pc, #188]	; (80066dc <TIM_Base_SetConfig+0x13c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d017      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a2e      	ldr	r2, [pc, #184]	; (80066e0 <TIM_Base_SetConfig+0x140>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a2d      	ldr	r2, [pc, #180]	; (80066e4 <TIM_Base_SetConfig+0x144>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00f      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a2c      	ldr	r2, [pc, #176]	; (80066e8 <TIM_Base_SetConfig+0x148>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d00b      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a2b      	ldr	r2, [pc, #172]	; (80066ec <TIM_Base_SetConfig+0x14c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d007      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a2a      	ldr	r2, [pc, #168]	; (80066f0 <TIM_Base_SetConfig+0x150>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d003      	beq.n	8006652 <TIM_Base_SetConfig+0xb2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a29      	ldr	r2, [pc, #164]	; (80066f4 <TIM_Base_SetConfig+0x154>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d108      	bne.n	8006664 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	4313      	orrs	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a10      	ldr	r2, [pc, #64]	; (80066cc <TIM_Base_SetConfig+0x12c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d003      	beq.n	8006698 <TIM_Base_SetConfig+0xf8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a12      	ldr	r2, [pc, #72]	; (80066dc <TIM_Base_SetConfig+0x13c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d103      	bne.n	80066a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d105      	bne.n	80066be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f023 0201 	bic.w	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	611a      	str	r2, [r3, #16]
  }
}
 80066be:	bf00      	nop
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40000400 	.word	0x40000400
 80066d4:	40000800 	.word	0x40000800
 80066d8:	40000c00 	.word	0x40000c00
 80066dc:	40010400 	.word	0x40010400
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40014400 	.word	0x40014400
 80066e8:	40014800 	.word	0x40014800
 80066ec:	40001800 	.word	0x40001800
 80066f0:	40001c00 	.word	0x40001c00
 80066f4:	40002000 	.word	0x40002000

080066f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	f023 0201 	bic.w	r2, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0303 	bic.w	r3, r3, #3
 800672e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f023 0302 	bic.w	r3, r3, #2
 8006740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a20      	ldr	r2, [pc, #128]	; (80067d0 <TIM_OC1_SetConfig+0xd8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_OC1_SetConfig+0x64>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a1f      	ldr	r2, [pc, #124]	; (80067d4 <TIM_OC1_SetConfig+0xdc>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d10c      	bne.n	8006776 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0308 	bic.w	r3, r3, #8
 8006762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f023 0304 	bic.w	r3, r3, #4
 8006774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a15      	ldr	r2, [pc, #84]	; (80067d0 <TIM_OC1_SetConfig+0xd8>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d003      	beq.n	8006786 <TIM_OC1_SetConfig+0x8e>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a14      	ldr	r2, [pc, #80]	; (80067d4 <TIM_OC1_SetConfig+0xdc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d111      	bne.n	80067aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800678c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	621a      	str	r2, [r3, #32]
}
 80067c4:	bf00      	nop
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	40010000 	.word	0x40010000
 80067d4:	40010400 	.word	0x40010400

080067d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f023 0210 	bic.w	r2, r3, #16
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800680e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f023 0320 	bic.w	r3, r3, #32
 8006822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a22      	ldr	r2, [pc, #136]	; (80068bc <TIM_OC2_SetConfig+0xe4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d003      	beq.n	8006840 <TIM_OC2_SetConfig+0x68>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a21      	ldr	r2, [pc, #132]	; (80068c0 <TIM_OC2_SetConfig+0xe8>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d10d      	bne.n	800685c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800685a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a17      	ldr	r2, [pc, #92]	; (80068bc <TIM_OC2_SetConfig+0xe4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d003      	beq.n	800686c <TIM_OC2_SetConfig+0x94>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <TIM_OC2_SetConfig+0xe8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d113      	bne.n	8006894 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800687a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40010400 	.word	0x40010400

080068c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800690c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a21      	ldr	r2, [pc, #132]	; (80069a4 <TIM_OC3_SetConfig+0xe0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d003      	beq.n	800692a <TIM_OC3_SetConfig+0x66>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a20      	ldr	r2, [pc, #128]	; (80069a8 <TIM_OC3_SetConfig+0xe4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d10d      	bne.n	8006946 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006930:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a16      	ldr	r2, [pc, #88]	; (80069a4 <TIM_OC3_SetConfig+0xe0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d003      	beq.n	8006956 <TIM_OC3_SetConfig+0x92>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a15      	ldr	r2, [pc, #84]	; (80069a8 <TIM_OC3_SetConfig+0xe4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d113      	bne.n	800697e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800695c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	621a      	str	r2, [r3, #32]
}
 8006998:	bf00      	nop
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	40010000 	.word	0x40010000
 80069a8:	40010400 	.word	0x40010400

080069ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	031b      	lsls	r3, r3, #12
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a12      	ldr	r2, [pc, #72]	; (8006a50 <TIM_OC4_SetConfig+0xa4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_OC4_SetConfig+0x68>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a11      	ldr	r2, [pc, #68]	; (8006a54 <TIM_OC4_SetConfig+0xa8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d109      	bne.n	8006a28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	019b      	lsls	r3, r3, #6
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	621a      	str	r2, [r3, #32]
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40010000 	.word	0x40010000
 8006a54:	40010400 	.word	0x40010400

08006a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	f023 0201 	bic.w	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f023 030a 	bic.w	r3, r3, #10
 8006a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	621a      	str	r2, [r3, #32]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b087      	sub	sp, #28
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	f023 0210 	bic.w	r2, r3, #16
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	031b      	lsls	r3, r3, #12
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006af2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	621a      	str	r2, [r3, #32]
}
 8006b0a:	bf00      	nop
 8006b0c:	371c      	adds	r7, #28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f043 0307 	orr.w	r3, r3, #7
 8006b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	609a      	str	r2, [r3, #8]
}
 8006b40:	bf00      	nop
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	021a      	lsls	r2, r3, #8
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	609a      	str	r2, [r3, #8]
}
 8006b80:	bf00      	nop
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f003 031f 	and.w	r3, r3, #31
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a1a      	ldr	r2, [r3, #32]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	43db      	mvns	r3, r3
 8006bae:	401a      	ands	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a1a      	ldr	r2, [r3, #32]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f003 031f 	and.w	r3, r3, #31
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
	...

08006bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e05a      	b.n	8006ca6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a21      	ldr	r2, [pc, #132]	; (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d022      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3c:	d01d      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1d      	ldr	r2, [pc, #116]	; (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d018      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a1b      	ldr	r2, [pc, #108]	; (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d013      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a1a      	ldr	r2, [pc, #104]	; (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d00e      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a18      	ldr	r2, [pc, #96]	; (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d009      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a17      	ldr	r2, [pc, #92]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d004      	beq.n	8006c7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d10c      	bne.n	8006c94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	40010000 	.word	0x40010000
 8006cb8:	40000400 	.word	0x40000400
 8006cbc:	40000800 	.word	0x40000800
 8006cc0:	40000c00 	.word	0x40000c00
 8006cc4:	40010400 	.word	0x40010400
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40001800 	.word	0x40001800

08006cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e042      	b.n	8006d90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d106      	bne.n	8006d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fc faa6 	bl	8003270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2224      	movs	r2, #36	; 0x24
 8006d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fdf3 	bl	8007928 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	695a      	ldr	r2, [r3, #20]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08a      	sub	sp, #40	; 0x28
 8006d9c:	af02      	add	r7, sp, #8
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	4613      	mov	r3, r2
 8006da6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b20      	cmp	r3, #32
 8006db6:	d175      	bne.n	8006ea4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <HAL_UART_Transmit+0x2c>
 8006dbe:	88fb      	ldrh	r3, [r7, #6]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e06e      	b.n	8006ea6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2221      	movs	r2, #33	; 0x21
 8006dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dd6:	f7fc fb6b 	bl	80034b0 <HAL_GetTick>
 8006dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	88fa      	ldrh	r2, [r7, #6]
 8006de0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	88fa      	ldrh	r2, [r7, #6]
 8006de6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df0:	d108      	bne.n	8006e04 <HAL_UART_Transmit+0x6c>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d104      	bne.n	8006e04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	61bb      	str	r3, [r7, #24]
 8006e02:	e003      	b.n	8006e0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e0c:	e02e      	b.n	8006e6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2200      	movs	r2, #0
 8006e16:	2180      	movs	r1, #128	; 0x80
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fb55 	bl	80074c8 <UART_WaitOnFlagUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e03a      	b.n	8006ea6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10b      	bne.n	8006e4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	3302      	adds	r3, #2
 8006e4a:	61bb      	str	r3, [r7, #24]
 8006e4c:	e007      	b.n	8006e5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	781a      	ldrb	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1cb      	bne.n	8006e0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2140      	movs	r1, #64	; 0x40
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 fb21 	bl	80074c8 <UART_WaitOnFlagUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d005      	beq.n	8006e98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e006      	b.n	8006ea6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	e000      	b.n	8006ea6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006ea4:	2302      	movs	r3, #2
  }
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3720      	adds	r7, #32
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b08c      	sub	sp, #48	; 0x30
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	d14a      	bne.n	8006f5e <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e043      	b.n	8006f60 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2201      	movs	r2, #1
 8006edc:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006ee4:	88fb      	ldrh	r3, [r7, #6]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	68b9      	ldr	r1, [r7, #8]
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 fb45 	bl	800757a <UART_Start_Receive_IT>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d12c      	bne.n	8006f58 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d125      	bne.n	8006f52 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f06:	2300      	movs	r3, #0
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	613b      	str	r3, [r7, #16]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	330c      	adds	r3, #12
 8006f22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	e853 3f00 	ldrex	r3, [r3]
 8006f2a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f043 0310 	orr.w	r3, r3, #16
 8006f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	330c      	adds	r3, #12
 8006f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f3c:	627a      	str	r2, [r7, #36]	; 0x24
 8006f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6a39      	ldr	r1, [r7, #32]
 8006f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e5      	bne.n	8006f1c <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8006f50:	e002      	b.n	8006f58 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006f58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f5c:	e000      	b.n	8006f60 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006f5e:	2302      	movs	r3, #2
  }
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3730      	adds	r7, #48	; 0x30
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b0ba      	sub	sp, #232	; 0xe8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9e:	f003 030f 	and.w	r3, r3, #15
 8006fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006fa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10f      	bne.n	8006fce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d009      	beq.n	8006fce <HAL_UART_IRQHandler+0x66>
 8006fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fbf0 	bl	80077ac <UART_Receive_IT>
      return;
 8006fcc:	e25b      	b.n	8007486 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 80de 	beq.w	8007194 <HAL_UART_IRQHandler+0x22c>
 8006fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d106      	bne.n	8006ff2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 80d1 	beq.w	8007194 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <HAL_UART_IRQHandler+0xae>
 8006ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007006:	2b00      	cmp	r3, #0
 8007008:	d005      	beq.n	8007016 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700e:	f043 0201 	orr.w	r2, r3, #1
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00b      	beq.n	800703a <HAL_UART_IRQHandler+0xd2>
 8007022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d005      	beq.n	800703a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007032:	f043 0202 	orr.w	r2, r3, #2
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800703a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <HAL_UART_IRQHandler+0xf6>
 8007046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d005      	beq.n	800705e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007056:	f043 0204 	orr.w	r2, r3, #4
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800705e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b00      	cmp	r3, #0
 8007068:	d011      	beq.n	800708e <HAL_UART_IRQHandler+0x126>
 800706a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d105      	bne.n	8007082 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007086:	f043 0208 	orr.w	r2, r3, #8
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 81f2 	beq.w	800747c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709c:	f003 0320 	and.w	r3, r3, #32
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d008      	beq.n	80070b6 <HAL_UART_IRQHandler+0x14e>
 80070a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a8:	f003 0320 	and.w	r3, r3, #32
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fb7b 	bl	80077ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c0:	2b40      	cmp	r3, #64	; 0x40
 80070c2:	bf0c      	ite	eq
 80070c4:	2301      	moveq	r3, #1
 80070c6:	2300      	movne	r3, #0
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d103      	bne.n	80070e2 <HAL_UART_IRQHandler+0x17a>
 80070da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d04f      	beq.n	8007182 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fa83 	bl	80075ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f2:	2b40      	cmp	r3, #64	; 0x40
 80070f4:	d141      	bne.n	800717a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3314      	adds	r3, #20
 80070fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800710c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3314      	adds	r3, #20
 800711e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007122:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007126:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800712e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800713a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1d9      	bne.n	80070f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007146:	2b00      	cmp	r3, #0
 8007148:	d013      	beq.n	8007172 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714e:	4a7e      	ldr	r2, [pc, #504]	; (8007348 <HAL_UART_IRQHandler+0x3e0>)
 8007150:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007156:	4618      	mov	r0, r3
 8007158:	f7fd f874 	bl	8004244 <HAL_DMA_Abort_IT>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d016      	beq.n	8007190 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007170:	e00e      	b.n	8007190 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f99e 	bl	80074b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007178:	e00a      	b.n	8007190 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f99a 	bl	80074b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007180:	e006      	b.n	8007190 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f996 	bl	80074b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800718e:	e175      	b.n	800747c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007190:	bf00      	nop
    return;
 8007192:	e173      	b.n	800747c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007198:	2b01      	cmp	r3, #1
 800719a:	f040 814f 	bne.w	800743c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800719e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a2:	f003 0310 	and.w	r3, r3, #16
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 8148 	beq.w	800743c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80071ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b0:	f003 0310 	and.w	r3, r3, #16
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 8141 	beq.w	800743c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071ba:	2300      	movs	r3, #0
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	60bb      	str	r3, [r7, #8]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	60bb      	str	r3, [r7, #8]
 80071ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071da:	2b40      	cmp	r3, #64	; 0x40
 80071dc:	f040 80b6 	bne.w	800734c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 8145 	beq.w	8007480 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071fe:	429a      	cmp	r2, r3
 8007200:	f080 813e 	bcs.w	8007480 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800720a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007216:	f000 8088 	beq.w	800732a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	330c      	adds	r3, #12
 8007220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007230:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	330c      	adds	r3, #12
 8007242:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007246:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800724a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007252:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800725e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1d9      	bne.n	800721a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3314      	adds	r3, #20
 800726c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007278:	f023 0301 	bic.w	r3, r3, #1
 800727c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3314      	adds	r3, #20
 8007286:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800728a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800728e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007292:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800729c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e1      	bne.n	8007266 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3314      	adds	r3, #20
 80072a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3314      	adds	r3, #20
 80072c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e3      	bne.n	80072a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2220      	movs	r2, #32
 80072de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	330c      	adds	r3, #12
 80072ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072fa:	f023 0310 	bic.w	r3, r3, #16
 80072fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	330c      	adds	r3, #12
 8007308:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800730c:	65ba      	str	r2, [r7, #88]	; 0x58
 800730e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007310:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007312:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007314:	e841 2300 	strex	r3, r2, [r1]
 8007318:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800731a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1e3      	bne.n	80072e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007324:	4618      	mov	r0, r3
 8007326:	f7fc ff1d 	bl	8004164 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2202      	movs	r2, #2
 800732e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007338:	b29b      	uxth	r3, r3
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	b29b      	uxth	r3, r3
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7fa ffed 	bl	8002320 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007346:	e09b      	b.n	8007480 <HAL_UART_IRQHandler+0x518>
 8007348:	080076b5 	.word	0x080076b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007354:	b29b      	uxth	r3, r3
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007360:	b29b      	uxth	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 808e 	beq.w	8007484 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 8089 	beq.w	8007484 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	330c      	adds	r3, #12
 8007378:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007384:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	330c      	adds	r3, #12
 8007392:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007396:	647a      	str	r2, [r7, #68]	; 0x44
 8007398:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800739c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e3      	bne.n	8007372 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3314      	adds	r3, #20
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	623b      	str	r3, [r7, #32]
   return(result);
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	f023 0301 	bic.w	r3, r3, #1
 80073c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3314      	adds	r3, #20
 80073ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073ce:	633a      	str	r2, [r7, #48]	; 0x30
 80073d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e3      	bne.n	80073aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	330c      	adds	r3, #12
 80073f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	e853 3f00 	ldrex	r3, [r3]
 80073fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0310 	bic.w	r3, r3, #16
 8007406:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	330c      	adds	r3, #12
 8007410:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007414:	61fa      	str	r2, [r7, #28]
 8007416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	69b9      	ldr	r1, [r7, #24]
 800741a:	69fa      	ldr	r2, [r7, #28]
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	617b      	str	r3, [r7, #20]
   return(result);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e3      	bne.n	80073f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2202      	movs	r2, #2
 800742c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800742e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7fa ff73 	bl	8002320 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800743a:	e023      	b.n	8007484 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800743c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007444:	2b00      	cmp	r3, #0
 8007446:	d009      	beq.n	800745c <HAL_UART_IRQHandler+0x4f4>
 8007448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800744c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f941 	bl	80076dc <UART_Transmit_IT>
    return;
 800745a:	e014      	b.n	8007486 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800745c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00e      	beq.n	8007486 <HAL_UART_IRQHandler+0x51e>
 8007468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800746c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d008      	beq.n	8007486 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f981 	bl	800777c <UART_EndTransmit_IT>
    return;
 800747a:	e004      	b.n	8007486 <HAL_UART_IRQHandler+0x51e>
    return;
 800747c:	bf00      	nop
 800747e:	e002      	b.n	8007486 <HAL_UART_IRQHandler+0x51e>
      return;
 8007480:	bf00      	nop
 8007482:	e000      	b.n	8007486 <HAL_UART_IRQHandler+0x51e>
      return;
 8007484:	bf00      	nop
  }
}
 8007486:	37e8      	adds	r7, #232	; 0xe8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	4613      	mov	r3, r2
 80074d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d8:	e03b      	b.n	8007552 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e0:	d037      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074e2:	f7fb ffe5 	bl	80034b0 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	6a3a      	ldr	r2, [r7, #32]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d302      	bcc.n	80074f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e03a      	b.n	8007572 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f003 0304 	and.w	r3, r3, #4
 8007506:	2b00      	cmp	r3, #0
 8007508:	d023      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0x8a>
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b80      	cmp	r3, #128	; 0x80
 800750e:	d020      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2b40      	cmp	r3, #64	; 0x40
 8007514:	d01d      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b08      	cmp	r3, #8
 8007522:	d116      	bne.n	8007552 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 f857 	bl	80075ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2208      	movs	r2, #8
 8007544:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e00f      	b.n	8007572 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4013      	ands	r3, r2
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	429a      	cmp	r2, r3
 8007560:	bf0c      	ite	eq
 8007562:	2301      	moveq	r3, #1
 8007564:	2300      	movne	r3, #0
 8007566:	b2db      	uxtb	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	429a      	cmp	r2, r3
 800756e:	d0b4      	beq.n	80074da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800757a:	b480      	push	{r7}
 800757c:	b085      	sub	sp, #20
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	4613      	mov	r3, r2
 8007586:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	88fa      	ldrh	r2, [r7, #6]
 8007592:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	88fa      	ldrh	r2, [r7, #6]
 8007598:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2222      	movs	r2, #34	; 0x22
 80075a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d007      	beq.n	80075c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695a      	ldr	r2, [r3, #20]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f042 0201 	orr.w	r2, r2, #1
 80075ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0220 	orr.w	r2, r2, #32
 80075de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b095      	sub	sp, #84	; 0x54
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	330c      	adds	r3, #12
 80075fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800760c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	330c      	adds	r3, #12
 8007614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007616:	643a      	str	r2, [r7, #64]	; 0x40
 8007618:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800761c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e5      	bne.n	80075f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3314      	adds	r3, #20
 8007630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	61fb      	str	r3, [r7, #28]
   return(result);
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	f023 0301 	bic.w	r3, r3, #1
 8007640:	64bb      	str	r3, [r7, #72]	; 0x48
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3314      	adds	r3, #20
 8007648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800764a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800764c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e5      	bne.n	800762a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	2b01      	cmp	r3, #1
 8007664:	d119      	bne.n	800769a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	330c      	adds	r3, #12
 800766c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	60bb      	str	r3, [r7, #8]
   return(result);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f023 0310 	bic.w	r3, r3, #16
 800767c:	647b      	str	r3, [r7, #68]	; 0x44
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007686:	61ba      	str	r2, [r7, #24]
 8007688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6979      	ldr	r1, [r7, #20]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	613b      	str	r3, [r7, #16]
   return(result);
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e5      	bne.n	8007666 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076a8:	bf00      	nop
 80076aa:	3754      	adds	r7, #84	; 0x54
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7ff fef0 	bl	80074b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076d4:	bf00      	nop
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b21      	cmp	r3, #33	; 0x21
 80076ee:	d13e      	bne.n	800776e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f8:	d114      	bne.n	8007724 <UART_Transmit_IT+0x48>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d110      	bne.n	8007724 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007716:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	1c9a      	adds	r2, r3, #2
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	621a      	str	r2, [r3, #32]
 8007722:	e008      	b.n	8007736 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a1b      	ldr	r3, [r3, #32]
 8007728:	1c59      	adds	r1, r3, #1
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	6211      	str	r1, [r2, #32]
 800772e:	781a      	ldrb	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b01      	subs	r3, #1
 800773e:	b29b      	uxth	r3, r3
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	4619      	mov	r1, r3
 8007744:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10f      	bne.n	800776a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007758:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007768:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	e000      	b.n	8007770 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800776e:	2302      	movs	r3, #2
  }
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007792:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2220      	movs	r2, #32
 8007798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff fe75 	bl	800748c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08c      	sub	sp, #48	; 0x30
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b22      	cmp	r3, #34	; 0x22
 80077be:	f040 80ae 	bne.w	800791e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ca:	d117      	bne.n	80077fc <UART_Receive_IT+0x50>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d113      	bne.n	80077fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	1c9a      	adds	r2, r3, #2
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	629a      	str	r2, [r3, #40]	; 0x28
 80077fa:	e026      	b.n	800784a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007800:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780e:	d007      	beq.n	8007820 <UART_Receive_IT+0x74>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10a      	bne.n	800782e <UART_Receive_IT+0x82>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d106      	bne.n	800782e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	b2da      	uxtb	r2, r3
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	701a      	strb	r2, [r3, #0]
 800782c:	e008      	b.n	8007840 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800783a:	b2da      	uxtb	r2, r3
 800783c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b01      	subs	r3, #1
 8007852:	b29b      	uxth	r3, r3
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	4619      	mov	r1, r3
 8007858:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800785a:	2b00      	cmp	r3, #0
 800785c:	d15d      	bne.n	800791a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68da      	ldr	r2, [r3, #12]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0220 	bic.w	r2, r2, #32
 800786c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68da      	ldr	r2, [r3, #12]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800787c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	695a      	ldr	r2, [r3, #20]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0201 	bic.w	r2, r2, #1
 800788c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d135      	bne.n	8007910 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	330c      	adds	r3, #12
 80078b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f023 0310 	bic.w	r3, r3, #16
 80078c0:	627b      	str	r3, [r7, #36]	; 0x24
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	330c      	adds	r3, #12
 80078c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ca:	623a      	str	r2, [r7, #32]
 80078cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	69f9      	ldr	r1, [r7, #28]
 80078d0:	6a3a      	ldr	r2, [r7, #32]
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e5      	bne.n	80078aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0310 	and.w	r3, r3, #16
 80078e8:	2b10      	cmp	r3, #16
 80078ea:	d10a      	bne.n	8007902 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078ec:	2300      	movs	r3, #0
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7fa fd09 	bl	8002320 <HAL_UARTEx_RxEventCallback>
 800790e:	e002      	b.n	8007916 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7ff fdc5 	bl	80074a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	e002      	b.n	8007920 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	e000      	b.n	8007920 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800791e:	2302      	movs	r3, #2
  }
}
 8007920:	4618      	mov	r0, r3
 8007922:	3730      	adds	r7, #48	; 0x30
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800792c:	b0c0      	sub	sp, #256	; 0x100
 800792e:	af00      	add	r7, sp, #0
 8007930:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007944:	68d9      	ldr	r1, [r3, #12]
 8007946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	ea40 0301 	orr.w	r3, r0, r1
 8007950:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	431a      	orrs	r2, r3
 8007960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	431a      	orrs	r2, r3
 8007968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	4313      	orrs	r3, r2
 8007970:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007980:	f021 010c 	bic.w	r1, r1, #12
 8007984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800798e:	430b      	orrs	r3, r1
 8007990:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800799e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a2:	6999      	ldr	r1, [r3, #24]
 80079a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	ea40 0301 	orr.w	r3, r0, r1
 80079ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4b8f      	ldr	r3, [pc, #572]	; (8007bf4 <UART_SetConfig+0x2cc>)
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d005      	beq.n	80079c8 <UART_SetConfig+0xa0>
 80079bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	4b8d      	ldr	r3, [pc, #564]	; (8007bf8 <UART_SetConfig+0x2d0>)
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d104      	bne.n	80079d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079c8:	f7fd fe60 	bl	800568c <HAL_RCC_GetPCLK2Freq>
 80079cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80079d0:	e003      	b.n	80079da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079d2:	f7fd fe47 	bl	8005664 <HAL_RCC_GetPCLK1Freq>
 80079d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e4:	f040 810c 	bne.w	8007c00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079ec:	2200      	movs	r2, #0
 80079ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80079f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80079f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80079fa:	4622      	mov	r2, r4
 80079fc:	462b      	mov	r3, r5
 80079fe:	1891      	adds	r1, r2, r2
 8007a00:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a02:	415b      	adcs	r3, r3
 8007a04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	eb12 0801 	adds.w	r8, r2, r1
 8007a10:	4629      	mov	r1, r5
 8007a12:	eb43 0901 	adc.w	r9, r3, r1
 8007a16:	f04f 0200 	mov.w	r2, #0
 8007a1a:	f04f 0300 	mov.w	r3, #0
 8007a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a2a:	4690      	mov	r8, r2
 8007a2c:	4699      	mov	r9, r3
 8007a2e:	4623      	mov	r3, r4
 8007a30:	eb18 0303 	adds.w	r3, r8, r3
 8007a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a38:	462b      	mov	r3, r5
 8007a3a:	eb49 0303 	adc.w	r3, r9, r3
 8007a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a56:	460b      	mov	r3, r1
 8007a58:	18db      	adds	r3, r3, r3
 8007a5a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	eb42 0303 	adc.w	r3, r2, r3
 8007a62:	657b      	str	r3, [r7, #84]	; 0x54
 8007a64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a6c:	f7f8 ffca 	bl	8000a04 <__aeabi_uldivmod>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4b61      	ldr	r3, [pc, #388]	; (8007bfc <UART_SetConfig+0x2d4>)
 8007a76:	fba3 2302 	umull	r2, r3, r3, r2
 8007a7a:	095b      	lsrs	r3, r3, #5
 8007a7c:	011c      	lsls	r4, r3, #4
 8007a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a82:	2200      	movs	r2, #0
 8007a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a90:	4642      	mov	r2, r8
 8007a92:	464b      	mov	r3, r9
 8007a94:	1891      	adds	r1, r2, r2
 8007a96:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a98:	415b      	adcs	r3, r3
 8007a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007aa0:	4641      	mov	r1, r8
 8007aa2:	eb12 0a01 	adds.w	sl, r2, r1
 8007aa6:	4649      	mov	r1, r9
 8007aa8:	eb43 0b01 	adc.w	fp, r3, r1
 8007aac:	f04f 0200 	mov.w	r2, #0
 8007ab0:	f04f 0300 	mov.w	r3, #0
 8007ab4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ab8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007abc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ac0:	4692      	mov	sl, r2
 8007ac2:	469b      	mov	fp, r3
 8007ac4:	4643      	mov	r3, r8
 8007ac6:	eb1a 0303 	adds.w	r3, sl, r3
 8007aca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ace:	464b      	mov	r3, r9
 8007ad0:	eb4b 0303 	adc.w	r3, fp, r3
 8007ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ae4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ae8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007aec:	460b      	mov	r3, r1
 8007aee:	18db      	adds	r3, r3, r3
 8007af0:	643b      	str	r3, [r7, #64]	; 0x40
 8007af2:	4613      	mov	r3, r2
 8007af4:	eb42 0303 	adc.w	r3, r2, r3
 8007af8:	647b      	str	r3, [r7, #68]	; 0x44
 8007afa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007afe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007b02:	f7f8 ff7f 	bl	8000a04 <__aeabi_uldivmod>
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	4b3b      	ldr	r3, [pc, #236]	; (8007bfc <UART_SetConfig+0x2d4>)
 8007b0e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b12:	095b      	lsrs	r3, r3, #5
 8007b14:	2264      	movs	r2, #100	; 0x64
 8007b16:	fb02 f303 	mul.w	r3, r2, r3
 8007b1a:	1acb      	subs	r3, r1, r3
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b22:	4b36      	ldr	r3, [pc, #216]	; (8007bfc <UART_SetConfig+0x2d4>)
 8007b24:	fba3 2302 	umull	r2, r3, r3, r2
 8007b28:	095b      	lsrs	r3, r3, #5
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b30:	441c      	add	r4, r3
 8007b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b44:	4642      	mov	r2, r8
 8007b46:	464b      	mov	r3, r9
 8007b48:	1891      	adds	r1, r2, r2
 8007b4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b4c:	415b      	adcs	r3, r3
 8007b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b54:	4641      	mov	r1, r8
 8007b56:	1851      	adds	r1, r2, r1
 8007b58:	6339      	str	r1, [r7, #48]	; 0x30
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	414b      	adcs	r3, r1
 8007b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b60:	f04f 0200 	mov.w	r2, #0
 8007b64:	f04f 0300 	mov.w	r3, #0
 8007b68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b6c:	4659      	mov	r1, fp
 8007b6e:	00cb      	lsls	r3, r1, #3
 8007b70:	4651      	mov	r1, sl
 8007b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b76:	4651      	mov	r1, sl
 8007b78:	00ca      	lsls	r2, r1, #3
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	4603      	mov	r3, r0
 8007b80:	4642      	mov	r2, r8
 8007b82:	189b      	adds	r3, r3, r2
 8007b84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b88:	464b      	mov	r3, r9
 8007b8a:	460a      	mov	r2, r1
 8007b8c:	eb42 0303 	adc.w	r3, r2, r3
 8007b90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ba0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ba4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ba8:	460b      	mov	r3, r1
 8007baa:	18db      	adds	r3, r3, r3
 8007bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bae:	4613      	mov	r3, r2
 8007bb0:	eb42 0303 	adc.w	r3, r2, r3
 8007bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007bbe:	f7f8 ff21 	bl	8000a04 <__aeabi_uldivmod>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4b0d      	ldr	r3, [pc, #52]	; (8007bfc <UART_SetConfig+0x2d4>)
 8007bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bcc:	095b      	lsrs	r3, r3, #5
 8007bce:	2164      	movs	r1, #100	; 0x64
 8007bd0:	fb01 f303 	mul.w	r3, r1, r3
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	3332      	adds	r3, #50	; 0x32
 8007bda:	4a08      	ldr	r2, [pc, #32]	; (8007bfc <UART_SetConfig+0x2d4>)
 8007bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007be0:	095b      	lsrs	r3, r3, #5
 8007be2:	f003 0207 	and.w	r2, r3, #7
 8007be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4422      	add	r2, r4
 8007bee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007bf0:	e106      	b.n	8007e00 <UART_SetConfig+0x4d8>
 8007bf2:	bf00      	nop
 8007bf4:	40011000 	.word	0x40011000
 8007bf8:	40011400 	.word	0x40011400
 8007bfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c12:	4642      	mov	r2, r8
 8007c14:	464b      	mov	r3, r9
 8007c16:	1891      	adds	r1, r2, r2
 8007c18:	6239      	str	r1, [r7, #32]
 8007c1a:	415b      	adcs	r3, r3
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c22:	4641      	mov	r1, r8
 8007c24:	1854      	adds	r4, r2, r1
 8007c26:	4649      	mov	r1, r9
 8007c28:	eb43 0501 	adc.w	r5, r3, r1
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	f04f 0300 	mov.w	r3, #0
 8007c34:	00eb      	lsls	r3, r5, #3
 8007c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c3a:	00e2      	lsls	r2, r4, #3
 8007c3c:	4614      	mov	r4, r2
 8007c3e:	461d      	mov	r5, r3
 8007c40:	4643      	mov	r3, r8
 8007c42:	18e3      	adds	r3, r4, r3
 8007c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c48:	464b      	mov	r3, r9
 8007c4a:	eb45 0303 	adc.w	r3, r5, r3
 8007c4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c62:	f04f 0200 	mov.w	r2, #0
 8007c66:	f04f 0300 	mov.w	r3, #0
 8007c6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c6e:	4629      	mov	r1, r5
 8007c70:	008b      	lsls	r3, r1, #2
 8007c72:	4621      	mov	r1, r4
 8007c74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c78:	4621      	mov	r1, r4
 8007c7a:	008a      	lsls	r2, r1, #2
 8007c7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c80:	f7f8 fec0 	bl	8000a04 <__aeabi_uldivmod>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4b60      	ldr	r3, [pc, #384]	; (8007e0c <UART_SetConfig+0x4e4>)
 8007c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c8e:	095b      	lsrs	r3, r3, #5
 8007c90:	011c      	lsls	r4, r3, #4
 8007c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ca0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007ca4:	4642      	mov	r2, r8
 8007ca6:	464b      	mov	r3, r9
 8007ca8:	1891      	adds	r1, r2, r2
 8007caa:	61b9      	str	r1, [r7, #24]
 8007cac:	415b      	adcs	r3, r3
 8007cae:	61fb      	str	r3, [r7, #28]
 8007cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cb4:	4641      	mov	r1, r8
 8007cb6:	1851      	adds	r1, r2, r1
 8007cb8:	6139      	str	r1, [r7, #16]
 8007cba:	4649      	mov	r1, r9
 8007cbc:	414b      	adcs	r3, r1
 8007cbe:	617b      	str	r3, [r7, #20]
 8007cc0:	f04f 0200 	mov.w	r2, #0
 8007cc4:	f04f 0300 	mov.w	r3, #0
 8007cc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ccc:	4659      	mov	r1, fp
 8007cce:	00cb      	lsls	r3, r1, #3
 8007cd0:	4651      	mov	r1, sl
 8007cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cd6:	4651      	mov	r1, sl
 8007cd8:	00ca      	lsls	r2, r1, #3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	189b      	adds	r3, r3, r2
 8007ce4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ce8:	464b      	mov	r3, r9
 8007cea:	460a      	mov	r2, r1
 8007cec:	eb42 0303 	adc.w	r3, r2, r3
 8007cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007d00:	f04f 0200 	mov.w	r2, #0
 8007d04:	f04f 0300 	mov.w	r3, #0
 8007d08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	008b      	lsls	r3, r1, #2
 8007d10:	4641      	mov	r1, r8
 8007d12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d16:	4641      	mov	r1, r8
 8007d18:	008a      	lsls	r2, r1, #2
 8007d1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d1e:	f7f8 fe71 	bl	8000a04 <__aeabi_uldivmod>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4611      	mov	r1, r2
 8007d28:	4b38      	ldr	r3, [pc, #224]	; (8007e0c <UART_SetConfig+0x4e4>)
 8007d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d2e:	095b      	lsrs	r3, r3, #5
 8007d30:	2264      	movs	r2, #100	; 0x64
 8007d32:	fb02 f303 	mul.w	r3, r2, r3
 8007d36:	1acb      	subs	r3, r1, r3
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	3332      	adds	r3, #50	; 0x32
 8007d3c:	4a33      	ldr	r2, [pc, #204]	; (8007e0c <UART_SetConfig+0x4e4>)
 8007d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d42:	095b      	lsrs	r3, r3, #5
 8007d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d48:	441c      	add	r4, r3
 8007d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d4e:	2200      	movs	r2, #0
 8007d50:	673b      	str	r3, [r7, #112]	; 0x70
 8007d52:	677a      	str	r2, [r7, #116]	; 0x74
 8007d54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d58:	4642      	mov	r2, r8
 8007d5a:	464b      	mov	r3, r9
 8007d5c:	1891      	adds	r1, r2, r2
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	415b      	adcs	r3, r3
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d68:	4641      	mov	r1, r8
 8007d6a:	1851      	adds	r1, r2, r1
 8007d6c:	6039      	str	r1, [r7, #0]
 8007d6e:	4649      	mov	r1, r9
 8007d70:	414b      	adcs	r3, r1
 8007d72:	607b      	str	r3, [r7, #4]
 8007d74:	f04f 0200 	mov.w	r2, #0
 8007d78:	f04f 0300 	mov.w	r3, #0
 8007d7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d80:	4659      	mov	r1, fp
 8007d82:	00cb      	lsls	r3, r1, #3
 8007d84:	4651      	mov	r1, sl
 8007d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d8a:	4651      	mov	r1, sl
 8007d8c:	00ca      	lsls	r2, r1, #3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	4619      	mov	r1, r3
 8007d92:	4603      	mov	r3, r0
 8007d94:	4642      	mov	r2, r8
 8007d96:	189b      	adds	r3, r3, r2
 8007d98:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d9a:	464b      	mov	r3, r9
 8007d9c:	460a      	mov	r2, r1
 8007d9e:	eb42 0303 	adc.w	r3, r2, r3
 8007da2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	663b      	str	r3, [r7, #96]	; 0x60
 8007dae:	667a      	str	r2, [r7, #100]	; 0x64
 8007db0:	f04f 0200 	mov.w	r2, #0
 8007db4:	f04f 0300 	mov.w	r3, #0
 8007db8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	008b      	lsls	r3, r1, #2
 8007dc0:	4641      	mov	r1, r8
 8007dc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dc6:	4641      	mov	r1, r8
 8007dc8:	008a      	lsls	r2, r1, #2
 8007dca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007dce:	f7f8 fe19 	bl	8000a04 <__aeabi_uldivmod>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4b0d      	ldr	r3, [pc, #52]	; (8007e0c <UART_SetConfig+0x4e4>)
 8007dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ddc:	095b      	lsrs	r3, r3, #5
 8007dde:	2164      	movs	r1, #100	; 0x64
 8007de0:	fb01 f303 	mul.w	r3, r1, r3
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	3332      	adds	r3, #50	; 0x32
 8007dea:	4a08      	ldr	r2, [pc, #32]	; (8007e0c <UART_SetConfig+0x4e4>)
 8007dec:	fba2 2303 	umull	r2, r3, r2, r3
 8007df0:	095b      	lsrs	r3, r3, #5
 8007df2:	f003 020f 	and.w	r2, r3, #15
 8007df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4422      	add	r2, r4
 8007dfe:	609a      	str	r2, [r3, #8]
}
 8007e00:	bf00      	nop
 8007e02:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007e06:	46bd      	mov	sp, r7
 8007e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e0c:	51eb851f 	.word	0x51eb851f

08007e10 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	6812      	ldr	r2, [r2, #0]
 8007e28:	f023 0101 	bic.w	r1, r3, #1
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	2b08      	cmp	r3, #8
 8007e38:	d102      	bne.n	8007e40 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007e3a:	2340      	movs	r3, #64	; 0x40
 8007e3c:	617b      	str	r3, [r7, #20]
 8007e3e:	e001      	b.n	8007e44 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007e50:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007e56:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007e5c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007e62:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007e68:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007e6e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8007e74:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8007e7a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8007e80:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8007e86:	4313      	orrs	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8007e9e:	4b10      	ldr	r3, [pc, #64]	; (8007ee0 <FSMC_NORSRAM_Init+0xd0>)
 8007ea0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ea8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007eb0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	43db      	mvns	r3, r3
 8007ec0:	ea02 0103 	and.w	r1, r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	4319      	orrs	r1, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	371c      	adds	r7, #28
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	0008fb7f 	.word	0x0008fb7f

08007ee4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efa:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	011b      	lsls	r3, r3, #4
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	021b      	lsls	r3, r3, #8
 8007f10:	431a      	orrs	r2, r3
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	041b      	lsls	r3, r3, #16
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	051b      	lsls	r3, r3, #20
 8007f22:	431a      	orrs	r2, r3
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	3b02      	subs	r3, #2
 8007f2a:	061b      	lsls	r3, r3, #24
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	3201      	adds	r2, #1
 8007f38:	4319      	orrs	r1, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f64:	d11d      	bne.n	8007fa2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f6e:	4b13      	ldr	r3, [pc, #76]	; (8007fbc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007f70:	4013      	ands	r3, r2
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	6811      	ldr	r1, [r2, #0]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	6852      	ldr	r2, [r2, #4]
 8007f7a:	0112      	lsls	r2, r2, #4
 8007f7c:	4311      	orrs	r1, r2
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	6892      	ldr	r2, [r2, #8]
 8007f82:	0212      	lsls	r2, r2, #8
 8007f84:	4311      	orrs	r1, r2
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	6992      	ldr	r2, [r2, #24]
 8007f8a:	4311      	orrs	r1, r2
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	68d2      	ldr	r2, [r2, #12]
 8007f90:	0412      	lsls	r2, r2, #16
 8007f92:	430a      	orrs	r2, r1
 8007f94:	ea43 0102 	orr.w	r1, r3, r2
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007fa0:	e005      	b.n	8007fae <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	cff00000 	.word	0xcff00000

08007fc0 <memset>:
 8007fc0:	4402      	add	r2, r0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d100      	bne.n	8007fca <memset+0xa>
 8007fc8:	4770      	bx	lr
 8007fca:	f803 1b01 	strb.w	r1, [r3], #1
 8007fce:	e7f9      	b.n	8007fc4 <memset+0x4>

08007fd0 <__libc_init_array>:
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	4d0d      	ldr	r5, [pc, #52]	; (8008008 <__libc_init_array+0x38>)
 8007fd4:	4c0d      	ldr	r4, [pc, #52]	; (800800c <__libc_init_array+0x3c>)
 8007fd6:	1b64      	subs	r4, r4, r5
 8007fd8:	10a4      	asrs	r4, r4, #2
 8007fda:	2600      	movs	r6, #0
 8007fdc:	42a6      	cmp	r6, r4
 8007fde:	d109      	bne.n	8007ff4 <__libc_init_array+0x24>
 8007fe0:	4d0b      	ldr	r5, [pc, #44]	; (8008010 <__libc_init_array+0x40>)
 8007fe2:	4c0c      	ldr	r4, [pc, #48]	; (8008014 <__libc_init_array+0x44>)
 8007fe4:	f000 f818 	bl	8008018 <_init>
 8007fe8:	1b64      	subs	r4, r4, r5
 8007fea:	10a4      	asrs	r4, r4, #2
 8007fec:	2600      	movs	r6, #0
 8007fee:	42a6      	cmp	r6, r4
 8007ff0:	d105      	bne.n	8007ffe <__libc_init_array+0x2e>
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff8:	4798      	blx	r3
 8007ffa:	3601      	adds	r6, #1
 8007ffc:	e7ee      	b.n	8007fdc <__libc_init_array+0xc>
 8007ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008002:	4798      	blx	r3
 8008004:	3601      	adds	r6, #1
 8008006:	e7f2      	b.n	8007fee <__libc_init_array+0x1e>
 8008008:	0800b018 	.word	0x0800b018
 800800c:	0800b018 	.word	0x0800b018
 8008010:	0800b018 	.word	0x0800b018
 8008014:	0800b01c 	.word	0x0800b01c

08008018 <_init>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	bf00      	nop
 800801c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801e:	bc08      	pop	{r3}
 8008020:	469e      	mov	lr, r3
 8008022:	4770      	bx	lr

08008024 <_fini>:
 8008024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008026:	bf00      	nop
 8008028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802a:	bc08      	pop	{r3}
 800802c:	469e      	mov	lr, r3
 800802e:	4770      	bx	lr
