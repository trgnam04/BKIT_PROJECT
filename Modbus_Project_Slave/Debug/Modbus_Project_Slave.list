
Modbus_Project_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077f8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe0  08007980  08007980  00008980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a960  0800a960  0000c20c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a960  0800a960  0000b960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a968  0800a968  0000c20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a968  0800a968  0000b968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a96c  0800a96c  0000b96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800a970  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c20c  2**0
                  CONTENTS
 10 .bss          00000584  2000020c  2000020c  0000c20c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000790  20000790  0000c20c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a8c4  00000000  00000000  0000c23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000446e  00000000  00000000  00026b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0002af70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011f4  00000000  00000000  0002c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026333  00000000  00000000  0002d88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002041f  00000000  00000000  00053bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfeca  00000000  00000000  00073fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00153ea8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006038  00000000  00000000  00153eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00159f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000020c 	.word	0x2000020c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007968 	.word	0x08007968

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000210 	.word	0x20000210
 80001c4:	08007968 	.word	0x08007968

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <InitSlave>:
#include "lcd.h"

Slave_Device BKIT01;


void InitSlave(Slave_Device* hDev){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	hDev->signal = IDLE;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	705a      	strb	r2, [r3, #1]
	hDev->subsignal.s = 0;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
	hDev->Address = SLAVE_ADDRESS;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	759a      	strb	r2, [r3, #22]
	memset(hDev->Register, 0, sizeof(hDev->Register));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3302      	adds	r3, #2
 8000d12:	2214      	movs	r2, #20
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f006 fdfa 	bl	8007910 <memset>
	Modbus_Init(&slave, &huart3);
 8000d1c:	4903      	ldr	r1, [pc, #12]	@ (8000d2c <InitSlave+0x38>)
 8000d1e:	4804      	ldr	r0, [pc, #16]	@ (8000d30 <InitSlave+0x3c>)
 8000d20:	f001 fd04 	bl	800272c <Modbus_Init>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000744 	.word	0x20000744
 8000d30:	20000398 	.word	0x20000398

08000d34 <CommandParser_handler>:

void CommandParser_handler(Slave_Device* hDev){
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	switch(slave.Rx_buf[1]){
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000db8 <CommandParser_handler+0x84>)
 8000d3e:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 8000d42:	3b01      	subs	r3, #1
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d831      	bhi.n	8000dac <CommandParser_handler+0x78>
 8000d48:	a201      	add	r2, pc, #4	@ (adr r2, 8000d50 <CommandParser_handler+0x1c>)
 8000d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4e:	bf00      	nop
 8000d50:	08000da9 	.word	0x08000da9
 8000d54:	08000da9 	.word	0x08000da9
 8000d58:	08000d91 	.word	0x08000d91
 8000d5c:	08000da9 	.word	0x08000da9
 8000d60:	08000da9 	.word	0x08000da9
 8000d64:	08000d99 	.word	0x08000d99
 8000d68:	08000dad 	.word	0x08000dad
 8000d6c:	08000dad 	.word	0x08000dad
 8000d70:	08000dad 	.word	0x08000dad
 8000d74:	08000dad 	.word	0x08000dad
 8000d78:	08000dad 	.word	0x08000dad
 8000d7c:	08000dad 	.word	0x08000dad
 8000d80:	08000dad 	.word	0x08000dad
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	08000da9 	.word	0x08000da9
 8000d8c:	08000da1 	.word	0x08000da1
	}
	case READ_DISCRETE_INPUT:{
		break;
	}
	case READ_HOLDING_REGISTER:{
		hDev->signal = READ_MULTIPLE_HOLDING_REGISTER_HANDLER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2203      	movs	r2, #3
 8000d94:	705a      	strb	r2, [r3, #1]
		break;
 8000d96:	e008      	b.n	8000daa <CommandParser_handler+0x76>
	}
	case WRITE_SINGLE_COIL:{
		break;
	}
	case WRITE_SINGLE_HOLDING_REGISTER:{
		hDev->signal = WRITE_HOLDING_REGISTER_HANDLER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	705a      	strb	r2, [r3, #1]
		break;
 8000d9e:	e004      	b.n	8000daa <CommandParser_handler+0x76>
	}
	case WRITE_MULTIPLE_COIL:{
		break;
	}
	case WRITE_MULTIPLE_HOLDING_REGISTER:{
		hDev->signal = READ_MULTIPLE_HOLDING_REGISTER_HANDLER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2203      	movs	r2, #3
 8000da4:	705a      	strb	r2, [r3, #1]
		break;
 8000da6:	e000      	b.n	8000daa <CommandParser_handler+0x76>
		break;
 8000da8:	bf00      	nop
	}
	}
	return;
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
}
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	20000398 	.word	0x20000398

08000dbc <splitFloat>:

void splitFloat(float _input, uint8_t *data) {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dc6:	6038      	str	r0, [r7, #0]
	data[0] = *(((uint8_t*)&_input)+0);
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	701a      	strb	r2, [r3, #0]
	    data[1] = *(((uint8_t*)&_input)+1);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	797a      	ldrb	r2, [r7, #5]
 8000dd6:	701a      	strb	r2, [r3, #0]
	    data[2] = *(((uint8_t*)&_input)+2);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	3302      	adds	r3, #2
 8000ddc:	79ba      	ldrb	r2, [r7, #6]
 8000dde:	701a      	strb	r2, [r3, #0]
	    data[3] = *(((uint8_t*)&_input)+3);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	3303      	adds	r3, #3
 8000de4:	79fa      	ldrb	r2, [r7, #7]
 8000de6:	701a      	strb	r2, [r3, #0]
//	memcpy(data, &_input, sizeof(float));
};
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <splitUint16>:

void splitUint16(uint16_t input, uint8_t *higherByte, uint8_t *lowerByte) {
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	81fb      	strh	r3, [r7, #14]
    *higherByte = (input >> 8) & 0xFF; // Lấy 8 bit cao
 8000e02:	89fb      	ldrh	r3, [r7, #14]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	701a      	strb	r2, [r3, #0]
    *lowerByte = input & 0xFF;        // Lấy 8 bit thấp
 8000e0e:	89fb      	ldrh	r3, [r7, #14]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	701a      	strb	r2, [r3, #0]
}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <Read_multiple_holding_register_handler>:


void Read_multiple_holding_register_handler(Slave_Device* hDev){
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	6078      	str	r0, [r7, #4]
	uint16_t startReg = (uint16_t)(slave.Rx_buf[2]) << 8 | (uint16_t)(slave.Rx_buf[3]);
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <Read_multiple_holding_register_handler+0x6c>)
 8000e2e:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <Read_multiple_holding_register_handler+0x6c>)
 8000e38:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	81fb      	strh	r3, [r7, #14]
	uint16_t numberOfReg = (uint16_t)(slave.Rx_buf[4]) << 8 | (uint16_t)(slave.Rx_buf[5]);
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <Read_multiple_holding_register_handler+0x6c>)
 8000e46:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <Read_multiple_holding_register_handler+0x6c>)
 8000e50:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b21b      	sxth	r3, r3
 8000e5a:	81bb      	strh	r3, [r7, #12]
	Modbus_Transmit_Slave(&slave, hDev->Address, slave.Rx_buf[1], &hDev->Register[startReg], numberOfReg * 2, 100);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7d99      	ldrb	r1, [r3, #22]
 8000e60:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <Read_multiple_holding_register_handler+0x6c>)
 8000e62:	f893 0109 	ldrb.w	r0, [r3, #265]	@ 0x109
 8000e66:	89fb      	ldrh	r3, [r7, #14]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	1c9a      	adds	r2, r3, #2
 8000e6e:	89bb      	ldrh	r3, [r7, #12]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2464      	movs	r4, #100	@ 0x64
 8000e78:	9401      	str	r4, [sp, #4]
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	4602      	mov	r2, r0
 8000e80:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <Read_multiple_holding_register_handler+0x6c>)
 8000e82:	f001 fbb0 	bl	80025e6 <Modbus_Transmit_Slave>
	return;
 8000e86:	bf00      	nop
}
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000398 	.word	0x20000398

08000e94 <Read_holding_register_handler>:

void Read_holding_register_handler(Slave_Device* hDev){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	data[0] = 3;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	733b      	strb	r3, [r7, #12]
	data[1] = hDev->Register[slave.Rx_buf[2]];
 8000ea0:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <Read_holding_register_handler+0x50>)
 8000ea2:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4413      	add	r3, r2
 8000eac:	789b      	ldrb	r3, [r3, #2]
 8000eae:	737b      	strb	r3, [r7, #13]
	data[2] = hDev->Register[slave.Rx_buf[2] + 1];
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <Read_holding_register_handler+0x50>)
 8000eb2:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	4413      	add	r3, r2
 8000ebc:	789b      	ldrb	r3, [r3, #2]
 8000ebe:	73bb      	strb	r3, [r7, #14]
	Modbus_Transmit_Slave(&slave, hDev->Address, slave.Rx_buf[1], data, 3, 100);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7d99      	ldrb	r1, [r3, #22]
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <Read_holding_register_handler+0x50>)
 8000ec6:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	2064      	movs	r0, #100	@ 0x64
 8000ed0:	9001      	str	r0, [sp, #4]
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	9000      	str	r0, [sp, #0]
 8000ed6:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <Read_holding_register_handler+0x50>)
 8000ed8:	f001 fb85 	bl	80025e6 <Modbus_Transmit_Slave>
	return;
 8000edc:	bf00      	nop
}
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000398 	.word	0x20000398

08000ee8 <ReadData>:

static void ReadData(Slave_Device* hDev){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	float tempCur = sensor_get_current();
 8000ef0:	f001 fcbe 	bl	8002870 <sensor_get_current>
 8000ef4:	ed87 0a05 	vstr	s0, [r7, #20]
	uint16_t tempLt = sensor_get_light();
 8000ef8:	f001 fc64 	bl	80027c4 <sensor_get_light>
 8000efc:	4603      	mov	r3, r0
 8000efe:	827b      	strh	r3, [r7, #18]
	uint16_t tempPt =sensor_get_potentiometer();
 8000f00:	f001 fc6c 	bl	80027dc <sensor_get_potentiometer>
 8000f04:	4603      	mov	r3, r0
 8000f06:	823b      	strh	r3, [r7, #16]
	float tempT = sensor_get_temperature();
 8000f08:	f001 fd0e 	bl	8002928 <sensor_get_temperature>
 8000f0c:	ed87 0a03 	vstr	s0, [r7, #12]
	float tempVol = sensor_get_voltage();
 8000f10:	f001 fc72 	bl	80027f8 <sensor_get_voltage>
 8000f14:	ed87 0a02 	vstr	s0, [r7, #8]

	// Current
	splitFloat(tempCur, &hDev->Register[CURRENT_REGISTER_ADDRESS]);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	330c      	adds	r3, #12
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f22:	f7ff ff4b 	bl	8000dbc <splitFloat>
	// Temperature
	splitFloat(tempT, &hDev->Register[TEMPERATURE_REGISTER_ADDRESS]);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3308      	adds	r3, #8
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f30:	f7ff ff44 	bl	8000dbc <splitFloat>
	// Voltage
	splitFloat(tempVol, &hDev->Register[VOLTAGE_REGISTER_ADDRESS]);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3310      	adds	r3, #16
 8000f38:	4618      	mov	r0, r3
 8000f3a:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f3e:	f7ff ff3d 	bl	8000dbc <splitFloat>
	// Light
	splitUint16(tempLt, &hDev->Register[LIGHT_REGISTER_ADDRESS], &hDev->Register[LIGHT_REGISTER_ADDRESS + 1]);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	1d99      	adds	r1, r3, #6
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	1dda      	adds	r2, r3, #7
 8000f4a:	8a7b      	ldrh	r3, [r7, #18]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff51 	bl	8000df4 <splitUint16>
	// Potentiometer
	splitUint16(tempPt, &hDev->Register[POTENTIOMETER_REGISTER_ADDRESS], &hDev->Register[POTENTIOMETER_REGISTER_ADDRESS + 1]);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	1c99      	adds	r1, r3, #2
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	1cda      	adds	r2, r3, #3
 8000f5a:	8a3b      	ldrh	r3, [r7, #16]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff49 	bl	8000df4 <splitUint16>

}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <Write_holding_register_handler>:

void Write_holding_register_handler(Slave_Device* hDev){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, slave.Rx_buf, slave.Rx_size, 1000);
 8000f74:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <Write_holding_register_handler+0xa8>)
 8000f76:	f8b3 2208 	ldrh.w	r2, [r3, #520]	@ 0x208
 8000f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7e:	4926      	ldr	r1, [pc, #152]	@ (8001018 <Write_holding_register_handler+0xac>)
 8000f80:	4826      	ldr	r0, [pc, #152]	@ (800101c <Write_holding_register_handler+0xb0>)
 8000f82:	f005 fbb1 	bl	80066e8 <HAL_UART_Transmit>
	hDev->Register[LED_REGISTER_ADDRESS] = slave.Rx_buf[4];
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <Write_holding_register_handler+0xa8>)
 8000f88:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	711a      	strb	r2, [r3, #4]
	hDev->Register[LED_REGISTER_ADDRESS + 1] = slave.Rx_buf[5];
 8000f90:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <Write_holding_register_handler+0xa8>)
 8000f92:	f893 210d 	ldrb.w	r2, [r3, #269]	@ 0x10d
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	715a      	strb	r2, [r3, #5]
	uint8_t CoilState = hDev->Register[LED_REGISTER_ADDRESS + 1];
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	795b      	ldrb	r3, [r3, #5]
 8000f9e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, CoilState & COIL_A);
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	2120      	movs	r1, #32
 8000fac:	481c      	ldr	r0, [pc, #112]	@ (8001020 <Write_holding_register_handler+0xb4>)
 8000fae:	f003 fc3b 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, CoilState & COIL_B);
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2140      	movs	r1, #64	@ 0x40
 8000fbe:	4818      	ldr	r0, [pc, #96]	@ (8001020 <Write_holding_register_handler+0xb4>)
 8000fc0:	f003 fc32 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X0_GPIO_Port, OUTPUT_X0_Pin, CoilState & COIL_C);
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	2140      	movs	r1, #64	@ 0x40
 8000fd0:	4814      	ldr	r0, [pc, #80]	@ (8001024 <Write_holding_register_handler+0xb8>)
 8000fd2:	f003 fc29 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X1_GPIO_Port, OUTPUT_X1_Pin, CoilState & COIL_D);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2180      	movs	r1, #128	@ 0x80
 8000fe2:	4810      	ldr	r0, [pc, #64]	@ (8001024 <Write_holding_register_handler+0xb8>)
 8000fe4:	f003 fc20 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X2_GPIO_Port, OUTPUT_X2_Pin, CoilState & COIL_E);
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <Write_holding_register_handler+0xbc>)
 8000ff6:	f003 fc17 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X3_GPIO_Port, OUTPUT_X3_Pin, CoilState & COIL_F);
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	b2db      	uxtb	r3, r3
 8001002:	461a      	mov	r2, r3
 8001004:	2120      	movs	r1, #32
 8001006:	4808      	ldr	r0, [pc, #32]	@ (8001028 <Write_holding_register_handler+0xbc>)
 8001008:	f003 fc0e 	bl	8004828 <HAL_GPIO_WritePin>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000398 	.word	0x20000398
 8001018:	200004a0 	.word	0x200004a0
 800101c:	20000744 	.word	0x20000744
 8001020:	40021000 	.word	0x40021000
 8001024:	40020000 	.word	0x40020000
 8001028:	40020800 	.word	0x40020800

0800102c <slave_behavior>:
		HAL_GPIO_WritePin(OUTPUT_X1_GPIO_Port, OUTPUT_X1_Pin, RESET);
		HAL_GPIO_WritePin(OUTPUT_X2_GPIO_Port, OUTPUT_X2_Pin, RESET);
		HAL_GPIO_WritePin(OUTPUT_X3_GPIO_Port, OUTPUT_X3_Pin, RESET);
};

void slave_behavior(Slave_Device* hDev){
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	switch(hDev->signal){
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	785b      	ldrb	r3, [r3, #1]
 8001038:	2b05      	cmp	r3, #5
 800103a:	d83b      	bhi.n	80010b4 <slave_behavior+0x88>
 800103c:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <slave_behavior+0x18>)
 800103e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001042:	bf00      	nop
 8001044:	0800105d 	.word	0x0800105d
 8001048:	08001065 	.word	0x08001065
 800104c:	08001081 	.word	0x08001081
 8001050:	08001097 	.word	0x08001097
 8001054:	08001089 	.word	0x08001089
 8001058:	080010a5 	.word	0x080010a5
	case IDLE:{
		hDev->signal = WAITTING_FOR_CMD;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	705a      	strb	r2, [r3, #1]
		break;
 8001062:	e027      	b.n	80010b4 <slave_behavior+0x88>
	}
	case WAITTING_FOR_CMD:{
		ReadData(hDev);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff3f 	bl	8000ee8 <ReadData>
		if(Receive_Flag){
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <slave_behavior+0x90>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d01f      	beq.n	80010b2 <slave_behavior+0x86>
			hDev->signal = COMMAND_PARSER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2202      	movs	r2, #2
 8001076:	705a      	strb	r2, [r3, #1]
			Receive_Flag = 0;
 8001078:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <slave_behavior+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
			break;
 800107e:	e019      	b.n	80010b4 <slave_behavior+0x88>
		}
		break;
	}
	case COMMAND_PARSER:{
		CommandParser_handler(hDev);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff fe57 	bl	8000d34 <CommandParser_handler>
		break;
 8001086:	e015      	b.n	80010b4 <slave_behavior+0x88>
	}
	case READ_HOLDING_REGISTER_HANDLER:{
		Read_holding_register_handler(hDev);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff03 	bl	8000e94 <Read_holding_register_handler>
		hDev->signal = IDLE;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	705a      	strb	r2, [r3, #1]
		break;
 8001094:	e00e      	b.n	80010b4 <slave_behavior+0x88>
	}
	case READ_MULTIPLE_HOLDING_REGISTER_HANDLER:{
		Read_multiple_holding_register_handler(hDev);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fec4 	bl	8000e24 <Read_multiple_holding_register_handler>
		hDev->signal = IDLE;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	705a      	strb	r2, [r3, #1]
		break;
 80010a2:	e007      	b.n	80010b4 <slave_behavior+0x88>
	}
	case WRITE_HOLDING_REGISTER_HANDLER:{
		Write_holding_register_handler(hDev);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff61 	bl	8000f6c <Write_holding_register_handler>
		hDev->signal = IDLE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	705a      	strb	r2, [r3, #1]
		break;
 80010b0:	e000      	b.n	80010b4 <slave_behavior+0x88>
		break;
 80010b2:	bf00      	nop
	}
	}
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000397 	.word	0x20000397

080010c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d2:	4b3d      	ldr	r3, [pc, #244]	@ (80011c8 <MX_ADC1_Init+0x108>)
 80010d4:	4a3d      	ldr	r2, [pc, #244]	@ (80011cc <MX_ADC1_Init+0x10c>)
 80010d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010d8:	4b3b      	ldr	r3, [pc, #236]	@ (80011c8 <MX_ADC1_Init+0x108>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010de:	4b3a      	ldr	r3, [pc, #232]	@ (80011c8 <MX_ADC1_Init+0x108>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010e4:	4b38      	ldr	r3, [pc, #224]	@ (80011c8 <MX_ADC1_Init+0x108>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ea:	4b37      	ldr	r3, [pc, #220]	@ (80011c8 <MX_ADC1_Init+0x108>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f0:	4b35      	ldr	r3, [pc, #212]	@ (80011c8 <MX_ADC1_Init+0x108>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010f8:	4b33      	ldr	r3, [pc, #204]	@ (80011c8 <MX_ADC1_Init+0x108>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fe:	4b32      	ldr	r3, [pc, #200]	@ (80011c8 <MX_ADC1_Init+0x108>)
 8001100:	4a33      	ldr	r2, [pc, #204]	@ (80011d0 <MX_ADC1_Init+0x110>)
 8001102:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001104:	4b30      	ldr	r3, [pc, #192]	@ (80011c8 <MX_ADC1_Init+0x108>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800110a:	4b2f      	ldr	r3, [pc, #188]	@ (80011c8 <MX_ADC1_Init+0x108>)
 800110c:	2205      	movs	r2, #5
 800110e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001110:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <MX_ADC1_Init+0x108>)
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001118:	4b2b      	ldr	r3, [pc, #172]	@ (80011c8 <MX_ADC1_Init+0x108>)
 800111a:	2201      	movs	r2, #1
 800111c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800111e:	482a      	ldr	r0, [pc, #168]	@ (80011c8 <MX_ADC1_Init+0x108>)
 8001120:	f002 f8c0 	bl	80032a4 <HAL_ADC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800112a:	f001 f9e5 	bl	80024f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800112e:	2308      	movs	r3, #8
 8001130:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001132:	2301      	movs	r3, #1
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4822      	ldr	r0, [pc, #136]	@ (80011c8 <MX_ADC1_Init+0x108>)
 8001140:	f002 fa22 	bl	8003588 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800114a:	f001 f9d5 	bl	80024f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800114e:	2309      	movs	r3, #9
 8001150:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001152:	2302      	movs	r3, #2
 8001154:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	481b      	ldr	r0, [pc, #108]	@ (80011c8 <MX_ADC1_Init+0x108>)
 800115c:	f002 fa14 	bl	8003588 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001166:	f001 f9c7 	bl	80024f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800116a:	230a      	movs	r3, #10
 800116c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800116e:	2303      	movs	r3, #3
 8001170:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	4814      	ldr	r0, [pc, #80]	@ (80011c8 <MX_ADC1_Init+0x108>)
 8001178:	f002 fa06 	bl	8003588 <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001182:	f001 f9b9 	bl	80024f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001186:	230b      	movs	r3, #11
 8001188:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800118a:	2304      	movs	r3, #4
 800118c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	@ (80011c8 <MX_ADC1_Init+0x108>)
 8001194:	f002 f9f8 	bl	8003588 <HAL_ADC_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800119e:	f001 f9ab 	bl	80024f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80011a2:	230c      	movs	r3, #12
 80011a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80011a6:	2305      	movs	r3, #5
 80011a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	@ (80011c8 <MX_ADC1_Init+0x108>)
 80011b0:	f002 f9ea 	bl	8003588 <HAL_ADC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80011ba:	f001 f99d 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000240 	.word	0x20000240
 80011cc:	40012000 	.word	0x40012000
 80011d0:	0f000001 	.word	0x0f000001

080011d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a3c      	ldr	r2, [pc, #240]	@ (80012e4 <HAL_ADC_MspInit+0x110>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d171      	bne.n	80012da <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <HAL_ADC_MspInit+0x114>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	4a3a      	ldr	r2, [pc, #232]	@ (80012e8 <HAL_ADC_MspInit+0x114>)
 8001200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001204:	6453      	str	r3, [r2, #68]	@ 0x44
 8001206:	4b38      	ldr	r3, [pc, #224]	@ (80012e8 <HAL_ADC_MspInit+0x114>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <HAL_ADC_MspInit+0x114>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a33      	ldr	r2, [pc, #204]	@ (80012e8 <HAL_ADC_MspInit+0x114>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <HAL_ADC_MspInit+0x114>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	4b2d      	ldr	r3, [pc, #180]	@ (80012e8 <HAL_ADC_MspInit+0x114>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a2c      	ldr	r2, [pc, #176]	@ (80012e8 <HAL_ADC_MspInit+0x114>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <HAL_ADC_MspInit+0x114>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800124a:	2307      	movs	r3, #7
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124e:	2303      	movs	r3, #3
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4823      	ldr	r0, [pc, #140]	@ (80012ec <HAL_ADC_MspInit+0x118>)
 800125e:	f003 f947 	bl	80044f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001262:	2303      	movs	r3, #3
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001266:	2303      	movs	r3, #3
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	481e      	ldr	r0, [pc, #120]	@ (80012f0 <HAL_ADC_MspInit+0x11c>)
 8001276:	f003 f93b 	bl	80044f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800127a:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <HAL_ADC_MspInit+0x120>)
 800127c:	4a1e      	ldr	r2, [pc, #120]	@ (80012f8 <HAL_ADC_MspInit+0x124>)
 800127e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001280:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <HAL_ADC_MspInit+0x120>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001286:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <HAL_ADC_MspInit+0x120>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <HAL_ADC_MspInit+0x120>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <HAL_ADC_MspInit+0x120>)
 8001294:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001298:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800129a:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <HAL_ADC_MspInit+0x120>)
 800129c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012a2:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <HAL_ADC_MspInit+0x120>)
 80012a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_ADC_MspInit+0x120>)
 80012ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <HAL_ADC_MspInit+0x120>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <HAL_ADC_MspInit+0x120>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012be:	480d      	ldr	r0, [pc, #52]	@ (80012f4 <HAL_ADC_MspInit+0x120>)
 80012c0:	f002 fd14 	bl	8003cec <HAL_DMA_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80012ca:	f001 f915 	bl	80024f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <HAL_ADC_MspInit+0x120>)
 80012d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <HAL_ADC_MspInit+0x120>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	@ 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40012000 	.word	0x40012000
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020400 	.word	0x40020400
 80012f4:	20000288 	.word	0x20000288
 80012f8:	40026410 	.word	0x40026410

080012fc <button_init>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void button_init() {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001300:	2201      	movs	r2, #1
 8001302:	2108      	movs	r1, #8
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <button_init+0x14>)
 8001306:	f003 fa8f 	bl	8004828 <HAL_GPIO_WritePin>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40020c00 	.word	0x40020c00

08001314 <buzzer_init>:

/* Variables */
uint8_t buzzerduty_cycle = 0;

/* Functions */
void buzzer_init() {
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001318:	2100      	movs	r1, #0
 800131a:	4802      	ldr	r0, [pc, #8]	@ (8001324 <buzzer_init+0x10>)
 800131c:	f004 fa7e 	bl	800581c <HAL_TIM_PWM_Start>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200006b4 	.word	0x200006b4

08001328 <crc16>:
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

uint16_t crc16(const uint8_t *data, uint16_t num_bytes)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8001334:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001338:	82fb      	strh	r3, [r7, #22]
    const uint8_t *ptr = data;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	613b      	str	r3, [r7, #16]

    if (ptr != NULL)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d018      	beq.n	8001376 <crc16+0x4e>
    {
        for (uint16_t i = 0; i < num_bytes; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	81fb      	strh	r3, [r7, #14]
 8001348:	e011      	b.n	800136e <crc16+0x46>
        {
            crc = (crc >> 8) ^ crc16_lookup_table[(crc ^ (uint16_t)*ptr++) & 0x00FF];
 800134a:	8afb      	ldrh	r3, [r7, #22]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	b29a      	uxth	r2, r3
 8001350:	8af9      	ldrh	r1, [r7, #22]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1c58      	adds	r0, r3, #1
 8001356:	6138      	str	r0, [r7, #16]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	404b      	eors	r3, r1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4909      	ldr	r1, [pc, #36]	@ (8001384 <crc16+0x5c>)
 8001360:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001364:	4053      	eors	r3, r2
 8001366:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < num_bytes; i++)
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	3301      	adds	r3, #1
 800136c:	81fb      	strh	r3, [r7, #14]
 800136e:	89fa      	ldrh	r2, [r7, #14]
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	429a      	cmp	r2, r3
 8001374:	d3e9      	bcc.n	800134a <crc16+0x22>
        }
    }

    return crc;
 8001376:	8afb      	ldrh	r3, [r7, #22]
}
 8001378:	4618      	mov	r0, r3
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	20000000 	.word	0x20000000

08001388 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <MX_DMA_Init+0x3c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a0b      	ldr	r2, [pc, #44]	@ (80013c4 <MX_DMA_Init+0x3c>)
 8001398:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <MX_DMA_Init+0x3c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	2038      	movs	r0, #56	@ 0x38
 80013b0:	f002 fc65 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013b4:	2038      	movs	r0, #56	@ 0x38
 80013b6:	f002 fc7e 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800

080013c8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	@ 0x38
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	615a      	str	r2, [r3, #20]
 80013e0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80013e2:	463b      	mov	r3, r7
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
 80013f0:	615a      	str	r2, [r3, #20]
 80013f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80013f4:	4b2f      	ldr	r3, [pc, #188]	@ (80014b4 <MX_FSMC_Init+0xec>)
 80013f6:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80013fa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80013fc:	4b2d      	ldr	r3, [pc, #180]	@ (80014b4 <MX_FSMC_Init+0xec>)
 80013fe:	4a2e      	ldr	r2, [pc, #184]	@ (80014b8 <MX_FSMC_Init+0xf0>)
 8001400:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001402:	4b2c      	ldr	r3, [pc, #176]	@ (80014b4 <MX_FSMC_Init+0xec>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001408:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <MX_FSMC_Init+0xec>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800140e:	4b29      	ldr	r3, [pc, #164]	@ (80014b4 <MX_FSMC_Init+0xec>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001414:	4b27      	ldr	r3, [pc, #156]	@ (80014b4 <MX_FSMC_Init+0xec>)
 8001416:	2210      	movs	r2, #16
 8001418:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800141a:	4b26      	ldr	r3, [pc, #152]	@ (80014b4 <MX_FSMC_Init+0xec>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001420:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <MX_FSMC_Init+0xec>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001426:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <MX_FSMC_Init+0xec>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800142c:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <MX_FSMC_Init+0xec>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001432:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <MX_FSMC_Init+0xec>)
 8001434:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001438:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800143a:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <MX_FSMC_Init+0xec>)
 800143c:	2200      	movs	r2, #0
 800143e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001440:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <MX_FSMC_Init+0xec>)
 8001442:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001446:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001448:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <MX_FSMC_Init+0xec>)
 800144a:	2200      	movs	r2, #0
 800144c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800144e:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <MX_FSMC_Init+0xec>)
 8001450:	2200      	movs	r2, #0
 8001452:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001454:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <MX_FSMC_Init+0xec>)
 8001456:	2200      	movs	r2, #0
 8001458:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800145a:	230f      	movs	r3, #15
 800145c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800145e:	230f      	movs	r3, #15
 8001460:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001462:	233c      	movs	r3, #60	@ 0x3c
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800146a:	2310      	movs	r3, #16
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 800146e:	2311      	movs	r3, #17
 8001470:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001472:	2300      	movs	r3, #0
 8001474:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001476:	2308      	movs	r3, #8
 8001478:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800147a:	230f      	movs	r3, #15
 800147c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800147e:	2309      	movs	r3, #9
 8001480:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001486:	2310      	movs	r3, #16
 8001488:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800148a:	2311      	movs	r3, #17
 800148c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001492:	463a      	mov	r2, r7
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	@ (80014b4 <MX_FSMC_Init+0xec>)
 800149c:	f004 f85d 	bl	800555a <HAL_SRAM_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80014a6:	f001 f827 	bl	80024f8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80014aa:	bf00      	nop
 80014ac:	3738      	adds	r7, #56	@ 0x38
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200002e8 	.word	0x200002e8
 80014b8:	a0000104 	.word	0xa0000104

080014bc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80014d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <HAL_FSMC_MspInit+0x88>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d131      	bne.n	800153c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <HAL_FSMC_MspInit+0x88>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <HAL_FSMC_MspInit+0x8c>)
 80014e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014e6:	4a18      	ldr	r2, [pc, #96]	@ (8001548 <HAL_FSMC_MspInit+0x8c>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6393      	str	r3, [r2, #56]	@ 0x38
 80014ee:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <HAL_FSMC_MspInit+0x8c>)
 80014f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80014fa:	f64f 7388 	movw	r3, #65416	@ 0xff88
 80014fe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800150c:	230c      	movs	r3, #12
 800150e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	480d      	ldr	r0, [pc, #52]	@ (800154c <HAL_FSMC_MspInit+0x90>)
 8001516:	f002 ffeb 	bl	80044f0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800151a:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 800151e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800152c:	230c      	movs	r3, #12
 800152e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	4619      	mov	r1, r3
 8001534:	4806      	ldr	r0, [pc, #24]	@ (8001550 <HAL_FSMC_MspInit+0x94>)
 8001536:	f002 ffdb 	bl	80044f0 <HAL_GPIO_Init>
 800153a:	e000      	b.n	800153e <HAL_FSMC_MspInit+0x82>
    return;
 800153c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000338 	.word	0x20000338
 8001548:	40023800 	.word	0x40023800
 800154c:	40021000 	.word	0x40021000
 8001550:	40020c00 	.word	0x40020c00

08001554 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800155c:	f7ff ffae 	bl	80014bc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08e      	sub	sp, #56	@ 0x38
 800156c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
 8001582:	4b76      	ldr	r3, [pc, #472]	@ (800175c <MX_GPIO_Init+0x1f4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a75      	ldr	r2, [pc, #468]	@ (800175c <MX_GPIO_Init+0x1f4>)
 8001588:	f043 0310 	orr.w	r3, r3, #16
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b73      	ldr	r3, [pc, #460]	@ (800175c <MX_GPIO_Init+0x1f4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	623b      	str	r3, [r7, #32]
 8001598:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	4b6f      	ldr	r3, [pc, #444]	@ (800175c <MX_GPIO_Init+0x1f4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a6e      	ldr	r2, [pc, #440]	@ (800175c <MX_GPIO_Init+0x1f4>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b6c      	ldr	r3, [pc, #432]	@ (800175c <MX_GPIO_Init+0x1f4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	4b68      	ldr	r3, [pc, #416]	@ (800175c <MX_GPIO_Init+0x1f4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a67      	ldr	r2, [pc, #412]	@ (800175c <MX_GPIO_Init+0x1f4>)
 80015c0:	f043 0320 	orr.w	r3, r3, #32
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b65      	ldr	r3, [pc, #404]	@ (800175c <MX_GPIO_Init+0x1f4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0320 	and.w	r3, r3, #32
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	4b61      	ldr	r3, [pc, #388]	@ (800175c <MX_GPIO_Init+0x1f4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a60      	ldr	r2, [pc, #384]	@ (800175c <MX_GPIO_Init+0x1f4>)
 80015dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <MX_GPIO_Init+0x1f4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b5a      	ldr	r3, [pc, #360]	@ (800175c <MX_GPIO_Init+0x1f4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a59      	ldr	r2, [pc, #356]	@ (800175c <MX_GPIO_Init+0x1f4>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b57      	ldr	r3, [pc, #348]	@ (800175c <MX_GPIO_Init+0x1f4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b53      	ldr	r3, [pc, #332]	@ (800175c <MX_GPIO_Init+0x1f4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a52      	ldr	r2, [pc, #328]	@ (800175c <MX_GPIO_Init+0x1f4>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b50      	ldr	r3, [pc, #320]	@ (800175c <MX_GPIO_Init+0x1f4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b4c      	ldr	r3, [pc, #304]	@ (800175c <MX_GPIO_Init+0x1f4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a4b      	ldr	r2, [pc, #300]	@ (800175c <MX_GPIO_Init+0x1f4>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b49      	ldr	r3, [pc, #292]	@ (800175c <MX_GPIO_Init+0x1f4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b45      	ldr	r3, [pc, #276]	@ (800175c <MX_GPIO_Init+0x1f4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a44      	ldr	r2, [pc, #272]	@ (800175c <MX_GPIO_Init+0x1f4>)
 800164c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b42      	ldr	r3, [pc, #264]	@ (800175c <MX_GPIO_Init+0x1f4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	2170      	movs	r1, #112	@ 0x70
 8001662:	483f      	ldr	r0, [pc, #252]	@ (8001760 <MX_GPIO_Init+0x1f8>)
 8001664:	f003 f8e0 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|OUTPUT_X3_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f242 0120 	movw	r1, #8224	@ 0x2020
 800166e:	483d      	ldr	r0, [pc, #244]	@ (8001764 <MX_GPIO_Init+0x1fc>)
 8001670:	f003 f8da 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUTPUT_X0_Pin|FSMC_BLK_Pin|MODBUS_EN_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f248 1140 	movw	r1, #33088	@ 0x8140
 800167a:	483b      	ldr	r0, [pc, #236]	@ (8001768 <MX_GPIO_Init+0x200>)
 800167c:	f003 f8d4 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2140      	movs	r1, #64	@ 0x40
 8001684:	4839      	ldr	r0, [pc, #228]	@ (800176c <MX_GPIO_Init+0x204>)
 8001686:	f003 f8cf 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	2108      	movs	r1, #8
 800168e:	4838      	ldr	r0, [pc, #224]	@ (8001770 <MX_GPIO_Init+0x208>)
 8001690:	f003 f8ca 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001694:	2370      	movs	r3, #112	@ 0x70
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a8:	4619      	mov	r1, r3
 80016aa:	482d      	ldr	r0, [pc, #180]	@ (8001760 <MX_GPIO_Init+0x1f8>)
 80016ac:	f002 ff20 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|OUTPUT_X3_Pin;
 80016b0:	f242 0320 	movw	r3, #8224	@ 0x2020
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c6:	4619      	mov	r1, r3
 80016c8:	4826      	ldr	r0, [pc, #152]	@ (8001764 <MX_GPIO_Init+0x1fc>)
 80016ca:	f002 ff11 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OUTPUT_X0_Pin|FSMC_BLK_Pin|MODBUS_EN_Pin;
 80016ce:	f248 1340 	movw	r3, #33088	@ 0x8140
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e4:	4619      	mov	r1, r3
 80016e6:	4820      	ldr	r0, [pc, #128]	@ (8001768 <MX_GPIO_Init+0x200>)
 80016e8:	f002 ff02 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUTPUT_X1_Pin;
 80016ec:	2380      	movs	r3, #128	@ 0x80
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUTPUT_X1_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016fc:	4619      	mov	r1, r3
 80016fe:	481a      	ldr	r0, [pc, #104]	@ (8001768 <MX_GPIO_Init+0x200>)
 8001700:	f002 fef6 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUTPUT_X2_Pin;
 8001704:	2310      	movs	r3, #16
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUTPUT_X2_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	4813      	ldr	r0, [pc, #76]	@ (8001764 <MX_GPIO_Init+0x1fc>)
 8001718:	f002 feea 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800171c:	2340      	movs	r3, #64	@ 0x40
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001730:	4619      	mov	r1, r3
 8001732:	480e      	ldr	r0, [pc, #56]	@ (800176c <MX_GPIO_Init+0x204>)
 8001734:	f002 fedc 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001738:	2308      	movs	r3, #8
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	4808      	ldr	r0, [pc, #32]	@ (8001770 <MX_GPIO_Init+0x208>)
 8001750:	f002 fece 	bl	80044f0 <HAL_GPIO_Init>

}
 8001754:	bf00      	nop
 8001756:	3738      	adds	r7, #56	@ 0x38
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	40021000 	.word	0x40021000
 8001764:	40020800 	.word	0x40020800
 8001768:	40020000 	.word	0x40020000
 800176c:	40021800 	.word	0x40021800
 8001770:	40020c00 	.word	0x40020c00

08001774 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <MX_I2C1_Init+0x50>)
 800177a:	4a13      	ldr	r2, [pc, #76]	@ (80017c8 <MX_I2C1_Init+0x54>)
 800177c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <MX_I2C1_Init+0x50>)
 8001780:	4a12      	ldr	r2, [pc, #72]	@ (80017cc <MX_I2C1_Init+0x58>)
 8001782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001784:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <MX_I2C1_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <MX_I2C1_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <MX_I2C1_Init+0x50>)
 8001792:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001798:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <MX_I2C1_Init+0x50>)
 800179a:	2200      	movs	r2, #0
 800179c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <MX_I2C1_Init+0x50>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <MX_I2C1_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <MX_I2C1_Init+0x50>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017b0:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <MX_I2C1_Init+0x50>)
 80017b2:	f003 f86d 	bl	8004890 <HAL_I2C_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017bc:	f000 fe9c 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000033c 	.word	0x2000033c
 80017c8:	40005400 	.word	0x40005400
 80017cc:	000186a0 	.word	0x000186a0

080017d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	@ 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a19      	ldr	r2, [pc, #100]	@ (8001854 <HAL_I2C_MspInit+0x84>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d12b      	bne.n	800184a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <HAL_I2C_MspInit+0x88>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a17      	ldr	r2, [pc, #92]	@ (8001858 <HAL_I2C_MspInit+0x88>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <HAL_I2C_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800180e:	23c0      	movs	r3, #192	@ 0xc0
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001812:	2312      	movs	r3, #18
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800181e:	2304      	movs	r3, #4
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	480c      	ldr	r0, [pc, #48]	@ (800185c <HAL_I2C_MspInit+0x8c>)
 800182a:	f002 fe61 	bl	80044f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_I2C_MspInit+0x88>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	4a08      	ldr	r2, [pc, #32]	@ (8001858 <HAL_I2C_MspInit+0x88>)
 8001838:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800183c:	6413      	str	r3, [r2, #64]	@ 0x40
 800183e:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_I2C_MspInit+0x88>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	@ 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40005400 	.word	0x40005400
 8001858:	40023800 	.word	0x40023800
 800185c:	40020400 	.word	0x40020400

08001860 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 800186a:	4a04      	ldr	r2, [pc, #16]	@ (800187c <LCD_WR_REG+0x1c>)
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	8013      	strh	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	600ffffe 	.word	0x600ffffe

08001880 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 800188a:	4a04      	ldr	r2, [pc, #16]	@ (800189c <LCD_WR_DATA+0x1c>)
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	8053      	strh	r3, [r2, #2]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	600ffffe 	.word	0x600ffffe

080018a0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <LCD_RD_DATA+0x20>)
 80018a8:	885b      	ldrh	r3, [r3, #2]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	80fb      	strh	r3, [r7, #6]
	return ram;
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	b29b      	uxth	r3, r3
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	600ffffe 	.word	0x600ffffe

080018c4 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4604      	mov	r4, r0
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4623      	mov	r3, r4
 80018d4:	80fb      	strh	r3, [r7, #6]
 80018d6:	4603      	mov	r3, r0
 80018d8:	80bb      	strh	r3, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	807b      	strh	r3, [r7, #2]
 80018de:	4613      	mov	r3, r2
 80018e0:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 80018e2:	202a      	movs	r0, #42	@ 0x2a
 80018e4:	f7ff ffbc 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ffc6 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ffc0 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8001900:	887b      	ldrh	r3, [r7, #2]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	b29b      	uxth	r3, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ffba 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	b29b      	uxth	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ffb4 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8001918:	202b      	movs	r0, #43	@ 0x2b
 800191a:	f7ff ffa1 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 800191e:	88bb      	ldrh	r3, [r7, #4]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	b29b      	uxth	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ffab 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 800192a:	88bb      	ldrh	r3, [r7, #4]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	b29b      	uxth	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ffa5 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 8001936:	883b      	ldrh	r3, [r7, #0]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	b29b      	uxth	r3, r3
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff9f 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8001942:	883b      	ldrh	r3, [r7, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	b29b      	uxth	r3, r3
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff99 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 800194e:	202c      	movs	r0, #44	@ 0x2c
 8001950:	f7ff ff86 	bl	8001860 <LCD_WR_REG>
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bd90      	pop	{r4, r7, pc}

0800195c <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <lcd_clear+0x60>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <lcd_clear+0x60>)
 8001970:	885b      	ldrh	r3, [r3, #2]
 8001972:	3b01      	subs	r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	2100      	movs	r1, #0
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff ffa3 	bl	80018c4 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 800197e:	2300      	movs	r3, #0
 8001980:	81fb      	strh	r3, [r7, #14]
 8001982:	e011      	b.n	80019a8 <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 8001984:	2300      	movs	r3, #0
 8001986:	81bb      	strh	r3, [r7, #12]
 8001988:	e006      	b.n	8001998 <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff77 	bl	8001880 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 8001992:	89bb      	ldrh	r3, [r7, #12]
 8001994:	3301      	adds	r3, #1
 8001996:	81bb      	strh	r3, [r7, #12]
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <lcd_clear+0x60>)
 800199a:	885b      	ldrh	r3, [r3, #2]
 800199c:	89ba      	ldrh	r2, [r7, #12]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d3f3      	bcc.n	800198a <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 80019a2:	89fb      	ldrh	r3, [r7, #14]
 80019a4:	3301      	adds	r3, #1
 80019a6:	81fb      	strh	r3, [r7, #14]
 80019a8:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <lcd_clear+0x60>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	89fa      	ldrh	r2, [r7, #14]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d3e8      	bcc.n	8001984 <lcd_clear+0x28>
		}
	}
}
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000390 	.word	0x20000390

080019c0 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
 80019ca:	460b      	mov	r3, r1
 80019cc:	80bb      	strh	r3, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 80019d2:	88bb      	ldrh	r3, [r7, #4]
 80019d4:	88fa      	ldrh	r2, [r7, #6]
 80019d6:	88b9      	ldrh	r1, [r7, #4]
 80019d8:	88f8      	ldrh	r0, [r7, #6]
 80019da:	f7ff ff73 	bl	80018c4 <lcd_set_address>
	LCD_WR_DATA(color);
 80019de:	887b      	ldrh	r3, [r7, #2]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff4d 	bl	8001880 <LCD_WR_DATA>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4604      	mov	r4, r0
 80019f8:	4608      	mov	r0, r1
 80019fa:	4611      	mov	r1, r2
 80019fc:	461a      	mov	r2, r3
 80019fe:	4623      	mov	r3, r4
 8001a00:	80fb      	strh	r3, [r7, #6]
 8001a02:	4603      	mov	r3, r0
 8001a04:	80bb      	strh	r3, [r7, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	70fb      	strb	r3, [r7, #3]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8001a16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a1a:	085b      	lsrs	r3, r3, #1
 8001a1c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	08db      	lsrs	r3, r3, #3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf14      	ite	ne
 8001a32:	2301      	movne	r3, #1
 8001a34:	2300      	moveq	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	fb12 f303 	smulbb	r3, r2, r3
 8001a46:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	3b20      	subs	r3, #32
 8001a4c:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	4413      	add	r3, r2
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29c      	uxth	r4, r3
 8001a5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	88bb      	ldrh	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	88b9      	ldrh	r1, [r7, #4]
 8001a6e:	88f8      	ldrh	r0, [r7, #6]
 8001a70:	4622      	mov	r2, r4
 8001a72:	f7ff ff27 	bl	80018c4 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8001a76:	2300      	movs	r3, #0
 8001a78:	827b      	strh	r3, [r7, #18]
 8001a7a:	e07a      	b.n	8001b72 <lcd_show_char+0x182>
		if (sizey == 12)
 8001a7c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a80:	2b0c      	cmp	r3, #12
 8001a82:	d028      	beq.n	8001ad6 <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8001a84:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a88:	2b10      	cmp	r3, #16
 8001a8a:	d108      	bne.n	8001a9e <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	8a7b      	ldrh	r3, [r7, #18]
 8001a90:	493c      	ldr	r1, [pc, #240]	@ (8001b84 <lcd_show_char+0x194>)
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	440a      	add	r2, r1
 8001a96:	4413      	add	r3, r2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	75fb      	strb	r3, [r7, #23]
 8001a9c:	e01b      	b.n	8001ad6 <lcd_show_char+0xe6>
		else if (sizey == 24)
 8001a9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001aa2:	2b18      	cmp	r3, #24
 8001aa4:	d10b      	bne.n	8001abe <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	8a79      	ldrh	r1, [r7, #18]
 8001aaa:	4837      	ldr	r0, [pc, #220]	@ (8001b88 <lcd_show_char+0x198>)
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	4403      	add	r3, r0
 8001ab6:	440b      	add	r3, r1
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	75fb      	strb	r3, [r7, #23]
 8001abc:	e00b      	b.n	8001ad6 <lcd_show_char+0xe6>
		else if (sizey == 32)
 8001abe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	d15a      	bne.n	8001b7c <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	8a7b      	ldrh	r3, [r7, #18]
 8001aca:	4930      	ldr	r1, [pc, #192]	@ (8001b8c <lcd_show_char+0x19c>)
 8001acc:	0192      	lsls	r2, r2, #6
 8001ace:	440a      	add	r2, r1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	75bb      	strb	r3, [r7, #22]
 8001ada:	e044      	b.n	8001b66 <lcd_show_char+0x176>
			if (!mode) {
 8001adc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d120      	bne.n	8001b26 <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8001ae4:	7dfa      	ldrb	r2, [r7, #23]
 8001ae6:	7dbb      	ldrb	r3, [r7, #22]
 8001ae8:	fa42 f303 	asr.w	r3, r2, r3
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d004      	beq.n	8001afe <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8001af4:	883b      	ldrh	r3, [r7, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fec2 	bl	8001880 <LCD_WR_DATA>
 8001afc:	e003      	b.n	8001b06 <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8001afe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff febd 	bl	8001880 <LCD_WR_DATA>
				m++;
 8001b06:	7d7b      	ldrb	r3, [r7, #21]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8001b0c:	7d7b      	ldrb	r3, [r7, #21]
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b14:	fb01 f202 	mul.w	r2, r1, r2
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d11f      	bne.n	8001b60 <lcd_show_char+0x170>
					m = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	757b      	strb	r3, [r7, #21]
					break;
 8001b24:	e022      	b.n	8001b6c <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8001b26:	7dfa      	ldrb	r2, [r7, #23]
 8001b28:	7dbb      	ldrb	r3, [r7, #22]
 8001b2a:	fa42 f303 	asr.w	r3, r2, r3
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d005      	beq.n	8001b42 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8001b36:	883a      	ldrh	r2, [r7, #0]
 8001b38:	88b9      	ldrh	r1, [r7, #4]
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff3f 	bl	80019c0 <lcd_draw_point>
				x++;
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	3301      	adds	r3, #1
 8001b46:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8001b48:	88fa      	ldrh	r2, [r7, #6]
 8001b4a:	8a3b      	ldrh	r3, [r7, #16]
 8001b4c:	1ad2      	subs	r2, r2, r3
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d105      	bne.n	8001b60 <lcd_show_char+0x170>
					x = x0;
 8001b54:	8a3b      	ldrh	r3, [r7, #16]
 8001b56:	80fb      	strh	r3, [r7, #6]
					y++;
 8001b58:	88bb      	ldrh	r3, [r7, #4]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	80bb      	strh	r3, [r7, #4]
					break;
 8001b5e:	e005      	b.n	8001b6c <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8001b60:	7dbb      	ldrb	r3, [r7, #22]
 8001b62:	3301      	adds	r3, #1
 8001b64:	75bb      	strb	r3, [r7, #22]
 8001b66:	7dbb      	ldrb	r3, [r7, #22]
 8001b68:	2b07      	cmp	r3, #7
 8001b6a:	d9b7      	bls.n	8001adc <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8001b6c:	8a7b      	ldrh	r3, [r7, #18]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	827b      	strh	r3, [r7, #18]
 8001b72:	8a7a      	ldrh	r2, [r7, #18]
 8001b74:	89bb      	ldrh	r3, [r7, #12]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d380      	bcc.n	8001a7c <lcd_show_char+0x8c>
 8001b7a:	e000      	b.n	8001b7e <lcd_show_char+0x18e>
			return;
 8001b7c:	bf00      	nop
				}
			}
		}
	}
}
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}
 8001b84:	080079c0 	.word	0x080079c0
 8001b88:	08007fb0 	.word	0x08007fb0
 8001b8c:	08009180 	.word	0x08009180

08001b90 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	460a      	mov	r2, r1
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001ba4:	e004      	b.n	8001bb0 <mypow+0x20>
		result *= m;
 8001ba6:	79fa      	ldrb	r2, [r7, #7]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001bb0:	79bb      	ldrb	r3, [r7, #6]
 8001bb2:	1e5a      	subs	r2, r3, #1
 8001bb4:	71ba      	strb	r2, [r7, #6]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f5      	bne.n	8001ba6 <mypow+0x16>
	return result;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b089      	sub	sp, #36	@ 0x24
 8001bcc:	af04      	add	r7, sp, #16
 8001bce:	4604      	mov	r4, r0
 8001bd0:	4608      	mov	r0, r1
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4623      	mov	r3, r4
 8001bd8:	80fb      	strh	r3, [r7, #6]
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80bb      	strh	r3, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	807b      	strh	r3, [r7, #2]
 8001be2:	4613      	mov	r3, r2
 8001be4:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 8001bea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001bee:	085b      	lsrs	r3, r3, #1
 8001bf0:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	e059      	b.n	8001cac <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 8001bf8:	887c      	ldrh	r4, [r7, #2]
 8001bfa:	787a      	ldrb	r2, [r7, #1]
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	4619      	mov	r1, r3
 8001c08:	200a      	movs	r0, #10
 8001c0a:	f7ff ffc1 	bl	8001b90 <mypow>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	fbb4 f1f3 	udiv	r1, r4, r3
 8001c14:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc0 <lcd_show_int_num+0xf8>)
 8001c16:	fba3 2301 	umull	r2, r3, r3, r1
 8001c1a:	08da      	lsrs	r2, r3, #3
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	1aca      	subs	r2, r1, r3
 8001c26:	4613      	mov	r3, r2
 8001c28:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8001c2a:	7bbb      	ldrb	r3, [r7, #14]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d121      	bne.n	8001c74 <lcd_show_int_num+0xac>
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	787b      	ldrb	r3, [r7, #1]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	429a      	cmp	r2, r3
 8001c38:	da1c      	bge.n	8001c74 <lcd_show_int_num+0xac>
			if (temp == 0) {
 8001c3a:	7b3b      	ldrb	r3, [r7, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d117      	bne.n	8001c70 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	7b7b      	ldrb	r3, [r7, #13]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	fb12 f303 	smulbb	r3, r2, r3
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	4413      	add	r3, r2
 8001c52:	b298      	uxth	r0, r3
 8001c54:	8c3a      	ldrh	r2, [r7, #32]
 8001c56:	88b9      	ldrh	r1, [r7, #4]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9302      	str	r3, [sp, #8]
 8001c5c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	4613      	mov	r3, r2
 8001c68:	2220      	movs	r2, #32
 8001c6a:	f7ff fec1 	bl	80019f0 <lcd_show_char>
				continue;
 8001c6e:	e01a      	b.n	8001ca6 <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	7b7b      	ldrb	r3, [r7, #13]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	fb12 f303 	smulbb	r3, r2, r3
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	4413      	add	r3, r2
 8001c86:	b298      	uxth	r0, r3
 8001c88:	7b3b      	ldrb	r3, [r7, #12]
 8001c8a:	3330      	adds	r3, #48	@ 0x30
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	8c3c      	ldrh	r4, [r7, #32]
 8001c90:	88b9      	ldrh	r1, [r7, #4]
 8001c92:	2300      	movs	r3, #0
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	4623      	mov	r3, r4
 8001ca2:	f7ff fea5 	bl	80019f0 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	787b      	ldrb	r3, [r7, #1]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d3a1      	bcc.n	8001bf8 <lcd_show_int_num+0x30>
	}
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd90      	pop	{r4, r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	cccccccd 	.word	0xcccccccd

08001cc4 <lcd_show_float_num>:

void lcd_show_float_num(uint16_t x, uint16_t y, float num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b08b      	sub	sp, #44	@ 0x2c
 8001cc8:	af04      	add	r7, sp, #16
 8001cca:	4604      	mov	r4, r0
 8001ccc:	4608      	mov	r0, r1
 8001cce:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	81fb      	strh	r3, [r7, #14]
 8001cda:	4603      	mov	r3, r0
 8001cdc:	81bb      	strh	r3, [r7, #12]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	71fb      	strb	r3, [r7, #7]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	80bb      	strh	r3, [r7, #4]
	uint8_t t, temp, sizex;
	uint16_t num1;
	sizex = sizey / 2;
 8001ce6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cea:	085b      	lsrs	r3, r3, #1
 8001cec:	75bb      	strb	r3, [r7, #22]
	num1 = num * 100;
 8001cee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cf2:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001dcc <lcd_show_float_num+0x108>
 8001cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cfe:	ee17 3a90 	vmov	r3, s15
 8001d02:	82bb      	strh	r3, [r7, #20]
	for (t = 0; t < len; t++) {
 8001d04:	2300      	movs	r3, #0
 8001d06:	75fb      	strb	r3, [r7, #23]
 8001d08:	e057      	b.n	8001dba <lcd_show_float_num+0xf6>
		temp = (num1 / mypow(10, len - t - 1)) % 10;
 8001d0a:	8abc      	ldrh	r4, [r7, #20]
 8001d0c:	79fa      	ldrb	r2, [r7, #7]
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	200a      	movs	r0, #10
 8001d1c:	f7ff ff38 	bl	8001b90 <mypow>
 8001d20:	4603      	mov	r3, r0
 8001d22:	fbb4 f1f3 	udiv	r1, r4, r3
 8001d26:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <lcd_show_float_num+0x10c>)
 8001d28:	fba3 2301 	umull	r2, r3, r3, r1
 8001d2c:	08da      	lsrs	r2, r3, #3
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	1aca      	subs	r2, r1, r3
 8001d38:	4613      	mov	r3, r2
 8001d3a:	74fb      	strb	r3, [r7, #19]
		if (t == (len - 2)) {
 8001d3c:	7dfa      	ldrb	r2, [r7, #23]
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	3b02      	subs	r3, #2
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d11d      	bne.n	8001d82 <lcd_show_float_num+0xbe>
			lcd_show_char(x + (len - 2) * sizex, y, '.', fc, bc, sizey, 0);
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	3b02      	subs	r3, #2
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	7dbb      	ldrb	r3, [r7, #22]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	fb12 f303 	smulbb	r3, r2, r3
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	89fb      	ldrh	r3, [r7, #14]
 8001d58:	4413      	add	r3, r2
 8001d5a:	b298      	uxth	r0, r3
 8001d5c:	88ba      	ldrh	r2, [r7, #4]
 8001d5e:	89b9      	ldrh	r1, [r7, #12]
 8001d60:	2300      	movs	r3, #0
 8001d62:	9302      	str	r3, [sp, #8]
 8001d64:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	222e      	movs	r2, #46	@ 0x2e
 8001d72:	f7ff fe3d 	bl	80019f0 <lcd_show_char>
			t++;
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	75fb      	strb	r3, [r7, #23]
			len += 1;
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	71fb      	strb	r3, [r7, #7]
		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	7dbb      	ldrb	r3, [r7, #22]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	fb12 f303 	smulbb	r3, r2, r3
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	89fb      	ldrh	r3, [r7, #14]
 8001d92:	4413      	add	r3, r2
 8001d94:	b298      	uxth	r0, r3
 8001d96:	7cfb      	ldrb	r3, [r7, #19]
 8001d98:	3330      	adds	r3, #48	@ 0x30
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	88bc      	ldrh	r4, [r7, #4]
 8001d9e:	89b9      	ldrh	r1, [r7, #12]
 8001da0:	2300      	movs	r3, #0
 8001da2:	9302      	str	r3, [sp, #8]
 8001da4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	4623      	mov	r3, r4
 8001db0:	f7ff fe1e 	bl	80019f0 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	3301      	adds	r3, #1
 8001db8:	75fb      	strb	r3, [r7, #23]
 8001dba:	7dfa      	ldrb	r2, [r7, #23]
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d3a3      	bcc.n	8001d0a <lcd_show_float_num+0x46>
	}
}
 8001dc2:	bf00      	nop
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd90      	pop	{r4, r7, pc}
 8001dcc:	42c80000 	.word	0x42c80000
 8001dd0:	cccccccd 	.word	0xcccccccd

08001dd4 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8001dee:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <lcd_set_direction+0x44>)
 8001df0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001df4:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001df6:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <lcd_set_direction+0x44>)
 8001df8:	22f0      	movs	r2, #240	@ 0xf0
 8001dfa:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8001dfc:	e006      	b.n	8001e0c <lcd_set_direction+0x38>
		lcddev.width = 240;
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <lcd_set_direction+0x44>)
 8001e00:	22f0      	movs	r2, #240	@ 0xf0
 8001e02:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001e04:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <lcd_set_direction+0x44>)
 8001e06:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e0a:	805a      	strh	r2, [r3, #2]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	20000390 	.word	0x20000390

08001e1c <lcd_init>:

void lcd_init(void) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e26:	48aa      	ldr	r0, [pc, #680]	@ (80020d0 <lcd_init+0x2b4>)
 8001e28:	f002 fcfe 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e2c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e30:	f001 fa14 	bl	800325c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001e34:	2201      	movs	r2, #1
 8001e36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e3a:	48a5      	ldr	r0, [pc, #660]	@ (80020d0 <lcd_init+0x2b4>)
 8001e3c:	f002 fcf4 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e44:	f001 fa0a 	bl	800325c <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7ff ffc3 	bl	8001dd4 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8001e4e:	20d3      	movs	r0, #211	@ 0xd3
 8001e50:	f7ff fd06 	bl	8001860 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001e54:	f7ff fd24 	bl	80018a0 <LCD_RD_DATA>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b9d      	ldr	r3, [pc, #628]	@ (80020d4 <lcd_init+0x2b8>)
 8001e5e:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001e60:	f7ff fd1e 	bl	80018a0 <LCD_RD_DATA>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b9a      	ldr	r3, [pc, #616]	@ (80020d4 <lcd_init+0x2b8>)
 8001e6a:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001e6c:	f7ff fd18 	bl	80018a0 <LCD_RD_DATA>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b97      	ldr	r3, [pc, #604]	@ (80020d4 <lcd_init+0x2b8>)
 8001e76:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8001e78:	4b96      	ldr	r3, [pc, #600]	@ (80020d4 <lcd_init+0x2b8>)
 8001e7a:	889b      	ldrh	r3, [r3, #4]
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b94      	ldr	r3, [pc, #592]	@ (80020d4 <lcd_init+0x2b8>)
 8001e82:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8001e84:	f7ff fd0c 	bl	80018a0 <LCD_RD_DATA>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b91      	ldr	r3, [pc, #580]	@ (80020d4 <lcd_init+0x2b8>)
 8001e8e:	889b      	ldrh	r3, [r3, #4]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	4b8f      	ldr	r3, [pc, #572]	@ (80020d4 <lcd_init+0x2b8>)
 8001e96:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001e98:	20cf      	movs	r0, #207	@ 0xcf
 8001e9a:	f7ff fce1 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff fcee 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001ea4:	20c1      	movs	r0, #193	@ 0xc1
 8001ea6:	f7ff fceb 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001eaa:	2030      	movs	r0, #48	@ 0x30
 8001eac:	f7ff fce8 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001eb0:	20ed      	movs	r0, #237	@ 0xed
 8001eb2:	f7ff fcd5 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001eb6:	2064      	movs	r0, #100	@ 0x64
 8001eb8:	f7ff fce2 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f7ff fcdf 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001ec2:	2012      	movs	r0, #18
 8001ec4:	f7ff fcdc 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001ec8:	2081      	movs	r0, #129	@ 0x81
 8001eca:	f7ff fcd9 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001ece:	20e8      	movs	r0, #232	@ 0xe8
 8001ed0:	f7ff fcc6 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001ed4:	2085      	movs	r0, #133	@ 0x85
 8001ed6:	f7ff fcd3 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001eda:	2010      	movs	r0, #16
 8001edc:	f7ff fcd0 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001ee0:	207a      	movs	r0, #122	@ 0x7a
 8001ee2:	f7ff fccd 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001ee6:	20cb      	movs	r0, #203	@ 0xcb
 8001ee8:	f7ff fcba 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001eec:	2039      	movs	r0, #57	@ 0x39
 8001eee:	f7ff fcc7 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001ef2:	202c      	movs	r0, #44	@ 0x2c
 8001ef4:	f7ff fcc4 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff fcc1 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001efe:	2034      	movs	r0, #52	@ 0x34
 8001f00:	f7ff fcbe 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001f04:	2002      	movs	r0, #2
 8001f06:	f7ff fcbb 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001f0a:	20f7      	movs	r0, #247	@ 0xf7
 8001f0c:	f7ff fca8 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001f10:	2020      	movs	r0, #32
 8001f12:	f7ff fcb5 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001f16:	20ea      	movs	r0, #234	@ 0xea
 8001f18:	f7ff fca2 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff fcaf 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7ff fcac 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001f28:	20c0      	movs	r0, #192	@ 0xc0
 8001f2a:	f7ff fc99 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001f2e:	201b      	movs	r0, #27
 8001f30:	f7ff fca6 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001f34:	20c1      	movs	r0, #193	@ 0xc1
 8001f36:	f7ff fc93 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f7ff fca0 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001f40:	20c5      	movs	r0, #197	@ 0xc5
 8001f42:	f7ff fc8d 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001f46:	2030      	movs	r0, #48	@ 0x30
 8001f48:	f7ff fc9a 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001f4c:	2030      	movs	r0, #48	@ 0x30
 8001f4e:	f7ff fc97 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001f52:	20c7      	movs	r0, #199	@ 0xc7
 8001f54:	f7ff fc84 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001f58:	20b7      	movs	r0, #183	@ 0xb7
 8001f5a:	f7ff fc91 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001f5e:	2036      	movs	r0, #54	@ 0x36
 8001f60:	f7ff fc7e 	bl	8001860 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8001f64:	2008      	movs	r0, #8
 8001f66:	f7ff fc8b 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001f6a:	203a      	movs	r0, #58	@ 0x3a
 8001f6c:	f7ff fc78 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001f70:	2055      	movs	r0, #85	@ 0x55
 8001f72:	f7ff fc85 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001f76:	20b1      	movs	r0, #177	@ 0xb1
 8001f78:	f7ff fc72 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff fc7f 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001f82:	201a      	movs	r0, #26
 8001f84:	f7ff fc7c 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001f88:	20b6      	movs	r0, #182	@ 0xb6
 8001f8a:	f7ff fc69 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001f8e:	200a      	movs	r0, #10
 8001f90:	f7ff fc76 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001f94:	20a2      	movs	r0, #162	@ 0xa2
 8001f96:	f7ff fc73 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001f9a:	20f2      	movs	r0, #242	@ 0xf2
 8001f9c:	f7ff fc60 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff fc6d 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001fa6:	2026      	movs	r0, #38	@ 0x26
 8001fa8:	f7ff fc5a 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001fac:	2001      	movs	r0, #1
 8001fae:	f7ff fc67 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001fb2:	20e0      	movs	r0, #224	@ 0xe0
 8001fb4:	f7ff fc54 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001fb8:	200f      	movs	r0, #15
 8001fba:	f7ff fc61 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001fbe:	202a      	movs	r0, #42	@ 0x2a
 8001fc0:	f7ff fc5e 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001fc4:	2028      	movs	r0, #40	@ 0x28
 8001fc6:	f7ff fc5b 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001fca:	2008      	movs	r0, #8
 8001fcc:	f7ff fc58 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001fd0:	200e      	movs	r0, #14
 8001fd2:	f7ff fc55 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001fd6:	2008      	movs	r0, #8
 8001fd8:	f7ff fc52 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001fdc:	2054      	movs	r0, #84	@ 0x54
 8001fde:	f7ff fc4f 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001fe2:	20a9      	movs	r0, #169	@ 0xa9
 8001fe4:	f7ff fc4c 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001fe8:	2043      	movs	r0, #67	@ 0x43
 8001fea:	f7ff fc49 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001fee:	200a      	movs	r0, #10
 8001ff0:	f7ff fc46 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ff4:	200f      	movs	r0, #15
 8001ff6:	f7ff fc43 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff fc40 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002000:	2000      	movs	r0, #0
 8002002:	f7ff fc3d 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002006:	2000      	movs	r0, #0
 8002008:	f7ff fc3a 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff fc37 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002012:	20e1      	movs	r0, #225	@ 0xe1
 8002014:	f7ff fc24 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002018:	2000      	movs	r0, #0
 800201a:	f7ff fc31 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800201e:	2015      	movs	r0, #21
 8002020:	f7ff fc2e 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002024:	2017      	movs	r0, #23
 8002026:	f7ff fc2b 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800202a:	2007      	movs	r0, #7
 800202c:	f7ff fc28 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002030:	2011      	movs	r0, #17
 8002032:	f7ff fc25 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002036:	2006      	movs	r0, #6
 8002038:	f7ff fc22 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800203c:	202b      	movs	r0, #43	@ 0x2b
 800203e:	f7ff fc1f 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002042:	2056      	movs	r0, #86	@ 0x56
 8002044:	f7ff fc1c 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002048:	203c      	movs	r0, #60	@ 0x3c
 800204a:	f7ff fc19 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800204e:	2005      	movs	r0, #5
 8002050:	f7ff fc16 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002054:	2010      	movs	r0, #16
 8002056:	f7ff fc13 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800205a:	200f      	movs	r0, #15
 800205c:	f7ff fc10 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002060:	203f      	movs	r0, #63	@ 0x3f
 8002062:	f7ff fc0d 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002066:	203f      	movs	r0, #63	@ 0x3f
 8002068:	f7ff fc0a 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800206c:	200f      	movs	r0, #15
 800206e:	f7ff fc07 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002072:	202b      	movs	r0, #43	@ 0x2b
 8002074:	f7ff fbf4 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002078:	2000      	movs	r0, #0
 800207a:	f7ff fc01 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff fbfe 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002084:	2001      	movs	r0, #1
 8002086:	f7ff fbfb 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800208a:	203f      	movs	r0, #63	@ 0x3f
 800208c:	f7ff fbf8 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002090:	202a      	movs	r0, #42	@ 0x2a
 8002092:	f7ff fbe5 	bl	8001860 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002096:	2000      	movs	r0, #0
 8002098:	f7ff fbf2 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800209c:	2000      	movs	r0, #0
 800209e:	f7ff fbef 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7ff fbec 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80020a8:	20ef      	movs	r0, #239	@ 0xef
 80020aa:	f7ff fbe9 	bl	8001880 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 80020ae:	2011      	movs	r0, #17
 80020b0:	f7ff fbd6 	bl	8001860 <LCD_WR_REG>
	HAL_Delay(120);
 80020b4:	2078      	movs	r0, #120	@ 0x78
 80020b6:	f001 f8d1 	bl	800325c <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 80020ba:	2029      	movs	r0, #41	@ 0x29
 80020bc:	f7ff fbd0 	bl	8001860 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80020c0:	2201      	movs	r2, #1
 80020c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020c6:	4804      	ldr	r0, [pc, #16]	@ (80020d8 <lcd_init+0x2bc>)
 80020c8:	f002 fbae 	bl	8004828 <HAL_GPIO_WritePin>
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40020800 	.word	0x40020800
 80020d4:	20000390 	.word	0x20000390
 80020d8:	40020000 	.word	0x40020000

080020dc <lcd_show_string>:
		}
	}
}

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b08b      	sub	sp, #44	@ 0x2c
 80020e0:	af04      	add	r7, sp, #16
 80020e2:	60ba      	str	r2, [r7, #8]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	81fb      	strh	r3, [r7, #14]
 80020ea:	460b      	mov	r3, r1
 80020ec:	81bb      	strh	r3, [r7, #12]
 80020ee:	4613      	mov	r3, r2
 80020f0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 80020f2:	89fb      	ldrh	r3, [r7, #14]
 80020f4:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 80020fa:	e048      	b.n	800218e <lcd_show_string+0xb2>
		if (!bHz) {
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d145      	bne.n	800218e <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8002102:	89fa      	ldrh	r2, [r7, #14]
 8002104:	4b26      	ldr	r3, [pc, #152]	@ (80021a0 <lcd_show_string+0xc4>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800210e:	085b      	lsrs	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	1acb      	subs	r3, r1, r3
 8002114:	429a      	cmp	r2, r3
 8002116:	dc3f      	bgt.n	8002198 <lcd_show_string+0xbc>
 8002118:	89ba      	ldrh	r2, [r7, #12]
 800211a:	4b21      	ldr	r3, [pc, #132]	@ (80021a0 <lcd_show_string+0xc4>)
 800211c:	885b      	ldrh	r3, [r3, #2]
 800211e:	4619      	mov	r1, r3
 8002120:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002124:	1acb      	subs	r3, r1, r3
 8002126:	429a      	cmp	r2, r3
 8002128:	dc36      	bgt.n	8002198 <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b80      	cmp	r3, #128	@ 0x80
 8002130:	d902      	bls.n	8002138 <lcd_show_string+0x5c>
				bHz = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
 8002136:	e02a      	b.n	800218e <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b0d      	cmp	r3, #13
 800213e:	d10b      	bne.n	8002158 <lcd_show_string+0x7c>
					y += sizey;
 8002140:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002144:	b29a      	uxth	r2, r3
 8002146:	89bb      	ldrh	r3, [r7, #12]
 8002148:	4413      	add	r3, r2
 800214a:	81bb      	strh	r3, [r7, #12]
					x = x0;
 800214c:	8abb      	ldrh	r3, [r7, #20]
 800214e:	81fb      	strh	r3, [r7, #14]
					str++;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	3301      	adds	r3, #1
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	e017      	b.n	8002188 <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	781a      	ldrb	r2, [r3, #0]
 800215c:	88fc      	ldrh	r4, [r7, #6]
 800215e:	89b9      	ldrh	r1, [r7, #12]
 8002160:	89f8      	ldrh	r0, [r7, #14]
 8002162:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002166:	9302      	str	r3, [sp, #8]
 8002168:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	4623      	mov	r3, r4
 8002174:	f7ff fc3c 	bl	80019f0 <lcd_show_char>
					x += sizey / 2;
 8002178:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	89fb      	ldrh	r3, [r7, #14]
 8002184:	4413      	add	r3, r2
 8002186:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3301      	adds	r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1b2      	bne.n	80020fc <lcd_show_string+0x20>
 8002196:	e000      	b.n	800219a <lcd_show_string+0xbe>
				return;
 8002198:	bf00      	nop
			}
		}
	}
}
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd90      	pop	{r4, r7, pc}
 80021a0:	20000390 	.word	0x20000390

080021a4 <HAL_UARTEx_RxEventCallback>:
void TestADC();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
	Modbus_CallBack(&slave, huart, Size);
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	461a      	mov	r2, r3
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4803      	ldr	r0, [pc, #12]	@ (80021c4 <HAL_UARTEx_RxEventCallback+0x20>)
 80021b8:	f000 fa92 	bl	80026e0 <Modbus_CallBack>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000398 	.word	0x20000398

080021c8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d8:	d101      	bne.n	80021de <HAL_TIM_PeriodElapsedCallback+0x16>
		TimerRun();
 80021da:	f000 fc09 	bl	80029f0 <TimerRun>
	}

}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ec:	f000 ffc4 	bl	8003178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021f0:	f000 f84a 	bl	8002288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f4:	f7ff f9b8 	bl	8001568 <MX_GPIO_Init>
  MX_DMA_Init();
 80021f8:	f7ff f8c6 	bl	8001388 <MX_DMA_Init>
  MX_SPI1_Init();
 80021fc:	f000 fc2a 	bl	8002a54 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002200:	f7ff f8e2 	bl	80013c8 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002204:	f7ff fab6 	bl	8001774 <MX_I2C1_Init>
  MX_TIM13_Init();
 8002208:	f000 fdce 	bl	8002da8 <MX_TIM13_Init>
  MX_TIM2_Init();
 800220c:	f000 fd32 	bl	8002c74 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002210:	f7fe ff56 	bl	80010c0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8002214:	f000 fd7a 	bl	8002d0c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002218:	f000 fea0 	bl	8002f5c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800221c:	f000 fec8 	bl	8002fb0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	system_init();
 8002220:	f000 f89c 	bl	800235c <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	InitSlave(&BKIT01);
 8002224:	4815      	ldr	r0, [pc, #84]	@ (800227c <main+0x94>)
 8002226:	f7fe fd65 	bl	8000cf4 <InitSlave>
	InitTimer();
 800222a:	f000 fba5 	bl	8002978 <InitTimer>
	lcd_clear(BLACK);
 800222e:	2000      	movs	r0, #0
 8002230:	f7ff fb94 	bl	800195c <lcd_clear>
	set_timer(10, 0);
 8002234:	2100      	movs	r1, #0
 8002236:	200a      	movs	r0, #10
 8002238:	f000 fbc0 	bl	80029bc <set_timer>
	set_timer(1000, 1);
 800223c:	2101      	movs	r1, #1
 800223e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002242:	f000 fbbb 	bl	80029bc <set_timer>


	while (1) {
//		HAL_Delay(10);
		if(timer_flag[0]){
 8002246:	4b0e      	ldr	r3, [pc, #56]	@ (8002280 <main+0x98>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <main+0x78>
			slave_behavior(&BKIT01);
 800224e:	480b      	ldr	r0, [pc, #44]	@ (800227c <main+0x94>)
 8002250:	f7fe feec 	bl	800102c <slave_behavior>
			TestADC();
 8002254:	f000 f890 	bl	8002378 <TestADC>
			set_timer(10, 0);
 8002258:	2100      	movs	r1, #0
 800225a:	200a      	movs	r0, #10
 800225c:	f000 fbae 	bl	80029bc <set_timer>
		}
		if(timer_flag[1]){
 8002260:	4b07      	ldr	r3, [pc, #28]	@ (8002280 <main+0x98>)
 8002262:	785b      	ldrb	r3, [r3, #1]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ee      	beq.n	8002246 <main+0x5e>
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002268:	2110      	movs	r1, #16
 800226a:	4806      	ldr	r0, [pc, #24]	@ (8002284 <main+0x9c>)
 800226c:	f002 faf5 	bl	800485a <HAL_GPIO_TogglePin>
			set_timer(1000, 1);
 8002270:	2101      	movs	r1, #1
 8002272:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002276:	f000 fba1 	bl	80029bc <set_timer>
		if(timer_flag[0]){
 800227a:	e7e4      	b.n	8002246 <main+0x5e>
 800227c:	20000228 	.word	0x20000228
 8002280:	200005b0 	.word	0x200005b0
 8002284:	40021000 	.word	0x40021000

08002288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b094      	sub	sp, #80	@ 0x50
 800228c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800228e:	f107 0320 	add.w	r3, r7, #32
 8002292:	2230      	movs	r2, #48	@ 0x30
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f005 fb3a 	bl	8007910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	4b28      	ldr	r3, [pc, #160]	@ (8002354 <SystemClock_Config+0xcc>)
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	4a27      	ldr	r2, [pc, #156]	@ (8002354 <SystemClock_Config+0xcc>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80022bc:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <SystemClock_Config+0xcc>)
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c8:	2300      	movs	r3, #0
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	4b22      	ldr	r3, [pc, #136]	@ (8002358 <SystemClock_Config+0xd0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a21      	ldr	r2, [pc, #132]	@ (8002358 <SystemClock_Config+0xd0>)
 80022d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <SystemClock_Config+0xd0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022e4:	2302      	movs	r3, #2
 80022e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e8:	2301      	movs	r3, #1
 80022ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ec:	2310      	movs	r3, #16
 80022ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022f0:	2302      	movs	r3, #2
 80022f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022f4:	2300      	movs	r3, #0
 80022f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022f8:	2308      	movs	r3, #8
 80022fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80022fc:	23a8      	movs	r3, #168	@ 0xa8
 80022fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002300:	2302      	movs	r3, #2
 8002302:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002304:	2304      	movs	r3, #4
 8002306:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002308:	f107 0320 	add.w	r3, r7, #32
 800230c:	4618      	mov	r0, r3
 800230e:	f002 fc03 	bl	8004b18 <HAL_RCC_OscConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002318:	f000 f8ee 	bl	80024f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800231c:	230f      	movs	r3, #15
 800231e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002320:	2302      	movs	r3, #2
 8002322:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002328:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800232c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800232e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002332:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002334:	f107 030c 	add.w	r3, r7, #12
 8002338:	2105      	movs	r1, #5
 800233a:	4618      	mov	r0, r3
 800233c:	f002 fe64 	bl	8005008 <HAL_RCC_ClockConfig>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002346:	f000 f8d7 	bl	80024f8 <Error_Handler>
  }
}
 800234a:	bf00      	nop
 800234c:	3750      	adds	r7, #80	@ 0x50
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800
 8002358:	40007000 	.word	0x40007000

0800235c <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
	button_init();
 8002360:	f7fe ffcc 	bl	80012fc <button_init>
	lcd_init();
 8002364:	f7ff fd5a 	bl	8001e1c <lcd_init>

	sensor_init();
 8002368:	f000 fa10 	bl	800278c <sensor_init>
	buzzer_init();
 800236c:	f7fe ffd2 	bl	8001314 <buzzer_init>

	timer2_init();
 8002370:	f000 faf8 	bl	8002964 <timer2_init>
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}

08002378 <TestADC>:
	else
		return 0;
}

uint8_t count_adc = 0;
void TestADC() {
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1) % 20;
 800237e:	4b57      	ldr	r3, [pc, #348]	@ (80024dc <TestADC+0x164>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	4b56      	ldr	r3, [pc, #344]	@ (80024e0 <TestADC+0x168>)
 8002386:	fb83 1302 	smull	r1, r3, r3, r2
 800238a:	10d9      	asrs	r1, r3, #3
 800238c:	17d3      	asrs	r3, r2, #31
 800238e:	1ac9      	subs	r1, r1, r3
 8002390:	460b      	mov	r3, r1
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	1ad1      	subs	r1, r2, r3
 800239a:	b2ca      	uxtb	r2, r1
 800239c:	4b4f      	ldr	r3, [pc, #316]	@ (80024dc <TestADC+0x164>)
 800239e:	701a      	strb	r2, [r3, #0]
	if (count_adc == 0) {
 80023a0:	4b4e      	ldr	r3, [pc, #312]	@ (80024dc <TestADC+0x164>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f040 8096 	bne.w	80024d6 <TestADC+0x15e>
		sensor_read();
 80023aa:	f000 f9fd 	bl	80027a8 <sensor_read>
		lcd_show_string(10, 100, "Voltage:", RED, BLACK, 16, 0);
 80023ae:	2300      	movs	r3, #0
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	2310      	movs	r3, #16
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	2300      	movs	r3, #0
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80023be:	4a49      	ldr	r2, [pc, #292]	@ (80024e4 <TestADC+0x16c>)
 80023c0:	2164      	movs	r1, #100	@ 0x64
 80023c2:	200a      	movs	r0, #10
 80023c4:	f7ff fe8a 	bl	80020dc <lcd_show_string>
		lcd_show_float_num(130, 100, sensor_get_voltage(), 4, RED, BLACK, 16);
 80023c8:	f000 fa16 	bl	80027f8 <sensor_get_voltage>
 80023cc:	eef0 7a40 	vmov.f32	s15, s0
 80023d0:	2310      	movs	r3, #16
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	2300      	movs	r3, #0
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80023dc:	2204      	movs	r2, #4
 80023de:	eeb0 0a67 	vmov.f32	s0, s15
 80023e2:	2164      	movs	r1, #100	@ 0x64
 80023e4:	2082      	movs	r0, #130	@ 0x82
 80023e6:	f7ff fc6d 	bl	8001cc4 <lcd_show_float_num>
		lcd_show_string(10, 120, "Current:", RED, BLACK, 16, 0);
 80023ea:	2300      	movs	r3, #0
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	2310      	movs	r3, #16
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	2300      	movs	r3, #0
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80023fa:	4a3b      	ldr	r2, [pc, #236]	@ (80024e8 <TestADC+0x170>)
 80023fc:	2178      	movs	r1, #120	@ 0x78
 80023fe:	200a      	movs	r0, #10
 8002400:	f7ff fe6c 	bl	80020dc <lcd_show_string>
		lcd_show_float_num(130, 120, sensor_get_current(), 4, RED, BLACK, 16);
 8002404:	f000 fa34 	bl	8002870 <sensor_get_current>
 8002408:	eef0 7a40 	vmov.f32	s15, s0
 800240c:	2310      	movs	r3, #16
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	2300      	movs	r3, #0
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002418:	2204      	movs	r2, #4
 800241a:	eeb0 0a67 	vmov.f32	s0, s15
 800241e:	2178      	movs	r1, #120	@ 0x78
 8002420:	2082      	movs	r0, #130	@ 0x82
 8002422:	f7ff fc4f 	bl	8001cc4 <lcd_show_float_num>
		lcd_show_string(10, 140, "Light:", RED, BLACK, 16, 0);
 8002426:	2300      	movs	r3, #0
 8002428:	9302      	str	r3, [sp, #8]
 800242a:	2310      	movs	r3, #16
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	2300      	movs	r3, #0
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002436:	4a2d      	ldr	r2, [pc, #180]	@ (80024ec <TestADC+0x174>)
 8002438:	218c      	movs	r1, #140	@ 0x8c
 800243a:	200a      	movs	r0, #10
 800243c:	f7ff fe4e 	bl	80020dc <lcd_show_string>
		lcd_show_int_num(130, 140, sensor_get_light(), 4, RED, BLACK, 16);
 8002440:	f000 f9c0 	bl	80027c4 <sensor_get_light>
 8002444:	4603      	mov	r3, r0
 8002446:	461a      	mov	r2, r3
 8002448:	2310      	movs	r3, #16
 800244a:	9302      	str	r3, [sp, #8]
 800244c:	2300      	movs	r3, #0
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2304      	movs	r3, #4
 8002458:	218c      	movs	r1, #140	@ 0x8c
 800245a:	2082      	movs	r0, #130	@ 0x82
 800245c:	f7ff fbb4 	bl	8001bc8 <lcd_show_int_num>
		lcd_show_string(10, 160, "Potentiometer:", RED, BLACK, 16, 0);
 8002460:	2300      	movs	r3, #0
 8002462:	9302      	str	r3, [sp, #8]
 8002464:	2310      	movs	r3, #16
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	2300      	movs	r3, #0
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002470:	4a1f      	ldr	r2, [pc, #124]	@ (80024f0 <TestADC+0x178>)
 8002472:	21a0      	movs	r1, #160	@ 0xa0
 8002474:	200a      	movs	r0, #10
 8002476:	f7ff fe31 	bl	80020dc <lcd_show_string>
		lcd_show_int_num(130, 160, sensor_get_potentiometer(), 4, RED, BLACK,
 800247a:	f000 f9af 	bl	80027dc <sensor_get_potentiometer>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	2310      	movs	r3, #16
 8002484:	9302      	str	r3, [sp, #8]
 8002486:	2300      	movs	r3, #0
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	2304      	movs	r3, #4
 8002492:	21a0      	movs	r1, #160	@ 0xa0
 8002494:	2082      	movs	r0, #130	@ 0x82
 8002496:	f7ff fb97 	bl	8001bc8 <lcd_show_int_num>
				16);
		lcd_show_string(10, 180, "Temperature:", RED, BLACK, 16, 0);
 800249a:	2300      	movs	r3, #0
 800249c:	9302      	str	r3, [sp, #8]
 800249e:	2310      	movs	r3, #16
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	2300      	movs	r3, #0
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80024aa:	4a12      	ldr	r2, [pc, #72]	@ (80024f4 <TestADC+0x17c>)
 80024ac:	21b4      	movs	r1, #180	@ 0xb4
 80024ae:	200a      	movs	r0, #10
 80024b0:	f7ff fe14 	bl	80020dc <lcd_show_string>
		lcd_show_float_num(130, 180, sensor_get_temperature(), 4, RED, BLACK,
 80024b4:	f000 fa38 	bl	8002928 <sensor_get_temperature>
 80024b8:	eef0 7a40 	vmov.f32	s15, s0
 80024bc:	2310      	movs	r3, #16
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	2300      	movs	r3, #0
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80024c8:	2204      	movs	r2, #4
 80024ca:	eeb0 0a67 	vmov.f32	s0, s15
 80024ce:	21b4      	movs	r1, #180	@ 0xb4
 80024d0:	2082      	movs	r0, #130	@ 0x82
 80024d2:	f7ff fbf7 	bl	8001cc4 <lcd_show_float_num>
				16);
	}
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000396 	.word	0x20000396
 80024e0:	66666667 	.word	0x66666667
 80024e4:	08007980 	.word	0x08007980
 80024e8:	0800798c 	.word	0x0800798c
 80024ec:	08007998 	.word	0x08007998
 80024f0:	080079a0 	.word	0x080079a0
 80024f4:	080079b0 	.word	0x080079b0

080024f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024fc:	b672      	cpsid	i
}
 80024fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <Error_Handler+0x8>

08002504 <Modbus_Send>:

Modbus_HandleTypeDef master;
Modbus_HandleTypeDef slave;


HAL_StatusTypeDef Modbus_Send(Modbus_HandleTypeDef* hModbus){
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,hModbus->Tx_buf,hModbus->Tx_size,HAL_MAX_DELAY);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	1d59      	adds	r1, r3, #5
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
 800251a:	4815      	ldr	r0, [pc, #84]	@ (8002570 <Modbus_Send+0x6c>)
 800251c:	f004 f8e4 	bl	80066e8 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,SET);
 8002520:	2201      	movs	r2, #1
 8002522:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002526:	4813      	ldr	r0, [pc, #76]	@ (8002574 <Modbus_Send+0x70>)
 8002528:	f002 f97e 	bl	8004828 <HAL_GPIO_WritePin>
	if(HAL_UART_Transmit(hModbus->huart,hModbus->Tx_buf,hModbus->Tx_size,HAL_MAX_DELAY) != HAL_OK){
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	1d59      	adds	r1, r3, #5
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	f004 f8d3 	bl	80066e8 <HAL_UART_Transmit>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <Modbus_Send+0x54>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 8002548:	2200      	movs	r2, #0
 800254a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800254e:	4809      	ldr	r0, [pc, #36]	@ (8002574 <Modbus_Send+0x70>)
 8002550:	f002 f96a 	bl	8004828 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e006      	b.n	8002566 <Modbus_Send+0x62>
	};

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 8002558:	2200      	movs	r2, #0
 800255a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800255e:	4805      	ldr	r0, [pc, #20]	@ (8002574 <Modbus_Send+0x70>)
 8002560:	f002 f962 	bl	8004828 <HAL_GPIO_WritePin>
	return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200006fc 	.word	0x200006fc
 8002574:	40020000 	.word	0x40020000

08002578 <Modbus_CheckData>:

unsigned char Modbus_CheckData(Modbus_HandleTypeDef* hModbus){
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	uint16_t rx_crc = crc16(hModbus->Rx_buf, hModbus->Rx_size - 2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800258c:	3b02      	subs	r3, #2
 800258e:	b29b      	uxth	r3, r3
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f7fe fec8 	bl	8001328 <crc16>
 8002598:	4603      	mov	r3, r0
 800259a:	81fb      	strh	r3, [r7, #14]
	uint16_t high_crc = hModbus->Rx_buf[hModbus->Rx_size - 1];
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80025a2:	3b01      	subs	r3, #1
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4413      	add	r3, r2
 80025a8:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80025ac:	81bb      	strh	r3, [r7, #12]
	uint16_t low_crc =  hModbus->Rx_buf[hModbus->Rx_size - 2];
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80025b4:	3b02      	subs	r3, #2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80025be:	817b      	strh	r3, [r7, #10]
	uint16_t receive_crc = (high_crc<<8)|(low_crc);
 80025c0:	89bb      	ldrh	r3, [r7, #12]
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	b21a      	sxth	r2, r3
 80025c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	b21b      	sxth	r3, r3
 80025ce:	813b      	strh	r3, [r7, #8]
//	if(status){
//		HAL_UART_Transmit(&huart1, (uint8_t*)"oke", 3, 100);
//	}else{
//		HAL_UART_Transmit(&huart1, (uint8_t*)"NO", 2, 100);
//	}
	return (receive_crc == rx_crc) ? 1 : 0;
 80025d0:	893a      	ldrh	r2, [r7, #8]
 80025d2:	89fb      	ldrh	r3, [r7, #14]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <Modbus_Transmit_Slave>:
	hModbus->RxFlag = 0;
	HAL_Delay(5);
	return MODBUS_OKE;
}

Modbus_Status Modbus_Transmit_Slave(Modbus_HandleTypeDef* hModbus, uint8_t Address, uint8_t Function, uint8_t* Data, uint8_t Size, uint32_t Timeout){
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	72fb      	strb	r3, [r7, #11]
 80025f4:	4613      	mov	r3, r2
 80025f6:	72bb      	strb	r3, [r7, #10]
	hModbus->Tx_buf[0] = Address;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	7afa      	ldrb	r2, [r7, #11]
 80025fc:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_buf[1] = Function;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	7aba      	ldrb	r2, [r7, #10]
 8002602:	719a      	strb	r2, [r3, #6]
	hModbus->Tx_buf[2] = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f897 2020 	ldrb.w	r2, [r7, #32]
 800260a:	71da      	strb	r2, [r3, #7]
	int i;
	uint16_t crc = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	827b      	strh	r3, [r7, #18]
	for(i=0; i<Size; i++){
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	e00c      	b.n	8002630 <Modbus_Transmit_Slave+0x4a>
		hModbus->Tx_buf[i+3] = *(Data + i);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	441a      	add	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	3303      	adds	r3, #3
 8002620:	7811      	ldrb	r1, [r2, #0]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4413      	add	r3, r2
 8002626:	460a      	mov	r2, r1
 8002628:	715a      	strb	r2, [r3, #5]
	for(i=0; i<Size; i++){
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	3301      	adds	r3, #1
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	429a      	cmp	r2, r3
 8002638:	dbed      	blt.n	8002616 <Modbus_Transmit_Slave+0x30>
	}
	crc = crc16(hModbus->Tx_buf, i+3);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1d5a      	adds	r2, r3, #5
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	b29b      	uxth	r3, r3
 8002642:	3303      	adds	r3, #3
 8002644:	b29b      	uxth	r3, r3
 8002646:	4619      	mov	r1, r3
 8002648:	4610      	mov	r0, r2
 800264a:	f7fe fe6d 	bl	8001328 <crc16>
 800264e:	4603      	mov	r3, r0
 8002650:	827b      	strh	r3, [r7, #18]
	hModbus->Tx_buf[i+3] = crc & 0x00FF; // LOW
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3303      	adds	r3, #3
 8002656:	8a7a      	ldrh	r2, [r7, #18]
 8002658:	b2d1      	uxtb	r1, r2
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4413      	add	r3, r2
 800265e:	460a      	mov	r2, r1
 8002660:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_buf[i+4] = crc >> 8; //HIGH
 8002662:	8a7b      	ldrh	r3, [r7, #18]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	b29a      	uxth	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	3304      	adds	r3, #4
 800266c:	b2d1      	uxtb	r1, r2
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4413      	add	r3, r2
 8002672:	460a      	mov	r2, r1
 8002674:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_size = Size + 5;
 8002676:	f897 3020 	ldrb.w	r3, [r7, #32]
 800267a:	b29b      	uxth	r3, r3
 800267c:	3305      	adds	r3, #5
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	if(Modbus_Send(hModbus) == HAL_OK){
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f7ff ff3c 	bl	8002504 <Modbus_Send>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <Modbus_Transmit_Slave+0xb0>
		return MODBUS_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e003      	b.n	800269e <Modbus_Transmit_Slave+0xb8>
	}
	HAL_Delay(5);
 8002696:	2005      	movs	r0, #5
 8002698:	f000 fde0 	bl	800325c <HAL_Delay>
	return MODBUS_OKE;
 800269c:	2302      	movs	r3, #2
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <Modbus_Receive>:

Modbus_Status Modbus_Receive(Modbus_HandleTypeDef* hModbus){ //Thieu timeout
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80026ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026be:	4619      	mov	r1, r3
 80026c0:	f004 f89d 	bl	80067fe <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 80026c4:	2200      	movs	r2, #0
 80026c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026ca:	4804      	ldr	r0, [pc, #16]	@ (80026dc <Modbus_Receive+0x34>)
 80026cc:	f002 f8ac 	bl	8004828 <HAL_GPIO_WritePin>
	return MODBUS_OKE;
 80026d0:	2302      	movs	r3, #2
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40020000 	.word	0x40020000

080026e0 <Modbus_CallBack>:

void Modbus_CallBack(Modbus_HandleTypeDef* hModbus, UART_HandleTypeDef* huart, uint16_t Size){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
	hModbus->Rx_size = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	88fa      	ldrh	r2, [r7, #6]
 80026f2:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	hModbus->RxFlag = 1;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
	Receive_Flag = Modbus_CheckData(hModbus);
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f7ff ff3a 	bl	8002578 <Modbus_CheckData>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	4b07      	ldr	r3, [pc, #28]	@ (8002728 <Modbus_CallBack+0x48>)
 800270a:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Transmit(&huart1, hModbus->Rx_buf, hModbus->Rx_size, HAL_MAX_DELAY);
	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002716:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800271a:	4619      	mov	r1, r3
 800271c:	f004 f86f 	bl	80067fe <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000397 	.word	0x20000397

0800272c <Modbus_Init>:

void Modbus_Init(Modbus_HandleTypeDef* hModbus, UART_HandleTypeDef* huart){
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
	hModbus->huart = huart;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	601a      	str	r2, [r3, #0]
	hModbus->Address = 0;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	711a      	strb	r2, [r3, #4]
	memset(hModbus->Rx_buf,0,sizeof(hModbus->Rx_buf));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002748:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f005 f8de 	bl	8007910 <memset>
	hModbus->Rx_size = 256;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800275a:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	memset(hModbus->Tx_buf,0,sizeof(hModbus->Tx_buf));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3305      	adds	r3, #5
 8002762:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f005 f8d1 	bl	8007910 <memset>
	hModbus->Tx_size = 0;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	hModbus->RxFlag = 0;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
	Modbus_Receive(hModbus);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ff92 	bl	80026a8 <Modbus_Receive>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <sensor_init>:

/* Variables */
uint16_t adc_receive[5];

/* Functions */
void sensor_init() {
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*) adc_receive, 5);
 8002790:	2205      	movs	r2, #5
 8002792:	4903      	ldr	r1, [pc, #12]	@ (80027a0 <sensor_init+0x14>)
 8002794:	4803      	ldr	r0, [pc, #12]	@ (80027a4 <sensor_init+0x18>)
 8002796:	f000 fdc9 	bl	800332c <HAL_ADC_Start_DMA>
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200005a4 	.word	0x200005a4
 80027a4:	20000240 	.word	0x20000240

080027a8 <sensor_read>:

void sensor_read() {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_receive, 5);
 80027ac:	2205      	movs	r2, #5
 80027ae:	4903      	ldr	r1, [pc, #12]	@ (80027bc <sensor_read+0x14>)
 80027b0:	4803      	ldr	r0, [pc, #12]	@ (80027c0 <sensor_read+0x18>)
 80027b2:	f000 fdbb 	bl	800332c <HAL_ADC_Start_DMA>
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200005a4 	.word	0x200005a4
 80027c0:	20000240 	.word	0x20000240

080027c4 <sensor_get_light>:

uint16_t sensor_get_light() {
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
	return adc_receive[2];
 80027c8:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <sensor_get_light+0x14>)
 80027ca:	889b      	ldrh	r3, [r3, #4]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	200005a4 	.word	0x200005a4

080027dc <sensor_get_potentiometer>:

uint16_t sensor_get_potentiometer() {
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
	return adc_receive[3];
 80027e0:	4b03      	ldr	r3, [pc, #12]	@ (80027f0 <sensor_get_potentiometer+0x14>)
 80027e2:	88db      	ldrh	r3, [r3, #6]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	200005a4 	.word	0x200005a4
 80027f4:	00000000 	.word	0x00000000

080027f8 <sensor_get_voltage>:

float sensor_get_voltage() {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
	return ((float) adc_receive[0] * 3.3 * 12) / (4095 * 1.565);
 80027fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002868 <sensor_get_voltage+0x70>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	ee07 3a90 	vmov	s15, r3
 8002804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002808:	ee17 0a90 	vmov	r0, s15
 800280c:	f7fd fe40 	bl	8000490 <__aeabi_f2d>
 8002810:	a311      	add	r3, pc, #68	@ (adr r3, 8002858 <sensor_get_voltage+0x60>)
 8002812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002816:	f7fd fe93 	bl	8000540 <__aeabi_dmul>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	4b11      	ldr	r3, [pc, #68]	@ (800286c <sensor_get_voltage+0x74>)
 8002828:	f7fd fe8a 	bl	8000540 <__aeabi_dmul>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	a30a      	add	r3, pc, #40	@ (adr r3, 8002860 <sensor_get_voltage+0x68>)
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	f7fd ffab 	bl	8000794 <__aeabi_ddiv>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	f7fe f88d 	bl	8000964 <__aeabi_d2f>
 800284a:	4603      	mov	r3, r0
 800284c:	ee07 3a90 	vmov	s15, r3
}
 8002850:	eeb0 0a67 	vmov.f32	s0, s15
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	66666666 	.word	0x66666666
 800285c:	400a6666 	.word	0x400a6666
 8002860:	cccccccd 	.word	0xcccccccd
 8002864:	40b908ac 	.word	0x40b908ac
 8002868:	200005a4 	.word	0x200005a4
 800286c:	40280000 	.word	0x40280000

08002870 <sensor_get_current>:

float sensor_get_current() {
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
	return (((float) adc_receive[1] * 3.3 * 1000) / (4095 * 0.647) - 2.5) * 5
 8002874:	4b28      	ldr	r3, [pc, #160]	@ (8002918 <sensor_get_current+0xa8>)
 8002876:	885b      	ldrh	r3, [r3, #2]
 8002878:	ee07 3a90 	vmov	s15, r3
 800287c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002880:	ee17 0a90 	vmov	r0, s15
 8002884:	f7fd fe04 	bl	8000490 <__aeabi_f2d>
 8002888:	a31f      	add	r3, pc, #124	@ (adr r3, 8002908 <sensor_get_current+0x98>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	f7fd fe57 	bl	8000540 <__aeabi_dmul>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	4b1f      	ldr	r3, [pc, #124]	@ (800291c <sensor_get_current+0xac>)
 80028a0:	f7fd fe4e 	bl	8000540 <__aeabi_dmul>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	a318      	add	r3, pc, #96	@ (adr r3, 8002910 <sensor_get_current+0xa0>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f7fd ff6f 	bl	8000794 <__aeabi_ddiv>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	4b17      	ldr	r3, [pc, #92]	@ (8002920 <sensor_get_current+0xb0>)
 80028c4:	f7fd fc84 	bl	80001d0 <__aeabi_dsub>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	4b13      	ldr	r3, [pc, #76]	@ (8002924 <sensor_get_current+0xb4>)
 80028d6:	f7fd fe33 	bl	8000540 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
			/ 2.5;
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <sensor_get_current+0xb0>)
 80028e8:	f7fd ff54 	bl	8000794 <__aeabi_ddiv>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	f7fe f836 	bl	8000964 <__aeabi_d2f>
 80028f8:	4603      	mov	r3, r0
 80028fa:	ee07 3a90 	vmov	s15, r3
}
 80028fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002902:	bd80      	pop	{r7, pc}
 8002904:	f3af 8000 	nop.w
 8002908:	66666666 	.word	0x66666666
 800290c:	400a6666 	.word	0x400a6666
 8002910:	147ae148 	.word	0x147ae148
 8002914:	40a4b2ee 	.word	0x40a4b2ee
 8002918:	200005a4 	.word	0x200005a4
 800291c:	408f4000 	.word	0x408f4000
 8002920:	40040000 	.word	0x40040000
 8002924:	40140000 	.word	0x40140000

08002928 <sensor_get_temperature>:

float sensor_get_temperature() {
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
	return ((float) adc_receive[4] * 330) / (4095);
 800292c:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <sensor_get_temperature+0x30>)
 800292e:	891b      	ldrh	r3, [r3, #8]
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002938:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800295c <sensor_get_temperature+0x34>
 800293c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002940:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002960 <sensor_get_temperature+0x38>
 8002944:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002948:	eef0 7a66 	vmov.f32	s15, s13
}
 800294c:	eeb0 0a67 	vmov.f32	s0, s15
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	200005a4 	.word	0x200005a4
 800295c:	43a50000 	.word	0x43a50000
 8002960:	457ff000 	.word	0x457ff000

08002964 <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002968:	4802      	ldr	r0, [pc, #8]	@ (8002974 <timer2_init+0x10>)
 800296a:	f002 fe8d 	bl	8005688 <HAL_TIM_Base_Start_IT>
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000624 	.word	0x20000624

08002978 <InitTimer>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void InitTimer(void){
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
	for(int i = 0; i < __MAX_TIM; i++){
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	e00c      	b.n	800299e <InitTimer+0x26>
		timer_counter[i] = 0;
 8002984:	4a0b      	ldr	r2, [pc, #44]	@ (80029b4 <InitTimer+0x3c>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2100      	movs	r1, #0
 800298a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timer_flag[i] = 0;
 800298e:	4a0a      	ldr	r2, [pc, #40]	@ (80029b8 <InitTimer+0x40>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4413      	add	r3, r2
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < __MAX_TIM; i++){
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3301      	adds	r3, #1
 800299c:	607b      	str	r3, [r7, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	ddef      	ble.n	8002984 <InitTimer+0xc>
	}
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	200005b8 	.word	0x200005b8
 80029b8:	200005b0 	.word	0x200005b0

080029bc <set_timer>:

void set_timer(uint32_t ms, uint8_t idx){
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
	timer_flag[idx] = 0;
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	4a07      	ldr	r2, [pc, #28]	@ (80029e8 <set_timer+0x2c>)
 80029cc:	2100      	movs	r1, #0
 80029ce:	54d1      	strb	r1, [r2, r3]
	timer_counter[idx] = ms;
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	4906      	ldr	r1, [pc, #24]	@ (80029ec <set_timer+0x30>)
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	200005b0 	.word	0x200005b0
 80029ec:	200005b8 	.word	0x200005b8

080029f0 <TimerRun>:

void TimerRun(void){
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
	for(int i = 0; i < __MAX_TIM; i++){
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	e01c      	b.n	8002a36 <TimerRun+0x46>
		if(timer_counter[i] > 0){
 80029fc:	4a13      	ldr	r2, [pc, #76]	@ (8002a4c <TimerRun+0x5c>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <TimerRun+0x40>
			timer_counter[i]--;
 8002a08:	4a10      	ldr	r2, [pc, #64]	@ (8002a4c <TimerRun+0x5c>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a10:	1e5a      	subs	r2, r3, #1
 8002a12:	490e      	ldr	r1, [pc, #56]	@ (8002a4c <TimerRun+0x5c>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] == 0){
 8002a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a4c <TimerRun+0x5c>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d104      	bne.n	8002a30 <TimerRun+0x40>
				timer_flag[i] = 1;
 8002a26:	4a0a      	ldr	r2, [pc, #40]	@ (8002a50 <TimerRun+0x60>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < __MAX_TIM; i++){
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3301      	adds	r3, #1
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	dddf      	ble.n	80029fc <TimerRun+0xc>
			}
		}
	}
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	200005b8 	.word	0x200005b8
 8002a50:	200005b0 	.word	0x200005b0

08002a54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a58:	4b17      	ldr	r3, [pc, #92]	@ (8002ab8 <MX_SPI1_Init+0x64>)
 8002a5a:	4a18      	ldr	r2, [pc, #96]	@ (8002abc <MX_SPI1_Init+0x68>)
 8002a5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a5e:	4b16      	ldr	r3, [pc, #88]	@ (8002ab8 <MX_SPI1_Init+0x64>)
 8002a60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a66:	4b14      	ldr	r3, [pc, #80]	@ (8002ab8 <MX_SPI1_Init+0x64>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a6c:	4b12      	ldr	r3, [pc, #72]	@ (8002ab8 <MX_SPI1_Init+0x64>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a72:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <MX_SPI1_Init+0x64>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a78:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab8 <MX_SPI1_Init+0x64>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab8 <MX_SPI1_Init+0x64>)
 8002a80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a86:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <MX_SPI1_Init+0x64>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <MX_SPI1_Init+0x64>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <MX_SPI1_Init+0x64>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a98:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <MX_SPI1_Init+0x64>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <MX_SPI1_Init+0x64>)
 8002aa0:	220a      	movs	r2, #10
 8002aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aa4:	4804      	ldr	r0, [pc, #16]	@ (8002ab8 <MX_SPI1_Init+0x64>)
 8002aa6:	f002 fccf 	bl	8005448 <HAL_SPI_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ab0:	f7ff fd22 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	200005cc 	.word	0x200005cc
 8002abc:	40013000 	.word	0x40013000

08002ac0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08a      	sub	sp, #40	@ 0x28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 0314 	add.w	r3, r7, #20
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a19      	ldr	r2, [pc, #100]	@ (8002b44 <HAL_SPI_MspInit+0x84>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d12b      	bne.n	8002b3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	4b18      	ldr	r3, [pc, #96]	@ (8002b48 <HAL_SPI_MspInit+0x88>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aea:	4a17      	ldr	r2, [pc, #92]	@ (8002b48 <HAL_SPI_MspInit+0x88>)
 8002aec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002af2:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <HAL_SPI_MspInit+0x88>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	4b11      	ldr	r3, [pc, #68]	@ (8002b48 <HAL_SPI_MspInit+0x88>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	4a10      	ldr	r2, [pc, #64]	@ (8002b48 <HAL_SPI_MspInit+0x88>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b48 <HAL_SPI_MspInit+0x88>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002b1a:	2338      	movs	r3, #56	@ 0x38
 8002b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b2a:	2305      	movs	r3, #5
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2e:	f107 0314 	add.w	r3, r7, #20
 8002b32:	4619      	mov	r1, r3
 8002b34:	4805      	ldr	r0, [pc, #20]	@ (8002b4c <HAL_SPI_MspInit+0x8c>)
 8002b36:	f001 fcdb 	bl	80044f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	3728      	adds	r7, #40	@ 0x28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40013000 	.word	0x40013000
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40020400 	.word	0x40020400

08002b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	4b10      	ldr	r3, [pc, #64]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b66:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	4b09      	ldr	r3, [pc, #36]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	4a08      	ldr	r2, [pc, #32]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_MspInit+0x4c>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800

08002ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <NMI_Handler+0x4>

08002ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <HardFault_Handler+0x4>

08002bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <MemManage_Handler+0x4>

08002bb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bbc:	bf00      	nop
 8002bbe:	e7fd      	b.n	8002bbc <BusFault_Handler+0x4>

08002bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <UsageFault_Handler+0x4>

08002bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf6:	f000 fb11 	bl	800321c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c04:	4802      	ldr	r0, [pc, #8]	@ (8002c10 <TIM2_IRQHandler+0x10>)
 8002c06:	f002 fed1 	bl	80059ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000624 	.word	0x20000624

08002c14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c18:	4802      	ldr	r0, [pc, #8]	@ (8002c24 <USART1_IRQHandler+0x10>)
 8002c1a:	f003 fe4d 	bl	80068b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200006fc 	.word	0x200006fc

08002c28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c2c:	4802      	ldr	r0, [pc, #8]	@ (8002c38 <USART3_IRQHandler+0x10>)
 8002c2e:	f003 fe43 	bl	80068b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000744 	.word	0x20000744

08002c3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c40:	4802      	ldr	r0, [pc, #8]	@ (8002c4c <DMA2_Stream0_IRQHandler+0x10>)
 8002c42:	f001 f9eb 	bl	800401c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000288 	.word	0x20000288

08002c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c54:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <SystemInit+0x20>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5a:	4a05      	ldr	r2, [pc, #20]	@ (8002c70 <SystemInit+0x20>)
 8002c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c7a:	f107 0308 	add.w	r3, r7, #8
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c88:	463b      	mov	r3, r7
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	@ (8002d08 <MX_TIM2_Init+0x94>)
 8002c92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002c98:	4b1b      	ldr	r3, [pc, #108]	@ (8002d08 <MX_TIM2_Init+0x94>)
 8002c9a:	f240 3247 	movw	r2, #839	@ 0x347
 8002c9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca0:	4b19      	ldr	r3, [pc, #100]	@ (8002d08 <MX_TIM2_Init+0x94>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002ca6:	4b18      	ldr	r3, [pc, #96]	@ (8002d08 <MX_TIM2_Init+0x94>)
 8002ca8:	2263      	movs	r2, #99	@ 0x63
 8002caa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cac:	4b16      	ldr	r3, [pc, #88]	@ (8002d08 <MX_TIM2_Init+0x94>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb2:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <MX_TIM2_Init+0x94>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cb8:	4813      	ldr	r0, [pc, #76]	@ (8002d08 <MX_TIM2_Init+0x94>)
 8002cba:	f002 fc96 	bl	80055ea <HAL_TIM_Base_Init>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002cc4:	f7ff fc18 	bl	80024f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cce:	f107 0308 	add.w	r3, r7, #8
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	480c      	ldr	r0, [pc, #48]	@ (8002d08 <MX_TIM2_Init+0x94>)
 8002cd6:	f003 f81b 	bl	8005d10 <HAL_TIM_ConfigClockSource>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002ce0:	f7ff fc0a 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cec:	463b      	mov	r3, r7
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4805      	ldr	r0, [pc, #20]	@ (8002d08 <MX_TIM2_Init+0x94>)
 8002cf2:	f003 fc19 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002cfc:	f7ff fbfc 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d00:	bf00      	nop
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000624 	.word	0x20000624

08002d0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d20:	463b      	mov	r3, r7
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d28:	4b1d      	ldr	r3, [pc, #116]	@ (8002da0 <MX_TIM4_Init+0x94>)
 8002d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002da4 <MX_TIM4_Init+0x98>)
 8002d2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8002d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002da0 <MX_TIM4_Init+0x94>)
 8002d30:	f240 3247 	movw	r2, #839	@ 0x347
 8002d34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d36:	4b1a      	ldr	r3, [pc, #104]	@ (8002da0 <MX_TIM4_Init+0x94>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002d3c:	4b18      	ldr	r3, [pc, #96]	@ (8002da0 <MX_TIM4_Init+0x94>)
 8002d3e:	2263      	movs	r2, #99	@ 0x63
 8002d40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d42:	4b17      	ldr	r3, [pc, #92]	@ (8002da0 <MX_TIM4_Init+0x94>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d48:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <MX_TIM4_Init+0x94>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d4e:	4814      	ldr	r0, [pc, #80]	@ (8002da0 <MX_TIM4_Init+0x94>)
 8002d50:	f002 fc4b 	bl	80055ea <HAL_TIM_Base_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002d5a:	f7ff fbcd 	bl	80024f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d64:	f107 0308 	add.w	r3, r7, #8
 8002d68:	4619      	mov	r1, r3
 8002d6a:	480d      	ldr	r0, [pc, #52]	@ (8002da0 <MX_TIM4_Init+0x94>)
 8002d6c:	f002 ffd0 	bl	8005d10 <HAL_TIM_ConfigClockSource>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002d76:	f7ff fbbf 	bl	80024f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d82:	463b      	mov	r3, r7
 8002d84:	4619      	mov	r1, r3
 8002d86:	4806      	ldr	r0, [pc, #24]	@ (8002da0 <MX_TIM4_Init+0x94>)
 8002d88:	f003 fbce 	bl	8006528 <HAL_TIMEx_MasterConfigSynchronization>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002d92:	f7ff fbb1 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	2000066c 	.word	0x2000066c
 8002da4:	40000800 	.word	0x40000800

08002da8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dae:	1d3b      	adds	r3, r7, #4
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
 8002dbc:	615a      	str	r2, [r3, #20]
 8002dbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e3c <MX_TIM13_Init+0x94>)
 8002dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e40 <MX_TIM13_Init+0x98>)
 8002dc4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e3c <MX_TIM13_Init+0x94>)
 8002dc8:	f240 3247 	movw	r2, #839	@ 0x347
 8002dcc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dce:	4b1b      	ldr	r3, [pc, #108]	@ (8002e3c <MX_TIM13_Init+0x94>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002dd4:	4b19      	ldr	r3, [pc, #100]	@ (8002e3c <MX_TIM13_Init+0x94>)
 8002dd6:	2263      	movs	r2, #99	@ 0x63
 8002dd8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dda:	4b18      	ldr	r3, [pc, #96]	@ (8002e3c <MX_TIM13_Init+0x94>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de0:	4b16      	ldr	r3, [pc, #88]	@ (8002e3c <MX_TIM13_Init+0x94>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002de6:	4815      	ldr	r0, [pc, #84]	@ (8002e3c <MX_TIM13_Init+0x94>)
 8002de8:	f002 fbff 	bl	80055ea <HAL_TIM_Base_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002df2:	f7ff fb81 	bl	80024f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002df6:	4811      	ldr	r0, [pc, #68]	@ (8002e3c <MX_TIM13_Init+0x94>)
 8002df8:	f002 fcb6 	bl	8005768 <HAL_TIM_PWM_Init>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002e02:	f7ff fb79 	bl	80024f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e06:	2360      	movs	r3, #96	@ 0x60
 8002e08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	2200      	movs	r2, #0
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4807      	ldr	r0, [pc, #28]	@ (8002e3c <MX_TIM13_Init+0x94>)
 8002e1e:	f002 feb5 	bl	8005b8c <HAL_TIM_PWM_ConfigChannel>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002e28:	f7ff fb66 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002e2c:	4803      	ldr	r0, [pc, #12]	@ (8002e3c <MX_TIM13_Init+0x94>)
 8002e2e:	f000 f85b 	bl	8002ee8 <HAL_TIM_MspPostInit>

}
 8002e32:	bf00      	nop
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	200006b4 	.word	0x200006b4
 8002e40:	40001c00 	.word	0x40001c00

08002e44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e54:	d116      	bne.n	8002e84 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	4b20      	ldr	r3, [pc, #128]	@ (8002edc <HAL_TIM_Base_MspInit+0x98>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002edc <HAL_TIM_Base_MspInit+0x98>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e66:	4b1d      	ldr	r3, [pc, #116]	@ (8002edc <HAL_TIM_Base_MspInit+0x98>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2100      	movs	r1, #0
 8002e76:	201c      	movs	r0, #28
 8002e78:	f000 ff01 	bl	8003c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e7c:	201c      	movs	r0, #28
 8002e7e:	f000 ff1a 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002e82:	e026      	b.n	8002ed2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM4)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a15      	ldr	r2, [pc, #84]	@ (8002ee0 <HAL_TIM_Base_MspInit+0x9c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10e      	bne.n	8002eac <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	4b12      	ldr	r3, [pc, #72]	@ (8002edc <HAL_TIM_Base_MspInit+0x98>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	4a11      	ldr	r2, [pc, #68]	@ (8002edc <HAL_TIM_Base_MspInit+0x98>)
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002edc <HAL_TIM_Base_MspInit+0x98>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]
}
 8002eaa:	e012      	b.n	8002ed2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee4 <HAL_TIM_Base_MspInit+0xa0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10d      	bne.n	8002ed2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <HAL_TIM_Base_MspInit+0x98>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	4a07      	ldr	r2, [pc, #28]	@ (8002edc <HAL_TIM_Base_MspInit+0x98>)
 8002ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec6:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <HAL_TIM_Base_MspInit+0x98>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40000800 	.word	0x40000800
 8002ee4:	40001c00 	.word	0x40001c00

08002ee8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a12      	ldr	r2, [pc, #72]	@ (8002f50 <HAL_TIM_MspPostInit+0x68>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d11e      	bne.n	8002f48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	4b11      	ldr	r3, [pc, #68]	@ (8002f54 <HAL_TIM_MspPostInit+0x6c>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	4a10      	ldr	r2, [pc, #64]	@ (8002f54 <HAL_TIM_MspPostInit+0x6c>)
 8002f14:	f043 0320 	orr.w	r3, r3, #32
 8002f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f54 <HAL_TIM_MspPostInit+0x6c>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002f38:	2309      	movs	r3, #9
 8002f3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f3c:	f107 030c 	add.w	r3, r7, #12
 8002f40:	4619      	mov	r1, r3
 8002f42:	4805      	ldr	r0, [pc, #20]	@ (8002f58 <HAL_TIM_MspPostInit+0x70>)
 8002f44:	f001 fad4 	bl	80044f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002f48:	bf00      	nop
 8002f4a:	3720      	adds	r7, #32
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40001c00 	.word	0x40001c00
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40021400 	.word	0x40021400

08002f5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f60:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f62:	4a12      	ldr	r2, [pc, #72]	@ (8002fac <MX_USART1_UART_Init+0x50>)
 8002f64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002f66:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f68:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f74:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f80:	4b09      	ldr	r3, [pc, #36]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f82:	220c      	movs	r2, #12
 8002f84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f86:	4b08      	ldr	r3, [pc, #32]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f92:	4805      	ldr	r0, [pc, #20]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f94:	f003 fb58 	bl	8006648 <HAL_UART_Init>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f9e:	f7ff faab 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200006fc 	.word	0x200006fc
 8002fac:	40011000 	.word	0x40011000

08002fb0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fb4:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <MX_USART3_UART_Init+0x4c>)
 8002fb6:	4a12      	ldr	r2, [pc, #72]	@ (8003000 <MX_USART3_UART_Init+0x50>)
 8002fb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002fba:	4b10      	ldr	r3, [pc, #64]	@ (8002ffc <MX_USART3_UART_Init+0x4c>)
 8002fbc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002fc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ffc <MX_USART3_UART_Init+0x4c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ffc <MX_USART3_UART_Init+0x4c>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fce:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <MX_USART3_UART_Init+0x4c>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fd4:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <MX_USART3_UART_Init+0x4c>)
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fda:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <MX_USART3_UART_Init+0x4c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <MX_USART3_UART_Init+0x4c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fe6:	4805      	ldr	r0, [pc, #20]	@ (8002ffc <MX_USART3_UART_Init+0x4c>)
 8002fe8:	f003 fb2e 	bl	8006648 <HAL_UART_Init>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002ff2:	f7ff fa81 	bl	80024f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000744 	.word	0x20000744
 8003000:	40004800 	.word	0x40004800

08003004 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	@ 0x30
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 031c 	add.w	r3, r7, #28
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a3b      	ldr	r2, [pc, #236]	@ (8003110 <HAL_UART_MspInit+0x10c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d135      	bne.n	8003092 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	4b3a      	ldr	r3, [pc, #232]	@ (8003114 <HAL_UART_MspInit+0x110>)
 800302c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302e:	4a39      	ldr	r2, [pc, #228]	@ (8003114 <HAL_UART_MspInit+0x110>)
 8003030:	f043 0310 	orr.w	r3, r3, #16
 8003034:	6453      	str	r3, [r2, #68]	@ 0x44
 8003036:	4b37      	ldr	r3, [pc, #220]	@ (8003114 <HAL_UART_MspInit+0x110>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	61bb      	str	r3, [r7, #24]
 8003040:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	4b33      	ldr	r3, [pc, #204]	@ (8003114 <HAL_UART_MspInit+0x110>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	4a32      	ldr	r2, [pc, #200]	@ (8003114 <HAL_UART_MspInit+0x110>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6313      	str	r3, [r2, #48]	@ 0x30
 8003052:	4b30      	ldr	r3, [pc, #192]	@ (8003114 <HAL_UART_MspInit+0x110>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800305e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306c:	2303      	movs	r3, #3
 800306e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003070:	2307      	movs	r3, #7
 8003072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003074:	f107 031c 	add.w	r3, r7, #28
 8003078:	4619      	mov	r1, r3
 800307a:	4827      	ldr	r0, [pc, #156]	@ (8003118 <HAL_UART_MspInit+0x114>)
 800307c:	f001 fa38 	bl	80044f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003080:	2200      	movs	r2, #0
 8003082:	2100      	movs	r1, #0
 8003084:	2025      	movs	r0, #37	@ 0x25
 8003086:	f000 fdfa 	bl	8003c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800308a:	2025      	movs	r0, #37	@ 0x25
 800308c:	f000 fe13 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003090:	e039      	b.n	8003106 <HAL_UART_MspInit+0x102>
  else if(uartHandle->Instance==USART3)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a21      	ldr	r2, [pc, #132]	@ (800311c <HAL_UART_MspInit+0x118>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d134      	bne.n	8003106 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003114 <HAL_UART_MspInit+0x110>)
 80030a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003114 <HAL_UART_MspInit+0x110>)
 80030a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ac:	4b19      	ldr	r3, [pc, #100]	@ (8003114 <HAL_UART_MspInit+0x110>)
 80030ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	4b15      	ldr	r3, [pc, #84]	@ (8003114 <HAL_UART_MspInit+0x110>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	4a14      	ldr	r2, [pc, #80]	@ (8003114 <HAL_UART_MspInit+0x110>)
 80030c2:	f043 0304 	orr.w	r3, r3, #4
 80030c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c8:	4b12      	ldr	r3, [pc, #72]	@ (8003114 <HAL_UART_MspInit+0x110>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80030d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80030d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030da:	2302      	movs	r3, #2
 80030dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e2:	2303      	movs	r3, #3
 80030e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030e6:	2307      	movs	r3, #7
 80030e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ea:	f107 031c 	add.w	r3, r7, #28
 80030ee:	4619      	mov	r1, r3
 80030f0:	480b      	ldr	r0, [pc, #44]	@ (8003120 <HAL_UART_MspInit+0x11c>)
 80030f2:	f001 f9fd 	bl	80044f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80030f6:	2200      	movs	r2, #0
 80030f8:	2100      	movs	r1, #0
 80030fa:	2027      	movs	r0, #39	@ 0x27
 80030fc:	f000 fdbf 	bl	8003c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003100:	2027      	movs	r0, #39	@ 0x27
 8003102:	f000 fdd8 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
}
 8003106:	bf00      	nop
 8003108:	3730      	adds	r7, #48	@ 0x30
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40011000 	.word	0x40011000
 8003114:	40023800 	.word	0x40023800
 8003118:	40020000 	.word	0x40020000
 800311c:	40004800 	.word	0x40004800
 8003120:	40020800 	.word	0x40020800

08003124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003124:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800315c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003128:	480d      	ldr	r0, [pc, #52]	@ (8003160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800312a:	490e      	ldr	r1, [pc, #56]	@ (8003164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800312c:	4a0e      	ldr	r2, [pc, #56]	@ (8003168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800312e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003130:	e002      	b.n	8003138 <LoopCopyDataInit>

08003132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003136:	3304      	adds	r3, #4

08003138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800313a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800313c:	d3f9      	bcc.n	8003132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800313e:	4a0b      	ldr	r2, [pc, #44]	@ (800316c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003140:	4c0b      	ldr	r4, [pc, #44]	@ (8003170 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003144:	e001      	b.n	800314a <LoopFillZerobss>

08003146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003148:	3204      	adds	r2, #4

0800314a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800314a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800314c:	d3fb      	bcc.n	8003146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800314e:	f7ff fd7f 	bl	8002c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003152:	f004 fbe5 	bl	8007920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003156:	f7ff f847 	bl	80021e8 <main>
  bx  lr    
 800315a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800315c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003164:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8003168:	0800a970 	.word	0x0800a970
  ldr r2, =_sbss
 800316c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8003170:	20000790 	.word	0x20000790

08003174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003174:	e7fe      	b.n	8003174 <ADC_IRQHandler>
	...

08003178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800317c:	4b0e      	ldr	r3, [pc, #56]	@ (80031b8 <HAL_Init+0x40>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0d      	ldr	r2, [pc, #52]	@ (80031b8 <HAL_Init+0x40>)
 8003182:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003188:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <HAL_Init+0x40>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0a      	ldr	r2, [pc, #40]	@ (80031b8 <HAL_Init+0x40>)
 800318e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003194:	4b08      	ldr	r3, [pc, #32]	@ (80031b8 <HAL_Init+0x40>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a07      	ldr	r2, [pc, #28]	@ (80031b8 <HAL_Init+0x40>)
 800319a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800319e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031a0:	2003      	movs	r0, #3
 80031a2:	f000 fd61 	bl	8003c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031a6:	200f      	movs	r0, #15
 80031a8:	f000 f808 	bl	80031bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031ac:	f7ff fcd0 	bl	8002b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023c00 	.word	0x40023c00

080031bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031c4:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <HAL_InitTick+0x54>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b12      	ldr	r3, [pc, #72]	@ (8003214 <HAL_InitTick+0x58>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	4619      	mov	r1, r3
 80031ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fd79 	bl	8003cd2 <HAL_SYSTICK_Config>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e00e      	b.n	8003208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b0f      	cmp	r3, #15
 80031ee:	d80a      	bhi.n	8003206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031f0:	2200      	movs	r2, #0
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	f000 fd41 	bl	8003c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031fc:	4a06      	ldr	r2, [pc, #24]	@ (8003218 <HAL_InitTick+0x5c>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e000      	b.n	8003208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000200 	.word	0x20000200
 8003214:	20000208 	.word	0x20000208
 8003218:	20000204 	.word	0x20000204

0800321c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003220:	4b06      	ldr	r3, [pc, #24]	@ (800323c <HAL_IncTick+0x20>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_IncTick+0x24>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4413      	add	r3, r2
 800322c:	4a04      	ldr	r2, [pc, #16]	@ (8003240 <HAL_IncTick+0x24>)
 800322e:	6013      	str	r3, [r2, #0]
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000208 	.word	0x20000208
 8003240:	2000078c 	.word	0x2000078c

08003244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return uwTick;
 8003248:	4b03      	ldr	r3, [pc, #12]	@ (8003258 <HAL_GetTick+0x14>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	2000078c 	.word	0x2000078c

0800325c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003264:	f7ff ffee 	bl	8003244 <HAL_GetTick>
 8003268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d005      	beq.n	8003282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <HAL_Delay+0x44>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003282:	bf00      	nop
 8003284:	f7ff ffde 	bl	8003244 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	429a      	cmp	r2, r3
 8003292:	d8f7      	bhi.n	8003284 <HAL_Delay+0x28>
  {
  }
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000208 	.word	0x20000208

080032a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e033      	b.n	8003322 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd ff86 	bl	80011d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d118      	bne.n	8003314 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80032ea:	f023 0302 	bic.w	r3, r3, #2
 80032ee:	f043 0202 	orr.w	r2, r3, #2
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fa68 	bl	80037cc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f023 0303 	bic.w	r3, r3, #3
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	641a      	str	r2, [r3, #64]	@ 0x40
 8003312:	e001      	b.n	8003318 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003320:	7bfb      	ldrb	r3, [r7, #15]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_ADC_Start_DMA+0x1e>
 8003346:	2302      	movs	r3, #2
 8003348:	e0e9      	b.n	800351e <HAL_ADC_Start_DMA+0x1f2>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d018      	beq.n	8003392 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003370:	4b6d      	ldr	r3, [pc, #436]	@ (8003528 <HAL_ADC_Start_DMA+0x1fc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a6d      	ldr	r2, [pc, #436]	@ (800352c <HAL_ADC_Start_DMA+0x200>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	0c9a      	lsrs	r2, r3, #18
 800337c:	4613      	mov	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4413      	add	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003384:	e002      	b.n	800338c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	3b01      	subs	r3, #1
 800338a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f9      	bne.n	8003386 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033a0:	d107      	bne.n	80033b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033b0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	f040 80a1 	bne.w	8003504 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003400:	d106      	bne.n	8003410 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003406:	f023 0206 	bic.w	r2, r3, #6
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	645a      	str	r2, [r3, #68]	@ 0x44
 800340e:	e002      	b.n	8003416 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800341e:	4b44      	ldr	r3, [pc, #272]	@ (8003530 <HAL_ADC_Start_DMA+0x204>)
 8003420:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003426:	4a43      	ldr	r2, [pc, #268]	@ (8003534 <HAL_ADC_Start_DMA+0x208>)
 8003428:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342e:	4a42      	ldr	r2, [pc, #264]	@ (8003538 <HAL_ADC_Start_DMA+0x20c>)
 8003430:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003436:	4a41      	ldr	r2, [pc, #260]	@ (800353c <HAL_ADC_Start_DMA+0x210>)
 8003438:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003442:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003452:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003462:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	334c      	adds	r3, #76	@ 0x4c
 800346e:	4619      	mov	r1, r3
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f000 fce8 	bl	8003e48 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2b00      	cmp	r3, #0
 8003482:	d12a      	bne.n	80034da <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a2d      	ldr	r2, [pc, #180]	@ (8003540 <HAL_ADC_Start_DMA+0x214>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d015      	beq.n	80034ba <HAL_ADC_Start_DMA+0x18e>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a2c      	ldr	r2, [pc, #176]	@ (8003544 <HAL_ADC_Start_DMA+0x218>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d105      	bne.n	80034a4 <HAL_ADC_Start_DMA+0x178>
 8003498:	4b25      	ldr	r3, [pc, #148]	@ (8003530 <HAL_ADC_Start_DMA+0x204>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a27      	ldr	r2, [pc, #156]	@ (8003548 <HAL_ADC_Start_DMA+0x21c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d136      	bne.n	800351c <HAL_ADC_Start_DMA+0x1f0>
 80034ae:	4b20      	ldr	r3, [pc, #128]	@ (8003530 <HAL_ADC_Start_DMA+0x204>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d130      	bne.n	800351c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d129      	bne.n	800351c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	e020      	b.n	800351c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a18      	ldr	r2, [pc, #96]	@ (8003540 <HAL_ADC_Start_DMA+0x214>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d11b      	bne.n	800351c <HAL_ADC_Start_DMA+0x1f0>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d114      	bne.n	800351c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	e00b      	b.n	800351c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	f043 0210 	orr.w	r2, r3, #16
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003514:	f043 0201 	orr.w	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000200 	.word	0x20000200
 800352c:	431bde83 	.word	0x431bde83
 8003530:	40012300 	.word	0x40012300
 8003534:	080039c5 	.word	0x080039c5
 8003538:	08003a7f 	.word	0x08003a7f
 800353c:	08003a9b 	.word	0x08003a9b
 8003540:	40012000 	.word	0x40012000
 8003544:	40012100 	.word	0x40012100
 8003548:	40012200 	.word	0x40012200

0800354c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x1c>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e105      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x228>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b09      	cmp	r3, #9
 80035b2:	d925      	bls.n	8003600 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68d9      	ldr	r1, [r3, #12]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	4613      	mov	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	4413      	add	r3, r2
 80035c8:	3b1e      	subs	r3, #30
 80035ca:	2207      	movs	r2, #7
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43da      	mvns	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	400a      	ands	r2, r1
 80035d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68d9      	ldr	r1, [r3, #12]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	4618      	mov	r0, r3
 80035ec:	4603      	mov	r3, r0
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4403      	add	r3, r0
 80035f2:	3b1e      	subs	r3, #30
 80035f4:	409a      	lsls	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	e022      	b.n	8003646 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6919      	ldr	r1, [r3, #16]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	b29b      	uxth	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	4613      	mov	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4413      	add	r3, r2
 8003614:	2207      	movs	r2, #7
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43da      	mvns	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	400a      	ands	r2, r1
 8003622:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6919      	ldr	r1, [r3, #16]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	b29b      	uxth	r3, r3
 8003634:	4618      	mov	r0, r3
 8003636:	4603      	mov	r3, r0
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4403      	add	r3, r0
 800363c:	409a      	lsls	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b06      	cmp	r3, #6
 800364c:	d824      	bhi.n	8003698 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	3b05      	subs	r3, #5
 8003660:	221f      	movs	r2, #31
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43da      	mvns	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	400a      	ands	r2, r1
 800366e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	4618      	mov	r0, r3
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	3b05      	subs	r3, #5
 800368a:	fa00 f203 	lsl.w	r2, r0, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	635a      	str	r2, [r3, #52]	@ 0x34
 8003696:	e04c      	b.n	8003732 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b0c      	cmp	r3, #12
 800369e:	d824      	bhi.n	80036ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	3b23      	subs	r3, #35	@ 0x23
 80036b2:	221f      	movs	r2, #31
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43da      	mvns	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	400a      	ands	r2, r1
 80036c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	4618      	mov	r0, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	3b23      	subs	r3, #35	@ 0x23
 80036dc:	fa00 f203 	lsl.w	r2, r0, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80036e8:	e023      	b.n	8003732 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	3b41      	subs	r3, #65	@ 0x41
 80036fc:	221f      	movs	r2, #31
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	400a      	ands	r2, r1
 800370a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	4618      	mov	r0, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	3b41      	subs	r3, #65	@ 0x41
 8003726:	fa00 f203 	lsl.w	r2, r0, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003732:	4b22      	ldr	r3, [pc, #136]	@ (80037bc <HAL_ADC_ConfigChannel+0x234>)
 8003734:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a21      	ldr	r2, [pc, #132]	@ (80037c0 <HAL_ADC_ConfigChannel+0x238>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d109      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x1cc>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b12      	cmp	r3, #18
 8003746:	d105      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a19      	ldr	r2, [pc, #100]	@ (80037c0 <HAL_ADC_ConfigChannel+0x238>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d123      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x21e>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b10      	cmp	r3, #16
 8003764:	d003      	beq.n	800376e <HAL_ADC_ConfigChannel+0x1e6>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b11      	cmp	r3, #17
 800376c:	d11b      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b10      	cmp	r3, #16
 8003780:	d111      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003782:	4b10      	ldr	r3, [pc, #64]	@ (80037c4 <HAL_ADC_ConfigChannel+0x23c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a10      	ldr	r2, [pc, #64]	@ (80037c8 <HAL_ADC_ConfigChannel+0x240>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	0c9a      	lsrs	r2, r3, #18
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003798:	e002      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3b01      	subs	r3, #1
 800379e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f9      	bne.n	800379a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40012300 	.word	0x40012300
 80037c0:	40012000 	.word	0x40012000
 80037c4:	20000200 	.word	0x20000200
 80037c8:	431bde83 	.word	0x431bde83

080037cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037d4:	4b79      	ldr	r3, [pc, #484]	@ (80039bc <ADC_Init+0x1f0>)
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	021a      	lsls	r2, r3, #8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6899      	ldr	r1, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385e:	4a58      	ldr	r2, [pc, #352]	@ (80039c0 <ADC_Init+0x1f4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d022      	beq.n	80038aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003872:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6899      	ldr	r1, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6899      	ldr	r1, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	e00f      	b.n	80038ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80038b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80038c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0202 	bic.w	r2, r2, #2
 80038d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6899      	ldr	r1, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	7e1b      	ldrb	r3, [r3, #24]
 80038e4:	005a      	lsls	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01b      	beq.n	8003930 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003906:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003916:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003922:	3b01      	subs	r3, #1
 8003924:	035a      	lsls	r2, r3, #13
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	e007      	b.n	8003940 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800393e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800394e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	3b01      	subs	r3, #1
 800395c:	051a      	lsls	r2, r3, #20
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6899      	ldr	r1, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003982:	025a      	lsls	r2, r3, #9
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800399a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6899      	ldr	r1, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	029a      	lsls	r2, r3, #10
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40012300 	.word	0x40012300
 80039c0:	0f000001 	.word	0x0f000001

080039c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d13c      	bne.n	8003a58 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d12b      	bne.n	8003a50 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d127      	bne.n	8003a50 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a06:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d006      	beq.n	8003a1c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d119      	bne.n	8003a50 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0220 	bic.w	r2, r2, #32
 8003a2a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d105      	bne.n	8003a50 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a48:	f043 0201 	orr.w	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7ff fd7b 	bl	800354c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a56:	e00e      	b.n	8003a76 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7ff fd85 	bl	8003574 <HAL_ADC_ErrorCallback>
}
 8003a6a:	e004      	b.n	8003a76 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	4798      	blx	r3
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f7ff fd67 	bl	8003560 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2240      	movs	r2, #64	@ 0x40
 8003aac:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab2:	f043 0204 	orr.w	r2, r3, #4
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f7ff fd5a 	bl	8003574 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ac0:	bf00      	nop
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <__NVIC_SetPriorityGrouping+0x44>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003afa:	4a04      	ldr	r2, [pc, #16]	@ (8003b0c <__NVIC_SetPriorityGrouping+0x44>)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	60d3      	str	r3, [r2, #12]
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b14:	4b04      	ldr	r3, [pc, #16]	@ (8003b28 <__NVIC_GetPriorityGrouping+0x18>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	f003 0307 	and.w	r3, r3, #7
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	db0b      	blt.n	8003b56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	f003 021f 	and.w	r2, r3, #31
 8003b44:	4907      	ldr	r1, [pc, #28]	@ (8003b64 <__NVIC_EnableIRQ+0x38>)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	e000e100 	.word	0xe000e100

08003b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	6039      	str	r1, [r7, #0]
 8003b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	db0a      	blt.n	8003b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	490c      	ldr	r1, [pc, #48]	@ (8003bb4 <__NVIC_SetPriority+0x4c>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	0112      	lsls	r2, r2, #4
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b90:	e00a      	b.n	8003ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	4908      	ldr	r1, [pc, #32]	@ (8003bb8 <__NVIC_SetPriority+0x50>)
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	3b04      	subs	r3, #4
 8003ba0:	0112      	lsls	r2, r2, #4
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	761a      	strb	r2, [r3, #24]
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000e100 	.word	0xe000e100
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b089      	sub	sp, #36	@ 0x24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f1c3 0307 	rsb	r3, r3, #7
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	bf28      	it	cs
 8003bda:	2304      	movcs	r3, #4
 8003bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3304      	adds	r3, #4
 8003be2:	2b06      	cmp	r3, #6
 8003be4:	d902      	bls.n	8003bec <NVIC_EncodePriority+0x30>
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3b03      	subs	r3, #3
 8003bea:	e000      	b.n	8003bee <NVIC_EncodePriority+0x32>
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43da      	mvns	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	401a      	ands	r2, r3
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c04:	f04f 31ff 	mov.w	r1, #4294967295
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0e:	43d9      	mvns	r1, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c14:	4313      	orrs	r3, r2
         );
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3724      	adds	r7, #36	@ 0x24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c34:	d301      	bcc.n	8003c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c36:	2301      	movs	r3, #1
 8003c38:	e00f      	b.n	8003c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c64 <SysTick_Config+0x40>)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c42:	210f      	movs	r1, #15
 8003c44:	f04f 30ff 	mov.w	r0, #4294967295
 8003c48:	f7ff ff8e 	bl	8003b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c4c:	4b05      	ldr	r3, [pc, #20]	@ (8003c64 <SysTick_Config+0x40>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c52:	4b04      	ldr	r3, [pc, #16]	@ (8003c64 <SysTick_Config+0x40>)
 8003c54:	2207      	movs	r2, #7
 8003c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	e000e010 	.word	0xe000e010

08003c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ff29 	bl	8003ac8 <__NVIC_SetPriorityGrouping>
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	4603      	mov	r3, r0
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c90:	f7ff ff3e 	bl	8003b10 <__NVIC_GetPriorityGrouping>
 8003c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f7ff ff8e 	bl	8003bbc <NVIC_EncodePriority>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff ff5d 	bl	8003b68 <__NVIC_SetPriority>
}
 8003cae:	bf00      	nop
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff ff31 	bl	8003b2c <__NVIC_EnableIRQ>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff ffa2 	bl	8003c24 <SysTick_Config>
 8003ce0:	4603      	mov	r3, r0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cf8:	f7ff faa4 	bl	8003244 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e099      	b.n	8003e3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d28:	e00f      	b.n	8003d4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d2a:	f7ff fa8b 	bl	8003244 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b05      	cmp	r3, #5
 8003d36:	d908      	bls.n	8003d4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2203      	movs	r2, #3
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e078      	b.n	8003e3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e8      	bne.n	8003d2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4b38      	ldr	r3, [pc, #224]	@ (8003e44 <HAL_DMA_Init+0x158>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d107      	bne.n	8003db4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	4313      	orrs	r3, r2
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f023 0307 	bic.w	r3, r3, #7
 8003dca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d117      	bne.n	8003e0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00e      	beq.n	8003e0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fb01 	bl	80043f8 <DMA_CheckFifoParam>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2240      	movs	r2, #64	@ 0x40
 8003e00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e016      	b.n	8003e3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fab8 	bl	800438c <DMA_CalcBaseAndBitshift>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e24:	223f      	movs	r2, #63	@ 0x3f
 8003e26:	409a      	lsls	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	f010803f 	.word	0xf010803f

08003e48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_DMA_Start_IT+0x26>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e040      	b.n	8003ef0 <HAL_DMA_Start_IT+0xa8>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d12f      	bne.n	8003ee2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fa4a 	bl	8004330 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea0:	223f      	movs	r2, #63	@ 0x3f
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0216 	orr.w	r2, r2, #22
 8003eb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0208 	orr.w	r2, r2, #8
 8003ece:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e005      	b.n	8003eee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
 8003eec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f06:	f7ff f99d 	bl	8003244 <HAL_GetTick>
 8003f0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d008      	beq.n	8003f2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2280      	movs	r2, #128	@ 0x80
 8003f1c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e052      	b.n	8003fd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0216 	bic.w	r2, r2, #22
 8003f38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d103      	bne.n	8003f5a <HAL_DMA_Abort+0x62>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0208 	bic.w	r2, r2, #8
 8003f68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f7a:	e013      	b.n	8003fa4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f7c:	f7ff f962 	bl	8003244 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d90c      	bls.n	8003fa4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2203      	movs	r2, #3
 8003f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e015      	b.n	8003fd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e4      	bne.n	8003f7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb6:	223f      	movs	r2, #63	@ 0x3f
 8003fb8:	409a      	lsls	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d004      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2280      	movs	r2, #128	@ 0x80
 8003ff0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e00c      	b.n	8004010 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2205      	movs	r2, #5
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004028:	4b8e      	ldr	r3, [pc, #568]	@ (8004264 <HAL_DMA_IRQHandler+0x248>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a8e      	ldr	r2, [pc, #568]	@ (8004268 <HAL_DMA_IRQHandler+0x24c>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	0a9b      	lsrs	r3, r3, #10
 8004034:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004046:	2208      	movs	r2, #8
 8004048:	409a      	lsls	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01a      	beq.n	8004088 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d013      	beq.n	8004088 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0204 	bic.w	r2, r2, #4
 800406e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004074:	2208      	movs	r2, #8
 8004076:	409a      	lsls	r2, r3
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004080:	f043 0201 	orr.w	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408c:	2201      	movs	r2, #1
 800408e:	409a      	lsls	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d012      	beq.n	80040be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040aa:	2201      	movs	r2, #1
 80040ac:	409a      	lsls	r2, r3
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c2:	2204      	movs	r2, #4
 80040c4:	409a      	lsls	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d012      	beq.n	80040f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e0:	2204      	movs	r2, #4
 80040e2:	409a      	lsls	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ec:	f043 0204 	orr.w	r2, r3, #4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f8:	2210      	movs	r2, #16
 80040fa:	409a      	lsls	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d043      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d03c      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004116:	2210      	movs	r2, #16
 8004118:	409a      	lsls	r2, r3
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d018      	beq.n	800415e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d108      	bne.n	800414c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d024      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
 800414a:	e01f      	b.n	800418c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01b      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4798      	blx	r3
 800415c:	e016      	b.n	800418c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d107      	bne.n	800417c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0208 	bic.w	r2, r2, #8
 800417a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004190:	2220      	movs	r2, #32
 8004192:	409a      	lsls	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 808f 	beq.w	80042bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8087 	beq.w	80042bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b2:	2220      	movs	r2, #32
 80041b4:	409a      	lsls	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d136      	bne.n	8004234 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0216 	bic.w	r2, r2, #22
 80041d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <HAL_DMA_IRQHandler+0x1da>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0208 	bic.w	r2, r2, #8
 8004204:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420a:	223f      	movs	r2, #63	@ 0x3f
 800420c:	409a      	lsls	r2, r3
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004226:	2b00      	cmp	r3, #0
 8004228:	d07e      	beq.n	8004328 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4798      	blx	r3
        }
        return;
 8004232:	e079      	b.n	8004328 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01d      	beq.n	800427e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10d      	bne.n	800426c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004254:	2b00      	cmp	r3, #0
 8004256:	d031      	beq.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4798      	blx	r3
 8004260:	e02c      	b.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
 8004262:	bf00      	nop
 8004264:	20000200 	.word	0x20000200
 8004268:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d023      	beq.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
 800427c:	e01e      	b.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10f      	bne.n	80042ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0210 	bic.w	r2, r2, #16
 800429a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d032      	beq.n	800432a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d022      	beq.n	8004316 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2205      	movs	r2, #5
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	3301      	adds	r3, #1
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d307      	bcc.n	8004304 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f2      	bne.n	80042e8 <HAL_DMA_IRQHandler+0x2cc>
 8004302:	e000      	b.n	8004306 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004304:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	4798      	blx	r3
 8004326:	e000      	b.n	800432a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004328:	bf00      	nop
    }
  }
}
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800434c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b40      	cmp	r3, #64	@ 0x40
 800435c:	d108      	bne.n	8004370 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800436e:	e007      	b.n	8004380 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	60da      	str	r2, [r3, #12]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	3b10      	subs	r3, #16
 800439c:	4a14      	ldr	r2, [pc, #80]	@ (80043f0 <DMA_CalcBaseAndBitshift+0x64>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	091b      	lsrs	r3, r3, #4
 80043a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043a6:	4a13      	ldr	r2, [pc, #76]	@ (80043f4 <DMA_CalcBaseAndBitshift+0x68>)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d909      	bls.n	80043ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80043c2:	f023 0303 	bic.w	r3, r3, #3
 80043c6:	1d1a      	adds	r2, r3, #4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80043cc:	e007      	b.n	80043de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80043d6:	f023 0303 	bic.w	r3, r3, #3
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	aaaaaaab 	.word	0xaaaaaaab
 80043f4:	0800a958 	.word	0x0800a958

080043f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d11f      	bne.n	8004452 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d856      	bhi.n	80044c6 <DMA_CheckFifoParam+0xce>
 8004418:	a201      	add	r2, pc, #4	@ (adr r2, 8004420 <DMA_CheckFifoParam+0x28>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	08004431 	.word	0x08004431
 8004424:	08004443 	.word	0x08004443
 8004428:	08004431 	.word	0x08004431
 800442c:	080044c7 	.word	0x080044c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d046      	beq.n	80044ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004440:	e043      	b.n	80044ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004446:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800444a:	d140      	bne.n	80044ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004450:	e03d      	b.n	80044ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800445a:	d121      	bne.n	80044a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b03      	cmp	r3, #3
 8004460:	d837      	bhi.n	80044d2 <DMA_CheckFifoParam+0xda>
 8004462:	a201      	add	r2, pc, #4	@ (adr r2, 8004468 <DMA_CheckFifoParam+0x70>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	08004479 	.word	0x08004479
 800446c:	0800447f 	.word	0x0800447f
 8004470:	08004479 	.word	0x08004479
 8004474:	08004491 	.word	0x08004491
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      break;
 800447c:	e030      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d025      	beq.n	80044d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800448e:	e022      	b.n	80044d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004494:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004498:	d11f      	bne.n	80044da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800449e:	e01c      	b.n	80044da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d903      	bls.n	80044ae <DMA_CheckFifoParam+0xb6>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d003      	beq.n	80044b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044ac:	e018      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	73fb      	strb	r3, [r7, #15]
      break;
 80044b2:	e015      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00e      	beq.n	80044de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
      break;
 80044c4:	e00b      	b.n	80044de <DMA_CheckFifoParam+0xe6>
      break;
 80044c6:	bf00      	nop
 80044c8:	e00a      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044ca:	bf00      	nop
 80044cc:	e008      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044ce:	bf00      	nop
 80044d0:	e006      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044d2:	bf00      	nop
 80044d4:	e004      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044de:	bf00      	nop
    }
  } 
  
  return status; 
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop

080044f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	@ 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004502:	2300      	movs	r3, #0
 8004504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	e16b      	b.n	80047e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800450c:	2201      	movs	r2, #1
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4013      	ands	r3, r2
 800451e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	429a      	cmp	r2, r3
 8004526:	f040 815a 	bne.w	80047de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d005      	beq.n	8004542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800453e:	2b02      	cmp	r3, #2
 8004540:	d130      	bne.n	80045a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	2203      	movs	r2, #3
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4013      	ands	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004578:	2201      	movs	r2, #1
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 0201 	and.w	r2, r3, #1
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d017      	beq.n	80045e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	2203      	movs	r2, #3
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d123      	bne.n	8004634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	08da      	lsrs	r2, r3, #3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3208      	adds	r2, #8
 80045f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	220f      	movs	r2, #15
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4013      	ands	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4313      	orrs	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	08da      	lsrs	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3208      	adds	r2, #8
 800462e:	69b9      	ldr	r1, [r7, #24]
 8004630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	2203      	movs	r2, #3
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4013      	ands	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0203 	and.w	r2, r3, #3
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80b4 	beq.w	80047de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	4b60      	ldr	r3, [pc, #384]	@ (80047fc <HAL_GPIO_Init+0x30c>)
 800467c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467e:	4a5f      	ldr	r2, [pc, #380]	@ (80047fc <HAL_GPIO_Init+0x30c>)
 8004680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004684:	6453      	str	r3, [r2, #68]	@ 0x44
 8004686:	4b5d      	ldr	r3, [pc, #372]	@ (80047fc <HAL_GPIO_Init+0x30c>)
 8004688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004692:	4a5b      	ldr	r2, [pc, #364]	@ (8004800 <HAL_GPIO_Init+0x310>)
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	089b      	lsrs	r3, r3, #2
 8004698:	3302      	adds	r3, #2
 800469a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	220f      	movs	r2, #15
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a52      	ldr	r2, [pc, #328]	@ (8004804 <HAL_GPIO_Init+0x314>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d02b      	beq.n	8004716 <HAL_GPIO_Init+0x226>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a51      	ldr	r2, [pc, #324]	@ (8004808 <HAL_GPIO_Init+0x318>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d025      	beq.n	8004712 <HAL_GPIO_Init+0x222>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a50      	ldr	r2, [pc, #320]	@ (800480c <HAL_GPIO_Init+0x31c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01f      	beq.n	800470e <HAL_GPIO_Init+0x21e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a4f      	ldr	r2, [pc, #316]	@ (8004810 <HAL_GPIO_Init+0x320>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d019      	beq.n	800470a <HAL_GPIO_Init+0x21a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a4e      	ldr	r2, [pc, #312]	@ (8004814 <HAL_GPIO_Init+0x324>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_GPIO_Init+0x216>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a4d      	ldr	r2, [pc, #308]	@ (8004818 <HAL_GPIO_Init+0x328>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00d      	beq.n	8004702 <HAL_GPIO_Init+0x212>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a4c      	ldr	r2, [pc, #304]	@ (800481c <HAL_GPIO_Init+0x32c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d007      	beq.n	80046fe <HAL_GPIO_Init+0x20e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a4b      	ldr	r2, [pc, #300]	@ (8004820 <HAL_GPIO_Init+0x330>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d101      	bne.n	80046fa <HAL_GPIO_Init+0x20a>
 80046f6:	2307      	movs	r3, #7
 80046f8:	e00e      	b.n	8004718 <HAL_GPIO_Init+0x228>
 80046fa:	2308      	movs	r3, #8
 80046fc:	e00c      	b.n	8004718 <HAL_GPIO_Init+0x228>
 80046fe:	2306      	movs	r3, #6
 8004700:	e00a      	b.n	8004718 <HAL_GPIO_Init+0x228>
 8004702:	2305      	movs	r3, #5
 8004704:	e008      	b.n	8004718 <HAL_GPIO_Init+0x228>
 8004706:	2304      	movs	r3, #4
 8004708:	e006      	b.n	8004718 <HAL_GPIO_Init+0x228>
 800470a:	2303      	movs	r3, #3
 800470c:	e004      	b.n	8004718 <HAL_GPIO_Init+0x228>
 800470e:	2302      	movs	r3, #2
 8004710:	e002      	b.n	8004718 <HAL_GPIO_Init+0x228>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_GPIO_Init+0x228>
 8004716:	2300      	movs	r3, #0
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	f002 0203 	and.w	r2, r2, #3
 800471e:	0092      	lsls	r2, r2, #2
 8004720:	4093      	lsls	r3, r2
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004728:	4935      	ldr	r1, [pc, #212]	@ (8004800 <HAL_GPIO_Init+0x310>)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	089b      	lsrs	r3, r3, #2
 800472e:	3302      	adds	r3, #2
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004736:	4b3b      	ldr	r3, [pc, #236]	@ (8004824 <HAL_GPIO_Init+0x334>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	43db      	mvns	r3, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4013      	ands	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800475a:	4a32      	ldr	r2, [pc, #200]	@ (8004824 <HAL_GPIO_Init+0x334>)
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004760:	4b30      	ldr	r3, [pc, #192]	@ (8004824 <HAL_GPIO_Init+0x334>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004784:	4a27      	ldr	r2, [pc, #156]	@ (8004824 <HAL_GPIO_Init+0x334>)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800478a:	4b26      	ldr	r3, [pc, #152]	@ (8004824 <HAL_GPIO_Init+0x334>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	43db      	mvns	r3, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4013      	ands	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004824 <HAL_GPIO_Init+0x334>)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004824 <HAL_GPIO_Init+0x334>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047d8:	4a12      	ldr	r2, [pc, #72]	@ (8004824 <HAL_GPIO_Init+0x334>)
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	3301      	adds	r3, #1
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2b0f      	cmp	r3, #15
 80047e8:	f67f ae90 	bls.w	800450c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	3724      	adds	r7, #36	@ 0x24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800
 8004800:	40013800 	.word	0x40013800
 8004804:	40020000 	.word	0x40020000
 8004808:	40020400 	.word	0x40020400
 800480c:	40020800 	.word	0x40020800
 8004810:	40020c00 	.word	0x40020c00
 8004814:	40021000 	.word	0x40021000
 8004818:	40021400 	.word	0x40021400
 800481c:	40021800 	.word	0x40021800
 8004820:	40021c00 	.word	0x40021c00
 8004824:	40013c00 	.word	0x40013c00

08004828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	807b      	strh	r3, [r7, #2]
 8004834:	4613      	mov	r3, r2
 8004836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004838:	787b      	ldrb	r3, [r7, #1]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800483e:	887a      	ldrh	r2, [r7, #2]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004844:	e003      	b.n	800484e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004846:	887b      	ldrh	r3, [r7, #2]
 8004848:	041a      	lsls	r2, r3, #16
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	619a      	str	r2, [r3, #24]
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	460b      	mov	r3, r1
 8004864:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800486c:	887a      	ldrh	r2, [r7, #2]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4013      	ands	r3, r2
 8004872:	041a      	lsls	r2, r3, #16
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	43d9      	mvns	r1, r3
 8004878:	887b      	ldrh	r3, [r7, #2]
 800487a:	400b      	ands	r3, r1
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	619a      	str	r2, [r3, #24]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e12b      	b.n	8004afa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fc ff8a 	bl	80017d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2224      	movs	r2, #36	@ 0x24
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0201 	bic.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048f4:	f000 fd80 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 80048f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	4a81      	ldr	r2, [pc, #516]	@ (8004b04 <HAL_I2C_Init+0x274>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d807      	bhi.n	8004914 <HAL_I2C_Init+0x84>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a80      	ldr	r2, [pc, #512]	@ (8004b08 <HAL_I2C_Init+0x278>)
 8004908:	4293      	cmp	r3, r2
 800490a:	bf94      	ite	ls
 800490c:	2301      	movls	r3, #1
 800490e:	2300      	movhi	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	e006      	b.n	8004922 <HAL_I2C_Init+0x92>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4a7d      	ldr	r2, [pc, #500]	@ (8004b0c <HAL_I2C_Init+0x27c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	bf94      	ite	ls
 800491c:	2301      	movls	r3, #1
 800491e:	2300      	movhi	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e0e7      	b.n	8004afa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a78      	ldr	r2, [pc, #480]	@ (8004b10 <HAL_I2C_Init+0x280>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	0c9b      	lsrs	r3, r3, #18
 8004934:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4a6a      	ldr	r2, [pc, #424]	@ (8004b04 <HAL_I2C_Init+0x274>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d802      	bhi.n	8004964 <HAL_I2C_Init+0xd4>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	3301      	adds	r3, #1
 8004962:	e009      	b.n	8004978 <HAL_I2C_Init+0xe8>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	4a69      	ldr	r2, [pc, #420]	@ (8004b14 <HAL_I2C_Init+0x284>)
 8004970:	fba2 2303 	umull	r2, r3, r2, r3
 8004974:	099b      	lsrs	r3, r3, #6
 8004976:	3301      	adds	r3, #1
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6812      	ldr	r2, [r2, #0]
 800497c:	430b      	orrs	r3, r1
 800497e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800498a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	495c      	ldr	r1, [pc, #368]	@ (8004b04 <HAL_I2C_Init+0x274>)
 8004994:	428b      	cmp	r3, r1
 8004996:	d819      	bhi.n	80049cc <HAL_I2C_Init+0x13c>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	1e59      	subs	r1, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80049a6:	1c59      	adds	r1, r3, #1
 80049a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80049ac:	400b      	ands	r3, r1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_I2C_Init+0x138>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1e59      	subs	r1, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80049c0:	3301      	adds	r3, #1
 80049c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c6:	e051      	b.n	8004a6c <HAL_I2C_Init+0x1dc>
 80049c8:	2304      	movs	r3, #4
 80049ca:	e04f      	b.n	8004a6c <HAL_I2C_Init+0x1dc>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d111      	bne.n	80049f8 <HAL_I2C_Init+0x168>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	1e58      	subs	r0, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6859      	ldr	r1, [r3, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	440b      	add	r3, r1
 80049e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e6:	3301      	adds	r3, #1
 80049e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e012      	b.n	8004a1e <HAL_I2C_Init+0x18e>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1e58      	subs	r0, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6859      	ldr	r1, [r3, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	0099      	lsls	r1, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a0e:	3301      	adds	r3, #1
 8004a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf0c      	ite	eq
 8004a18:	2301      	moveq	r3, #1
 8004a1a:	2300      	movne	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_I2C_Init+0x196>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e022      	b.n	8004a6c <HAL_I2C_Init+0x1dc>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10e      	bne.n	8004a4c <HAL_I2C_Init+0x1bc>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1e58      	subs	r0, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6859      	ldr	r1, [r3, #4]
 8004a36:	460b      	mov	r3, r1
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	440b      	add	r3, r1
 8004a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a40:	3301      	adds	r3, #1
 8004a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a4a:	e00f      	b.n	8004a6c <HAL_I2C_Init+0x1dc>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	1e58      	subs	r0, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6859      	ldr	r1, [r3, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	0099      	lsls	r1, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a62:	3301      	adds	r3, #1
 8004a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	6809      	ldr	r1, [r1, #0]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69da      	ldr	r2, [r3, #28]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6911      	ldr	r1, [r2, #16]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68d2      	ldr	r2, [r2, #12]
 8004aa6:	4311      	orrs	r1, r2
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6812      	ldr	r2, [r2, #0]
 8004aac:	430b      	orrs	r3, r1
 8004aae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	000186a0 	.word	0x000186a0
 8004b08:	001e847f 	.word	0x001e847f
 8004b0c:	003d08ff 	.word	0x003d08ff
 8004b10:	431bde83 	.word	0x431bde83
 8004b14:	10624dd3 	.word	0x10624dd3

08004b18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e267      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d075      	beq.n	8004c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b36:	4b88      	ldr	r3, [pc, #544]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d00c      	beq.n	8004b5c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b42:	4b85      	ldr	r3, [pc, #532]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d112      	bne.n	8004b74 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b4e:	4b82      	ldr	r3, [pc, #520]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b5a:	d10b      	bne.n	8004b74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b5c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d05b      	beq.n	8004c20 <HAL_RCC_OscConfig+0x108>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d157      	bne.n	8004c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e242      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b7c:	d106      	bne.n	8004b8c <HAL_RCC_OscConfig+0x74>
 8004b7e:	4b76      	ldr	r3, [pc, #472]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a75      	ldr	r2, [pc, #468]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	e01d      	b.n	8004bc8 <HAL_RCC_OscConfig+0xb0>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b94:	d10c      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x98>
 8004b96:	4b70      	ldr	r3, [pc, #448]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a6f      	ldr	r2, [pc, #444]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a6c      	ldr	r2, [pc, #432]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	e00b      	b.n	8004bc8 <HAL_RCC_OscConfig+0xb0>
 8004bb0:	4b69      	ldr	r3, [pc, #420]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a68      	ldr	r2, [pc, #416]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	4b66      	ldr	r3, [pc, #408]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a65      	ldr	r2, [pc, #404]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d013      	beq.n	8004bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7fe fb38 	bl	8003244 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd8:	f7fe fb34 	bl	8003244 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	@ 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e207      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bea:	4b5b      	ldr	r3, [pc, #364]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0xc0>
 8004bf6:	e014      	b.n	8004c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf8:	f7fe fb24 	bl	8003244 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c00:	f7fe fb20 	bl	8003244 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b64      	cmp	r3, #100	@ 0x64
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e1f3      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c12:	4b51      	ldr	r3, [pc, #324]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0xe8>
 8004c1e:	e000      	b.n	8004c22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d063      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00b      	beq.n	8004c52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3a:	4b47      	ldr	r3, [pc, #284]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d11c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c46:	4b44      	ldr	r3, [pc, #272]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d116      	bne.n	8004c80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c52:	4b41      	ldr	r3, [pc, #260]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <HAL_RCC_OscConfig+0x152>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d001      	beq.n	8004c6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e1c7      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4937      	ldr	r1, [pc, #220]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c7e:	e03a      	b.n	8004cf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d020      	beq.n	8004cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c88:	4b34      	ldr	r3, [pc, #208]	@ (8004d5c <HAL_RCC_OscConfig+0x244>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7fe fad9 	bl	8003244 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c96:	f7fe fad5 	bl	8003244 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e1a8      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb4:	4b28      	ldr	r3, [pc, #160]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	4925      	ldr	r1, [pc, #148]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	600b      	str	r3, [r1, #0]
 8004cc8:	e015      	b.n	8004cf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cca:	4b24      	ldr	r3, [pc, #144]	@ (8004d5c <HAL_RCC_OscConfig+0x244>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fe fab8 	bl	8003244 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd8:	f7fe fab4 	bl	8003244 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e187      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cea:	4b1b      	ldr	r3, [pc, #108]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f0      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d036      	beq.n	8004d70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d016      	beq.n	8004d38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d0a:	4b15      	ldr	r3, [pc, #84]	@ (8004d60 <HAL_RCC_OscConfig+0x248>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d10:	f7fe fa98 	bl	8003244 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d18:	f7fe fa94 	bl	8003244 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e167      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d58 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x200>
 8004d36:	e01b      	b.n	8004d70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d38:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <HAL_RCC_OscConfig+0x248>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3e:	f7fe fa81 	bl	8003244 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d44:	e00e      	b.n	8004d64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d46:	f7fe fa7d 	bl	8003244 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d907      	bls.n	8004d64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e150      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	42470000 	.word	0x42470000
 8004d60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d64:	4b88      	ldr	r3, [pc, #544]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ea      	bne.n	8004d46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8097 	beq.w	8004eac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d82:	4b81      	ldr	r3, [pc, #516]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10f      	bne.n	8004dae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	4b7d      	ldr	r3, [pc, #500]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	4a7c      	ldr	r2, [pc, #496]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d9e:	4b7a      	ldr	r3, [pc, #488]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004daa:	2301      	movs	r3, #1
 8004dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dae:	4b77      	ldr	r3, [pc, #476]	@ (8004f8c <HAL_RCC_OscConfig+0x474>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d118      	bne.n	8004dec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dba:	4b74      	ldr	r3, [pc, #464]	@ (8004f8c <HAL_RCC_OscConfig+0x474>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a73      	ldr	r2, [pc, #460]	@ (8004f8c <HAL_RCC_OscConfig+0x474>)
 8004dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc6:	f7fe fa3d 	bl	8003244 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dce:	f7fe fa39 	bl	8003244 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e10c      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de0:	4b6a      	ldr	r3, [pc, #424]	@ (8004f8c <HAL_RCC_OscConfig+0x474>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d106      	bne.n	8004e02 <HAL_RCC_OscConfig+0x2ea>
 8004df4:	4b64      	ldr	r3, [pc, #400]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df8:	4a63      	ldr	r2, [pc, #396]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e00:	e01c      	b.n	8004e3c <HAL_RCC_OscConfig+0x324>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b05      	cmp	r3, #5
 8004e08:	d10c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x30c>
 8004e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0e:	4a5e      	ldr	r2, [pc, #376]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e10:	f043 0304 	orr.w	r3, r3, #4
 8004e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e16:	4b5c      	ldr	r3, [pc, #368]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e1c:	f043 0301 	orr.w	r3, r3, #1
 8004e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e22:	e00b      	b.n	8004e3c <HAL_RCC_OscConfig+0x324>
 8004e24:	4b58      	ldr	r3, [pc, #352]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e28:	4a57      	ldr	r2, [pc, #348]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e2a:	f023 0301 	bic.w	r3, r3, #1
 8004e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e30:	4b55      	ldr	r3, [pc, #340]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e34:	4a54      	ldr	r2, [pc, #336]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e36:	f023 0304 	bic.w	r3, r3, #4
 8004e3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d015      	beq.n	8004e70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e44:	f7fe f9fe 	bl	8003244 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4a:	e00a      	b.n	8004e62 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e4c:	f7fe f9fa 	bl	8003244 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e0cb      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e62:	4b49      	ldr	r3, [pc, #292]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0ee      	beq.n	8004e4c <HAL_RCC_OscConfig+0x334>
 8004e6e:	e014      	b.n	8004e9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e70:	f7fe f9e8 	bl	8003244 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e76:	e00a      	b.n	8004e8e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e78:	f7fe f9e4 	bl	8003244 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e0b5      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1ee      	bne.n	8004e78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d105      	bne.n	8004eac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea0:	4b39      	ldr	r3, [pc, #228]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	4a38      	ldr	r2, [pc, #224]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eaa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80a1 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eb6:	4b34      	ldr	r3, [pc, #208]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d05c      	beq.n	8004f7c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d141      	bne.n	8004f4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eca:	4b31      	ldr	r3, [pc, #196]	@ (8004f90 <HAL_RCC_OscConfig+0x478>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed0:	f7fe f9b8 	bl	8003244 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fe f9b4 	bl	8003244 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e087      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eea:	4b27      	ldr	r3, [pc, #156]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69da      	ldr	r2, [r3, #28]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	019b      	lsls	r3, r3, #6
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	041b      	lsls	r3, r3, #16
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f18:	061b      	lsls	r3, r3, #24
 8004f1a:	491b      	ldr	r1, [pc, #108]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f20:	4b1b      	ldr	r3, [pc, #108]	@ (8004f90 <HAL_RCC_OscConfig+0x478>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f26:	f7fe f98d 	bl	8003244 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2e:	f7fe f989 	bl	8003244 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e05c      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f40:	4b11      	ldr	r3, [pc, #68]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCC_OscConfig+0x416>
 8004f4c:	e054      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4e:	4b10      	ldr	r3, [pc, #64]	@ (8004f90 <HAL_RCC_OscConfig+0x478>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f54:	f7fe f976 	bl	8003244 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f5c:	f7fe f972 	bl	8003244 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e045      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6e:	4b06      	ldr	r3, [pc, #24]	@ (8004f88 <HAL_RCC_OscConfig+0x470>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x444>
 8004f7a:	e03d      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d107      	bne.n	8004f94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e038      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	40007000 	.word	0x40007000
 8004f90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f94:	4b1b      	ldr	r3, [pc, #108]	@ (8005004 <HAL_RCC_OscConfig+0x4ec>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d028      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d121      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d11a      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d111      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fda:	085b      	lsrs	r3, r3, #1
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d107      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40023800 	.word	0x40023800

08005008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0cc      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800501c:	4b68      	ldr	r3, [pc, #416]	@ (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d90c      	bls.n	8005044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502a:	4b65      	ldr	r3, [pc, #404]	@ (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005032:	4b63      	ldr	r3, [pc, #396]	@ (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0b8      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d020      	beq.n	8005092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800505c:	4b59      	ldr	r3, [pc, #356]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a58      	ldr	r2, [pc, #352]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005066:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005074:	4b53      	ldr	r3, [pc, #332]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	4a52      	ldr	r2, [pc, #328]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800507e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005080:	4b50      	ldr	r3, [pc, #320]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	494d      	ldr	r1, [pc, #308]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	4313      	orrs	r3, r2
 8005090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d044      	beq.n	8005128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a6:	4b47      	ldr	r3, [pc, #284]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d119      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e07f      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d003      	beq.n	80050c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d107      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c6:	4b3f      	ldr	r3, [pc, #252]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e06f      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d6:	4b3b      	ldr	r3, [pc, #236]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e067      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050e6:	4b37      	ldr	r3, [pc, #220]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f023 0203 	bic.w	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4934      	ldr	r1, [pc, #208]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050f8:	f7fe f8a4 	bl	8003244 <HAL_GetTick>
 80050fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	e00a      	b.n	8005116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005100:	f7fe f8a0 	bl	8003244 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e04f      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	4b2b      	ldr	r3, [pc, #172]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 020c 	and.w	r2, r3, #12
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	429a      	cmp	r2, r3
 8005126:	d1eb      	bne.n	8005100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005128:	4b25      	ldr	r3, [pc, #148]	@ (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d20c      	bcs.n	8005150 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005136:	4b22      	ldr	r3, [pc, #136]	@ (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800513e:	4b20      	ldr	r3, [pc, #128]	@ (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d001      	beq.n	8005150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e032      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800515c:	4b19      	ldr	r3, [pc, #100]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4916      	ldr	r1, [pc, #88]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517a:	4b12      	ldr	r3, [pc, #72]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	490e      	ldr	r1, [pc, #56]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800518e:	f000 f821 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8005192:	4602      	mov	r2, r0
 8005194:	4b0b      	ldr	r3, [pc, #44]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	091b      	lsrs	r3, r3, #4
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	490a      	ldr	r1, [pc, #40]	@ (80051c8 <HAL_RCC_ClockConfig+0x1c0>)
 80051a0:	5ccb      	ldrb	r3, [r1, r3]
 80051a2:	fa22 f303 	lsr.w	r3, r2, r3
 80051a6:	4a09      	ldr	r2, [pc, #36]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 80051a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80051aa:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe f804 	bl	80031bc <HAL_InitTick>

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40023c00 	.word	0x40023c00
 80051c4:	40023800 	.word	0x40023800
 80051c8:	0800a940 	.word	0x0800a940
 80051cc:	20000200 	.word	0x20000200
 80051d0:	20000204 	.word	0x20000204

080051d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d8:	b094      	sub	sp, #80	@ 0x50
 80051da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051ec:	4b79      	ldr	r3, [pc, #484]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 030c 	and.w	r3, r3, #12
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d00d      	beq.n	8005214 <HAL_RCC_GetSysClockFreq+0x40>
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	f200 80e1 	bhi.w	80053c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x34>
 8005202:	2b04      	cmp	r3, #4
 8005204:	d003      	beq.n	800520e <HAL_RCC_GetSysClockFreq+0x3a>
 8005206:	e0db      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005208:	4b73      	ldr	r3, [pc, #460]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800520a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800520c:	e0db      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800520e:	4b73      	ldr	r3, [pc, #460]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x208>)
 8005210:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005212:	e0d8      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005214:	4b6f      	ldr	r3, [pc, #444]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800521c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800521e:	4b6d      	ldr	r3, [pc, #436]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d063      	beq.n	80052f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522a:	4b6a      	ldr	r3, [pc, #424]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	099b      	lsrs	r3, r3, #6
 8005230:	2200      	movs	r2, #0
 8005232:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005234:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523c:	633b      	str	r3, [r7, #48]	@ 0x30
 800523e:	2300      	movs	r3, #0
 8005240:	637b      	str	r3, [r7, #52]	@ 0x34
 8005242:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005246:	4622      	mov	r2, r4
 8005248:	462b      	mov	r3, r5
 800524a:	f04f 0000 	mov.w	r0, #0
 800524e:	f04f 0100 	mov.w	r1, #0
 8005252:	0159      	lsls	r1, r3, #5
 8005254:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005258:	0150      	lsls	r0, r2, #5
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4621      	mov	r1, r4
 8005260:	1a51      	subs	r1, r2, r1
 8005262:	6139      	str	r1, [r7, #16]
 8005264:	4629      	mov	r1, r5
 8005266:	eb63 0301 	sbc.w	r3, r3, r1
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005278:	4659      	mov	r1, fp
 800527a:	018b      	lsls	r3, r1, #6
 800527c:	4651      	mov	r1, sl
 800527e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005282:	4651      	mov	r1, sl
 8005284:	018a      	lsls	r2, r1, #6
 8005286:	4651      	mov	r1, sl
 8005288:	ebb2 0801 	subs.w	r8, r2, r1
 800528c:	4659      	mov	r1, fp
 800528e:	eb63 0901 	sbc.w	r9, r3, r1
 8005292:	f04f 0200 	mov.w	r2, #0
 8005296:	f04f 0300 	mov.w	r3, #0
 800529a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800529e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052a6:	4690      	mov	r8, r2
 80052a8:	4699      	mov	r9, r3
 80052aa:	4623      	mov	r3, r4
 80052ac:	eb18 0303 	adds.w	r3, r8, r3
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	462b      	mov	r3, r5
 80052b4:	eb49 0303 	adc.w	r3, r9, r3
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052c6:	4629      	mov	r1, r5
 80052c8:	024b      	lsls	r3, r1, #9
 80052ca:	4621      	mov	r1, r4
 80052cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052d0:	4621      	mov	r1, r4
 80052d2:	024a      	lsls	r2, r1, #9
 80052d4:	4610      	mov	r0, r2
 80052d6:	4619      	mov	r1, r3
 80052d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052da:	2200      	movs	r2, #0
 80052dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052e4:	f7fb fb8e 	bl	8000a04 <__aeabi_uldivmod>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4613      	mov	r3, r2
 80052ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f0:	e058      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f2:	4b38      	ldr	r3, [pc, #224]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	099b      	lsrs	r3, r3, #6
 80052f8:	2200      	movs	r2, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	4611      	mov	r1, r2
 80052fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005302:	623b      	str	r3, [r7, #32]
 8005304:	2300      	movs	r3, #0
 8005306:	627b      	str	r3, [r7, #36]	@ 0x24
 8005308:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800530c:	4642      	mov	r2, r8
 800530e:	464b      	mov	r3, r9
 8005310:	f04f 0000 	mov.w	r0, #0
 8005314:	f04f 0100 	mov.w	r1, #0
 8005318:	0159      	lsls	r1, r3, #5
 800531a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800531e:	0150      	lsls	r0, r2, #5
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4641      	mov	r1, r8
 8005326:	ebb2 0a01 	subs.w	sl, r2, r1
 800532a:	4649      	mov	r1, r9
 800532c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800533c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005340:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005344:	ebb2 040a 	subs.w	r4, r2, sl
 8005348:	eb63 050b 	sbc.w	r5, r3, fp
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	00eb      	lsls	r3, r5, #3
 8005356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800535a:	00e2      	lsls	r2, r4, #3
 800535c:	4614      	mov	r4, r2
 800535e:	461d      	mov	r5, r3
 8005360:	4643      	mov	r3, r8
 8005362:	18e3      	adds	r3, r4, r3
 8005364:	603b      	str	r3, [r7, #0]
 8005366:	464b      	mov	r3, r9
 8005368:	eb45 0303 	adc.w	r3, r5, r3
 800536c:	607b      	str	r3, [r7, #4]
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800537a:	4629      	mov	r1, r5
 800537c:	028b      	lsls	r3, r1, #10
 800537e:	4621      	mov	r1, r4
 8005380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005384:	4621      	mov	r1, r4
 8005386:	028a      	lsls	r2, r1, #10
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800538e:	2200      	movs	r2, #0
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	61fa      	str	r2, [r7, #28]
 8005394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005398:	f7fb fb34 	bl	8000a04 <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4613      	mov	r3, r2
 80053a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053a4:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	0c1b      	lsrs	r3, r3, #16
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	3301      	adds	r3, #1
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80053b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053be:	e002      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053c0:	4b05      	ldr	r3, [pc, #20]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80053c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3750      	adds	r7, #80	@ 0x50
 80053cc:	46bd      	mov	sp, r7
 80053ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800
 80053d8:	00f42400 	.word	0x00f42400
 80053dc:	007a1200 	.word	0x007a1200

080053e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e4:	4b03      	ldr	r3, [pc, #12]	@ (80053f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053e6:	681b      	ldr	r3, [r3, #0]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000200 	.word	0x20000200

080053f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053fc:	f7ff fff0 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b05      	ldr	r3, [pc, #20]	@ (8005418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	0a9b      	lsrs	r3, r3, #10
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	4903      	ldr	r1, [pc, #12]	@ (800541c <HAL_RCC_GetPCLK1Freq+0x24>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005414:	4618      	mov	r0, r3
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40023800 	.word	0x40023800
 800541c:	0800a950 	.word	0x0800a950

08005420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005424:	f7ff ffdc 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8005428:	4602      	mov	r2, r0
 800542a:	4b05      	ldr	r3, [pc, #20]	@ (8005440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	0b5b      	lsrs	r3, r3, #13
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	4903      	ldr	r1, [pc, #12]	@ (8005444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005436:	5ccb      	ldrb	r3, [r1, r3]
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800543c:	4618      	mov	r0, r3
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40023800 	.word	0x40023800
 8005444:	0800a950 	.word	0x0800a950

08005448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e07b      	b.n	8005552 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d108      	bne.n	8005474 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800546a:	d009      	beq.n	8005480 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	61da      	str	r2, [r3, #28]
 8005472:	e005      	b.n	8005480 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fd fb10 	bl	8002ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005504:	ea42 0103 	orr.w	r1, r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800550c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	f003 0104 	and.w	r1, r3, #4
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005526:	f003 0210 	and.w	r2, r3, #16
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005540:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e038      	b.n	80055e2 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7fb ffe5 	bl	8001554 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3308      	adds	r3, #8
 8005592:	4619      	mov	r1, r3
 8005594:	4610      	mov	r0, r2
 8005596:	f002 f8e3 	bl	8007760 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	461a      	mov	r2, r3
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	f002 f945 	bl	8007834 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6858      	ldr	r0, [r3, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	f002 f972 	bl	80078a0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	6892      	ldr	r2, [r2, #8]
 80055c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	6892      	ldr	r2, [r2, #8]
 80055d0:	f041 0101 	orr.w	r1, r1, #1
 80055d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e041      	b.n	8005680 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d106      	bne.n	8005616 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7fd fc17 	bl	8002e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2202      	movs	r2, #2
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3304      	adds	r3, #4
 8005626:	4619      	mov	r1, r3
 8005628:	4610      	mov	r0, r2
 800562a:	f000 fc61 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	d001      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e04e      	b.n	800573e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a23      	ldr	r2, [pc, #140]	@ (800574c <HAL_TIM_Base_Start_IT+0xc4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d022      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ca:	d01d      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005750 <HAL_TIM_Base_Start_IT+0xc8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d018      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1e      	ldr	r2, [pc, #120]	@ (8005754 <HAL_TIM_Base_Start_IT+0xcc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d013      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005758 <HAL_TIM_Base_Start_IT+0xd0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00e      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1b      	ldr	r2, [pc, #108]	@ (800575c <HAL_TIM_Base_Start_IT+0xd4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d009      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a19      	ldr	r2, [pc, #100]	@ (8005760 <HAL_TIM_Base_Start_IT+0xd8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x80>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a18      	ldr	r2, [pc, #96]	@ (8005764 <HAL_TIM_Base_Start_IT+0xdc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d111      	bne.n	800572c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b06      	cmp	r3, #6
 8005718:	d010      	beq.n	800573c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572a:	e007      	b.n	800573c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40010000 	.word	0x40010000
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800
 8005758:	40000c00 	.word	0x40000c00
 800575c:	40010400 	.word	0x40010400
 8005760:	40014000 	.word	0x40014000
 8005764:	40001800 	.word	0x40001800

08005768 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e041      	b.n	80057fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f839 	bl	8005806 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3304      	adds	r3, #4
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f000 fba2 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <HAL_TIM_PWM_Start+0x24>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	e022      	b.n	8005886 <HAL_TIM_PWM_Start+0x6a>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b04      	cmp	r3, #4
 8005844:	d109      	bne.n	800585a <HAL_TIM_PWM_Start+0x3e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	bf14      	ite	ne
 8005852:	2301      	movne	r3, #1
 8005854:	2300      	moveq	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	e015      	b.n	8005886 <HAL_TIM_PWM_Start+0x6a>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b08      	cmp	r3, #8
 800585e:	d109      	bne.n	8005874 <HAL_TIM_PWM_Start+0x58>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	bf14      	ite	ne
 800586c:	2301      	movne	r3, #1
 800586e:	2300      	moveq	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	e008      	b.n	8005886 <HAL_TIM_PWM_Start+0x6a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	bf14      	ite	ne
 8005880:	2301      	movne	r3, #1
 8005882:	2300      	moveq	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e07c      	b.n	8005988 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d104      	bne.n	800589e <HAL_TIM_PWM_Start+0x82>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800589c:	e013      	b.n	80058c6 <HAL_TIM_PWM_Start+0xaa>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d104      	bne.n	80058ae <HAL_TIM_PWM_Start+0x92>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058ac:	e00b      	b.n	80058c6 <HAL_TIM_PWM_Start+0xaa>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d104      	bne.n	80058be <HAL_TIM_PWM_Start+0xa2>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058bc:	e003      	b.n	80058c6 <HAL_TIM_PWM_Start+0xaa>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2202      	movs	r2, #2
 80058c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2201      	movs	r2, #1
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fe04 	bl	80064dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005990 <HAL_TIM_PWM_Start+0x174>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <HAL_TIM_PWM_Start+0xcc>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005994 <HAL_TIM_PWM_Start+0x178>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d101      	bne.n	80058ec <HAL_TIM_PWM_Start+0xd0>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <HAL_TIM_PWM_Start+0xd2>
 80058ec:	2300      	movs	r3, #0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005900:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a22      	ldr	r2, [pc, #136]	@ (8005990 <HAL_TIM_PWM_Start+0x174>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d022      	beq.n	8005952 <HAL_TIM_PWM_Start+0x136>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005914:	d01d      	beq.n	8005952 <HAL_TIM_PWM_Start+0x136>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1f      	ldr	r2, [pc, #124]	@ (8005998 <HAL_TIM_PWM_Start+0x17c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d018      	beq.n	8005952 <HAL_TIM_PWM_Start+0x136>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1d      	ldr	r2, [pc, #116]	@ (800599c <HAL_TIM_PWM_Start+0x180>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <HAL_TIM_PWM_Start+0x136>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1c      	ldr	r2, [pc, #112]	@ (80059a0 <HAL_TIM_PWM_Start+0x184>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00e      	beq.n	8005952 <HAL_TIM_PWM_Start+0x136>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a16      	ldr	r2, [pc, #88]	@ (8005994 <HAL_TIM_PWM_Start+0x178>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d009      	beq.n	8005952 <HAL_TIM_PWM_Start+0x136>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a18      	ldr	r2, [pc, #96]	@ (80059a4 <HAL_TIM_PWM_Start+0x188>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d004      	beq.n	8005952 <HAL_TIM_PWM_Start+0x136>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a16      	ldr	r2, [pc, #88]	@ (80059a8 <HAL_TIM_PWM_Start+0x18c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d111      	bne.n	8005976 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b06      	cmp	r3, #6
 8005962:	d010      	beq.n	8005986 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005974:	e007      	b.n	8005986 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 0201 	orr.w	r2, r2, #1
 8005984:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40010000 	.word	0x40010000
 8005994:	40010400 	.word	0x40010400
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800
 80059a0:	40000c00 	.word	0x40000c00
 80059a4:	40014000 	.word	0x40014000
 80059a8:	40001800 	.word	0x40001800

080059ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d020      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01b      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0202 	mvn.w	r2, #2
 80059e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fa5b 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 80059fc:	e005      	b.n	8005a0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa4d 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fa5e 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d020      	beq.n	8005a5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01b      	beq.n	8005a5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0204 	mvn.w	r2, #4
 8005a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2202      	movs	r2, #2
 8005a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa35 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005a48:	e005      	b.n	8005a56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fa27 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fa38 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d020      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01b      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0208 	mvn.w	r2, #8
 8005a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fa0f 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005a94:	e005      	b.n	8005aa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fa01 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fa12 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d020      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01b      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0210 	mvn.w	r2, #16
 8005ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2208      	movs	r2, #8
 8005aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f9e9 	bl	8005eb2 <HAL_TIM_IC_CaptureCallback>
 8005ae0:	e005      	b.n	8005aee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f9db 	bl	8005e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f9ec 	bl	8005ec6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00c      	beq.n	8005b18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d007      	beq.n	8005b18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0201 	mvn.w	r2, #1
 8005b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fc fb58 	bl	80021c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00c      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fd7c 	bl	8006634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00c      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9bd 	bl	8005eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00c      	beq.n	8005b84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d007      	beq.n	8005b84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0220 	mvn.w	r2, #32
 8005b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fd4e 	bl	8006620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e0ae      	b.n	8005d08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b0c      	cmp	r3, #12
 8005bb6:	f200 809f 	bhi.w	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bba:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc0:	08005bf5 	.word	0x08005bf5
 8005bc4:	08005cf9 	.word	0x08005cf9
 8005bc8:	08005cf9 	.word	0x08005cf9
 8005bcc:	08005cf9 	.word	0x08005cf9
 8005bd0:	08005c35 	.word	0x08005c35
 8005bd4:	08005cf9 	.word	0x08005cf9
 8005bd8:	08005cf9 	.word	0x08005cf9
 8005bdc:	08005cf9 	.word	0x08005cf9
 8005be0:	08005c77 	.word	0x08005c77
 8005be4:	08005cf9 	.word	0x08005cf9
 8005be8:	08005cf9 	.word	0x08005cf9
 8005bec:	08005cf9 	.word	0x08005cf9
 8005bf0:	08005cb7 	.word	0x08005cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fa24 	bl	8006048 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0208 	orr.w	r2, r2, #8
 8005c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0204 	bic.w	r2, r2, #4
 8005c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6999      	ldr	r1, [r3, #24]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	619a      	str	r2, [r3, #24]
      break;
 8005c32:	e064      	b.n	8005cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fa74 	bl	8006128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6999      	ldr	r1, [r3, #24]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	619a      	str	r2, [r3, #24]
      break;
 8005c74:	e043      	b.n	8005cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fac9 	bl	8006214 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69da      	ldr	r2, [r3, #28]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0208 	orr.w	r2, r2, #8
 8005c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0204 	bic.w	r2, r2, #4
 8005ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69d9      	ldr	r1, [r3, #28]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	61da      	str	r2, [r3, #28]
      break;
 8005cb4:	e023      	b.n	8005cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fb1d 	bl	80062fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69da      	ldr	r2, [r3, #28]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69d9      	ldr	r1, [r3, #28]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	021a      	lsls	r2, r3, #8
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	61da      	str	r2, [r3, #28]
      break;
 8005cf6:	e002      	b.n	8005cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8005cfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_TIM_ConfigClockSource+0x1c>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e0b4      	b.n	8005e96 <HAL_TIM_ConfigClockSource+0x186>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d64:	d03e      	beq.n	8005de4 <HAL_TIM_ConfigClockSource+0xd4>
 8005d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d6a:	f200 8087 	bhi.w	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d72:	f000 8086 	beq.w	8005e82 <HAL_TIM_ConfigClockSource+0x172>
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d7a:	d87f      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d7c:	2b70      	cmp	r3, #112	@ 0x70
 8005d7e:	d01a      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0xa6>
 8005d80:	2b70      	cmp	r3, #112	@ 0x70
 8005d82:	d87b      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d84:	2b60      	cmp	r3, #96	@ 0x60
 8005d86:	d050      	beq.n	8005e2a <HAL_TIM_ConfigClockSource+0x11a>
 8005d88:	2b60      	cmp	r3, #96	@ 0x60
 8005d8a:	d877      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d8c:	2b50      	cmp	r3, #80	@ 0x50
 8005d8e:	d03c      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0xfa>
 8005d90:	2b50      	cmp	r3, #80	@ 0x50
 8005d92:	d873      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d94:	2b40      	cmp	r3, #64	@ 0x40
 8005d96:	d058      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x13a>
 8005d98:	2b40      	cmp	r3, #64	@ 0x40
 8005d9a:	d86f      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005d9c:	2b30      	cmp	r3, #48	@ 0x30
 8005d9e:	d064      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005da0:	2b30      	cmp	r3, #48	@ 0x30
 8005da2:	d86b      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d060      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d867      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d05c      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d05a      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x15a>
 8005db4:	e062      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dc6:	f000 fb69 	bl	800649c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	609a      	str	r2, [r3, #8]
      break;
 8005de2:	e04f      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005df4:	f000 fb52 	bl	800649c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e06:	609a      	str	r2, [r3, #8]
      break;
 8005e08:	e03c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e16:	461a      	mov	r2, r3
 8005e18:	f000 fac6 	bl	80063a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2150      	movs	r1, #80	@ 0x50
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fb1f 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 8005e28:	e02c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e36:	461a      	mov	r2, r3
 8005e38:	f000 fae5 	bl	8006406 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2160      	movs	r1, #96	@ 0x60
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fb0f 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 8005e48:	e01c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e56:	461a      	mov	r2, r3
 8005e58:	f000 faa6 	bl	80063a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2140      	movs	r1, #64	@ 0x40
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 faff 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 8005e68:	e00c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f000 faf6 	bl	8006466 <TIM_ITRx_SetConfig>
      break;
 8005e7a:	e003      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e80:	e000      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a46      	ldr	r2, [pc, #280]	@ (800601c <TIM_Base_SetConfig+0x12c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f0e:	d00f      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a43      	ldr	r2, [pc, #268]	@ (8006020 <TIM_Base_SetConfig+0x130>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00b      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a42      	ldr	r2, [pc, #264]	@ (8006024 <TIM_Base_SetConfig+0x134>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d007      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a41      	ldr	r2, [pc, #260]	@ (8006028 <TIM_Base_SetConfig+0x138>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_Base_SetConfig+0x40>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a40      	ldr	r2, [pc, #256]	@ (800602c <TIM_Base_SetConfig+0x13c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d108      	bne.n	8005f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a35      	ldr	r2, [pc, #212]	@ (800601c <TIM_Base_SetConfig+0x12c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d02b      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f50:	d027      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a32      	ldr	r2, [pc, #200]	@ (8006020 <TIM_Base_SetConfig+0x130>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d023      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a31      	ldr	r2, [pc, #196]	@ (8006024 <TIM_Base_SetConfig+0x134>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d01f      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a30      	ldr	r2, [pc, #192]	@ (8006028 <TIM_Base_SetConfig+0x138>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01b      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a2f      	ldr	r2, [pc, #188]	@ (800602c <TIM_Base_SetConfig+0x13c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d017      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a2e      	ldr	r2, [pc, #184]	@ (8006030 <TIM_Base_SetConfig+0x140>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8006034 <TIM_Base_SetConfig+0x144>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00f      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a2c      	ldr	r2, [pc, #176]	@ (8006038 <TIM_Base_SetConfig+0x148>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00b      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a2b      	ldr	r2, [pc, #172]	@ (800603c <TIM_Base_SetConfig+0x14c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d007      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a2a      	ldr	r2, [pc, #168]	@ (8006040 <TIM_Base_SetConfig+0x150>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d003      	beq.n	8005fa2 <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a29      	ldr	r2, [pc, #164]	@ (8006044 <TIM_Base_SetConfig+0x154>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d108      	bne.n	8005fb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a10      	ldr	r2, [pc, #64]	@ (800601c <TIM_Base_SetConfig+0x12c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_Base_SetConfig+0xf8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a12      	ldr	r2, [pc, #72]	@ (800602c <TIM_Base_SetConfig+0x13c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d103      	bne.n	8005ff0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d105      	bne.n	800600e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f023 0201 	bic.w	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	611a      	str	r2, [r3, #16]
  }
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40010000 	.word	0x40010000
 8006020:	40000400 	.word	0x40000400
 8006024:	40000800 	.word	0x40000800
 8006028:	40000c00 	.word	0x40000c00
 800602c:	40010400 	.word	0x40010400
 8006030:	40014000 	.word	0x40014000
 8006034:	40014400 	.word	0x40014400
 8006038:	40014800 	.word	0x40014800
 800603c:	40001800 	.word	0x40001800
 8006040:	40001c00 	.word	0x40001c00
 8006044:	40002000 	.word	0x40002000

08006048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f023 0201 	bic.w	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0303 	bic.w	r3, r3, #3
 800607e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f023 0302 	bic.w	r3, r3, #2
 8006090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a20      	ldr	r2, [pc, #128]	@ (8006120 <TIM_OC1_SetConfig+0xd8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_OC1_SetConfig+0x64>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006124 <TIM_OC1_SetConfig+0xdc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d10c      	bne.n	80060c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f023 0308 	bic.w	r3, r3, #8
 80060b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 0304 	bic.w	r3, r3, #4
 80060c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a15      	ldr	r2, [pc, #84]	@ (8006120 <TIM_OC1_SetConfig+0xd8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d003      	beq.n	80060d6 <TIM_OC1_SetConfig+0x8e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a14      	ldr	r2, [pc, #80]	@ (8006124 <TIM_OC1_SetConfig+0xdc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d111      	bne.n	80060fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	621a      	str	r2, [r3, #32]
}
 8006114:	bf00      	nop
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	40010000 	.word	0x40010000
 8006124:	40010400 	.word	0x40010400

08006128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	f023 0210 	bic.w	r2, r3, #16
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0320 	bic.w	r3, r3, #32
 8006172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a22      	ldr	r2, [pc, #136]	@ (800620c <TIM_OC2_SetConfig+0xe4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_OC2_SetConfig+0x68>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a21      	ldr	r2, [pc, #132]	@ (8006210 <TIM_OC2_SetConfig+0xe8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d10d      	bne.n	80061ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a17      	ldr	r2, [pc, #92]	@ (800620c <TIM_OC2_SetConfig+0xe4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d003      	beq.n	80061bc <TIM_OC2_SetConfig+0x94>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a16      	ldr	r2, [pc, #88]	@ (8006210 <TIM_OC2_SetConfig+0xe8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d113      	bne.n	80061e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	40010000 	.word	0x40010000
 8006210:	40010400 	.word	0x40010400

08006214 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0303 	bic.w	r3, r3, #3
 800624a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800625c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a21      	ldr	r2, [pc, #132]	@ (80062f4 <TIM_OC3_SetConfig+0xe0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d003      	beq.n	800627a <TIM_OC3_SetConfig+0x66>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a20      	ldr	r2, [pc, #128]	@ (80062f8 <TIM_OC3_SetConfig+0xe4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d10d      	bne.n	8006296 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	021b      	lsls	r3, r3, #8
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a16      	ldr	r2, [pc, #88]	@ (80062f4 <TIM_OC3_SetConfig+0xe0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d003      	beq.n	80062a6 <TIM_OC3_SetConfig+0x92>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a15      	ldr	r2, [pc, #84]	@ (80062f8 <TIM_OC3_SetConfig+0xe4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d113      	bne.n	80062ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	621a      	str	r2, [r3, #32]
}
 80062e8:	bf00      	nop
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40010400 	.word	0x40010400

080062fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	031b      	lsls	r3, r3, #12
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a12      	ldr	r2, [pc, #72]	@ (80063a0 <TIM_OC4_SetConfig+0xa4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <TIM_OC4_SetConfig+0x68>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a11      	ldr	r2, [pc, #68]	@ (80063a4 <TIM_OC4_SetConfig+0xa8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d109      	bne.n	8006378 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800636a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	019b      	lsls	r3, r3, #6
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40010400 	.word	0x40010400

080063a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	f023 0201 	bic.w	r2, r3, #1
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f023 030a 	bic.w	r3, r3, #10
 80063e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	621a      	str	r2, [r3, #32]
}
 80063fa:	bf00      	nop
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006406:	b480      	push	{r7}
 8006408:	b087      	sub	sp, #28
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	f023 0210 	bic.w	r2, r3, #16
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006430:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	031b      	lsls	r3, r3, #12
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006442:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006466:	b480      	push	{r7}
 8006468:	b085      	sub	sp, #20
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800647c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	f043 0307 	orr.w	r3, r3, #7
 8006488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	609a      	str	r2, [r3, #8]
}
 8006490:	bf00      	nop
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	021a      	lsls	r2, r3, #8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	431a      	orrs	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	609a      	str	r2, [r3, #8]
}
 80064d0:	bf00      	nop
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	2201      	movs	r2, #1
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a1a      	ldr	r2, [r3, #32]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	43db      	mvns	r3, r3
 80064fe:	401a      	ands	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a1a      	ldr	r2, [r3, #32]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	fa01 f303 	lsl.w	r3, r1, r3
 8006514:	431a      	orrs	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	621a      	str	r2, [r3, #32]
}
 800651a:	bf00      	nop
 800651c:	371c      	adds	r7, #28
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800653c:	2302      	movs	r3, #2
 800653e:	e05a      	b.n	80065f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a21      	ldr	r2, [pc, #132]	@ (8006604 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d022      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800658c:	d01d      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1d      	ldr	r2, [pc, #116]	@ (8006608 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d018      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1b      	ldr	r2, [pc, #108]	@ (800660c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d013      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006610 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00e      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a18      	ldr	r2, [pc, #96]	@ (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d009      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a17      	ldr	r2, [pc, #92]	@ (8006618 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d004      	beq.n	80065ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a15      	ldr	r2, [pc, #84]	@ (800661c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d10c      	bne.n	80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40010000 	.word	0x40010000
 8006608:	40000400 	.word	0x40000400
 800660c:	40000800 	.word	0x40000800
 8006610:	40000c00 	.word	0x40000c00
 8006614:	40010400 	.word	0x40010400
 8006618:	40014000 	.word	0x40014000
 800661c:	40001800 	.word	0x40001800

08006620 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e042      	b.n	80066e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fc fcc8 	bl	8003004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2224      	movs	r2, #36	@ 0x24
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800668a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fdf3 	bl	8007278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695a      	ldr	r2, [r3, #20]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08a      	sub	sp, #40	@ 0x28
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	603b      	str	r3, [r7, #0]
 80066f4:	4613      	mov	r3, r2
 80066f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b20      	cmp	r3, #32
 8006706:	d175      	bne.n	80067f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d002      	beq.n	8006714 <HAL_UART_Transmit+0x2c>
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e06e      	b.n	80067f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2221      	movs	r2, #33	@ 0x21
 8006722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006726:	f7fc fd8d 	bl	8003244 <HAL_GetTick>
 800672a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	88fa      	ldrh	r2, [r7, #6]
 8006730:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	88fa      	ldrh	r2, [r7, #6]
 8006736:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006740:	d108      	bne.n	8006754 <HAL_UART_Transmit+0x6c>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	e003      	b.n	800675c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006758:	2300      	movs	r3, #0
 800675a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800675c:	e02e      	b.n	80067bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2200      	movs	r2, #0
 8006766:	2180      	movs	r1, #128	@ 0x80
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 fb55 	bl	8006e18 <UART_WaitOnFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e03a      	b.n	80067f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10b      	bne.n	800679e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006794:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	3302      	adds	r3, #2
 800679a:	61bb      	str	r3, [r7, #24]
 800679c:	e007      	b.n	80067ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	781a      	ldrb	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	3301      	adds	r3, #1
 80067ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1cb      	bne.n	800675e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2200      	movs	r2, #0
 80067ce:	2140      	movs	r1, #64	@ 0x40
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 fb21 	bl	8006e18 <UART_WaitOnFlagUntilTimeout>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e006      	b.n	80067f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e000      	b.n	80067f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80067f4:	2302      	movs	r3, #2
  }
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3720      	adds	r7, #32
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b08c      	sub	sp, #48	@ 0x30
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	4613      	mov	r3, r2
 800680a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b20      	cmp	r3, #32
 8006816:	d14a      	bne.n	80068ae <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e043      	b.n	80068b0 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2201      	movs	r2, #1
 800682c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006834:	88fb      	ldrh	r3, [r7, #6]
 8006836:	461a      	mov	r2, r3
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 fb45 	bl	8006eca <UART_Start_Receive_IT>
 8006840:	4603      	mov	r3, r0
 8006842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006846:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800684a:	2b00      	cmp	r3, #0
 800684c:	d12c      	bne.n	80068a8 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006852:	2b01      	cmp	r3, #1
 8006854:	d125      	bne.n	80068a2 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006856:	2300      	movs	r3, #0
 8006858:	613b      	str	r3, [r7, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	330c      	adds	r3, #12
 8006872:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	e853 3f00 	ldrex	r3, [r3]
 800687a:	617b      	str	r3, [r7, #20]
   return(result);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f043 0310 	orr.w	r3, r3, #16
 8006882:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	330c      	adds	r3, #12
 800688a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800688c:	627a      	str	r2, [r7, #36]	@ 0x24
 800688e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006890:	6a39      	ldr	r1, [r7, #32]
 8006892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006894:	e841 2300 	strex	r3, r2, [r1]
 8006898:	61fb      	str	r3, [r7, #28]
   return(result);
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1e5      	bne.n	800686c <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80068a0:	e002      	b.n	80068a8 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80068a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068ac:	e000      	b.n	80068b0 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80068ae:	2302      	movs	r3, #2
  }
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3730      	adds	r7, #48	@ 0x30
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b0ba      	sub	sp, #232	@ 0xe8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80068de:	2300      	movs	r3, #0
 80068e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80068f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10f      	bne.n	800691e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <HAL_UART_IRQHandler+0x66>
 800690a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fbf0 	bl	80070fc <UART_Receive_IT>
      return;
 800691c:	e25b      	b.n	8006dd6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800691e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80de 	beq.w	8006ae4 <HAL_UART_IRQHandler+0x22c>
 8006928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d106      	bne.n	8006942 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006938:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80d1 	beq.w	8006ae4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00b      	beq.n	8006966 <HAL_UART_IRQHandler+0xae>
 800694e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800695e:	f043 0201 	orr.w	r2, r3, #1
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00b      	beq.n	800698a <HAL_UART_IRQHandler+0xd2>
 8006972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d005      	beq.n	800698a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006982:	f043 0202 	orr.w	r2, r3, #2
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800698a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00b      	beq.n	80069ae <HAL_UART_IRQHandler+0xf6>
 8006996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d005      	beq.n	80069ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a6:	f043 0204 	orr.w	r2, r3, #4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d011      	beq.n	80069de <HAL_UART_IRQHandler+0x126>
 80069ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069be:	f003 0320 	and.w	r3, r3, #32
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d105      	bne.n	80069d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d6:	f043 0208 	orr.w	r2, r3, #8
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 81f2 	beq.w	8006dcc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d008      	beq.n	8006a06 <HAL_UART_IRQHandler+0x14e>
 80069f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069f8:	f003 0320 	and.w	r3, r3, #32
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fb7b 	bl	80070fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a10:	2b40      	cmp	r3, #64	@ 0x40
 8006a12:	bf0c      	ite	eq
 8006a14:	2301      	moveq	r3, #1
 8006a16:	2300      	movne	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d103      	bne.n	8006a32 <HAL_UART_IRQHandler+0x17a>
 8006a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d04f      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa83 	bl	8006f3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a42:	2b40      	cmp	r3, #64	@ 0x40
 8006a44:	d141      	bne.n	8006aca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3314      	adds	r3, #20
 8006a4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a54:	e853 3f00 	ldrex	r3, [r3]
 8006a58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1d9      	bne.n	8006a46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d013      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a9e:	4a7e      	ldr	r2, [pc, #504]	@ (8006c98 <HAL_UART_IRQHandler+0x3e0>)
 8006aa0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fd fa96 	bl	8003fd8 <HAL_DMA_Abort_IT>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d016      	beq.n	8006ae0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006abc:	4610      	mov	r0, r2
 8006abe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac0:	e00e      	b.n	8006ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f99e 	bl	8006e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac8:	e00a      	b.n	8006ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f99a 	bl	8006e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad0:	e006      	b.n	8006ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f996 	bl	8006e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006ade:	e175      	b.n	8006dcc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae0:	bf00      	nop
    return;
 8006ae2:	e173      	b.n	8006dcc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	f040 814f 	bne.w	8006d8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006af2:	f003 0310 	and.w	r3, r3, #16
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 8148 	beq.w	8006d8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b00:	f003 0310 	and.w	r3, r3, #16
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8141 	beq.w	8006d8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60bb      	str	r3, [r7, #8]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60bb      	str	r3, [r7, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	60bb      	str	r3, [r7, #8]
 8006b1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2a:	2b40      	cmp	r3, #64	@ 0x40
 8006b2c:	f040 80b6 	bne.w	8006c9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8145 	beq.w	8006dd0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	f080 813e 	bcs.w	8006dd0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b66:	f000 8088 	beq.w	8006c7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	330c      	adds	r3, #12
 8006b92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ba2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1d9      	bne.n	8006b6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3314      	adds	r3, #20
 8006bbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006bc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bc8:	f023 0301 	bic.w	r3, r3, #1
 8006bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3314      	adds	r3, #20
 8006bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006bda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006bde:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006be2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006bec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e1      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3314      	adds	r3, #20
 8006bf8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3314      	adds	r3, #20
 8006c12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e3      	bne.n	8006bf2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	330c      	adds	r3, #12
 8006c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c4a:	f023 0310 	bic.w	r3, r3, #16
 8006c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	330c      	adds	r3, #12
 8006c58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c5c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c5e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e3      	bne.n	8006c38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fd f93f 	bl	8003ef8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7fb fa87 	bl	80021a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c96:	e09b      	b.n	8006dd0 <HAL_UART_IRQHandler+0x518>
 8006c98:	08007005 	.word	0x08007005
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 808e 	beq.w	8006dd4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8089 	beq.w	8006dd4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	330c      	adds	r3, #12
 8006cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	330c      	adds	r3, #12
 8006ce2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006ce6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ce8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e3      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3314      	adds	r3, #20
 8006d00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	623b      	str	r3, [r7, #32]
   return(result);
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3314      	adds	r3, #20
 8006d1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e3      	bne.n	8006cfa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	330c      	adds	r3, #12
 8006d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0310 	bic.w	r3, r3, #16
 8006d56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	330c      	adds	r3, #12
 8006d60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d64:	61fa      	str	r2, [r7, #28]
 8006d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d68:	69b9      	ldr	r1, [r7, #24]
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	e841 2300 	strex	r3, r2, [r1]
 8006d70:	617b      	str	r3, [r7, #20]
   return(result);
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e3      	bne.n	8006d40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7fb fa0d 	bl	80021a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d8a:	e023      	b.n	8006dd4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d009      	beq.n	8006dac <HAL_UART_IRQHandler+0x4f4>
 8006d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f941 	bl	800702c <UART_Transmit_IT>
    return;
 8006daa:	e014      	b.n	8006dd6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00e      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x51e>
 8006db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d008      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f981 	bl	80070cc <UART_EndTransmit_IT>
    return;
 8006dca:	e004      	b.n	8006dd6 <HAL_UART_IRQHandler+0x51e>
    return;
 8006dcc:	bf00      	nop
 8006dce:	e002      	b.n	8006dd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006dd0:	bf00      	nop
 8006dd2:	e000      	b.n	8006dd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006dd4:	bf00      	nop
  }
}
 8006dd6:	37e8      	adds	r7, #232	@ 0xe8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	4613      	mov	r3, r2
 8006e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e28:	e03b      	b.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d037      	beq.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e32:	f7fc fa07 	bl	8003244 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	6a3a      	ldr	r2, [r7, #32]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d302      	bcc.n	8006e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e03a      	b.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f003 0304 	and.w	r3, r3, #4
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d023      	beq.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b80      	cmp	r3, #128	@ 0x80
 8006e5e:	d020      	beq.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b40      	cmp	r3, #64	@ 0x40
 8006e64:	d01d      	beq.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0308 	and.w	r3, r3, #8
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d116      	bne.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e74:	2300      	movs	r3, #0
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f857 	bl	8006f3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2208      	movs	r2, #8
 8006e94:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e00f      	b.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	bf0c      	ite	eq
 8006eb2:	2301      	moveq	r3, #1
 8006eb4:	2300      	movne	r3, #0
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d0b4      	beq.n	8006e2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	88fa      	ldrh	r2, [r7, #6]
 8006ee2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	88fa      	ldrh	r2, [r7, #6]
 8006ee8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2222      	movs	r2, #34	@ 0x22
 8006ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d007      	beq.n	8006f10 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f0e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	695a      	ldr	r2, [r3, #20]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0201 	orr.w	r2, r2, #1
 8006f1e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0220 	orr.w	r2, r2, #32
 8006f2e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b095      	sub	sp, #84	@ 0x54
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	330c      	adds	r3, #12
 8006f4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	330c      	adds	r3, #12
 8006f64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f66:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e5      	bne.n	8006f46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3314      	adds	r3, #20
 8006f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	f023 0301 	bic.w	r3, r3, #1
 8006f90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3314      	adds	r3, #20
 8006f98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e5      	bne.n	8006f7a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d119      	bne.n	8006fea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f023 0310 	bic.w	r3, r3, #16
 8006fcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fd6:	61ba      	str	r2, [r7, #24]
 8006fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6979      	ldr	r1, [r7, #20]
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e5      	bne.n	8006fb6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ff8:	bf00      	nop
 8006ffa:	3754      	adds	r7, #84	@ 0x54
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007010:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f7ff fef0 	bl	8006e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007024:	bf00      	nop
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b21      	cmp	r3, #33	@ 0x21
 800703e:	d13e      	bne.n	80070be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007048:	d114      	bne.n	8007074 <UART_Transmit_IT+0x48>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d110      	bne.n	8007074 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007066:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	1c9a      	adds	r2, r3, #2
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	621a      	str	r2, [r3, #32]
 8007072:	e008      	b.n	8007086 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	1c59      	adds	r1, r3, #1
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6211      	str	r1, [r2, #32]
 800707e:	781a      	ldrb	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29b      	uxth	r3, r3
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	4619      	mov	r1, r3
 8007094:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10f      	bne.n	80070ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	e000      	b.n	80070c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070be:	2302      	movs	r3, #2
  }
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff fe75 	bl	8006ddc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08c      	sub	sp, #48	@ 0x30
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b22      	cmp	r3, #34	@ 0x22
 800710e:	f040 80ae 	bne.w	800726e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800711a:	d117      	bne.n	800714c <UART_Receive_IT+0x50>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d113      	bne.n	800714c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007124:	2300      	movs	r3, #0
 8007126:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713a:	b29a      	uxth	r2, r3
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007144:	1c9a      	adds	r2, r3, #2
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	629a      	str	r2, [r3, #40]	@ 0x28
 800714a:	e026      	b.n	800719a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007150:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007152:	2300      	movs	r3, #0
 8007154:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800715e:	d007      	beq.n	8007170 <UART_Receive_IT+0x74>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <UART_Receive_IT+0x82>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	b2da      	uxtb	r2, r3
 8007178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	e008      	b.n	8007190 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800718a:	b2da      	uxtb	r2, r3
 800718c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800719e:	b29b      	uxth	r3, r3
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	4619      	mov	r1, r3
 80071a8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d15d      	bne.n	800726a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0220 	bic.w	r2, r2, #32
 80071bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	695a      	ldr	r2, [r3, #20]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0201 	bic.w	r2, r2, #1
 80071dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d135      	bne.n	8007260 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	330c      	adds	r3, #12
 8007200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	613b      	str	r3, [r7, #16]
   return(result);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f023 0310 	bic.w	r3, r3, #16
 8007210:	627b      	str	r3, [r7, #36]	@ 0x24
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	330c      	adds	r3, #12
 8007218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800721a:	623a      	str	r2, [r7, #32]
 800721c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	69f9      	ldr	r1, [r7, #28]
 8007220:	6a3a      	ldr	r2, [r7, #32]
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	61bb      	str	r3, [r7, #24]
   return(result);
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e5      	bne.n	80071fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	2b10      	cmp	r3, #16
 800723a:	d10a      	bne.n	8007252 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7fa ffa3 	bl	80021a4 <HAL_UARTEx_RxEventCallback>
 800725e:	e002      	b.n	8007266 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff fdc5 	bl	8006df0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	e002      	b.n	8007270 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	e000      	b.n	8007270 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800726e:	2302      	movs	r3, #2
  }
}
 8007270:	4618      	mov	r0, r3
 8007272:	3730      	adds	r7, #48	@ 0x30
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800727c:	b0c0      	sub	sp, #256	@ 0x100
 800727e:	af00      	add	r7, sp, #0
 8007280:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007294:	68d9      	ldr	r1, [r3, #12]
 8007296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	ea40 0301 	orr.w	r3, r0, r1
 80072a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	431a      	orrs	r2, r3
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	431a      	orrs	r2, r3
 80072b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	4313      	orrs	r3, r2
 80072c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80072d0:	f021 010c 	bic.w	r1, r1, #12
 80072d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072de:	430b      	orrs	r3, r1
 80072e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80072ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f2:	6999      	ldr	r1, [r3, #24]
 80072f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	ea40 0301 	orr.w	r3, r0, r1
 80072fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b8f      	ldr	r3, [pc, #572]	@ (8007544 <UART_SetConfig+0x2cc>)
 8007308:	429a      	cmp	r2, r3
 800730a:	d005      	beq.n	8007318 <UART_SetConfig+0xa0>
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b8d      	ldr	r3, [pc, #564]	@ (8007548 <UART_SetConfig+0x2d0>)
 8007314:	429a      	cmp	r2, r3
 8007316:	d104      	bne.n	8007322 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007318:	f7fe f882 	bl	8005420 <HAL_RCC_GetPCLK2Freq>
 800731c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007320:	e003      	b.n	800732a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007322:	f7fe f869 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 8007326:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800732a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007334:	f040 810c 	bne.w	8007550 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800733c:	2200      	movs	r2, #0
 800733e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007342:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007346:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800734a:	4622      	mov	r2, r4
 800734c:	462b      	mov	r3, r5
 800734e:	1891      	adds	r1, r2, r2
 8007350:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007352:	415b      	adcs	r3, r3
 8007354:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007356:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800735a:	4621      	mov	r1, r4
 800735c:	eb12 0801 	adds.w	r8, r2, r1
 8007360:	4629      	mov	r1, r5
 8007362:	eb43 0901 	adc.w	r9, r3, r1
 8007366:	f04f 0200 	mov.w	r2, #0
 800736a:	f04f 0300 	mov.w	r3, #0
 800736e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800737a:	4690      	mov	r8, r2
 800737c:	4699      	mov	r9, r3
 800737e:	4623      	mov	r3, r4
 8007380:	eb18 0303 	adds.w	r3, r8, r3
 8007384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007388:	462b      	mov	r3, r5
 800738a:	eb49 0303 	adc.w	r3, r9, r3
 800738e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800739e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80073a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073a6:	460b      	mov	r3, r1
 80073a8:	18db      	adds	r3, r3, r3
 80073aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80073ac:	4613      	mov	r3, r2
 80073ae:	eb42 0303 	adc.w	r3, r2, r3
 80073b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80073b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80073b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80073bc:	f7f9 fb22 	bl	8000a04 <__aeabi_uldivmod>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4b61      	ldr	r3, [pc, #388]	@ (800754c <UART_SetConfig+0x2d4>)
 80073c6:	fba3 2302 	umull	r2, r3, r3, r2
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	011c      	lsls	r4, r3, #4
 80073ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80073dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	1891      	adds	r1, r2, r2
 80073e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80073e8:	415b      	adcs	r3, r3
 80073ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073f0:	4641      	mov	r1, r8
 80073f2:	eb12 0a01 	adds.w	sl, r2, r1
 80073f6:	4649      	mov	r1, r9
 80073f8:	eb43 0b01 	adc.w	fp, r3, r1
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 0300 	mov.w	r3, #0
 8007404:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007408:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800740c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007410:	4692      	mov	sl, r2
 8007412:	469b      	mov	fp, r3
 8007414:	4643      	mov	r3, r8
 8007416:	eb1a 0303 	adds.w	r3, sl, r3
 800741a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800741e:	464b      	mov	r3, r9
 8007420:	eb4b 0303 	adc.w	r3, fp, r3
 8007424:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007434:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007438:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800743c:	460b      	mov	r3, r1
 800743e:	18db      	adds	r3, r3, r3
 8007440:	643b      	str	r3, [r7, #64]	@ 0x40
 8007442:	4613      	mov	r3, r2
 8007444:	eb42 0303 	adc.w	r3, r2, r3
 8007448:	647b      	str	r3, [r7, #68]	@ 0x44
 800744a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800744e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007452:	f7f9 fad7 	bl	8000a04 <__aeabi_uldivmod>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	4611      	mov	r1, r2
 800745c:	4b3b      	ldr	r3, [pc, #236]	@ (800754c <UART_SetConfig+0x2d4>)
 800745e:	fba3 2301 	umull	r2, r3, r3, r1
 8007462:	095b      	lsrs	r3, r3, #5
 8007464:	2264      	movs	r2, #100	@ 0x64
 8007466:	fb02 f303 	mul.w	r3, r2, r3
 800746a:	1acb      	subs	r3, r1, r3
 800746c:	00db      	lsls	r3, r3, #3
 800746e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007472:	4b36      	ldr	r3, [pc, #216]	@ (800754c <UART_SetConfig+0x2d4>)
 8007474:	fba3 2302 	umull	r2, r3, r3, r2
 8007478:	095b      	lsrs	r3, r3, #5
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007480:	441c      	add	r4, r3
 8007482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007486:	2200      	movs	r2, #0
 8007488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800748c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007490:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007494:	4642      	mov	r2, r8
 8007496:	464b      	mov	r3, r9
 8007498:	1891      	adds	r1, r2, r2
 800749a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800749c:	415b      	adcs	r3, r3
 800749e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80074a4:	4641      	mov	r1, r8
 80074a6:	1851      	adds	r1, r2, r1
 80074a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80074aa:	4649      	mov	r1, r9
 80074ac:	414b      	adcs	r3, r1
 80074ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80074bc:	4659      	mov	r1, fp
 80074be:	00cb      	lsls	r3, r1, #3
 80074c0:	4651      	mov	r1, sl
 80074c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074c6:	4651      	mov	r1, sl
 80074c8:	00ca      	lsls	r2, r1, #3
 80074ca:	4610      	mov	r0, r2
 80074cc:	4619      	mov	r1, r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	4642      	mov	r2, r8
 80074d2:	189b      	adds	r3, r3, r2
 80074d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074d8:	464b      	mov	r3, r9
 80074da:	460a      	mov	r2, r1
 80074dc:	eb42 0303 	adc.w	r3, r2, r3
 80074e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80074f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074f8:	460b      	mov	r3, r1
 80074fa:	18db      	adds	r3, r3, r3
 80074fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074fe:	4613      	mov	r3, r2
 8007500:	eb42 0303 	adc.w	r3, r2, r3
 8007504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007506:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800750a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800750e:	f7f9 fa79 	bl	8000a04 <__aeabi_uldivmod>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	4b0d      	ldr	r3, [pc, #52]	@ (800754c <UART_SetConfig+0x2d4>)
 8007518:	fba3 1302 	umull	r1, r3, r3, r2
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	2164      	movs	r1, #100	@ 0x64
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	3332      	adds	r3, #50	@ 0x32
 800752a:	4a08      	ldr	r2, [pc, #32]	@ (800754c <UART_SetConfig+0x2d4>)
 800752c:	fba2 2303 	umull	r2, r3, r2, r3
 8007530:	095b      	lsrs	r3, r3, #5
 8007532:	f003 0207 	and.w	r2, r3, #7
 8007536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4422      	add	r2, r4
 800753e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007540:	e106      	b.n	8007750 <UART_SetConfig+0x4d8>
 8007542:	bf00      	nop
 8007544:	40011000 	.word	0x40011000
 8007548:	40011400 	.word	0x40011400
 800754c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007554:	2200      	movs	r2, #0
 8007556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800755a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800755e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007562:	4642      	mov	r2, r8
 8007564:	464b      	mov	r3, r9
 8007566:	1891      	adds	r1, r2, r2
 8007568:	6239      	str	r1, [r7, #32]
 800756a:	415b      	adcs	r3, r3
 800756c:	627b      	str	r3, [r7, #36]	@ 0x24
 800756e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007572:	4641      	mov	r1, r8
 8007574:	1854      	adds	r4, r2, r1
 8007576:	4649      	mov	r1, r9
 8007578:	eb43 0501 	adc.w	r5, r3, r1
 800757c:	f04f 0200 	mov.w	r2, #0
 8007580:	f04f 0300 	mov.w	r3, #0
 8007584:	00eb      	lsls	r3, r5, #3
 8007586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800758a:	00e2      	lsls	r2, r4, #3
 800758c:	4614      	mov	r4, r2
 800758e:	461d      	mov	r5, r3
 8007590:	4643      	mov	r3, r8
 8007592:	18e3      	adds	r3, r4, r3
 8007594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007598:	464b      	mov	r3, r9
 800759a:	eb45 0303 	adc.w	r3, r5, r3
 800759e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80075b2:	f04f 0200 	mov.w	r2, #0
 80075b6:	f04f 0300 	mov.w	r3, #0
 80075ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80075be:	4629      	mov	r1, r5
 80075c0:	008b      	lsls	r3, r1, #2
 80075c2:	4621      	mov	r1, r4
 80075c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075c8:	4621      	mov	r1, r4
 80075ca:	008a      	lsls	r2, r1, #2
 80075cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80075d0:	f7f9 fa18 	bl	8000a04 <__aeabi_uldivmod>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4b60      	ldr	r3, [pc, #384]	@ (800775c <UART_SetConfig+0x4e4>)
 80075da:	fba3 2302 	umull	r2, r3, r3, r2
 80075de:	095b      	lsrs	r3, r3, #5
 80075e0:	011c      	lsls	r4, r3, #4
 80075e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075e6:	2200      	movs	r2, #0
 80075e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80075f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80075f4:	4642      	mov	r2, r8
 80075f6:	464b      	mov	r3, r9
 80075f8:	1891      	adds	r1, r2, r2
 80075fa:	61b9      	str	r1, [r7, #24]
 80075fc:	415b      	adcs	r3, r3
 80075fe:	61fb      	str	r3, [r7, #28]
 8007600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007604:	4641      	mov	r1, r8
 8007606:	1851      	adds	r1, r2, r1
 8007608:	6139      	str	r1, [r7, #16]
 800760a:	4649      	mov	r1, r9
 800760c:	414b      	adcs	r3, r1
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	f04f 0200 	mov.w	r2, #0
 8007614:	f04f 0300 	mov.w	r3, #0
 8007618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800761c:	4659      	mov	r1, fp
 800761e:	00cb      	lsls	r3, r1, #3
 8007620:	4651      	mov	r1, sl
 8007622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007626:	4651      	mov	r1, sl
 8007628:	00ca      	lsls	r2, r1, #3
 800762a:	4610      	mov	r0, r2
 800762c:	4619      	mov	r1, r3
 800762e:	4603      	mov	r3, r0
 8007630:	4642      	mov	r2, r8
 8007632:	189b      	adds	r3, r3, r2
 8007634:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007638:	464b      	mov	r3, r9
 800763a:	460a      	mov	r2, r1
 800763c:	eb42 0303 	adc.w	r3, r2, r3
 8007640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800764e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800765c:	4649      	mov	r1, r9
 800765e:	008b      	lsls	r3, r1, #2
 8007660:	4641      	mov	r1, r8
 8007662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007666:	4641      	mov	r1, r8
 8007668:	008a      	lsls	r2, r1, #2
 800766a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800766e:	f7f9 f9c9 	bl	8000a04 <__aeabi_uldivmod>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4611      	mov	r1, r2
 8007678:	4b38      	ldr	r3, [pc, #224]	@ (800775c <UART_SetConfig+0x4e4>)
 800767a:	fba3 2301 	umull	r2, r3, r3, r1
 800767e:	095b      	lsrs	r3, r3, #5
 8007680:	2264      	movs	r2, #100	@ 0x64
 8007682:	fb02 f303 	mul.w	r3, r2, r3
 8007686:	1acb      	subs	r3, r1, r3
 8007688:	011b      	lsls	r3, r3, #4
 800768a:	3332      	adds	r3, #50	@ 0x32
 800768c:	4a33      	ldr	r2, [pc, #204]	@ (800775c <UART_SetConfig+0x4e4>)
 800768e:	fba2 2303 	umull	r2, r3, r2, r3
 8007692:	095b      	lsrs	r3, r3, #5
 8007694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007698:	441c      	add	r4, r3
 800769a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800769e:	2200      	movs	r2, #0
 80076a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80076a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80076a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80076a8:	4642      	mov	r2, r8
 80076aa:	464b      	mov	r3, r9
 80076ac:	1891      	adds	r1, r2, r2
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	415b      	adcs	r3, r3
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076b8:	4641      	mov	r1, r8
 80076ba:	1851      	adds	r1, r2, r1
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	4649      	mov	r1, r9
 80076c0:	414b      	adcs	r3, r1
 80076c2:	607b      	str	r3, [r7, #4]
 80076c4:	f04f 0200 	mov.w	r2, #0
 80076c8:	f04f 0300 	mov.w	r3, #0
 80076cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076d0:	4659      	mov	r1, fp
 80076d2:	00cb      	lsls	r3, r1, #3
 80076d4:	4651      	mov	r1, sl
 80076d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076da:	4651      	mov	r1, sl
 80076dc:	00ca      	lsls	r2, r1, #3
 80076de:	4610      	mov	r0, r2
 80076e0:	4619      	mov	r1, r3
 80076e2:	4603      	mov	r3, r0
 80076e4:	4642      	mov	r2, r8
 80076e6:	189b      	adds	r3, r3, r2
 80076e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076ea:	464b      	mov	r3, r9
 80076ec:	460a      	mov	r2, r1
 80076ee:	eb42 0303 	adc.w	r3, r2, r3
 80076f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80076fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8007700:	f04f 0200 	mov.w	r2, #0
 8007704:	f04f 0300 	mov.w	r3, #0
 8007708:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800770c:	4649      	mov	r1, r9
 800770e:	008b      	lsls	r3, r1, #2
 8007710:	4641      	mov	r1, r8
 8007712:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007716:	4641      	mov	r1, r8
 8007718:	008a      	lsls	r2, r1, #2
 800771a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800771e:	f7f9 f971 	bl	8000a04 <__aeabi_uldivmod>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4b0d      	ldr	r3, [pc, #52]	@ (800775c <UART_SetConfig+0x4e4>)
 8007728:	fba3 1302 	umull	r1, r3, r3, r2
 800772c:	095b      	lsrs	r3, r3, #5
 800772e:	2164      	movs	r1, #100	@ 0x64
 8007730:	fb01 f303 	mul.w	r3, r1, r3
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	3332      	adds	r3, #50	@ 0x32
 800773a:	4a08      	ldr	r2, [pc, #32]	@ (800775c <UART_SetConfig+0x4e4>)
 800773c:	fba2 2303 	umull	r2, r3, r2, r3
 8007740:	095b      	lsrs	r3, r3, #5
 8007742:	f003 020f 	and.w	r2, r3, #15
 8007746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4422      	add	r2, r4
 800774e:	609a      	str	r2, [r3, #8]
}
 8007750:	bf00      	nop
 8007752:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007756:	46bd      	mov	sp, r7
 8007758:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800775c:	51eb851f 	.word	0x51eb851f

08007760 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	6812      	ldr	r2, [r2, #0]
 8007778:	f023 0101 	bic.w	r1, r3, #1
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	2b08      	cmp	r3, #8
 8007788:	d102      	bne.n	8007790 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800778a:	2340      	movs	r3, #64	@ 0x40
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	e001      	b.n	8007794 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007790:	2300      	movs	r3, #0
 8007792:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80077a0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80077a6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80077ac:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80077b2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80077b8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80077be:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80077c4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80077ca:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80077d0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80077d6:	4313      	orrs	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80077ee:	4b10      	ldr	r3, [pc, #64]	@ (8007830 <FSMC_NORSRAM_Init+0xd0>)
 80077f0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80077f8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8007800:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	43db      	mvns	r3, r3
 8007810:	ea02 0103 	and.w	r1, r2, r3
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	4319      	orrs	r1, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	371c      	adds	r7, #28
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	0008fb7f 	.word	0x0008fb7f

08007834 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784a:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	011b      	lsls	r3, r3, #4
 8007858:	431a      	orrs	r2, r3
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	431a      	orrs	r2, r3
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	041b      	lsls	r3, r3, #16
 8007868:	431a      	orrs	r2, r3
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	3b01      	subs	r3, #1
 8007870:	051b      	lsls	r3, r3, #20
 8007872:	431a      	orrs	r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	3b02      	subs	r3, #2
 800787a:	061b      	lsls	r3, r3, #24
 800787c:	431a      	orrs	r2, r3
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	4313      	orrs	r3, r2
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	3201      	adds	r2, #1
 8007888:	4319      	orrs	r1, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
	...

080078a0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078b4:	d11d      	bne.n	80078f2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078be:	4b13      	ldr	r3, [pc, #76]	@ (800790c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	6811      	ldr	r1, [r2, #0]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	6852      	ldr	r2, [r2, #4]
 80078ca:	0112      	lsls	r2, r2, #4
 80078cc:	4311      	orrs	r1, r2
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	6892      	ldr	r2, [r2, #8]
 80078d2:	0212      	lsls	r2, r2, #8
 80078d4:	4311      	orrs	r1, r2
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	6992      	ldr	r2, [r2, #24]
 80078da:	4311      	orrs	r1, r2
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	68d2      	ldr	r2, [r2, #12]
 80078e0:	0412      	lsls	r2, r2, #16
 80078e2:	430a      	orrs	r2, r1
 80078e4:	ea43 0102 	orr.w	r1, r3, r2
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80078f0:	e005      	b.n	80078fe <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80078fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	cff00000 	.word	0xcff00000

08007910 <memset>:
 8007910:	4402      	add	r2, r0
 8007912:	4603      	mov	r3, r0
 8007914:	4293      	cmp	r3, r2
 8007916:	d100      	bne.n	800791a <memset+0xa>
 8007918:	4770      	bx	lr
 800791a:	f803 1b01 	strb.w	r1, [r3], #1
 800791e:	e7f9      	b.n	8007914 <memset+0x4>

08007920 <__libc_init_array>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	4d0d      	ldr	r5, [pc, #52]	@ (8007958 <__libc_init_array+0x38>)
 8007924:	4c0d      	ldr	r4, [pc, #52]	@ (800795c <__libc_init_array+0x3c>)
 8007926:	1b64      	subs	r4, r4, r5
 8007928:	10a4      	asrs	r4, r4, #2
 800792a:	2600      	movs	r6, #0
 800792c:	42a6      	cmp	r6, r4
 800792e:	d109      	bne.n	8007944 <__libc_init_array+0x24>
 8007930:	4d0b      	ldr	r5, [pc, #44]	@ (8007960 <__libc_init_array+0x40>)
 8007932:	4c0c      	ldr	r4, [pc, #48]	@ (8007964 <__libc_init_array+0x44>)
 8007934:	f000 f818 	bl	8007968 <_init>
 8007938:	1b64      	subs	r4, r4, r5
 800793a:	10a4      	asrs	r4, r4, #2
 800793c:	2600      	movs	r6, #0
 800793e:	42a6      	cmp	r6, r4
 8007940:	d105      	bne.n	800794e <__libc_init_array+0x2e>
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	f855 3b04 	ldr.w	r3, [r5], #4
 8007948:	4798      	blx	r3
 800794a:	3601      	adds	r6, #1
 800794c:	e7ee      	b.n	800792c <__libc_init_array+0xc>
 800794e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007952:	4798      	blx	r3
 8007954:	3601      	adds	r6, #1
 8007956:	e7f2      	b.n	800793e <__libc_init_array+0x1e>
 8007958:	0800a968 	.word	0x0800a968
 800795c:	0800a968 	.word	0x0800a968
 8007960:	0800a968 	.word	0x0800a968
 8007964:	0800a96c 	.word	0x0800a96c

08007968 <_init>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	bf00      	nop
 800796c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796e:	bc08      	pop	{r3}
 8007970:	469e      	mov	lr, r3
 8007972:	4770      	bx	lr

08007974 <_fini>:
 8007974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007976:	bf00      	nop
 8007978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797a:	bc08      	pop	{r3}
 800797c:	469e      	mov	lr, r3
 800797e:	4770      	bx	lr
