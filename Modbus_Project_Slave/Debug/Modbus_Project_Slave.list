
Modbus_Project_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007870  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe0  080079f8  080079f8  000089f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9d8  0800a9d8  0000c20c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9d8  0800a9d8  0000b9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9e0  0800a9e0  0000c20c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9e0  0800a9e0  0000b9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e4  0800a9e4  0000b9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800a9e8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c20c  2**0
                  CONTENTS
 10 .bss          00000584  2000020c  2000020c  0000c20c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000790  20000790  0000c20c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a8cc  00000000  00000000  0000c23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000446e  00000000  00000000  00026b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0002af78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011f4  00000000  00000000  0002c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026333  00000000  00000000  0002d894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002042c  00000000  00000000  00053bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfeca  00000000  00000000  00073ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00153ebd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006038  00000000  00000000  00153f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00159f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000020c 	.word	0x2000020c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080079e0 	.word	0x080079e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000210 	.word	0x20000210
 80001c4:	080079e0 	.word	0x080079e0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <InitSlave>:
#include "lcd.h"

Slave_Device BKIT01;


void InitSlave(Slave_Device* hDev){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	hDev->signal = IDLE;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	705a      	strb	r2, [r3, #1]
	hDev->subsignal.s = 0;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
	hDev->Address = SLAVE_ADDRESS;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	759a      	strb	r2, [r3, #22]
	memset(hDev->Register, 0, sizeof(hDev->Register));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3302      	adds	r3, #2
 8000d12:	2214      	movs	r2, #20
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f006 fe36 	bl	8007988 <memset>
	Modbus_Init(&slave, &huart3);
 8000d1c:	4903      	ldr	r1, [pc, #12]	@ (8000d2c <InitSlave+0x38>)
 8000d1e:	4804      	ldr	r0, [pc, #16]	@ (8000d30 <InitSlave+0x3c>)
 8000d20:	f001 fd40 	bl	80027a4 <Modbus_Init>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000744 	.word	0x20000744
 8000d30:	20000398 	.word	0x20000398

08000d34 <CommandParser_handler>:

void CommandParser_handler(Slave_Device* hDev){
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	switch(slave.Rx_buf[1]){
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000db8 <CommandParser_handler+0x84>)
 8000d3e:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 8000d42:	3b01      	subs	r3, #1
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d831      	bhi.n	8000dac <CommandParser_handler+0x78>
 8000d48:	a201      	add	r2, pc, #4	@ (adr r2, 8000d50 <CommandParser_handler+0x1c>)
 8000d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4e:	bf00      	nop
 8000d50:	08000da9 	.word	0x08000da9
 8000d54:	08000da9 	.word	0x08000da9
 8000d58:	08000d91 	.word	0x08000d91
 8000d5c:	08000da9 	.word	0x08000da9
 8000d60:	08000da9 	.word	0x08000da9
 8000d64:	08000d99 	.word	0x08000d99
 8000d68:	08000dad 	.word	0x08000dad
 8000d6c:	08000dad 	.word	0x08000dad
 8000d70:	08000dad 	.word	0x08000dad
 8000d74:	08000dad 	.word	0x08000dad
 8000d78:	08000dad 	.word	0x08000dad
 8000d7c:	08000dad 	.word	0x08000dad
 8000d80:	08000dad 	.word	0x08000dad
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	08000da9 	.word	0x08000da9
 8000d8c:	08000da1 	.word	0x08000da1
	}
	case READ_DISCRETE_INPUT:{
		break;
	}
	case READ_HOLDING_REGISTER:{
		hDev->signal = READ_MULTIPLE_HOLDING_REGISTER_HANDLER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2203      	movs	r2, #3
 8000d94:	705a      	strb	r2, [r3, #1]
		break;
 8000d96:	e008      	b.n	8000daa <CommandParser_handler+0x76>
	}
	case WRITE_SINGLE_COIL:{
		break;
	}
	case WRITE_SINGLE_HOLDING_REGISTER:{
		hDev->signal = WRITE_HOLDING_REGISTER_HANDLER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	705a      	strb	r2, [r3, #1]
		break;
 8000d9e:	e004      	b.n	8000daa <CommandParser_handler+0x76>
	}
	case WRITE_MULTIPLE_COIL:{
		break;
	}
	case WRITE_MULTIPLE_HOLDING_REGISTER:{
		hDev->signal = READ_MULTIPLE_HOLDING_REGISTER_HANDLER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2203      	movs	r2, #3
 8000da4:	705a      	strb	r2, [r3, #1]
		break;
 8000da6:	e000      	b.n	8000daa <CommandParser_handler+0x76>
		break;
 8000da8:	bf00      	nop
	}
	}
	return;
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
}
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	20000398 	.word	0x20000398

08000dbc <splitFloat>:

void splitFloat(float _input, uint8_t *data) {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dc6:	6038      	str	r0, [r7, #0]
	data[0] = *(((uint8_t*)&_input)+0);
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	701a      	strb	r2, [r3, #0]
	    data[1] = *(((uint8_t*)&_input)+1);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	797a      	ldrb	r2, [r7, #5]
 8000dd6:	701a      	strb	r2, [r3, #0]
	    data[2] = *(((uint8_t*)&_input)+2);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	3302      	adds	r3, #2
 8000ddc:	79ba      	ldrb	r2, [r7, #6]
 8000dde:	701a      	strb	r2, [r3, #0]
	    data[3] = *(((uint8_t*)&_input)+3);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	3303      	adds	r3, #3
 8000de4:	79fa      	ldrb	r2, [r7, #7]
 8000de6:	701a      	strb	r2, [r3, #0]
//	memcpy(data, &_input, sizeof(float));
};
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <splitUint16>:

void splitUint16(uint16_t input, uint8_t *higherByte, uint8_t *lowerByte) {
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	81fb      	strh	r3, [r7, #14]
    *higherByte = (input >> 8) & 0xFF; // Lấy 8 bit cao
 8000e02:	89fb      	ldrh	r3, [r7, #14]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	701a      	strb	r2, [r3, #0]
    *lowerByte = input & 0xFF;        // Lấy 8 bit thấp
 8000e0e:	89fb      	ldrh	r3, [r7, #14]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	701a      	strb	r2, [r3, #0]
}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <Read_multiple_holding_register_handler>:


void Read_multiple_holding_register_handler(Slave_Device* hDev){
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	6078      	str	r0, [r7, #4]
	uint16_t startReg = (uint16_t)(slave.Rx_buf[2]) << 8 | (uint16_t)(slave.Rx_buf[3]);
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <Read_multiple_holding_register_handler+0x6c>)
 8000e2e:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <Read_multiple_holding_register_handler+0x6c>)
 8000e38:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	81fb      	strh	r3, [r7, #14]
	uint16_t numberOfReg = (uint16_t)(slave.Rx_buf[4]) << 8 | (uint16_t)(slave.Rx_buf[5]);
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <Read_multiple_holding_register_handler+0x6c>)
 8000e46:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	b21a      	sxth	r2, r3
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <Read_multiple_holding_register_handler+0x6c>)
 8000e50:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b21b      	sxth	r3, r3
 8000e5a:	81bb      	strh	r3, [r7, #12]
	Modbus_Transmit_Slave(&slave, hDev->Address, slave.Rx_buf[1], &hDev->Register[startReg], numberOfReg * 2, 100);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7d99      	ldrb	r1, [r3, #22]
 8000e60:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <Read_multiple_holding_register_handler+0x6c>)
 8000e62:	f893 0109 	ldrb.w	r0, [r3, #265]	@ 0x109
 8000e66:	89fb      	ldrh	r3, [r7, #14]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	1c9a      	adds	r2, r3, #2
 8000e6e:	89bb      	ldrh	r3, [r7, #12]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2464      	movs	r4, #100	@ 0x64
 8000e78:	9401      	str	r4, [sp, #4]
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	4602      	mov	r2, r0
 8000e80:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <Read_multiple_holding_register_handler+0x6c>)
 8000e82:	f001 fbec 	bl	800265e <Modbus_Transmit_Slave>
	return;
 8000e86:	bf00      	nop
}
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000398 	.word	0x20000398

08000e94 <Read_holding_register_handler>:

void Read_holding_register_handler(Slave_Device* hDev){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	data[0] = 3;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	733b      	strb	r3, [r7, #12]
	data[1] = hDev->Register[slave.Rx_buf[2]];
 8000ea0:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <Read_holding_register_handler+0x50>)
 8000ea2:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4413      	add	r3, r2
 8000eac:	789b      	ldrb	r3, [r3, #2]
 8000eae:	737b      	strb	r3, [r7, #13]
	data[2] = hDev->Register[slave.Rx_buf[2] + 1];
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <Read_holding_register_handler+0x50>)
 8000eb2:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	4413      	add	r3, r2
 8000ebc:	789b      	ldrb	r3, [r3, #2]
 8000ebe:	73bb      	strb	r3, [r7, #14]
	Modbus_Transmit_Slave(&slave, hDev->Address, slave.Rx_buf[1], data, 3, 100);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7d99      	ldrb	r1, [r3, #22]
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <Read_holding_register_handler+0x50>)
 8000ec6:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	2064      	movs	r0, #100	@ 0x64
 8000ed0:	9001      	str	r0, [sp, #4]
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	9000      	str	r0, [sp, #0]
 8000ed6:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <Read_holding_register_handler+0x50>)
 8000ed8:	f001 fbc1 	bl	800265e <Modbus_Transmit_Slave>
	return;
 8000edc:	bf00      	nop
}
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000398 	.word	0x20000398

08000ee8 <ReadData>:

static void ReadData(Slave_Device* hDev){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	float tempCur = sensor_get_current();
 8000ef0:	f001 fcfa 	bl	80028e8 <sensor_get_current>
 8000ef4:	ed87 0a05 	vstr	s0, [r7, #20]
	uint16_t tempLt = sensor_get_light();
 8000ef8:	f001 fca0 	bl	800283c <sensor_get_light>
 8000efc:	4603      	mov	r3, r0
 8000efe:	827b      	strh	r3, [r7, #18]
	uint16_t tempPt =sensor_get_potentiometer();
 8000f00:	f001 fca8 	bl	8002854 <sensor_get_potentiometer>
 8000f04:	4603      	mov	r3, r0
 8000f06:	823b      	strh	r3, [r7, #16]
	float tempT = sensor_get_temperature();
 8000f08:	f001 fd4a 	bl	80029a0 <sensor_get_temperature>
 8000f0c:	ed87 0a03 	vstr	s0, [r7, #12]
	float tempVol = sensor_get_voltage();
 8000f10:	f001 fcae 	bl	8002870 <sensor_get_voltage>
 8000f14:	ed87 0a02 	vstr	s0, [r7, #8]

	// Current
	splitFloat(tempCur, &hDev->Register[CURRENT_REGISTER_ADDRESS]);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	330c      	adds	r3, #12
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f22:	f7ff ff4b 	bl	8000dbc <splitFloat>
	// Temperature
	splitFloat(tempT, &hDev->Register[TEMPERATURE_REGISTER_ADDRESS]);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3308      	adds	r3, #8
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f30:	f7ff ff44 	bl	8000dbc <splitFloat>
	// Voltage
	splitFloat(tempVol, &hDev->Register[VOLTAGE_REGISTER_ADDRESS]);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3310      	adds	r3, #16
 8000f38:	4618      	mov	r0, r3
 8000f3a:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f3e:	f7ff ff3d 	bl	8000dbc <splitFloat>
	// Light
	splitUint16(tempLt, &hDev->Register[LIGHT_REGISTER_ADDRESS], &hDev->Register[LIGHT_REGISTER_ADDRESS + 1]);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	1d99      	adds	r1, r3, #6
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	1dda      	adds	r2, r3, #7
 8000f4a:	8a7b      	ldrh	r3, [r7, #18]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff51 	bl	8000df4 <splitUint16>
	// Potentiometer
	splitUint16(tempPt, &hDev->Register[POTENTIOMETER_REGISTER_ADDRESS], &hDev->Register[POTENTIOMETER_REGISTER_ADDRESS + 1]);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	1c99      	adds	r1, r3, #2
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	1cda      	adds	r2, r3, #3
 8000f5a:	8a3b      	ldrh	r3, [r7, #16]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff49 	bl	8000df4 <splitUint16>

}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <Write_holding_register_handler>:

void Write_holding_register_handler(Slave_Device* hDev){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, slave.Rx_buf, slave.Rx_size, 1000);
 8000f74:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <Write_holding_register_handler+0xa8>)
 8000f76:	f8b3 2208 	ldrh.w	r2, [r3, #520]	@ 0x208
 8000f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7e:	4926      	ldr	r1, [pc, #152]	@ (8001018 <Write_holding_register_handler+0xac>)
 8000f80:	4826      	ldr	r0, [pc, #152]	@ (800101c <Write_holding_register_handler+0xb0>)
 8000f82:	f005 fbed 	bl	8006760 <HAL_UART_Transmit>
	hDev->Register[LED_REGISTER_ADDRESS] = slave.Rx_buf[4];
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <Write_holding_register_handler+0xa8>)
 8000f88:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	711a      	strb	r2, [r3, #4]
	hDev->Register[LED_REGISTER_ADDRESS + 1] = slave.Rx_buf[5];
 8000f90:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <Write_holding_register_handler+0xa8>)
 8000f92:	f893 210d 	ldrb.w	r2, [r3, #269]	@ 0x10d
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	715a      	strb	r2, [r3, #5]
	uint8_t CoilState = hDev->Register[LED_REGISTER_ADDRESS + 1];
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	795b      	ldrb	r3, [r3, #5]
 8000f9e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, CoilState & COIL_A);
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	2120      	movs	r1, #32
 8000fac:	481c      	ldr	r0, [pc, #112]	@ (8001020 <Write_holding_register_handler+0xb4>)
 8000fae:	f003 fc77 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, CoilState & COIL_B);
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2140      	movs	r1, #64	@ 0x40
 8000fbe:	4818      	ldr	r0, [pc, #96]	@ (8001020 <Write_holding_register_handler+0xb4>)
 8000fc0:	f003 fc6e 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X0_GPIO_Port, OUTPUT_X0_Pin, CoilState & COIL_C);
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	2140      	movs	r1, #64	@ 0x40
 8000fd0:	4814      	ldr	r0, [pc, #80]	@ (8001024 <Write_holding_register_handler+0xb8>)
 8000fd2:	f003 fc65 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X1_GPIO_Port, OUTPUT_X1_Pin, CoilState & COIL_D);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2180      	movs	r1, #128	@ 0x80
 8000fe2:	4810      	ldr	r0, [pc, #64]	@ (8001024 <Write_holding_register_handler+0xb8>)
 8000fe4:	f003 fc5c 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X2_GPIO_Port, OUTPUT_X2_Pin, CoilState & COIL_E);
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <Write_holding_register_handler+0xbc>)
 8000ff6:	f003 fc53 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X3_GPIO_Port, OUTPUT_X3_Pin, CoilState & COIL_F);
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	b2db      	uxtb	r3, r3
 8001002:	461a      	mov	r2, r3
 8001004:	2120      	movs	r1, #32
 8001006:	4808      	ldr	r0, [pc, #32]	@ (8001028 <Write_holding_register_handler+0xbc>)
 8001008:	f003 fc4a 	bl	80048a0 <HAL_GPIO_WritePin>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000398 	.word	0x20000398
 8001018:	200004a0 	.word	0x200004a0
 800101c:	20000744 	.word	0x20000744
 8001020:	40021000 	.word	0x40021000
 8001024:	40020000 	.word	0x40020000
 8001028:	40020800 	.word	0x40020800

0800102c <TurnOffAllLed>:

void TurnOffAllLed(void){
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2120      	movs	r1, #32
 8001034:	480e      	ldr	r0, [pc, #56]	@ (8001070 <TurnOffAllLed+0x44>)
 8001036:	f003 fc33 	bl	80048a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2140      	movs	r1, #64	@ 0x40
 800103e:	480c      	ldr	r0, [pc, #48]	@ (8001070 <TurnOffAllLed+0x44>)
 8001040:	f003 fc2e 	bl	80048a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_X0_GPIO_Port, OUTPUT_X0_Pin, RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2140      	movs	r1, #64	@ 0x40
 8001048:	480a      	ldr	r0, [pc, #40]	@ (8001074 <TurnOffAllLed+0x48>)
 800104a:	f003 fc29 	bl	80048a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_X1_GPIO_Port, OUTPUT_X1_Pin, RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2180      	movs	r1, #128	@ 0x80
 8001052:	4808      	ldr	r0, [pc, #32]	@ (8001074 <TurnOffAllLed+0x48>)
 8001054:	f003 fc24 	bl	80048a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_X2_GPIO_Port, OUTPUT_X2_Pin, RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2110      	movs	r1, #16
 800105c:	4806      	ldr	r0, [pc, #24]	@ (8001078 <TurnOffAllLed+0x4c>)
 800105e:	f003 fc1f 	bl	80048a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_X3_GPIO_Port, OUTPUT_X3_Pin, RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2120      	movs	r1, #32
 8001066:	4804      	ldr	r0, [pc, #16]	@ (8001078 <TurnOffAllLed+0x4c>)
 8001068:	f003 fc1a 	bl	80048a0 <HAL_GPIO_WritePin>
};
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000
 8001074:	40020000 	.word	0x40020000
 8001078:	40020800 	.word	0x40020800

0800107c <slave_behavior>:

void slave_behavior(Slave_Device* hDev){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	switch(hDev->signal){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	785b      	ldrb	r3, [r3, #1]
 8001088:	2b05      	cmp	r3, #5
 800108a:	d846      	bhi.n	800111a <slave_behavior+0x9e>
 800108c:	a201      	add	r2, pc, #4	@ (adr r2, 8001094 <slave_behavior+0x18>)
 800108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001092:	bf00      	nop
 8001094:	080010ad 	.word	0x080010ad
 8001098:	080010b5 	.word	0x080010b5
 800109c:	080010e7 	.word	0x080010e7
 80010a0:	080010fd 	.word	0x080010fd
 80010a4:	080010ef 	.word	0x080010ef
 80010a8:	0800110b 	.word	0x0800110b
	case IDLE:{
		hDev->signal = WAITTING_FOR_CMD;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	705a      	strb	r2, [r3, #1]
		break;
 80010b2:	e032      	b.n	800111a <slave_behavior+0x9e>
	}
	case WAITTING_FOR_CMD:{
		ReadData(hDev);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff17 	bl	8000ee8 <ReadData>
		if(Receive_Flag){
 80010ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <slave_behavior+0xa8>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d02a      	beq.n	8001118 <slave_behavior+0x9c>
			if(slave.Rx_buf[0] == hDev->Address){
 80010c2:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <slave_behavior+0xac>)
 80010c4:	f893 2108 	ldrb.w	r2, [r3, #264]	@ 0x108
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7d9b      	ldrb	r3, [r3, #22]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d103      	bne.n	80010d8 <slave_behavior+0x5c>
				hDev->signal = COMMAND_PARSER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2202      	movs	r2, #2
 80010d4:	705a      	strb	r2, [r3, #1]
 80010d6:	e002      	b.n	80010de <slave_behavior+0x62>
			}else{
				hDev->signal = IDLE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	705a      	strb	r2, [r3, #1]
			}
			Receive_Flag = 0;
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <slave_behavior+0xa8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
			break;
 80010e4:	e019      	b.n	800111a <slave_behavior+0x9e>
		}
		break;
	}
	case COMMAND_PARSER:{
		CommandParser_handler(hDev);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fe24 	bl	8000d34 <CommandParser_handler>
		break;
 80010ec:	e015      	b.n	800111a <slave_behavior+0x9e>
	}
	case READ_HOLDING_REGISTER_HANDLER:{
		Read_holding_register_handler(hDev);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fed0 	bl	8000e94 <Read_holding_register_handler>
		hDev->signal = IDLE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	705a      	strb	r2, [r3, #1]
		break;
 80010fa:	e00e      	b.n	800111a <slave_behavior+0x9e>
	}
	case READ_MULTIPLE_HOLDING_REGISTER_HANDLER:{
		Read_multiple_holding_register_handler(hDev);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff fe91 	bl	8000e24 <Read_multiple_holding_register_handler>
		hDev->signal = IDLE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	705a      	strb	r2, [r3, #1]
		break;
 8001108:	e007      	b.n	800111a <slave_behavior+0x9e>
	}
	case WRITE_HOLDING_REGISTER_HANDLER:{
		Write_holding_register_handler(hDev);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ff2e 	bl	8000f6c <Write_holding_register_handler>
		hDev->signal = IDLE;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	705a      	strb	r2, [r3, #1]
		break;
 8001116:	e000      	b.n	800111a <slave_behavior+0x9e>
		break;
 8001118:	bf00      	nop
	}
	}
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000397 	.word	0x20000397
 8001128:	20000398 	.word	0x20000398

0800112c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800113e:	4b3d      	ldr	r3, [pc, #244]	@ (8001234 <MX_ADC1_Init+0x108>)
 8001140:	4a3d      	ldr	r2, [pc, #244]	@ (8001238 <MX_ADC1_Init+0x10c>)
 8001142:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001144:	4b3b      	ldr	r3, [pc, #236]	@ (8001234 <MX_ADC1_Init+0x108>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800114a:	4b3a      	ldr	r3, [pc, #232]	@ (8001234 <MX_ADC1_Init+0x108>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001150:	4b38      	ldr	r3, [pc, #224]	@ (8001234 <MX_ADC1_Init+0x108>)
 8001152:	2201      	movs	r2, #1
 8001154:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001156:	4b37      	ldr	r3, [pc, #220]	@ (8001234 <MX_ADC1_Init+0x108>)
 8001158:	2200      	movs	r2, #0
 800115a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800115c:	4b35      	ldr	r3, [pc, #212]	@ (8001234 <MX_ADC1_Init+0x108>)
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001164:	4b33      	ldr	r3, [pc, #204]	@ (8001234 <MX_ADC1_Init+0x108>)
 8001166:	2200      	movs	r2, #0
 8001168:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800116a:	4b32      	ldr	r3, [pc, #200]	@ (8001234 <MX_ADC1_Init+0x108>)
 800116c:	4a33      	ldr	r2, [pc, #204]	@ (800123c <MX_ADC1_Init+0x110>)
 800116e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001170:	4b30      	ldr	r3, [pc, #192]	@ (8001234 <MX_ADC1_Init+0x108>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001176:	4b2f      	ldr	r3, [pc, #188]	@ (8001234 <MX_ADC1_Init+0x108>)
 8001178:	2205      	movs	r2, #5
 800117a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800117c:	4b2d      	ldr	r3, [pc, #180]	@ (8001234 <MX_ADC1_Init+0x108>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001184:	4b2b      	ldr	r3, [pc, #172]	@ (8001234 <MX_ADC1_Init+0x108>)
 8001186:	2201      	movs	r2, #1
 8001188:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800118a:	482a      	ldr	r0, [pc, #168]	@ (8001234 <MX_ADC1_Init+0x108>)
 800118c:	f002 f8c6 	bl	800331c <HAL_ADC_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001196:	f001 f9eb 	bl	8002570 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800119a:	2308      	movs	r3, #8
 800119c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a6:	463b      	mov	r3, r7
 80011a8:	4619      	mov	r1, r3
 80011aa:	4822      	ldr	r0, [pc, #136]	@ (8001234 <MX_ADC1_Init+0x108>)
 80011ac:	f002 fa28 	bl	8003600 <HAL_ADC_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011b6:	f001 f9db 	bl	8002570 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80011ba:	2309      	movs	r3, #9
 80011bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011be:	2302      	movs	r3, #2
 80011c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c2:	463b      	mov	r3, r7
 80011c4:	4619      	mov	r1, r3
 80011c6:	481b      	ldr	r0, [pc, #108]	@ (8001234 <MX_ADC1_Init+0x108>)
 80011c8:	f002 fa1a 	bl	8003600 <HAL_ADC_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80011d2:	f001 f9cd 	bl	8002570 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011d6:	230a      	movs	r3, #10
 80011d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80011da:	2303      	movs	r3, #3
 80011dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	4619      	mov	r1, r3
 80011e2:	4814      	ldr	r0, [pc, #80]	@ (8001234 <MX_ADC1_Init+0x108>)
 80011e4:	f002 fa0c 	bl	8003600 <HAL_ADC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80011ee:	f001 f9bf 	bl	8002570 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011f2:	230b      	movs	r3, #11
 80011f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80011f6:	2304      	movs	r3, #4
 80011f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	480d      	ldr	r0, [pc, #52]	@ (8001234 <MX_ADC1_Init+0x108>)
 8001200:	f002 f9fe 	bl	8003600 <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800120a:	f001 f9b1 	bl	8002570 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800120e:	230c      	movs	r3, #12
 8001210:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001212:	2305      	movs	r3, #5
 8001214:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	4619      	mov	r1, r3
 800121a:	4806      	ldr	r0, [pc, #24]	@ (8001234 <MX_ADC1_Init+0x108>)
 800121c:	f002 f9f0 	bl	8003600 <HAL_ADC_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001226:	f001 f9a3 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000240 	.word	0x20000240
 8001238:	40012000 	.word	0x40012000
 800123c:	0f000001 	.word	0x0f000001

08001240 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a3c      	ldr	r2, [pc, #240]	@ (8001350 <HAL_ADC_MspInit+0x110>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d171      	bne.n	8001346 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b3b      	ldr	r3, [pc, #236]	@ (8001354 <HAL_ADC_MspInit+0x114>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	4a3a      	ldr	r2, [pc, #232]	@ (8001354 <HAL_ADC_MspInit+0x114>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001270:	6453      	str	r3, [r2, #68]	@ 0x44
 8001272:	4b38      	ldr	r3, [pc, #224]	@ (8001354 <HAL_ADC_MspInit+0x114>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b34      	ldr	r3, [pc, #208]	@ (8001354 <HAL_ADC_MspInit+0x114>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a33      	ldr	r2, [pc, #204]	@ (8001354 <HAL_ADC_MspInit+0x114>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <HAL_ADC_MspInit+0x114>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b2d      	ldr	r3, [pc, #180]	@ (8001354 <HAL_ADC_MspInit+0x114>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001354 <HAL_ADC_MspInit+0x114>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <HAL_ADC_MspInit+0x114>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80012b6:	2307      	movs	r3, #7
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ba:	2303      	movs	r3, #3
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4823      	ldr	r0, [pc, #140]	@ (8001358 <HAL_ADC_MspInit+0x118>)
 80012ca:	f003 f94d 	bl	8004568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012ce:	2303      	movs	r3, #3
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d2:	2303      	movs	r3, #3
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	481e      	ldr	r0, [pc, #120]	@ (800135c <HAL_ADC_MspInit+0x11c>)
 80012e2:	f003 f941 	bl	8004568 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001360 <HAL_ADC_MspInit+0x120>)
 80012e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001364 <HAL_ADC_MspInit+0x124>)
 80012ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001360 <HAL_ADC_MspInit+0x120>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001360 <HAL_ADC_MspInit+0x120>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f8:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <HAL_ADC_MspInit+0x120>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012fe:	4b18      	ldr	r3, [pc, #96]	@ (8001360 <HAL_ADC_MspInit+0x120>)
 8001300:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001304:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001306:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <HAL_ADC_MspInit+0x120>)
 8001308:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800130c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800130e:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <HAL_ADC_MspInit+0x120>)
 8001310:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001314:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001316:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_ADC_MspInit+0x120>)
 8001318:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800131c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800131e:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <HAL_ADC_MspInit+0x120>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001324:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <HAL_ADC_MspInit+0x120>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800132a:	480d      	ldr	r0, [pc, #52]	@ (8001360 <HAL_ADC_MspInit+0x120>)
 800132c:	f002 fd1a 	bl	8003d64 <HAL_DMA_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001336:	f001 f91b 	bl	8002570 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a08      	ldr	r2, [pc, #32]	@ (8001360 <HAL_ADC_MspInit+0x120>)
 800133e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001340:	4a07      	ldr	r2, [pc, #28]	@ (8001360 <HAL_ADC_MspInit+0x120>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001346:	bf00      	nop
 8001348:	3728      	adds	r7, #40	@ 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40012000 	.word	0x40012000
 8001354:	40023800 	.word	0x40023800
 8001358:	40020800 	.word	0x40020800
 800135c:	40020400 	.word	0x40020400
 8001360:	20000288 	.word	0x20000288
 8001364:	40026410 	.word	0x40026410

08001368 <button_init>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void button_init() {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800136c:	2201      	movs	r2, #1
 800136e:	2108      	movs	r1, #8
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <button_init+0x14>)
 8001372:	f003 fa95 	bl	80048a0 <HAL_GPIO_WritePin>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40020c00 	.word	0x40020c00

08001380 <buzzer_init>:

/* Variables */
uint8_t buzzerduty_cycle = 0;

/* Functions */
void buzzer_init() {
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001384:	2100      	movs	r1, #0
 8001386:	4802      	ldr	r0, [pc, #8]	@ (8001390 <buzzer_init+0x10>)
 8001388:	f004 fa84 	bl	8005894 <HAL_TIM_PWM_Start>
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200006b4 	.word	0x200006b4

08001394 <crc16>:
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

uint16_t crc16(const uint8_t *data, uint16_t num_bytes)
{
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 80013a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013a4:	82fb      	strh	r3, [r7, #22]
    const uint8_t *ptr = data;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	613b      	str	r3, [r7, #16]

    if (ptr != NULL)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d018      	beq.n	80013e2 <crc16+0x4e>
    {
        for (uint16_t i = 0; i < num_bytes; i++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	81fb      	strh	r3, [r7, #14]
 80013b4:	e011      	b.n	80013da <crc16+0x46>
        {
            crc = (crc >> 8) ^ crc16_lookup_table[(crc ^ (uint16_t)*ptr++) & 0x00FF];
 80013b6:	8afb      	ldrh	r3, [r7, #22]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	8af9      	ldrh	r1, [r7, #22]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1c58      	adds	r0, r3, #1
 80013c2:	6138      	str	r0, [r7, #16]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	404b      	eors	r3, r1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	4909      	ldr	r1, [pc, #36]	@ (80013f0 <crc16+0x5c>)
 80013cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013d0:	4053      	eors	r3, r2
 80013d2:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < num_bytes; i++)
 80013d4:	89fb      	ldrh	r3, [r7, #14]
 80013d6:	3301      	adds	r3, #1
 80013d8:	81fb      	strh	r3, [r7, #14]
 80013da:	89fa      	ldrh	r2, [r7, #14]
 80013dc:	887b      	ldrh	r3, [r7, #2]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d3e9      	bcc.n	80013b6 <crc16+0x22>
        }
    }

    return crc;
 80013e2:	8afb      	ldrh	r3, [r7, #22]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	20000000 	.word	0x20000000

080013f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_DMA_Init+0x3c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a0b      	ldr	r2, [pc, #44]	@ (8001430 <MX_DMA_Init+0x3c>)
 8001404:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_DMA_Init+0x3c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2038      	movs	r0, #56	@ 0x38
 800141c:	f002 fc6b 	bl	8003cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001420:	2038      	movs	r0, #56	@ 0x38
 8001422:	f002 fc84 	bl	8003d2e <HAL_NVIC_EnableIRQ>

}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800

08001434 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	@ 0x38
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800144e:	463b      	mov	r3, r7
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
 800145c:	615a      	str	r2, [r3, #20]
 800145e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001460:	4b2f      	ldr	r3, [pc, #188]	@ (8001520 <MX_FSMC_Init+0xec>)
 8001462:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001466:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001468:	4b2d      	ldr	r3, [pc, #180]	@ (8001520 <MX_FSMC_Init+0xec>)
 800146a:	4a2e      	ldr	r2, [pc, #184]	@ (8001524 <MX_FSMC_Init+0xf0>)
 800146c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800146e:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <MX_FSMC_Init+0xec>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001474:	4b2a      	ldr	r3, [pc, #168]	@ (8001520 <MX_FSMC_Init+0xec>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800147a:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <MX_FSMC_Init+0xec>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001480:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <MX_FSMC_Init+0xec>)
 8001482:	2210      	movs	r2, #16
 8001484:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001486:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <MX_FSMC_Init+0xec>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800148c:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <MX_FSMC_Init+0xec>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001492:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <MX_FSMC_Init+0xec>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001498:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <MX_FSMC_Init+0xec>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800149e:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <MX_FSMC_Init+0xec>)
 80014a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80014a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <MX_FSMC_Init+0xec>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <MX_FSMC_Init+0xec>)
 80014ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <MX_FSMC_Init+0xec>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80014ba:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <MX_FSMC_Init+0xec>)
 80014bc:	2200      	movs	r2, #0
 80014be:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80014c0:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <MX_FSMC_Init+0xec>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80014c6:	230f      	movs	r3, #15
 80014c8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80014ca:	230f      	movs	r3, #15
 80014cc:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80014ce:	233c      	movs	r3, #60	@ 0x3c
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80014d6:	2310      	movs	r3, #16
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80014da:	2311      	movs	r3, #17
 80014dc:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80014de:	2300      	movs	r3, #0
 80014e0:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80014e2:	2308      	movs	r3, #8
 80014e4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80014e6:	230f      	movs	r3, #15
 80014e8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80014ea:	2309      	movs	r3, #9
 80014ec:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80014f2:	2310      	movs	r3, #16
 80014f4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80014f6:	2311      	movs	r3, #17
 80014f8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80014fe:	463a      	mov	r2, r7
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	@ (8001520 <MX_FSMC_Init+0xec>)
 8001508:	f004 f863 	bl	80055d2 <HAL_SRAM_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001512:	f001 f82d 	bl	8002570 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001516:	bf00      	nop
 8001518:	3738      	adds	r7, #56	@ 0x38
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200002e8 	.word	0x200002e8
 8001524:	a0000104 	.word	0xa0000104

08001528 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800153c:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <HAL_FSMC_MspInit+0x88>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d131      	bne.n	80015a8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <HAL_FSMC_MspInit+0x88>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <HAL_FSMC_MspInit+0x8c>)
 8001550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001552:	4a18      	ldr	r2, [pc, #96]	@ (80015b4 <HAL_FSMC_MspInit+0x8c>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6393      	str	r3, [r2, #56]	@ 0x38
 800155a:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <HAL_FSMC_MspInit+0x8c>)
 800155c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001566:	f64f 7388 	movw	r3, #65416	@ 0xff88
 800156a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001578:	230c      	movs	r3, #12
 800157a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4619      	mov	r1, r3
 8001580:	480d      	ldr	r0, [pc, #52]	@ (80015b8 <HAL_FSMC_MspInit+0x90>)
 8001582:	f002 fff1 	bl	8004568 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001586:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 800158a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001598:	230c      	movs	r3, #12
 800159a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4806      	ldr	r0, [pc, #24]	@ (80015bc <HAL_FSMC_MspInit+0x94>)
 80015a2:	f002 ffe1 	bl	8004568 <HAL_GPIO_Init>
 80015a6:	e000      	b.n	80015aa <HAL_FSMC_MspInit+0x82>
    return;
 80015a8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000338 	.word	0x20000338
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40020c00 	.word	0x40020c00

080015c0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80015c8:	f7ff ffae 	bl	8001528 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08e      	sub	sp, #56	@ 0x38
 80015d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
 80015ee:	4b76      	ldr	r3, [pc, #472]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a75      	ldr	r2, [pc, #468]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 80015f4:	f043 0310 	orr.w	r3, r3, #16
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b73      	ldr	r3, [pc, #460]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	623b      	str	r3, [r7, #32]
 8001604:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	4b6f      	ldr	r3, [pc, #444]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a6e      	ldr	r2, [pc, #440]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b6c      	ldr	r3, [pc, #432]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	4b68      	ldr	r3, [pc, #416]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a67      	ldr	r2, [pc, #412]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 800162c:	f043 0320 	orr.w	r3, r3, #32
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b65      	ldr	r3, [pc, #404]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0320 	and.w	r3, r3, #32
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	4b61      	ldr	r3, [pc, #388]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a60      	ldr	r2, [pc, #384]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 8001648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b5e      	ldr	r3, [pc, #376]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b5a      	ldr	r3, [pc, #360]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a59      	ldr	r2, [pc, #356]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b57      	ldr	r3, [pc, #348]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b53      	ldr	r3, [pc, #332]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a52      	ldr	r2, [pc, #328]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b50      	ldr	r3, [pc, #320]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b4c      	ldr	r3, [pc, #304]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a4b      	ldr	r2, [pc, #300]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 800169c:	f043 0308 	orr.w	r3, r3, #8
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b49      	ldr	r3, [pc, #292]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b45      	ldr	r3, [pc, #276]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a44      	ldr	r2, [pc, #272]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 80016b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b42      	ldr	r3, [pc, #264]	@ (80017c8 <MX_GPIO_Init+0x1f4>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2170      	movs	r1, #112	@ 0x70
 80016ce:	483f      	ldr	r0, [pc, #252]	@ (80017cc <MX_GPIO_Init+0x1f8>)
 80016d0:	f003 f8e6 	bl	80048a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|OUTPUT_X3_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f242 0120 	movw	r1, #8224	@ 0x2020
 80016da:	483d      	ldr	r0, [pc, #244]	@ (80017d0 <MX_GPIO_Init+0x1fc>)
 80016dc:	f003 f8e0 	bl	80048a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUTPUT_X0_Pin|FSMC_BLK_Pin|MODBUS_EN_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f248 1140 	movw	r1, #33088	@ 0x8140
 80016e6:	483b      	ldr	r0, [pc, #236]	@ (80017d4 <MX_GPIO_Init+0x200>)
 80016e8:	f003 f8da 	bl	80048a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2140      	movs	r1, #64	@ 0x40
 80016f0:	4839      	ldr	r0, [pc, #228]	@ (80017d8 <MX_GPIO_Init+0x204>)
 80016f2:	f003 f8d5 	bl	80048a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2108      	movs	r1, #8
 80016fa:	4838      	ldr	r0, [pc, #224]	@ (80017dc <MX_GPIO_Init+0x208>)
 80016fc:	f003 f8d0 	bl	80048a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001700:	2370      	movs	r3, #112	@ 0x70
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	482d      	ldr	r0, [pc, #180]	@ (80017cc <MX_GPIO_Init+0x1f8>)
 8001718:	f002 ff26 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|OUTPUT_X3_Pin;
 800171c:	f242 0320 	movw	r3, #8224	@ 0x2020
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	4826      	ldr	r0, [pc, #152]	@ (80017d0 <MX_GPIO_Init+0x1fc>)
 8001736:	f002 ff17 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OUTPUT_X0_Pin|FSMC_BLK_Pin|MODBUS_EN_Pin;
 800173a:	f248 1340 	movw	r3, #33088	@ 0x8140
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	4820      	ldr	r0, [pc, #128]	@ (80017d4 <MX_GPIO_Init+0x200>)
 8001754:	f002 ff08 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUTPUT_X1_Pin;
 8001758:	2380      	movs	r3, #128	@ 0x80
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUTPUT_X1_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001768:	4619      	mov	r1, r3
 800176a:	481a      	ldr	r0, [pc, #104]	@ (80017d4 <MX_GPIO_Init+0x200>)
 800176c:	f002 fefc 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUTPUT_X2_Pin;
 8001770:	2310      	movs	r3, #16
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001774:	2300      	movs	r3, #0
 8001776:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUTPUT_X2_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001780:	4619      	mov	r1, r3
 8001782:	4813      	ldr	r0, [pc, #76]	@ (80017d0 <MX_GPIO_Init+0x1fc>)
 8001784:	f002 fef0 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001788:	2340      	movs	r3, #64	@ 0x40
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179c:	4619      	mov	r1, r3
 800179e:	480e      	ldr	r0, [pc, #56]	@ (80017d8 <MX_GPIO_Init+0x204>)
 80017a0:	f002 fee2 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80017a4:	2308      	movs	r3, #8
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b8:	4619      	mov	r1, r3
 80017ba:	4808      	ldr	r0, [pc, #32]	@ (80017dc <MX_GPIO_Init+0x208>)
 80017bc:	f002 fed4 	bl	8004568 <HAL_GPIO_Init>

}
 80017c0:	bf00      	nop
 80017c2:	3738      	adds	r7, #56	@ 0x38
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40021800 	.word	0x40021800
 80017dc:	40020c00 	.word	0x40020c00

080017e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e4:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017e6:	4a13      	ldr	r2, [pc, #76]	@ (8001834 <MX_I2C1_Init+0x54>)
 80017e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017ec:	4a12      	ldr	r2, [pc, #72]	@ (8001838 <MX_I2C1_Init+0x58>)
 80017ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <MX_I2C1_Init+0x50>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <MX_I2C1_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <MX_I2C1_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <MX_I2C1_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	@ (8001830 <MX_I2C1_Init+0x50>)
 800181e:	f003 f873 	bl	8004908 <HAL_I2C_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001828:	f000 fea2 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000033c 	.word	0x2000033c
 8001834:	40005400 	.word	0x40005400
 8001838:	000186a0 	.word	0x000186a0

0800183c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	@ 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a19      	ldr	r2, [pc, #100]	@ (80018c0 <HAL_I2C_MspInit+0x84>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d12b      	bne.n	80018b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <HAL_I2C_MspInit+0x88>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a17      	ldr	r2, [pc, #92]	@ (80018c4 <HAL_I2C_MspInit+0x88>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <HAL_I2C_MspInit+0x88>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800187a:	23c0      	movs	r3, #192	@ 0xc0
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187e:	2312      	movs	r3, #18
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800188a:	2304      	movs	r3, #4
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <HAL_I2C_MspInit+0x8c>)
 8001896:	f002 fe67 	bl	8004568 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <HAL_I2C_MspInit+0x88>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	4a08      	ldr	r2, [pc, #32]	@ (80018c4 <HAL_I2C_MspInit+0x88>)
 80018a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_I2C_MspInit+0x88>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	@ 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40005400 	.word	0x40005400
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020400 	.word	0x40020400

080018cc <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 80018d6:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <LCD_WR_REG+0x1c>)
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	8013      	strh	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	600ffffe 	.word	0x600ffffe

080018ec <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 80018f6:	4a04      	ldr	r2, [pc, #16]	@ (8001908 <LCD_WR_DATA+0x1c>)
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	8053      	strh	r3, [r2, #2]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	600ffffe 	.word	0x600ffffe

0800190c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <LCD_RD_DATA+0x20>)
 8001914:	885b      	ldrh	r3, [r3, #2]
 8001916:	b29b      	uxth	r3, r3
 8001918:	80fb      	strh	r3, [r7, #6]
	return ram;
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	b29b      	uxth	r3, r3
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	600ffffe 	.word	0x600ffffe

08001930 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4604      	mov	r4, r0
 8001938:	4608      	mov	r0, r1
 800193a:	4611      	mov	r1, r2
 800193c:	461a      	mov	r2, r3
 800193e:	4623      	mov	r3, r4
 8001940:	80fb      	strh	r3, [r7, #6]
 8001942:	4603      	mov	r3, r0
 8001944:	80bb      	strh	r3, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	807b      	strh	r3, [r7, #2]
 800194a:	4613      	mov	r3, r2
 800194c:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 800194e:	202a      	movs	r0, #42	@ 0x2a
 8001950:	f7ff ffbc 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	b29b      	uxth	r3, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ffc6 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	b29b      	uxth	r3, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ffc0 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	0a1b      	lsrs	r3, r3, #8
 8001970:	b29b      	uxth	r3, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ffba 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8001978:	887b      	ldrh	r3, [r7, #2]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	b29b      	uxth	r3, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ffb4 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8001984:	202b      	movs	r0, #43	@ 0x2b
 8001986:	f7ff ffa1 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 800198a:	88bb      	ldrh	r3, [r7, #4]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	b29b      	uxth	r3, r3
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ffab 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 8001996:	88bb      	ldrh	r3, [r7, #4]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	b29b      	uxth	r3, r3
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ffa5 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 80019a2:	883b      	ldrh	r3, [r7, #0]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff9f 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 80019ae:	883b      	ldrh	r3, [r7, #0]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff99 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 80019ba:	202c      	movs	r0, #44	@ 0x2c
 80019bc:	f7ff ff86 	bl	80018cc <LCD_WR_REG>
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}

080019c8 <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <lcd_clear+0x60>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <lcd_clear+0x60>)
 80019dc:	885b      	ldrh	r3, [r3, #2]
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	2100      	movs	r1, #0
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff ffa3 	bl	8001930 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 80019ea:	2300      	movs	r3, #0
 80019ec:	81fb      	strh	r3, [r7, #14]
 80019ee:	e011      	b.n	8001a14 <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 80019f0:	2300      	movs	r3, #0
 80019f2:	81bb      	strh	r3, [r7, #12]
 80019f4:	e006      	b.n	8001a04 <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff77 	bl	80018ec <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 80019fe:	89bb      	ldrh	r3, [r7, #12]
 8001a00:	3301      	adds	r3, #1
 8001a02:	81bb      	strh	r3, [r7, #12]
 8001a04:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <lcd_clear+0x60>)
 8001a06:	885b      	ldrh	r3, [r3, #2]
 8001a08:	89ba      	ldrh	r2, [r7, #12]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d3f3      	bcc.n	80019f6 <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	3301      	adds	r3, #1
 8001a12:	81fb      	strh	r3, [r7, #14]
 8001a14:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <lcd_clear+0x60>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	89fa      	ldrh	r2, [r7, #14]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d3e8      	bcc.n	80019f0 <lcd_clear+0x28>
		}
	}
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000390 	.word	0x20000390

08001a2c <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	80fb      	strh	r3, [r7, #6]
 8001a36:	460b      	mov	r3, r1
 8001a38:	80bb      	strh	r3, [r7, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	88fa      	ldrh	r2, [r7, #6]
 8001a42:	88b9      	ldrh	r1, [r7, #4]
 8001a44:	88f8      	ldrh	r0, [r7, #6]
 8001a46:	f7ff ff73 	bl	8001930 <lcd_set_address>
	LCD_WR_DATA(color);
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff4d 	bl	80018ec <LCD_WR_DATA>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4604      	mov	r4, r0
 8001a64:	4608      	mov	r0, r1
 8001a66:	4611      	mov	r1, r2
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	80fb      	strh	r3, [r7, #6]
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80bb      	strh	r3, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	70fb      	strb	r3, [r7, #3]
 8001a76:	4613      	mov	r3, r2
 8001a78:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8001a82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a86:	085b      	lsrs	r3, r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	bf14      	ite	ne
 8001a9e:	2301      	movne	r3, #1
 8001aa0:	2300      	moveq	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	fb12 f303 	smulbb	r3, r2, r3
 8001ab2:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	3b20      	subs	r3, #32
 8001ab8:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29c      	uxth	r4, r3
 8001ac8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	88bb      	ldrh	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	88b9      	ldrh	r1, [r7, #4]
 8001ada:	88f8      	ldrh	r0, [r7, #6]
 8001adc:	4622      	mov	r2, r4
 8001ade:	f7ff ff27 	bl	8001930 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	827b      	strh	r3, [r7, #18]
 8001ae6:	e07a      	b.n	8001bde <lcd_show_char+0x182>
		if (sizey == 12)
 8001ae8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d028      	beq.n	8001b42 <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8001af0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001af4:	2b10      	cmp	r3, #16
 8001af6:	d108      	bne.n	8001b0a <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8001af8:	78fa      	ldrb	r2, [r7, #3]
 8001afa:	8a7b      	ldrh	r3, [r7, #18]
 8001afc:	493c      	ldr	r1, [pc, #240]	@ (8001bf0 <lcd_show_char+0x194>)
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	440a      	add	r2, r1
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	75fb      	strb	r3, [r7, #23]
 8001b08:	e01b      	b.n	8001b42 <lcd_show_char+0xe6>
		else if (sizey == 24)
 8001b0a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b0e:	2b18      	cmp	r3, #24
 8001b10:	d10b      	bne.n	8001b2a <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	8a79      	ldrh	r1, [r7, #18]
 8001b16:	4837      	ldr	r0, [pc, #220]	@ (8001bf4 <lcd_show_char+0x198>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	4403      	add	r3, r0
 8001b22:	440b      	add	r3, r1
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	75fb      	strb	r3, [r7, #23]
 8001b28:	e00b      	b.n	8001b42 <lcd_show_char+0xe6>
		else if (sizey == 32)
 8001b2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	d15a      	bne.n	8001be8 <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	8a7b      	ldrh	r3, [r7, #18]
 8001b36:	4930      	ldr	r1, [pc, #192]	@ (8001bf8 <lcd_show_char+0x19c>)
 8001b38:	0192      	lsls	r2, r2, #6
 8001b3a:	440a      	add	r2, r1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8001b42:	2300      	movs	r3, #0
 8001b44:	75bb      	strb	r3, [r7, #22]
 8001b46:	e044      	b.n	8001bd2 <lcd_show_char+0x176>
			if (!mode) {
 8001b48:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d120      	bne.n	8001b92 <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8001b50:	7dfa      	ldrb	r2, [r7, #23]
 8001b52:	7dbb      	ldrb	r3, [r7, #22]
 8001b54:	fa42 f303 	asr.w	r3, r2, r3
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8001b60:	883b      	ldrh	r3, [r7, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fec2 	bl	80018ec <LCD_WR_DATA>
 8001b68:	e003      	b.n	8001b72 <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8001b6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff febd 	bl	80018ec <LCD_WR_DATA>
				m++;
 8001b72:	7d7b      	ldrb	r3, [r7, #21]
 8001b74:	3301      	adds	r3, #1
 8001b76:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8001b78:	7d7b      	ldrb	r3, [r7, #21]
 8001b7a:	7bfa      	ldrb	r2, [r7, #15]
 8001b7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b80:	fb01 f202 	mul.w	r2, r1, r2
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d11f      	bne.n	8001bcc <lcd_show_char+0x170>
					m = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	757b      	strb	r3, [r7, #21]
					break;
 8001b90:	e022      	b.n	8001bd8 <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8001b92:	7dfa      	ldrb	r2, [r7, #23]
 8001b94:	7dbb      	ldrb	r3, [r7, #22]
 8001b96:	fa42 f303 	asr.w	r3, r2, r3
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8001ba2:	883a      	ldrh	r2, [r7, #0]
 8001ba4:	88b9      	ldrh	r1, [r7, #4]
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff3f 	bl	8001a2c <lcd_draw_point>
				x++;
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8001bb4:	88fa      	ldrh	r2, [r7, #6]
 8001bb6:	8a3b      	ldrh	r3, [r7, #16]
 8001bb8:	1ad2      	subs	r2, r2, r3
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d105      	bne.n	8001bcc <lcd_show_char+0x170>
					x = x0;
 8001bc0:	8a3b      	ldrh	r3, [r7, #16]
 8001bc2:	80fb      	strh	r3, [r7, #6]
					y++;
 8001bc4:	88bb      	ldrh	r3, [r7, #4]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	80bb      	strh	r3, [r7, #4]
					break;
 8001bca:	e005      	b.n	8001bd8 <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8001bcc:	7dbb      	ldrb	r3, [r7, #22]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	75bb      	strb	r3, [r7, #22]
 8001bd2:	7dbb      	ldrb	r3, [r7, #22]
 8001bd4:	2b07      	cmp	r3, #7
 8001bd6:	d9b7      	bls.n	8001b48 <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8001bd8:	8a7b      	ldrh	r3, [r7, #18]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	827b      	strh	r3, [r7, #18]
 8001bde:	8a7a      	ldrh	r2, [r7, #18]
 8001be0:	89bb      	ldrh	r3, [r7, #12]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d380      	bcc.n	8001ae8 <lcd_show_char+0x8c>
 8001be6:	e000      	b.n	8001bea <lcd_show_char+0x18e>
			return;
 8001be8:	bf00      	nop
				}
			}
		}
	}
}
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd90      	pop	{r4, r7, pc}
 8001bf0:	08007a38 	.word	0x08007a38
 8001bf4:	08008028 	.word	0x08008028
 8001bf8:	080091f8 	.word	0x080091f8

08001bfc <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	460a      	mov	r2, r1
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001c10:	e004      	b.n	8001c1c <mypow+0x20>
		result *= m;
 8001c12:	79fa      	ldrb	r2, [r7, #7]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	1e5a      	subs	r2, r3, #1
 8001c20:	71ba      	strb	r2, [r7, #6]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f5      	bne.n	8001c12 <mypow+0x16>
	return result;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b089      	sub	sp, #36	@ 0x24
 8001c38:	af04      	add	r7, sp, #16
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	4608      	mov	r0, r1
 8001c3e:	4611      	mov	r1, r2
 8001c40:	461a      	mov	r2, r3
 8001c42:	4623      	mov	r3, r4
 8001c44:	80fb      	strh	r3, [r7, #6]
 8001c46:	4603      	mov	r3, r0
 8001c48:	80bb      	strh	r3, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	807b      	strh	r3, [r7, #2]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 8001c56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c5a:	085b      	lsrs	r3, r3, #1
 8001c5c:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e059      	b.n	8001d18 <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 8001c64:	887c      	ldrh	r4, [r7, #2]
 8001c66:	787a      	ldrb	r2, [r7, #1]
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4619      	mov	r1, r3
 8001c74:	200a      	movs	r0, #10
 8001c76:	f7ff ffc1 	bl	8001bfc <mypow>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	fbb4 f1f3 	udiv	r1, r4, r3
 8001c80:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <lcd_show_int_num+0xf8>)
 8001c82:	fba3 2301 	umull	r2, r3, r3, r1
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	1aca      	subs	r2, r1, r3
 8001c92:	4613      	mov	r3, r2
 8001c94:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8001c96:	7bbb      	ldrb	r3, [r7, #14]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d121      	bne.n	8001ce0 <lcd_show_int_num+0xac>
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	787b      	ldrb	r3, [r7, #1]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	da1c      	bge.n	8001ce0 <lcd_show_int_num+0xac>
			if (temp == 0) {
 8001ca6:	7b3b      	ldrb	r3, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d117      	bne.n	8001cdc <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	7b7b      	ldrb	r3, [r7, #13]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	fb12 f303 	smulbb	r3, r2, r3
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	b298      	uxth	r0, r3
 8001cc0:	8c3a      	ldrh	r2, [r7, #32]
 8001cc2:	88b9      	ldrh	r1, [r7, #4]
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	9302      	str	r3, [sp, #8]
 8001cc8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f7ff fec1 	bl	8001a5c <lcd_show_char>
				continue;
 8001cda:	e01a      	b.n	8001d12 <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	7b7b      	ldrb	r3, [r7, #13]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	fb12 f303 	smulbb	r3, r2, r3
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b298      	uxth	r0, r3
 8001cf4:	7b3b      	ldrb	r3, [r7, #12]
 8001cf6:	3330      	adds	r3, #48	@ 0x30
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	8c3c      	ldrh	r4, [r7, #32]
 8001cfc:	88b9      	ldrh	r1, [r7, #4]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	4623      	mov	r3, r4
 8001d0e:	f7ff fea5 	bl	8001a5c <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	3301      	adds	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	787b      	ldrb	r3, [r7, #1]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d3a1      	bcc.n	8001c64 <lcd_show_int_num+0x30>
	}
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	cccccccd 	.word	0xcccccccd

08001d30 <lcd_show_float_num>:

void lcd_show_float_num(uint16_t x, uint16_t y, float num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b08b      	sub	sp, #44	@ 0x2c
 8001d34:	af04      	add	r7, sp, #16
 8001d36:	4604      	mov	r4, r0
 8001d38:	4608      	mov	r0, r1
 8001d3a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	461a      	mov	r2, r3
 8001d42:	4623      	mov	r3, r4
 8001d44:	81fb      	strh	r3, [r7, #14]
 8001d46:	4603      	mov	r3, r0
 8001d48:	81bb      	strh	r3, [r7, #12]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	71fb      	strb	r3, [r7, #7]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	80bb      	strh	r3, [r7, #4]
	uint8_t t, temp, sizex;
	uint16_t num1;
	sizex = sizey / 2;
 8001d52:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d56:	085b      	lsrs	r3, r3, #1
 8001d58:	75bb      	strb	r3, [r7, #22]
	num1 = num * 100;
 8001d5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d5e:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001e38 <lcd_show_float_num+0x108>
 8001d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d6a:	ee17 3a90 	vmov	r3, s15
 8001d6e:	82bb      	strh	r3, [r7, #20]
	for (t = 0; t < len; t++) {
 8001d70:	2300      	movs	r3, #0
 8001d72:	75fb      	strb	r3, [r7, #23]
 8001d74:	e057      	b.n	8001e26 <lcd_show_float_num+0xf6>
		temp = (num1 / mypow(10, len - t - 1)) % 10;
 8001d76:	8abc      	ldrh	r4, [r7, #20]
 8001d78:	79fa      	ldrb	r2, [r7, #7]
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	4619      	mov	r1, r3
 8001d86:	200a      	movs	r0, #10
 8001d88:	f7ff ff38 	bl	8001bfc <mypow>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	fbb4 f1f3 	udiv	r1, r4, r3
 8001d92:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <lcd_show_float_num+0x10c>)
 8001d94:	fba3 2301 	umull	r2, r3, r3, r1
 8001d98:	08da      	lsrs	r2, r3, #3
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	1aca      	subs	r2, r1, r3
 8001da4:	4613      	mov	r3, r2
 8001da6:	74fb      	strb	r3, [r7, #19]
		if (t == (len - 2)) {
 8001da8:	7dfa      	ldrb	r2, [r7, #23]
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	3b02      	subs	r3, #2
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d11d      	bne.n	8001dee <lcd_show_float_num+0xbe>
			lcd_show_char(x + (len - 2) * sizex, y, '.', fc, bc, sizey, 0);
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	3b02      	subs	r3, #2
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	7dbb      	ldrb	r3, [r7, #22]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	fb12 f303 	smulbb	r3, r2, r3
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	89fb      	ldrh	r3, [r7, #14]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b298      	uxth	r0, r3
 8001dc8:	88ba      	ldrh	r2, [r7, #4]
 8001dca:	89b9      	ldrh	r1, [r7, #12]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9302      	str	r3, [sp, #8]
 8001dd0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	222e      	movs	r2, #46	@ 0x2e
 8001dde:	f7ff fe3d 	bl	8001a5c <lcd_show_char>
			t++;
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
 8001de4:	3301      	adds	r3, #1
 8001de6:	75fb      	strb	r3, [r7, #23]
			len += 1;
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	3301      	adds	r3, #1
 8001dec:	71fb      	strb	r3, [r7, #7]
		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	7dbb      	ldrb	r3, [r7, #22]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	fb12 f303 	smulbb	r3, r2, r3
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	89fb      	ldrh	r3, [r7, #14]
 8001dfe:	4413      	add	r3, r2
 8001e00:	b298      	uxth	r0, r3
 8001e02:	7cfb      	ldrb	r3, [r7, #19]
 8001e04:	3330      	adds	r3, #48	@ 0x30
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	88bc      	ldrh	r4, [r7, #4]
 8001e0a:	89b9      	ldrh	r1, [r7, #12]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9302      	str	r3, [sp, #8]
 8001e10:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	4623      	mov	r3, r4
 8001e1c:	f7ff fe1e 	bl	8001a5c <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	3301      	adds	r3, #1
 8001e24:	75fb      	strb	r3, [r7, #23]
 8001e26:	7dfa      	ldrb	r2, [r7, #23]
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d3a3      	bcc.n	8001d76 <lcd_show_float_num+0x46>
	}
}
 8001e2e:	bf00      	nop
 8001e30:	bf00      	nop
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd90      	pop	{r4, r7, pc}
 8001e38:	42c80000 	.word	0x42c80000
 8001e3c:	cccccccd 	.word	0xcccccccd

08001e40 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <lcd_set_direction+0x44>)
 8001e5c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e60:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <lcd_set_direction+0x44>)
 8001e64:	22f0      	movs	r2, #240	@ 0xf0
 8001e66:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8001e68:	e006      	b.n	8001e78 <lcd_set_direction+0x38>
		lcddev.width = 240;
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <lcd_set_direction+0x44>)
 8001e6c:	22f0      	movs	r2, #240	@ 0xf0
 8001e6e:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001e70:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <lcd_set_direction+0x44>)
 8001e72:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e76:	805a      	strh	r2, [r3, #2]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	20000390 	.word	0x20000390

08001e88 <lcd_init>:

void lcd_init(void) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e92:	48aa      	ldr	r0, [pc, #680]	@ (800213c <lcd_init+0x2b4>)
 8001e94:	f002 fd04 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e9c:	f001 fa1a 	bl	80032d4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ea6:	48a5      	ldr	r0, [pc, #660]	@ (800213c <lcd_init+0x2b4>)
 8001ea8:	f002 fcfa 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001eac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001eb0:	f001 fa10 	bl	80032d4 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff ffc3 	bl	8001e40 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8001eba:	20d3      	movs	r0, #211	@ 0xd3
 8001ebc:	f7ff fd06 	bl	80018cc <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001ec0:	f7ff fd24 	bl	800190c <LCD_RD_DATA>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b9d      	ldr	r3, [pc, #628]	@ (8002140 <lcd_init+0x2b8>)
 8001eca:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001ecc:	f7ff fd1e 	bl	800190c <LCD_RD_DATA>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b9a      	ldr	r3, [pc, #616]	@ (8002140 <lcd_init+0x2b8>)
 8001ed6:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001ed8:	f7ff fd18 	bl	800190c <LCD_RD_DATA>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b97      	ldr	r3, [pc, #604]	@ (8002140 <lcd_init+0x2b8>)
 8001ee2:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8001ee4:	4b96      	ldr	r3, [pc, #600]	@ (8002140 <lcd_init+0x2b8>)
 8001ee6:	889b      	ldrh	r3, [r3, #4]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	4b94      	ldr	r3, [pc, #592]	@ (8002140 <lcd_init+0x2b8>)
 8001eee:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8001ef0:	f7ff fd0c 	bl	800190c <LCD_RD_DATA>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b91      	ldr	r3, [pc, #580]	@ (8002140 <lcd_init+0x2b8>)
 8001efa:	889b      	ldrh	r3, [r3, #4]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	4b8f      	ldr	r3, [pc, #572]	@ (8002140 <lcd_init+0x2b8>)
 8001f02:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001f04:	20cf      	movs	r0, #207	@ 0xcf
 8001f06:	f7ff fce1 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff fcee 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001f10:	20c1      	movs	r0, #193	@ 0xc1
 8001f12:	f7ff fceb 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001f16:	2030      	movs	r0, #48	@ 0x30
 8001f18:	f7ff fce8 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001f1c:	20ed      	movs	r0, #237	@ 0xed
 8001f1e:	f7ff fcd5 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001f22:	2064      	movs	r0, #100	@ 0x64
 8001f24:	f7ff fce2 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f7ff fcdf 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001f2e:	2012      	movs	r0, #18
 8001f30:	f7ff fcdc 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001f34:	2081      	movs	r0, #129	@ 0x81
 8001f36:	f7ff fcd9 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001f3a:	20e8      	movs	r0, #232	@ 0xe8
 8001f3c:	f7ff fcc6 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001f40:	2085      	movs	r0, #133	@ 0x85
 8001f42:	f7ff fcd3 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f46:	2010      	movs	r0, #16
 8001f48:	f7ff fcd0 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001f4c:	207a      	movs	r0, #122	@ 0x7a
 8001f4e:	f7ff fccd 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001f52:	20cb      	movs	r0, #203	@ 0xcb
 8001f54:	f7ff fcba 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001f58:	2039      	movs	r0, #57	@ 0x39
 8001f5a:	f7ff fcc7 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001f5e:	202c      	movs	r0, #44	@ 0x2c
 8001f60:	f7ff fcc4 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff fcc1 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001f6a:	2034      	movs	r0, #52	@ 0x34
 8001f6c:	f7ff fcbe 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001f70:	2002      	movs	r0, #2
 8001f72:	f7ff fcbb 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001f76:	20f7      	movs	r0, #247	@ 0xf7
 8001f78:	f7ff fca8 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001f7c:	2020      	movs	r0, #32
 8001f7e:	f7ff fcb5 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001f82:	20ea      	movs	r0, #234	@ 0xea
 8001f84:	f7ff fca2 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff fcaf 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7ff fcac 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001f94:	20c0      	movs	r0, #192	@ 0xc0
 8001f96:	f7ff fc99 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001f9a:	201b      	movs	r0, #27
 8001f9c:	f7ff fca6 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001fa0:	20c1      	movs	r0, #193	@ 0xc1
 8001fa2:	f7ff fc93 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f7ff fca0 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001fac:	20c5      	movs	r0, #197	@ 0xc5
 8001fae:	f7ff fc8d 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001fb2:	2030      	movs	r0, #48	@ 0x30
 8001fb4:	f7ff fc9a 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001fb8:	2030      	movs	r0, #48	@ 0x30
 8001fba:	f7ff fc97 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001fbe:	20c7      	movs	r0, #199	@ 0xc7
 8001fc0:	f7ff fc84 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001fc4:	20b7      	movs	r0, #183	@ 0xb7
 8001fc6:	f7ff fc91 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001fca:	2036      	movs	r0, #54	@ 0x36
 8001fcc:	f7ff fc7e 	bl	80018cc <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8001fd0:	2008      	movs	r0, #8
 8001fd2:	f7ff fc8b 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001fd6:	203a      	movs	r0, #58	@ 0x3a
 8001fd8:	f7ff fc78 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001fdc:	2055      	movs	r0, #85	@ 0x55
 8001fde:	f7ff fc85 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001fe2:	20b1      	movs	r0, #177	@ 0xb1
 8001fe4:	f7ff fc72 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff fc7f 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001fee:	201a      	movs	r0, #26
 8001ff0:	f7ff fc7c 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001ff4:	20b6      	movs	r0, #182	@ 0xb6
 8001ff6:	f7ff fc69 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001ffa:	200a      	movs	r0, #10
 8001ffc:	f7ff fc76 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002000:	20a2      	movs	r0, #162	@ 0xa2
 8002002:	f7ff fc73 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002006:	20f2      	movs	r0, #242	@ 0xf2
 8002008:	f7ff fc60 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff fc6d 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002012:	2026      	movs	r0, #38	@ 0x26
 8002014:	f7ff fc5a 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff fc67 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800201e:	20e0      	movs	r0, #224	@ 0xe0
 8002020:	f7ff fc54 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002024:	200f      	movs	r0, #15
 8002026:	f7ff fc61 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800202a:	202a      	movs	r0, #42	@ 0x2a
 800202c:	f7ff fc5e 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002030:	2028      	movs	r0, #40	@ 0x28
 8002032:	f7ff fc5b 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002036:	2008      	movs	r0, #8
 8002038:	f7ff fc58 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800203c:	200e      	movs	r0, #14
 800203e:	f7ff fc55 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002042:	2008      	movs	r0, #8
 8002044:	f7ff fc52 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002048:	2054      	movs	r0, #84	@ 0x54
 800204a:	f7ff fc4f 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800204e:	20a9      	movs	r0, #169	@ 0xa9
 8002050:	f7ff fc4c 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002054:	2043      	movs	r0, #67	@ 0x43
 8002056:	f7ff fc49 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800205a:	200a      	movs	r0, #10
 800205c:	f7ff fc46 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002060:	200f      	movs	r0, #15
 8002062:	f7ff fc43 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff fc40 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800206c:	2000      	movs	r0, #0
 800206e:	f7ff fc3d 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002072:	2000      	movs	r0, #0
 8002074:	f7ff fc3a 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002078:	2000      	movs	r0, #0
 800207a:	f7ff fc37 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800207e:	20e1      	movs	r0, #225	@ 0xe1
 8002080:	f7ff fc24 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002084:	2000      	movs	r0, #0
 8002086:	f7ff fc31 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800208a:	2015      	movs	r0, #21
 800208c:	f7ff fc2e 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002090:	2017      	movs	r0, #23
 8002092:	f7ff fc2b 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002096:	2007      	movs	r0, #7
 8002098:	f7ff fc28 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800209c:	2011      	movs	r0, #17
 800209e:	f7ff fc25 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80020a2:	2006      	movs	r0, #6
 80020a4:	f7ff fc22 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80020a8:	202b      	movs	r0, #43	@ 0x2b
 80020aa:	f7ff fc1f 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80020ae:	2056      	movs	r0, #86	@ 0x56
 80020b0:	f7ff fc1c 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80020b4:	203c      	movs	r0, #60	@ 0x3c
 80020b6:	f7ff fc19 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80020ba:	2005      	movs	r0, #5
 80020bc:	f7ff fc16 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80020c0:	2010      	movs	r0, #16
 80020c2:	f7ff fc13 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020c6:	200f      	movs	r0, #15
 80020c8:	f7ff fc10 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80020cc:	203f      	movs	r0, #63	@ 0x3f
 80020ce:	f7ff fc0d 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80020d2:	203f      	movs	r0, #63	@ 0x3f
 80020d4:	f7ff fc0a 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020d8:	200f      	movs	r0, #15
 80020da:	f7ff fc07 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80020de:	202b      	movs	r0, #43	@ 0x2b
 80020e0:	f7ff fbf4 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff fc01 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7ff fbfe 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7ff fbfb 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80020f6:	203f      	movs	r0, #63	@ 0x3f
 80020f8:	f7ff fbf8 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80020fc:	202a      	movs	r0, #42	@ 0x2a
 80020fe:	f7ff fbe5 	bl	80018cc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002102:	2000      	movs	r0, #0
 8002104:	f7ff fbf2 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002108:	2000      	movs	r0, #0
 800210a:	f7ff fbef 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800210e:	2000      	movs	r0, #0
 8002110:	f7ff fbec 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002114:	20ef      	movs	r0, #239	@ 0xef
 8002116:	f7ff fbe9 	bl	80018ec <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 800211a:	2011      	movs	r0, #17
 800211c:	f7ff fbd6 	bl	80018cc <LCD_WR_REG>
	HAL_Delay(120);
 8002120:	2078      	movs	r0, #120	@ 0x78
 8002122:	f001 f8d7 	bl	80032d4 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 8002126:	2029      	movs	r0, #41	@ 0x29
 8002128:	f7ff fbd0 	bl	80018cc <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800212c:	2201      	movs	r2, #1
 800212e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002132:	4804      	ldr	r0, [pc, #16]	@ (8002144 <lcd_init+0x2bc>)
 8002134:	f002 fbb4 	bl	80048a0 <HAL_GPIO_WritePin>
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40020800 	.word	0x40020800
 8002140:	20000390 	.word	0x20000390
 8002144:	40020000 	.word	0x40020000

08002148 <lcd_show_string>:
		}
	}
}

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b08b      	sub	sp, #44	@ 0x2c
 800214c:	af04      	add	r7, sp, #16
 800214e:	60ba      	str	r2, [r7, #8]
 8002150:	461a      	mov	r2, r3
 8002152:	4603      	mov	r3, r0
 8002154:	81fb      	strh	r3, [r7, #14]
 8002156:	460b      	mov	r3, r1
 8002158:	81bb      	strh	r3, [r7, #12]
 800215a:	4613      	mov	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 800215e:	89fb      	ldrh	r3, [r7, #14]
 8002160:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 8002166:	e048      	b.n	80021fa <lcd_show_string+0xb2>
		if (!bHz) {
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d145      	bne.n	80021fa <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 800216e:	89fa      	ldrh	r2, [r7, #14]
 8002170:	4b26      	ldr	r3, [pc, #152]	@ (800220c <lcd_show_string+0xc4>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	4619      	mov	r1, r3
 8002176:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800217a:	085b      	lsrs	r3, r3, #1
 800217c:	b2db      	uxtb	r3, r3
 800217e:	1acb      	subs	r3, r1, r3
 8002180:	429a      	cmp	r2, r3
 8002182:	dc3f      	bgt.n	8002204 <lcd_show_string+0xbc>
 8002184:	89ba      	ldrh	r2, [r7, #12]
 8002186:	4b21      	ldr	r3, [pc, #132]	@ (800220c <lcd_show_string+0xc4>)
 8002188:	885b      	ldrh	r3, [r3, #2]
 800218a:	4619      	mov	r1, r3
 800218c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002190:	1acb      	subs	r3, r1, r3
 8002192:	429a      	cmp	r2, r3
 8002194:	dc36      	bgt.n	8002204 <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b80      	cmp	r3, #128	@ 0x80
 800219c:	d902      	bls.n	80021a4 <lcd_show_string+0x5c>
				bHz = 1;
 800219e:	2301      	movs	r3, #1
 80021a0:	75fb      	strb	r3, [r7, #23]
 80021a2:	e02a      	b.n	80021fa <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b0d      	cmp	r3, #13
 80021aa:	d10b      	bne.n	80021c4 <lcd_show_string+0x7c>
					y += sizey;
 80021ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	89bb      	ldrh	r3, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	81bb      	strh	r3, [r7, #12]
					x = x0;
 80021b8:	8abb      	ldrh	r3, [r7, #20]
 80021ba:	81fb      	strh	r3, [r7, #14]
					str++;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	3301      	adds	r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	e017      	b.n	80021f4 <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	88fc      	ldrh	r4, [r7, #6]
 80021ca:	89b9      	ldrh	r1, [r7, #12]
 80021cc:	89f8      	ldrh	r0, [r7, #14]
 80021ce:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80021d2:	9302      	str	r3, [sp, #8]
 80021d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4623      	mov	r3, r4
 80021e0:	f7ff fc3c 	bl	8001a5c <lcd_show_char>
					x += sizey / 2;
 80021e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	89fb      	ldrh	r3, [r7, #14]
 80021f0:	4413      	add	r3, r2
 80021f2:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	3301      	adds	r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1b2      	bne.n	8002168 <lcd_show_string+0x20>
 8002202:	e000      	b.n	8002206 <lcd_show_string+0xbe>
				return;
 8002204:	bf00      	nop
			}
		}
	}
}
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd90      	pop	{r4, r7, pc}
 800220c:	20000390 	.word	0x20000390

08002210 <HAL_UARTEx_RxEventCallback>:
void TestADC();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]
	Modbus_CallBack(&slave, huart, Size);
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	461a      	mov	r2, r3
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4803      	ldr	r0, [pc, #12]	@ (8002230 <HAL_UARTEx_RxEventCallback+0x20>)
 8002224:	f000 fa98 	bl	8002758 <Modbus_CallBack>
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000398 	.word	0x20000398

08002234 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002244:	d101      	bne.n	800224a <HAL_TIM_PeriodElapsedCallback+0x16>
		TimerRun();
 8002246:	f000 fc0f 	bl	8002a68 <TimerRun>
	}

}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002258:	f000 ffca 	bl	80031f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800225c:	f000 f848 	bl	80022f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002260:	f7ff f9b8 	bl	80015d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002264:	f7ff f8c6 	bl	80013f4 <MX_DMA_Init>
  MX_SPI1_Init();
 8002268:	f000 fc30 	bl	8002acc <MX_SPI1_Init>
  MX_FSMC_Init();
 800226c:	f7ff f8e2 	bl	8001434 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002270:	f7ff fab6 	bl	80017e0 <MX_I2C1_Init>
  MX_TIM13_Init();
 8002274:	f000 fdd4 	bl	8002e20 <MX_TIM13_Init>
  MX_TIM2_Init();
 8002278:	f000 fd38 	bl	8002cec <MX_TIM2_Init>
  MX_ADC1_Init();
 800227c:	f7fe ff56 	bl	800112c <MX_ADC1_Init>
  MX_TIM4_Init();
 8002280:	f000 fd80 	bl	8002d84 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002284:	f000 fea6 	bl	8002fd4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002288:	f000 fece 	bl	8003028 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	system_init();
 800228c:	f000 f89a 	bl	80023c4 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	TurnOffAllLed();
 8002290:	f7fe fecc 	bl	800102c <TurnOffAllLed>
	lcd_clear(BLACK);
 8002294:	2000      	movs	r0, #0
 8002296:	f7ff fb97 	bl	80019c8 <lcd_clear>
	set_timer(10, 0);
 800229a:	2100      	movs	r1, #0
 800229c:	200a      	movs	r0, #10
 800229e:	f000 fbc9 	bl	8002a34 <set_timer>
	set_timer(1000, 1);
 80022a2:	2101      	movs	r1, #1
 80022a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022a8:	f000 fbc4 	bl	8002a34 <set_timer>


	while (1) {
//		HAL_Delay(10);
		if(timer_flag[0]){
 80022ac:	4b0d      	ldr	r3, [pc, #52]	@ (80022e4 <main+0x90>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <main+0x72>
			slave_behavior(&BKIT01);
 80022b4:	480c      	ldr	r0, [pc, #48]	@ (80022e8 <main+0x94>)
 80022b6:	f7fe fee1 	bl	800107c <slave_behavior>
			TestADC();
 80022ba:	f000 f899 	bl	80023f0 <TestADC>
			set_timer(10, 0);
 80022be:	2100      	movs	r1, #0
 80022c0:	200a      	movs	r0, #10
 80022c2:	f000 fbb7 	bl	8002a34 <set_timer>
		}
		if(timer_flag[1]){
 80022c6:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <main+0x90>)
 80022c8:	785b      	ldrb	r3, [r3, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0ee      	beq.n	80022ac <main+0x58>
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80022ce:	2110      	movs	r1, #16
 80022d0:	4806      	ldr	r0, [pc, #24]	@ (80022ec <main+0x98>)
 80022d2:	f002 fafe 	bl	80048d2 <HAL_GPIO_TogglePin>
			set_timer(1000, 1);
 80022d6:	2101      	movs	r1, #1
 80022d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022dc:	f000 fbaa 	bl	8002a34 <set_timer>
		if(timer_flag[0]){
 80022e0:	e7e4      	b.n	80022ac <main+0x58>
 80022e2:	bf00      	nop
 80022e4:	200005b0 	.word	0x200005b0
 80022e8:	20000228 	.word	0x20000228
 80022ec:	40021000 	.word	0x40021000

080022f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b094      	sub	sp, #80	@ 0x50
 80022f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022f6:	f107 0320 	add.w	r3, r7, #32
 80022fa:	2230      	movs	r2, #48	@ 0x30
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f005 fb42 	bl	8007988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002304:	f107 030c 	add.w	r3, r7, #12
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	4b28      	ldr	r3, [pc, #160]	@ (80023bc <SystemClock_Config+0xcc>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	4a27      	ldr	r2, [pc, #156]	@ (80023bc <SystemClock_Config+0xcc>)
 800231e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002322:	6413      	str	r3, [r2, #64]	@ 0x40
 8002324:	4b25      	ldr	r3, [pc, #148]	@ (80023bc <SystemClock_Config+0xcc>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002330:	2300      	movs	r3, #0
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	4b22      	ldr	r3, [pc, #136]	@ (80023c0 <SystemClock_Config+0xd0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a21      	ldr	r2, [pc, #132]	@ (80023c0 <SystemClock_Config+0xd0>)
 800233a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b1f      	ldr	r3, [pc, #124]	@ (80023c0 <SystemClock_Config+0xd0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800234c:	2302      	movs	r3, #2
 800234e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002350:	2301      	movs	r3, #1
 8002352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002354:	2310      	movs	r3, #16
 8002356:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002358:	2302      	movs	r3, #2
 800235a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800235c:	2300      	movs	r3, #0
 800235e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002360:	2308      	movs	r3, #8
 8002362:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002364:	23a8      	movs	r3, #168	@ 0xa8
 8002366:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002368:	2302      	movs	r3, #2
 800236a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800236c:	2304      	movs	r3, #4
 800236e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002370:	f107 0320 	add.w	r3, r7, #32
 8002374:	4618      	mov	r0, r3
 8002376:	f002 fc0b 	bl	8004b90 <HAL_RCC_OscConfig>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002380:	f000 f8f6 	bl	8002570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002384:	230f      	movs	r3, #15
 8002386:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002388:	2302      	movs	r3, #2
 800238a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002390:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002394:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002396:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800239a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	2105      	movs	r1, #5
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 fe6c 	bl	8005080 <HAL_RCC_ClockConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023ae:	f000 f8df 	bl	8002570 <Error_Handler>
  }
}
 80023b2:	bf00      	nop
 80023b4:	3750      	adds	r7, #80	@ 0x50
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40007000 	.word	0x40007000

080023c4 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	button_init();
 80023c8:	f7fe ffce 	bl	8001368 <button_init>
	lcd_init();
 80023cc:	f7ff fd5c 	bl	8001e88 <lcd_init>

	sensor_init();
 80023d0:	f000 fa18 	bl	8002804 <sensor_init>
	buzzer_init();
 80023d4:	f7fe ffd4 	bl	8001380 <buzzer_init>

	timer2_init();
 80023d8:	f000 fb00 	bl	80029dc <timer2_init>

	InitSlave(&BKIT01);
 80023dc:	4803      	ldr	r0, [pc, #12]	@ (80023ec <system_init+0x28>)
 80023de:	f7fe fc89 	bl	8000cf4 <InitSlave>
	InitTimer();
 80023e2:	f000 fb05 	bl	80029f0 <InitTimer>
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000228 	.word	0x20000228

080023f0 <TestADC>:
	else
		return 0;
}

uint8_t count_adc = 0;
void TestADC() {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1) % 20;
 80023f6:	4b57      	ldr	r3, [pc, #348]	@ (8002554 <TestADC+0x164>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	4b56      	ldr	r3, [pc, #344]	@ (8002558 <TestADC+0x168>)
 80023fe:	fb83 1302 	smull	r1, r3, r3, r2
 8002402:	10d9      	asrs	r1, r3, #3
 8002404:	17d3      	asrs	r3, r2, #31
 8002406:	1ac9      	subs	r1, r1, r3
 8002408:	460b      	mov	r3, r1
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	1ad1      	subs	r1, r2, r3
 8002412:	b2ca      	uxtb	r2, r1
 8002414:	4b4f      	ldr	r3, [pc, #316]	@ (8002554 <TestADC+0x164>)
 8002416:	701a      	strb	r2, [r3, #0]
	if (count_adc == 0) {
 8002418:	4b4e      	ldr	r3, [pc, #312]	@ (8002554 <TestADC+0x164>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	f040 8096 	bne.w	800254e <TestADC+0x15e>
		sensor_read();
 8002422:	f000 f9fd 	bl	8002820 <sensor_read>
		lcd_show_string(10, 100, "Voltage:", RED, BLACK, 16, 0);
 8002426:	2300      	movs	r3, #0
 8002428:	9302      	str	r3, [sp, #8]
 800242a:	2310      	movs	r3, #16
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	2300      	movs	r3, #0
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002436:	4a49      	ldr	r2, [pc, #292]	@ (800255c <TestADC+0x16c>)
 8002438:	2164      	movs	r1, #100	@ 0x64
 800243a:	200a      	movs	r0, #10
 800243c:	f7ff fe84 	bl	8002148 <lcd_show_string>
		lcd_show_float_num(130, 100, sensor_get_voltage(), 4, RED, BLACK, 16);
 8002440:	f000 fa16 	bl	8002870 <sensor_get_voltage>
 8002444:	eef0 7a40 	vmov.f32	s15, s0
 8002448:	2310      	movs	r3, #16
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	2300      	movs	r3, #0
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002454:	2204      	movs	r2, #4
 8002456:	eeb0 0a67 	vmov.f32	s0, s15
 800245a:	2164      	movs	r1, #100	@ 0x64
 800245c:	2082      	movs	r0, #130	@ 0x82
 800245e:	f7ff fc67 	bl	8001d30 <lcd_show_float_num>
		lcd_show_string(10, 120, "Current:", RED, BLACK, 16, 0);
 8002462:	2300      	movs	r3, #0
 8002464:	9302      	str	r3, [sp, #8]
 8002466:	2310      	movs	r3, #16
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	2300      	movs	r3, #0
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002472:	4a3b      	ldr	r2, [pc, #236]	@ (8002560 <TestADC+0x170>)
 8002474:	2178      	movs	r1, #120	@ 0x78
 8002476:	200a      	movs	r0, #10
 8002478:	f7ff fe66 	bl	8002148 <lcd_show_string>
		lcd_show_float_num(130, 120, sensor_get_current(), 4, RED, BLACK, 16);
 800247c:	f000 fa34 	bl	80028e8 <sensor_get_current>
 8002480:	eef0 7a40 	vmov.f32	s15, s0
 8002484:	2310      	movs	r3, #16
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	2300      	movs	r3, #0
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002490:	2204      	movs	r2, #4
 8002492:	eeb0 0a67 	vmov.f32	s0, s15
 8002496:	2178      	movs	r1, #120	@ 0x78
 8002498:	2082      	movs	r0, #130	@ 0x82
 800249a:	f7ff fc49 	bl	8001d30 <lcd_show_float_num>
		lcd_show_string(10, 140, "Light:", RED, BLACK, 16, 0);
 800249e:	2300      	movs	r3, #0
 80024a0:	9302      	str	r3, [sp, #8]
 80024a2:	2310      	movs	r3, #16
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	2300      	movs	r3, #0
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80024ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002564 <TestADC+0x174>)
 80024b0:	218c      	movs	r1, #140	@ 0x8c
 80024b2:	200a      	movs	r0, #10
 80024b4:	f7ff fe48 	bl	8002148 <lcd_show_string>
		lcd_show_int_num(130, 140, sensor_get_light(), 4, RED, BLACK, 16);
 80024b8:	f000 f9c0 	bl	800283c <sensor_get_light>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	2310      	movs	r3, #16
 80024c2:	9302      	str	r3, [sp, #8]
 80024c4:	2300      	movs	r3, #0
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2304      	movs	r3, #4
 80024d0:	218c      	movs	r1, #140	@ 0x8c
 80024d2:	2082      	movs	r0, #130	@ 0x82
 80024d4:	f7ff fbae 	bl	8001c34 <lcd_show_int_num>
		lcd_show_string(10, 160, "Potentiometer:", RED, BLACK, 16, 0);
 80024d8:	2300      	movs	r3, #0
 80024da:	9302      	str	r3, [sp, #8]
 80024dc:	2310      	movs	r3, #16
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	2300      	movs	r3, #0
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80024e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002568 <TestADC+0x178>)
 80024ea:	21a0      	movs	r1, #160	@ 0xa0
 80024ec:	200a      	movs	r0, #10
 80024ee:	f7ff fe2b 	bl	8002148 <lcd_show_string>
		lcd_show_int_num(130, 160, sensor_get_potentiometer(), 4, RED, BLACK,
 80024f2:	f000 f9af 	bl	8002854 <sensor_get_potentiometer>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	2310      	movs	r3, #16
 80024fc:	9302      	str	r3, [sp, #8]
 80024fe:	2300      	movs	r3, #0
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	2304      	movs	r3, #4
 800250a:	21a0      	movs	r1, #160	@ 0xa0
 800250c:	2082      	movs	r0, #130	@ 0x82
 800250e:	f7ff fb91 	bl	8001c34 <lcd_show_int_num>
				16);
		lcd_show_string(10, 180, "Temperature:", RED, BLACK, 16, 0);
 8002512:	2300      	movs	r3, #0
 8002514:	9302      	str	r3, [sp, #8]
 8002516:	2310      	movs	r3, #16
 8002518:	9301      	str	r3, [sp, #4]
 800251a:	2300      	movs	r3, #0
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002522:	4a12      	ldr	r2, [pc, #72]	@ (800256c <TestADC+0x17c>)
 8002524:	21b4      	movs	r1, #180	@ 0xb4
 8002526:	200a      	movs	r0, #10
 8002528:	f7ff fe0e 	bl	8002148 <lcd_show_string>
		lcd_show_float_num(130, 180, sensor_get_temperature(), 4, RED, BLACK,
 800252c:	f000 fa38 	bl	80029a0 <sensor_get_temperature>
 8002530:	eef0 7a40 	vmov.f32	s15, s0
 8002534:	2310      	movs	r3, #16
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	2300      	movs	r3, #0
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002540:	2204      	movs	r2, #4
 8002542:	eeb0 0a67 	vmov.f32	s0, s15
 8002546:	21b4      	movs	r1, #180	@ 0xb4
 8002548:	2082      	movs	r0, #130	@ 0x82
 800254a:	f7ff fbf1 	bl	8001d30 <lcd_show_float_num>
				16);
	}
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000396 	.word	0x20000396
 8002558:	66666667 	.word	0x66666667
 800255c:	080079f8 	.word	0x080079f8
 8002560:	08007a04 	.word	0x08007a04
 8002564:	08007a10 	.word	0x08007a10
 8002568:	08007a18 	.word	0x08007a18
 800256c:	08007a28 	.word	0x08007a28

08002570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002574:	b672      	cpsid	i
}
 8002576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <Error_Handler+0x8>

0800257c <Modbus_Send>:

Modbus_HandleTypeDef master;
Modbus_HandleTypeDef slave;


HAL_StatusTypeDef Modbus_Send(Modbus_HandleTypeDef* hModbus){
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,hModbus->Tx_buf,hModbus->Tx_size,HAL_MAX_DELAY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	1d59      	adds	r1, r3, #5
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	4815      	ldr	r0, [pc, #84]	@ (80025e8 <Modbus_Send+0x6c>)
 8002594:	f004 f8e4 	bl	8006760 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,SET);
 8002598:	2201      	movs	r2, #1
 800259a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800259e:	4813      	ldr	r0, [pc, #76]	@ (80025ec <Modbus_Send+0x70>)
 80025a0:	f002 f97e 	bl	80048a0 <HAL_GPIO_WritePin>
	if(HAL_UART_Transmit(hModbus->huart,hModbus->Tx_buf,hModbus->Tx_size,HAL_MAX_DELAY) != HAL_OK){
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	1d59      	adds	r1, r3, #5
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	f004 f8d3 	bl	8006760 <HAL_UART_Transmit>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <Modbus_Send+0x54>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025c6:	4809      	ldr	r0, [pc, #36]	@ (80025ec <Modbus_Send+0x70>)
 80025c8:	f002 f96a 	bl	80048a0 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e006      	b.n	80025de <Modbus_Send+0x62>
	};

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 80025d0:	2200      	movs	r2, #0
 80025d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025d6:	4805      	ldr	r0, [pc, #20]	@ (80025ec <Modbus_Send+0x70>)
 80025d8:	f002 f962 	bl	80048a0 <HAL_GPIO_WritePin>
	return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200006fc 	.word	0x200006fc
 80025ec:	40020000 	.word	0x40020000

080025f0 <Modbus_CheckData>:

unsigned char Modbus_CheckData(Modbus_HandleTypeDef* hModbus){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	uint16_t rx_crc = crc16(hModbus->Rx_buf, hModbus->Rx_size - 2);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8002604:	3b02      	subs	r3, #2
 8002606:	b29b      	uxth	r3, r3
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f7fe fec2 	bl	8001394 <crc16>
 8002610:	4603      	mov	r3, r0
 8002612:	81fb      	strh	r3, [r7, #14]
	uint16_t high_crc = hModbus->Rx_buf[hModbus->Rx_size - 1];
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800261a:	3b01      	subs	r3, #1
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	4413      	add	r3, r2
 8002620:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8002624:	81bb      	strh	r3, [r7, #12]
	uint16_t low_crc =  hModbus->Rx_buf[hModbus->Rx_size - 2];
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800262c:	3b02      	subs	r3, #2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8002636:	817b      	strh	r3, [r7, #10]
	uint16_t receive_crc = (high_crc<<8)|(low_crc);
 8002638:	89bb      	ldrh	r3, [r7, #12]
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	b21a      	sxth	r2, r3
 800263e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002642:	4313      	orrs	r3, r2
 8002644:	b21b      	sxth	r3, r3
 8002646:	813b      	strh	r3, [r7, #8]
//	if(status){
//		HAL_UART_Transmit(&huart1, (uint8_t*)"oke", 3, 100);
//	}else{
//		HAL_UART_Transmit(&huart1, (uint8_t*)"NO", 2, 100);
//	}
	return (receive_crc == rx_crc) ? 1 : 0;
 8002648:	893a      	ldrh	r2, [r7, #8]
 800264a:	89fb      	ldrh	r3, [r7, #14]
 800264c:	429a      	cmp	r2, r3
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <Modbus_Transmit_Slave>:
	hModbus->RxFlag = 0;
	HAL_Delay(5);
	return MODBUS_OKE;
}

Modbus_Status Modbus_Transmit_Slave(Modbus_HandleTypeDef* hModbus, uint8_t Address, uint8_t Function, uint8_t* Data, uint8_t Size, uint32_t Timeout){
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	72fb      	strb	r3, [r7, #11]
 800266c:	4613      	mov	r3, r2
 800266e:	72bb      	strb	r3, [r7, #10]
	hModbus->Tx_buf[0] = Address;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	7afa      	ldrb	r2, [r7, #11]
 8002674:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_buf[1] = Function;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	7aba      	ldrb	r2, [r7, #10]
 800267a:	719a      	strb	r2, [r3, #6]
	hModbus->Tx_buf[2] = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002682:	71da      	strb	r2, [r3, #7]
	int i;
	uint16_t crc = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	827b      	strh	r3, [r7, #18]
	for(i=0; i<Size; i++){
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	e00c      	b.n	80026a8 <Modbus_Transmit_Slave+0x4a>
		hModbus->Tx_buf[i+3] = *(Data + i);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	441a      	add	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	3303      	adds	r3, #3
 8002698:	7811      	ldrb	r1, [r2, #0]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4413      	add	r3, r2
 800269e:	460a      	mov	r2, r1
 80026a0:	715a      	strb	r2, [r3, #5]
	for(i=0; i<Size; i++){
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	dbed      	blt.n	800268e <Modbus_Transmit_Slave+0x30>
	}
	crc = crc16(hModbus->Tx_buf, i+3);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1d5a      	adds	r2, r3, #5
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3303      	adds	r3, #3
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4619      	mov	r1, r3
 80026c0:	4610      	mov	r0, r2
 80026c2:	f7fe fe67 	bl	8001394 <crc16>
 80026c6:	4603      	mov	r3, r0
 80026c8:	827b      	strh	r3, [r7, #18]
	hModbus->Tx_buf[i+3] = crc & 0x00FF; // LOW
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3303      	adds	r3, #3
 80026ce:	8a7a      	ldrh	r2, [r7, #18]
 80026d0:	b2d1      	uxtb	r1, r2
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4413      	add	r3, r2
 80026d6:	460a      	mov	r2, r1
 80026d8:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_buf[i+4] = crc >> 8; //HIGH
 80026da:	8a7b      	ldrh	r3, [r7, #18]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	b29a      	uxth	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3304      	adds	r3, #4
 80026e4:	b2d1      	uxtb	r1, r2
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4413      	add	r3, r2
 80026ea:	460a      	mov	r2, r1
 80026ec:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_size = Size + 5;
 80026ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3305      	adds	r3, #5
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	if(Modbus_Send(hModbus) == HAL_OK){
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f7ff ff3c 	bl	800257c <Modbus_Send>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <Modbus_Transmit_Slave+0xb0>
		return MODBUS_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e003      	b.n	8002716 <Modbus_Transmit_Slave+0xb8>
	}
	HAL_Delay(5);
 800270e:	2005      	movs	r0, #5
 8002710:	f000 fde0 	bl	80032d4 <HAL_Delay>
	return MODBUS_OKE;
 8002714:	2302      	movs	r3, #2
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <Modbus_Receive>:

Modbus_Status Modbus_Receive(Modbus_HandleTypeDef* hModbus){ //Thieu timeout
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002732:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002736:	4619      	mov	r1, r3
 8002738:	f004 f89d 	bl	8006876 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 800273c:	2200      	movs	r2, #0
 800273e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002742:	4804      	ldr	r0, [pc, #16]	@ (8002754 <Modbus_Receive+0x34>)
 8002744:	f002 f8ac 	bl	80048a0 <HAL_GPIO_WritePin>
	return MODBUS_OKE;
 8002748:	2302      	movs	r3, #2
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40020000 	.word	0x40020000

08002758 <Modbus_CallBack>:

void Modbus_CallBack(Modbus_HandleTypeDef* hModbus, UART_HandleTypeDef* huart, uint16_t Size){
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
	hModbus->Rx_size = Size;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	88fa      	ldrh	r2, [r7, #6]
 800276a:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	hModbus->RxFlag = 1;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
	Receive_Flag = Modbus_CheckData(hModbus);
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff ff3a 	bl	80025f0 <Modbus_CheckData>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <Modbus_CallBack+0x48>)
 8002782:	701a      	strb	r2, [r3, #0]
//	HAL_UART_Transmit(&huart1, hModbus->Rx_buf, hModbus->Rx_size, HAL_MAX_DELAY);
	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800278e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002792:	4619      	mov	r1, r3
 8002794:	f004 f86f 	bl	8006876 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000397 	.word	0x20000397

080027a4 <Modbus_Init>:

void Modbus_Init(Modbus_HandleTypeDef* hModbus, UART_HandleTypeDef* huart){
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
	hModbus->huart = huart;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	601a      	str	r2, [r3, #0]
	hModbus->Address = 0;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	711a      	strb	r2, [r3, #4]
	memset(hModbus->Rx_buf,0,sizeof(hModbus->Rx_buf));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80027c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f005 f8de 	bl	8007988 <memset>
	hModbus->Rx_size = 256;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027d2:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	memset(hModbus->Tx_buf,0,sizeof(hModbus->Tx_buf));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3305      	adds	r3, #5
 80027da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f005 f8d1 	bl	8007988 <memset>
	hModbus->Tx_size = 0;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	hModbus->RxFlag = 0;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
	Modbus_Receive(hModbus);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ff92 	bl	8002720 <Modbus_Receive>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <sensor_init>:

/* Variables */
uint16_t adc_receive[5];

/* Functions */
void sensor_init() {
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*) adc_receive, 5);
 8002808:	2205      	movs	r2, #5
 800280a:	4903      	ldr	r1, [pc, #12]	@ (8002818 <sensor_init+0x14>)
 800280c:	4803      	ldr	r0, [pc, #12]	@ (800281c <sensor_init+0x18>)
 800280e:	f000 fdc9 	bl	80033a4 <HAL_ADC_Start_DMA>
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200005a4 	.word	0x200005a4
 800281c:	20000240 	.word	0x20000240

08002820 <sensor_read>:

void sensor_read() {
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_receive, 5);
 8002824:	2205      	movs	r2, #5
 8002826:	4903      	ldr	r1, [pc, #12]	@ (8002834 <sensor_read+0x14>)
 8002828:	4803      	ldr	r0, [pc, #12]	@ (8002838 <sensor_read+0x18>)
 800282a:	f000 fdbb 	bl	80033a4 <HAL_ADC_Start_DMA>
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	200005a4 	.word	0x200005a4
 8002838:	20000240 	.word	0x20000240

0800283c <sensor_get_light>:

uint16_t sensor_get_light() {
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002840:	4b03      	ldr	r3, [pc, #12]	@ (8002850 <sensor_get_light+0x14>)
 8002842:	889b      	ldrh	r3, [r3, #4]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	200005a4 	.word	0x200005a4

08002854 <sensor_get_potentiometer>:

uint16_t sensor_get_potentiometer() {
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002858:	4b03      	ldr	r3, [pc, #12]	@ (8002868 <sensor_get_potentiometer+0x14>)
 800285a:	88db      	ldrh	r3, [r3, #6]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	200005a4 	.word	0x200005a4
 800286c:	00000000 	.word	0x00000000

08002870 <sensor_get_voltage>:

float sensor_get_voltage() {
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
	return ((float) adc_receive[0] * 3.3 * 12) / (4095 * 1.565);
 8002874:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <sensor_get_voltage+0x70>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	ee07 3a90 	vmov	s15, r3
 800287c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002880:	ee17 0a90 	vmov	r0, s15
 8002884:	f7fd fe04 	bl	8000490 <__aeabi_f2d>
 8002888:	a311      	add	r3, pc, #68	@ (adr r3, 80028d0 <sensor_get_voltage+0x60>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	f7fd fe57 	bl	8000540 <__aeabi_dmul>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <sensor_get_voltage+0x74>)
 80028a0:	f7fd fe4e 	bl	8000540 <__aeabi_dmul>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	a30a      	add	r3, pc, #40	@ (adr r3, 80028d8 <sensor_get_voltage+0x68>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f7fd ff6f 	bl	8000794 <__aeabi_ddiv>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f7fe f851 	bl	8000964 <__aeabi_d2f>
 80028c2:	4603      	mov	r3, r0
 80028c4:	ee07 3a90 	vmov	s15, r3
}
 80028c8:	eeb0 0a67 	vmov.f32	s0, s15
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	66666666 	.word	0x66666666
 80028d4:	400a6666 	.word	0x400a6666
 80028d8:	cccccccd 	.word	0xcccccccd
 80028dc:	40b908ac 	.word	0x40b908ac
 80028e0:	200005a4 	.word	0x200005a4
 80028e4:	40280000 	.word	0x40280000

080028e8 <sensor_get_current>:

float sensor_get_current() {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	return (((float) adc_receive[1] * 3.3 * 1000) / (4095 * 0.647) - 2.5) * 5
 80028ec:	4b28      	ldr	r3, [pc, #160]	@ (8002990 <sensor_get_current+0xa8>)
 80028ee:	885b      	ldrh	r3, [r3, #2]
 80028f0:	ee07 3a90 	vmov	s15, r3
 80028f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f8:	ee17 0a90 	vmov	r0, s15
 80028fc:	f7fd fdc8 	bl	8000490 <__aeabi_f2d>
 8002900:	a31f      	add	r3, pc, #124	@ (adr r3, 8002980 <sensor_get_current+0x98>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd fe1b 	bl	8000540 <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	4b1f      	ldr	r3, [pc, #124]	@ (8002994 <sensor_get_current+0xac>)
 8002918:	f7fd fe12 	bl	8000540 <__aeabi_dmul>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	a318      	add	r3, pc, #96	@ (adr r3, 8002988 <sensor_get_current+0xa0>)
 8002926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292a:	f7fd ff33 	bl	8000794 <__aeabi_ddiv>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <sensor_get_current+0xb0>)
 800293c:	f7fd fc48 	bl	80001d0 <__aeabi_dsub>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	4b13      	ldr	r3, [pc, #76]	@ (800299c <sensor_get_current+0xb4>)
 800294e:	f7fd fdf7 	bl	8000540 <__aeabi_dmul>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
			/ 2.5;
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	4b0e      	ldr	r3, [pc, #56]	@ (8002998 <sensor_get_current+0xb0>)
 8002960:	f7fd ff18 	bl	8000794 <__aeabi_ddiv>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4610      	mov	r0, r2
 800296a:	4619      	mov	r1, r3
 800296c:	f7fd fffa 	bl	8000964 <__aeabi_d2f>
 8002970:	4603      	mov	r3, r0
 8002972:	ee07 3a90 	vmov	s15, r3
}
 8002976:	eeb0 0a67 	vmov.f32	s0, s15
 800297a:	bd80      	pop	{r7, pc}
 800297c:	f3af 8000 	nop.w
 8002980:	66666666 	.word	0x66666666
 8002984:	400a6666 	.word	0x400a6666
 8002988:	147ae148 	.word	0x147ae148
 800298c:	40a4b2ee 	.word	0x40a4b2ee
 8002990:	200005a4 	.word	0x200005a4
 8002994:	408f4000 	.word	0x408f4000
 8002998:	40040000 	.word	0x40040000
 800299c:	40140000 	.word	0x40140000

080029a0 <sensor_get_temperature>:

float sensor_get_temperature() {
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
	return ((float) adc_receive[4] * 330) / (4095);
 80029a4:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <sensor_get_temperature+0x30>)
 80029a6:	891b      	ldrh	r3, [r3, #8]
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80029d4 <sensor_get_temperature+0x34>
 80029b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80029d8 <sensor_get_temperature+0x38>
 80029bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029c0:	eef0 7a66 	vmov.f32	s15, s13
}
 80029c4:	eeb0 0a67 	vmov.f32	s0, s15
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	200005a4 	.word	0x200005a4
 80029d4:	43a50000 	.word	0x43a50000
 80029d8:	457ff000 	.word	0x457ff000

080029dc <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80029e0:	4802      	ldr	r0, [pc, #8]	@ (80029ec <timer2_init+0x10>)
 80029e2:	f002 fe8d 	bl	8005700 <HAL_TIM_Base_Start_IT>
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000624 	.word	0x20000624

080029f0 <InitTimer>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void InitTimer(void){
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
	for(int i = 0; i < __MAX_TIM; i++){
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	e00c      	b.n	8002a16 <InitTimer+0x26>
		timer_counter[i] = 0;
 80029fc:	4a0b      	ldr	r2, [pc, #44]	@ (8002a2c <InitTimer+0x3c>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2100      	movs	r1, #0
 8002a02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timer_flag[i] = 0;
 8002a06:	4a0a      	ldr	r2, [pc, #40]	@ (8002a30 <InitTimer+0x40>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < __MAX_TIM; i++){
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3301      	adds	r3, #1
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	ddef      	ble.n	80029fc <InitTimer+0xc>
	}
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	200005b8 	.word	0x200005b8
 8002a30:	200005b0 	.word	0x200005b0

08002a34 <set_timer>:

void set_timer(uint32_t ms, uint8_t idx){
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
	timer_flag[idx] = 0;
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	4a07      	ldr	r2, [pc, #28]	@ (8002a60 <set_timer+0x2c>)
 8002a44:	2100      	movs	r1, #0
 8002a46:	54d1      	strb	r1, [r2, r3]
	timer_counter[idx] = ms;
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	4906      	ldr	r1, [pc, #24]	@ (8002a64 <set_timer+0x30>)
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	200005b0 	.word	0x200005b0
 8002a64:	200005b8 	.word	0x200005b8

08002a68 <TimerRun>:

void TimerRun(void){
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
	for(int i = 0; i < __MAX_TIM; i++){
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	e01c      	b.n	8002aae <TimerRun+0x46>
		if(timer_counter[i] > 0){
 8002a74:	4a13      	ldr	r2, [pc, #76]	@ (8002ac4 <TimerRun+0x5c>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <TimerRun+0x40>
			timer_counter[i]--;
 8002a80:	4a10      	ldr	r2, [pc, #64]	@ (8002ac4 <TimerRun+0x5c>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a88:	1e5a      	subs	r2, r3, #1
 8002a8a:	490e      	ldr	r1, [pc, #56]	@ (8002ac4 <TimerRun+0x5c>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] == 0){
 8002a92:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac4 <TimerRun+0x5c>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d104      	bne.n	8002aa8 <TimerRun+0x40>
				timer_flag[i] = 1;
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac8 <TimerRun+0x60>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < __MAX_TIM; i++){
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	dddf      	ble.n	8002a74 <TimerRun+0xc>
			}
		}
	}
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	200005b8 	.word	0x200005b8
 8002ac8:	200005b0 	.word	0x200005b0

08002acc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ad0:	4b17      	ldr	r3, [pc, #92]	@ (8002b30 <MX_SPI1_Init+0x64>)
 8002ad2:	4a18      	ldr	r2, [pc, #96]	@ (8002b34 <MX_SPI1_Init+0x68>)
 8002ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ad6:	4b16      	ldr	r3, [pc, #88]	@ (8002b30 <MX_SPI1_Init+0x64>)
 8002ad8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ade:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <MX_SPI1_Init+0x64>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ae4:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <MX_SPI1_Init+0x64>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aea:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <MX_SPI1_Init+0x64>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <MX_SPI1_Init+0x64>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <MX_SPI1_Init+0x64>)
 8002af8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002afc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002afe:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <MX_SPI1_Init+0x64>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b04:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <MX_SPI1_Init+0x64>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b0a:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <MX_SPI1_Init+0x64>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b10:	4b07      	ldr	r3, [pc, #28]	@ (8002b30 <MX_SPI1_Init+0x64>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <MX_SPI1_Init+0x64>)
 8002b18:	220a      	movs	r2, #10
 8002b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b1c:	4804      	ldr	r0, [pc, #16]	@ (8002b30 <MX_SPI1_Init+0x64>)
 8002b1e:	f002 fccf 	bl	80054c0 <HAL_SPI_Init>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b28:	f7ff fd22 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	200005cc 	.word	0x200005cc
 8002b34:	40013000 	.word	0x40013000

08002b38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08a      	sub	sp, #40	@ 0x28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a19      	ldr	r2, [pc, #100]	@ (8002bbc <HAL_SPI_MspInit+0x84>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d12b      	bne.n	8002bb2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	4b18      	ldr	r3, [pc, #96]	@ (8002bc0 <HAL_SPI_MspInit+0x88>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	4a17      	ldr	r2, [pc, #92]	@ (8002bc0 <HAL_SPI_MspInit+0x88>)
 8002b64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b6a:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <HAL_SPI_MspInit+0x88>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	4b11      	ldr	r3, [pc, #68]	@ (8002bc0 <HAL_SPI_MspInit+0x88>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	4a10      	ldr	r2, [pc, #64]	@ (8002bc0 <HAL_SPI_MspInit+0x88>)
 8002b80:	f043 0302 	orr.w	r3, r3, #2
 8002b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b86:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <HAL_SPI_MspInit+0x88>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002b92:	2338      	movs	r3, #56	@ 0x38
 8002b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ba2:	2305      	movs	r3, #5
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba6:	f107 0314 	add.w	r3, r7, #20
 8002baa:	4619      	mov	r1, r3
 8002bac:	4805      	ldr	r0, [pc, #20]	@ (8002bc4 <HAL_SPI_MspInit+0x8c>)
 8002bae:	f001 fcdb 	bl	8004568 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	3728      	adds	r7, #40	@ 0x28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40013000 	.word	0x40013000
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020400 	.word	0x40020400

08002bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	4b10      	ldr	r3, [pc, #64]	@ (8002c14 <HAL_MspInit+0x4c>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8002c14 <HAL_MspInit+0x4c>)
 8002bd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bde:	4b0d      	ldr	r3, [pc, #52]	@ (8002c14 <HAL_MspInit+0x4c>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_MspInit+0x4c>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	4a08      	ldr	r2, [pc, #32]	@ (8002c14 <HAL_MspInit+0x4c>)
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfa:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_MspInit+0x4c>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800

08002c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <NMI_Handler+0x4>

08002c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c24:	bf00      	nop
 8002c26:	e7fd      	b.n	8002c24 <HardFault_Handler+0x4>

08002c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c2c:	bf00      	nop
 8002c2e:	e7fd      	b.n	8002c2c <MemManage_Handler+0x4>

08002c30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c34:	bf00      	nop
 8002c36:	e7fd      	b.n	8002c34 <BusFault_Handler+0x4>

08002c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c3c:	bf00      	nop
 8002c3e:	e7fd      	b.n	8002c3c <UsageFault_Handler+0x4>

08002c40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c6e:	f000 fb11 	bl	8003294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c7c:	4802      	ldr	r0, [pc, #8]	@ (8002c88 <TIM2_IRQHandler+0x10>)
 8002c7e:	f002 fed1 	bl	8005a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000624 	.word	0x20000624

08002c8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c90:	4802      	ldr	r0, [pc, #8]	@ (8002c9c <USART1_IRQHandler+0x10>)
 8002c92:	f003 fe4d 	bl	8006930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200006fc 	.word	0x200006fc

08002ca0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ca4:	4802      	ldr	r0, [pc, #8]	@ (8002cb0 <USART3_IRQHandler+0x10>)
 8002ca6:	f003 fe43 	bl	8006930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000744 	.word	0x20000744

08002cb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cb8:	4802      	ldr	r0, [pc, #8]	@ (8002cc4 <DMA2_Stream0_IRQHandler+0x10>)
 8002cba:	f001 f9eb 	bl	8004094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000288 	.word	0x20000288

08002cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ccc:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <SystemInit+0x20>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd2:	4a05      	ldr	r2, [pc, #20]	@ (8002ce8 <SystemInit+0x20>)
 8002cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cf2:	f107 0308 	add.w	r3, r7, #8
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d00:	463b      	mov	r3, r7
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d08:	4b1d      	ldr	r3, [pc, #116]	@ (8002d80 <MX_TIM2_Init+0x94>)
 8002d0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002d10:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <MX_TIM2_Init+0x94>)
 8002d12:	f240 3247 	movw	r2, #839	@ 0x347
 8002d16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d18:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <MX_TIM2_Init+0x94>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002d1e:	4b18      	ldr	r3, [pc, #96]	@ (8002d80 <MX_TIM2_Init+0x94>)
 8002d20:	2263      	movs	r2, #99	@ 0x63
 8002d22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d24:	4b16      	ldr	r3, [pc, #88]	@ (8002d80 <MX_TIM2_Init+0x94>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d2a:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <MX_TIM2_Init+0x94>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d30:	4813      	ldr	r0, [pc, #76]	@ (8002d80 <MX_TIM2_Init+0x94>)
 8002d32:	f002 fc96 	bl	8005662 <HAL_TIM_Base_Init>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d3c:	f7ff fc18 	bl	8002570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	480c      	ldr	r0, [pc, #48]	@ (8002d80 <MX_TIM2_Init+0x94>)
 8002d4e:	f003 f81b 	bl	8005d88 <HAL_TIM_ConfigClockSource>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d58:	f7ff fc0a 	bl	8002570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d64:	463b      	mov	r3, r7
 8002d66:	4619      	mov	r1, r3
 8002d68:	4805      	ldr	r0, [pc, #20]	@ (8002d80 <MX_TIM2_Init+0x94>)
 8002d6a:	f003 fc19 	bl	80065a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d74:	f7ff fbfc 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d78:	bf00      	nop
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000624 	.word	0x20000624

08002d84 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d8a:	f107 0308 	add.w	r3, r7, #8
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d98:	463b      	mov	r3, r7
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002da0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e18 <MX_TIM4_Init+0x94>)
 8002da2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e1c <MX_TIM4_Init+0x98>)
 8002da4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8002da6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e18 <MX_TIM4_Init+0x94>)
 8002da8:	f240 3247 	movw	r2, #839	@ 0x347
 8002dac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dae:	4b1a      	ldr	r3, [pc, #104]	@ (8002e18 <MX_TIM4_Init+0x94>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002db4:	4b18      	ldr	r3, [pc, #96]	@ (8002e18 <MX_TIM4_Init+0x94>)
 8002db6:	2263      	movs	r2, #99	@ 0x63
 8002db8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dba:	4b17      	ldr	r3, [pc, #92]	@ (8002e18 <MX_TIM4_Init+0x94>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc0:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <MX_TIM4_Init+0x94>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002dc6:	4814      	ldr	r0, [pc, #80]	@ (8002e18 <MX_TIM4_Init+0x94>)
 8002dc8:	f002 fc4b 	bl	8005662 <HAL_TIM_Base_Init>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002dd2:	f7ff fbcd 	bl	8002570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ddc:	f107 0308 	add.w	r3, r7, #8
 8002de0:	4619      	mov	r1, r3
 8002de2:	480d      	ldr	r0, [pc, #52]	@ (8002e18 <MX_TIM4_Init+0x94>)
 8002de4:	f002 ffd0 	bl	8005d88 <HAL_TIM_ConfigClockSource>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002dee:	f7ff fbbf 	bl	8002570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002dfa:	463b      	mov	r3, r7
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4806      	ldr	r0, [pc, #24]	@ (8002e18 <MX_TIM4_Init+0x94>)
 8002e00:	f003 fbce 	bl	80065a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002e0a:	f7ff fbb1 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e0e:	bf00      	nop
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2000066c 	.word	0x2000066c
 8002e1c:	40000800 	.word	0x40000800

08002e20 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e26:	1d3b      	adds	r3, r7, #4
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
 8002e34:	615a      	str	r2, [r3, #20]
 8002e36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002e38:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb4 <MX_TIM13_Init+0x94>)
 8002e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb8 <MX_TIM13_Init+0x98>)
 8002e3c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb4 <MX_TIM13_Init+0x94>)
 8002e40:	f240 3247 	movw	r2, #839	@ 0x347
 8002e44:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e46:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb4 <MX_TIM13_Init+0x94>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002e4c:	4b19      	ldr	r3, [pc, #100]	@ (8002eb4 <MX_TIM13_Init+0x94>)
 8002e4e:	2263      	movs	r2, #99	@ 0x63
 8002e50:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e52:	4b18      	ldr	r3, [pc, #96]	@ (8002eb4 <MX_TIM13_Init+0x94>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e58:	4b16      	ldr	r3, [pc, #88]	@ (8002eb4 <MX_TIM13_Init+0x94>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002e5e:	4815      	ldr	r0, [pc, #84]	@ (8002eb4 <MX_TIM13_Init+0x94>)
 8002e60:	f002 fbff 	bl	8005662 <HAL_TIM_Base_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002e6a:	f7ff fb81 	bl	8002570 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002e6e:	4811      	ldr	r0, [pc, #68]	@ (8002eb4 <MX_TIM13_Init+0x94>)
 8002e70:	f002 fcb6 	bl	80057e0 <HAL_TIM_PWM_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002e7a:	f7ff fb79 	bl	8002570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e7e:	2360      	movs	r3, #96	@ 0x60
 8002e80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e8e:	1d3b      	adds	r3, r7, #4
 8002e90:	2200      	movs	r2, #0
 8002e92:	4619      	mov	r1, r3
 8002e94:	4807      	ldr	r0, [pc, #28]	@ (8002eb4 <MX_TIM13_Init+0x94>)
 8002e96:	f002 feb5 	bl	8005c04 <HAL_TIM_PWM_ConfigChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002ea0:	f7ff fb66 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002ea4:	4803      	ldr	r0, [pc, #12]	@ (8002eb4 <MX_TIM13_Init+0x94>)
 8002ea6:	f000 f85b 	bl	8002f60 <HAL_TIM_MspPostInit>

}
 8002eaa:	bf00      	nop
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200006b4 	.word	0x200006b4
 8002eb8:	40001c00 	.word	0x40001c00

08002ebc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ecc:	d116      	bne.n	8002efc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	4b20      	ldr	r3, [pc, #128]	@ (8002f54 <HAL_TIM_Base_MspInit+0x98>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f54 <HAL_TIM_Base_MspInit+0x98>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ede:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <HAL_TIM_Base_MspInit+0x98>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2100      	movs	r1, #0
 8002eee:	201c      	movs	r0, #28
 8002ef0:	f000 ff01 	bl	8003cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ef4:	201c      	movs	r0, #28
 8002ef6:	f000 ff1a 	bl	8003d2e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002efa:	e026      	b.n	8002f4a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM4)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a15      	ldr	r2, [pc, #84]	@ (8002f58 <HAL_TIM_Base_MspInit+0x9c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10e      	bne.n	8002f24 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	4b12      	ldr	r3, [pc, #72]	@ (8002f54 <HAL_TIM_Base_MspInit+0x98>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	4a11      	ldr	r2, [pc, #68]	@ (8002f54 <HAL_TIM_Base_MspInit+0x98>)
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f16:	4b0f      	ldr	r3, [pc, #60]	@ (8002f54 <HAL_TIM_Base_MspInit+0x98>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]
}
 8002f22:	e012      	b.n	8002f4a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0c      	ldr	r2, [pc, #48]	@ (8002f5c <HAL_TIM_Base_MspInit+0xa0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d10d      	bne.n	8002f4a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <HAL_TIM_Base_MspInit+0x98>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	4a07      	ldr	r2, [pc, #28]	@ (8002f54 <HAL_TIM_Base_MspInit+0x98>)
 8002f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f3e:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <HAL_TIM_Base_MspInit+0x98>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40000800 	.word	0x40000800
 8002f5c:	40001c00 	.word	0x40001c00

08002f60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f68:	f107 030c 	add.w	r3, r7, #12
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a12      	ldr	r2, [pc, #72]	@ (8002fc8 <HAL_TIM_MspPostInit+0x68>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d11e      	bne.n	8002fc0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	4b11      	ldr	r3, [pc, #68]	@ (8002fcc <HAL_TIM_MspPostInit+0x6c>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	4a10      	ldr	r2, [pc, #64]	@ (8002fcc <HAL_TIM_MspPostInit+0x6c>)
 8002f8c:	f043 0320 	orr.w	r3, r3, #32
 8002f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f92:	4b0e      	ldr	r3, [pc, #56]	@ (8002fcc <HAL_TIM_MspPostInit+0x6c>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002fb0:	2309      	movs	r3, #9
 8002fb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fb4:	f107 030c 	add.w	r3, r7, #12
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4805      	ldr	r0, [pc, #20]	@ (8002fd0 <HAL_TIM_MspPostInit+0x70>)
 8002fbc:	f001 fad4 	bl	8004568 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002fc0:	bf00      	nop
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40001c00 	.word	0x40001c00
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40021400 	.word	0x40021400

08002fd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fd8:	4b11      	ldr	r3, [pc, #68]	@ (8003020 <MX_USART1_UART_Init+0x4c>)
 8002fda:	4a12      	ldr	r2, [pc, #72]	@ (8003024 <MX_USART1_UART_Init+0x50>)
 8002fdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002fde:	4b10      	ldr	r3, [pc, #64]	@ (8003020 <MX_USART1_UART_Init+0x4c>)
 8002fe0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002fe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8003020 <MX_USART1_UART_Init+0x4c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fec:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <MX_USART1_UART_Init+0x4c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <MX_USART1_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ff8:	4b09      	ldr	r3, [pc, #36]	@ (8003020 <MX_USART1_UART_Init+0x4c>)
 8002ffa:	220c      	movs	r2, #12
 8002ffc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ffe:	4b08      	ldr	r3, [pc, #32]	@ (8003020 <MX_USART1_UART_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003004:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <MX_USART1_UART_Init+0x4c>)
 8003006:	2200      	movs	r2, #0
 8003008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800300a:	4805      	ldr	r0, [pc, #20]	@ (8003020 <MX_USART1_UART_Init+0x4c>)
 800300c:	f003 fb58 	bl	80066c0 <HAL_UART_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003016:	f7ff faab 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	200006fc 	.word	0x200006fc
 8003024:	40011000 	.word	0x40011000

08003028 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800302c:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <MX_USART3_UART_Init+0x4c>)
 800302e:	4a12      	ldr	r2, [pc, #72]	@ (8003078 <MX_USART3_UART_Init+0x50>)
 8003030:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003032:	4b10      	ldr	r3, [pc, #64]	@ (8003074 <MX_USART3_UART_Init+0x4c>)
 8003034:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003038:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800303a:	4b0e      	ldr	r3, [pc, #56]	@ (8003074 <MX_USART3_UART_Init+0x4c>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003040:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <MX_USART3_UART_Init+0x4c>)
 8003042:	2200      	movs	r2, #0
 8003044:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003046:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <MX_USART3_UART_Init+0x4c>)
 8003048:	2200      	movs	r2, #0
 800304a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800304c:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <MX_USART3_UART_Init+0x4c>)
 800304e:	220c      	movs	r2, #12
 8003050:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003052:	4b08      	ldr	r3, [pc, #32]	@ (8003074 <MX_USART3_UART_Init+0x4c>)
 8003054:	2200      	movs	r2, #0
 8003056:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003058:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <MX_USART3_UART_Init+0x4c>)
 800305a:	2200      	movs	r2, #0
 800305c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800305e:	4805      	ldr	r0, [pc, #20]	@ (8003074 <MX_USART3_UART_Init+0x4c>)
 8003060:	f003 fb2e 	bl	80066c0 <HAL_UART_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800306a:	f7ff fa81 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000744 	.word	0x20000744
 8003078:	40004800 	.word	0x40004800

0800307c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08c      	sub	sp, #48	@ 0x30
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003084:	f107 031c 	add.w	r3, r7, #28
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a3b      	ldr	r2, [pc, #236]	@ (8003188 <HAL_UART_MspInit+0x10c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d135      	bne.n	800310a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	4b3a      	ldr	r3, [pc, #232]	@ (800318c <HAL_UART_MspInit+0x110>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	4a39      	ldr	r2, [pc, #228]	@ (800318c <HAL_UART_MspInit+0x110>)
 80030a8:	f043 0310 	orr.w	r3, r3, #16
 80030ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ae:	4b37      	ldr	r3, [pc, #220]	@ (800318c <HAL_UART_MspInit+0x110>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	4b33      	ldr	r3, [pc, #204]	@ (800318c <HAL_UART_MspInit+0x110>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	4a32      	ldr	r2, [pc, #200]	@ (800318c <HAL_UART_MspInit+0x110>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ca:	4b30      	ldr	r3, [pc, #192]	@ (800318c <HAL_UART_MspInit+0x110>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80030da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e4:	2303      	movs	r3, #3
 80030e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030e8:	2307      	movs	r3, #7
 80030ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ec:	f107 031c 	add.w	r3, r7, #28
 80030f0:	4619      	mov	r1, r3
 80030f2:	4827      	ldr	r0, [pc, #156]	@ (8003190 <HAL_UART_MspInit+0x114>)
 80030f4:	f001 fa38 	bl	8004568 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030f8:	2200      	movs	r2, #0
 80030fa:	2100      	movs	r1, #0
 80030fc:	2025      	movs	r0, #37	@ 0x25
 80030fe:	f000 fdfa 	bl	8003cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003102:	2025      	movs	r0, #37	@ 0x25
 8003104:	f000 fe13 	bl	8003d2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003108:	e039      	b.n	800317e <HAL_UART_MspInit+0x102>
  else if(uartHandle->Instance==USART3)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a21      	ldr	r2, [pc, #132]	@ (8003194 <HAL_UART_MspInit+0x118>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d134      	bne.n	800317e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	4b1c      	ldr	r3, [pc, #112]	@ (800318c <HAL_UART_MspInit+0x110>)
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	4a1b      	ldr	r2, [pc, #108]	@ (800318c <HAL_UART_MspInit+0x110>)
 800311e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003122:	6413      	str	r3, [r2, #64]	@ 0x40
 8003124:	4b19      	ldr	r3, [pc, #100]	@ (800318c <HAL_UART_MspInit+0x110>)
 8003126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003128:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	4b15      	ldr	r3, [pc, #84]	@ (800318c <HAL_UART_MspInit+0x110>)
 8003136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003138:	4a14      	ldr	r2, [pc, #80]	@ (800318c <HAL_UART_MspInit+0x110>)
 800313a:	f043 0304 	orr.w	r3, r3, #4
 800313e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003140:	4b12      	ldr	r3, [pc, #72]	@ (800318c <HAL_UART_MspInit+0x110>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800314c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	2302      	movs	r3, #2
 8003154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315a:	2303      	movs	r3, #3
 800315c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800315e:	2307      	movs	r3, #7
 8003160:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003162:	f107 031c 	add.w	r3, r7, #28
 8003166:	4619      	mov	r1, r3
 8003168:	480b      	ldr	r0, [pc, #44]	@ (8003198 <HAL_UART_MspInit+0x11c>)
 800316a:	f001 f9fd 	bl	8004568 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800316e:	2200      	movs	r2, #0
 8003170:	2100      	movs	r1, #0
 8003172:	2027      	movs	r0, #39	@ 0x27
 8003174:	f000 fdbf 	bl	8003cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003178:	2027      	movs	r0, #39	@ 0x27
 800317a:	f000 fdd8 	bl	8003d2e <HAL_NVIC_EnableIRQ>
}
 800317e:	bf00      	nop
 8003180:	3730      	adds	r7, #48	@ 0x30
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40011000 	.word	0x40011000
 800318c:	40023800 	.word	0x40023800
 8003190:	40020000 	.word	0x40020000
 8003194:	40004800 	.word	0x40004800
 8003198:	40020800 	.word	0x40020800

0800319c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800319c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031a0:	480d      	ldr	r0, [pc, #52]	@ (80031d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031a2:	490e      	ldr	r1, [pc, #56]	@ (80031dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031a4:	4a0e      	ldr	r2, [pc, #56]	@ (80031e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031a8:	e002      	b.n	80031b0 <LoopCopyDataInit>

080031aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ae:	3304      	adds	r3, #4

080031b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031b4:	d3f9      	bcc.n	80031aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031b6:	4a0b      	ldr	r2, [pc, #44]	@ (80031e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031b8:	4c0b      	ldr	r4, [pc, #44]	@ (80031e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031bc:	e001      	b.n	80031c2 <LoopFillZerobss>

080031be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c0:	3204      	adds	r2, #4

080031c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031c4:	d3fb      	bcc.n	80031be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031c6:	f7ff fd7f 	bl	8002cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ca:	f004 fbe5 	bl	8007998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ce:	f7ff f841 	bl	8002254 <main>
  bx  lr    
 80031d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031dc:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80031e0:	0800a9e8 	.word	0x0800a9e8
  ldr r2, =_sbss
 80031e4:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80031e8:	20000790 	.word	0x20000790

080031ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031ec:	e7fe      	b.n	80031ec <ADC_IRQHandler>
	...

080031f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003230 <HAL_Init+0x40>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003230 <HAL_Init+0x40>)
 80031fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003200:	4b0b      	ldr	r3, [pc, #44]	@ (8003230 <HAL_Init+0x40>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0a      	ldr	r2, [pc, #40]	@ (8003230 <HAL_Init+0x40>)
 8003206:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800320a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800320c:	4b08      	ldr	r3, [pc, #32]	@ (8003230 <HAL_Init+0x40>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a07      	ldr	r2, [pc, #28]	@ (8003230 <HAL_Init+0x40>)
 8003212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003218:	2003      	movs	r0, #3
 800321a:	f000 fd61 	bl	8003ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800321e:	200f      	movs	r0, #15
 8003220:	f000 f808 	bl	8003234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003224:	f7ff fcd0 	bl	8002bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023c00 	.word	0x40023c00

08003234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800323c:	4b12      	ldr	r3, [pc, #72]	@ (8003288 <HAL_InitTick+0x54>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b12      	ldr	r3, [pc, #72]	@ (800328c <HAL_InitTick+0x58>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	4619      	mov	r1, r3
 8003246:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800324a:	fbb3 f3f1 	udiv	r3, r3, r1
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fd79 	bl	8003d4a <HAL_SYSTICK_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e00e      	b.n	8003280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b0f      	cmp	r3, #15
 8003266:	d80a      	bhi.n	800327e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003268:	2200      	movs	r2, #0
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	f04f 30ff 	mov.w	r0, #4294967295
 8003270:	f000 fd41 	bl	8003cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003274:	4a06      	ldr	r2, [pc, #24]	@ (8003290 <HAL_InitTick+0x5c>)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e000      	b.n	8003280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000200 	.word	0x20000200
 800328c:	20000208 	.word	0x20000208
 8003290:	20000204 	.word	0x20000204

08003294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <HAL_IncTick+0x20>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <HAL_IncTick+0x24>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4413      	add	r3, r2
 80032a4:	4a04      	ldr	r2, [pc, #16]	@ (80032b8 <HAL_IncTick+0x24>)
 80032a6:	6013      	str	r3, [r2, #0]
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000208 	.word	0x20000208
 80032b8:	2000078c 	.word	0x2000078c

080032bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return uwTick;
 80032c0:	4b03      	ldr	r3, [pc, #12]	@ (80032d0 <HAL_GetTick+0x14>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	2000078c 	.word	0x2000078c

080032d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032dc:	f7ff ffee 	bl	80032bc <HAL_GetTick>
 80032e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d005      	beq.n	80032fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003318 <HAL_Delay+0x44>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032fa:	bf00      	nop
 80032fc:	f7ff ffde 	bl	80032bc <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	429a      	cmp	r2, r3
 800330a:	d8f7      	bhi.n	80032fc <HAL_Delay+0x28>
  {
  }
}
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000208 	.word	0x20000208

0800331c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e033      	b.n	800339a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7fd ff80 	bl	8001240 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	d118      	bne.n	800338c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003362:	f023 0302 	bic.w	r3, r3, #2
 8003366:	f043 0202 	orr.w	r2, r3, #2
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fa68 	bl	8003844 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	f023 0303 	bic.w	r3, r3, #3
 8003382:	f043 0201 	orr.w	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	641a      	str	r2, [r3, #64]	@ 0x40
 800338a:	e001      	b.n	8003390 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003398:	7bfb      	ldrb	r3, [r7, #15]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_ADC_Start_DMA+0x1e>
 80033be:	2302      	movs	r3, #2
 80033c0:	e0e9      	b.n	8003596 <HAL_ADC_Start_DMA+0x1f2>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d018      	beq.n	800340a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033e8:	4b6d      	ldr	r3, [pc, #436]	@ (80035a0 <HAL_ADC_Start_DMA+0x1fc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a6d      	ldr	r2, [pc, #436]	@ (80035a4 <HAL_ADC_Start_DMA+0x200>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	0c9a      	lsrs	r2, r3, #18
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80033fc:	e002      	b.n	8003404 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	3b01      	subs	r3, #1
 8003402:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f9      	bne.n	80033fe <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003418:	d107      	bne.n	800342a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003428:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	f040 80a1 	bne.w	800357c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003464:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003478:	d106      	bne.n	8003488 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	f023 0206 	bic.w	r2, r3, #6
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	645a      	str	r2, [r3, #68]	@ 0x44
 8003486:	e002      	b.n	800348e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003496:	4b44      	ldr	r3, [pc, #272]	@ (80035a8 <HAL_ADC_Start_DMA+0x204>)
 8003498:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	4a43      	ldr	r2, [pc, #268]	@ (80035ac <HAL_ADC_Start_DMA+0x208>)
 80034a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a6:	4a42      	ldr	r2, [pc, #264]	@ (80035b0 <HAL_ADC_Start_DMA+0x20c>)
 80034a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ae:	4a41      	ldr	r2, [pc, #260]	@ (80035b4 <HAL_ADC_Start_DMA+0x210>)
 80034b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80034ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80034ca:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034da:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	334c      	adds	r3, #76	@ 0x4c
 80034e6:	4619      	mov	r1, r3
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f000 fce8 	bl	8003ec0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d12a      	bne.n	8003552 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a2d      	ldr	r2, [pc, #180]	@ (80035b8 <HAL_ADC_Start_DMA+0x214>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d015      	beq.n	8003532 <HAL_ADC_Start_DMA+0x18e>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2c      	ldr	r2, [pc, #176]	@ (80035bc <HAL_ADC_Start_DMA+0x218>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d105      	bne.n	800351c <HAL_ADC_Start_DMA+0x178>
 8003510:	4b25      	ldr	r3, [pc, #148]	@ (80035a8 <HAL_ADC_Start_DMA+0x204>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a27      	ldr	r2, [pc, #156]	@ (80035c0 <HAL_ADC_Start_DMA+0x21c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d136      	bne.n	8003594 <HAL_ADC_Start_DMA+0x1f0>
 8003526:	4b20      	ldr	r3, [pc, #128]	@ (80035a8 <HAL_ADC_Start_DMA+0x204>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b00      	cmp	r3, #0
 8003530:	d130      	bne.n	8003594 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d129      	bne.n	8003594 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	e020      	b.n	8003594 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a18      	ldr	r2, [pc, #96]	@ (80035b8 <HAL_ADC_Start_DMA+0x214>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d11b      	bne.n	8003594 <HAL_ADC_Start_DMA+0x1f0>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d114      	bne.n	8003594 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003578:	609a      	str	r2, [r3, #8]
 800357a:	e00b      	b.n	8003594 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	f043 0210 	orr.w	r2, r3, #16
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000200 	.word	0x20000200
 80035a4:	431bde83 	.word	0x431bde83
 80035a8:	40012300 	.word	0x40012300
 80035ac:	08003a3d 	.word	0x08003a3d
 80035b0:	08003af7 	.word	0x08003af7
 80035b4:	08003b13 	.word	0x08003b13
 80035b8:	40012000 	.word	0x40012000
 80035bc:	40012100 	.word	0x40012100
 80035c0:	40012200 	.word	0x40012200

080035c4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_ADC_ConfigChannel+0x1c>
 8003618:	2302      	movs	r3, #2
 800361a:	e105      	b.n	8003828 <HAL_ADC_ConfigChannel+0x228>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b09      	cmp	r3, #9
 800362a:	d925      	bls.n	8003678 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68d9      	ldr	r1, [r3, #12]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	4613      	mov	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	3b1e      	subs	r3, #30
 8003642:	2207      	movs	r2, #7
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43da      	mvns	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	400a      	ands	r2, r1
 8003650:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68d9      	ldr	r1, [r3, #12]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	4618      	mov	r0, r3
 8003664:	4603      	mov	r3, r0
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4403      	add	r3, r0
 800366a:	3b1e      	subs	r3, #30
 800366c:	409a      	lsls	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	e022      	b.n	80036be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6919      	ldr	r1, [r3, #16]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	4613      	mov	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	4413      	add	r3, r2
 800368c:	2207      	movs	r2, #7
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43da      	mvns	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	400a      	ands	r2, r1
 800369a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6919      	ldr	r1, [r3, #16]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	4618      	mov	r0, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4403      	add	r3, r0
 80036b4:	409a      	lsls	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b06      	cmp	r3, #6
 80036c4:	d824      	bhi.n	8003710 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	3b05      	subs	r3, #5
 80036d8:	221f      	movs	r2, #31
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43da      	mvns	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	400a      	ands	r2, r1
 80036e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	4618      	mov	r0, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	3b05      	subs	r3, #5
 8003702:	fa00 f203 	lsl.w	r2, r0, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	635a      	str	r2, [r3, #52]	@ 0x34
 800370e:	e04c      	b.n	80037aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b0c      	cmp	r3, #12
 8003716:	d824      	bhi.n	8003762 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	3b23      	subs	r3, #35	@ 0x23
 800372a:	221f      	movs	r2, #31
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43da      	mvns	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	400a      	ands	r2, r1
 8003738:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	b29b      	uxth	r3, r3
 8003746:	4618      	mov	r0, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	3b23      	subs	r3, #35	@ 0x23
 8003754:	fa00 f203 	lsl.w	r2, r0, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003760:	e023      	b.n	80037aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	3b41      	subs	r3, #65	@ 0x41
 8003774:	221f      	movs	r2, #31
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43da      	mvns	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	400a      	ands	r2, r1
 8003782:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	4618      	mov	r0, r3
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	3b41      	subs	r3, #65	@ 0x41
 800379e:	fa00 f203 	lsl.w	r2, r0, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037aa:	4b22      	ldr	r3, [pc, #136]	@ (8003834 <HAL_ADC_ConfigChannel+0x234>)
 80037ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a21      	ldr	r2, [pc, #132]	@ (8003838 <HAL_ADC_ConfigChannel+0x238>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d109      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x1cc>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b12      	cmp	r3, #18
 80037be:	d105      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a19      	ldr	r2, [pc, #100]	@ (8003838 <HAL_ADC_ConfigChannel+0x238>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d123      	bne.n	800381e <HAL_ADC_ConfigChannel+0x21e>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d003      	beq.n	80037e6 <HAL_ADC_ConfigChannel+0x1e6>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b11      	cmp	r3, #17
 80037e4:	d11b      	bne.n	800381e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b10      	cmp	r3, #16
 80037f8:	d111      	bne.n	800381e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037fa:	4b10      	ldr	r3, [pc, #64]	@ (800383c <HAL_ADC_ConfigChannel+0x23c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a10      	ldr	r2, [pc, #64]	@ (8003840 <HAL_ADC_ConfigChannel+0x240>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	0c9a      	lsrs	r2, r3, #18
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003810:	e002      	b.n	8003818 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3b01      	subs	r3, #1
 8003816:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f9      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40012300 	.word	0x40012300
 8003838:	40012000 	.word	0x40012000
 800383c:	20000200 	.word	0x20000200
 8003840:	431bde83 	.word	0x431bde83

08003844 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800384c:	4b79      	ldr	r3, [pc, #484]	@ (8003a34 <ADC_Init+0x1f0>)
 800384e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	431a      	orrs	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	021a      	lsls	r2, r3, #8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800389c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6899      	ldr	r1, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d6:	4a58      	ldr	r2, [pc, #352]	@ (8003a38 <ADC_Init+0x1f4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d022      	beq.n	8003922 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80038ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6899      	ldr	r1, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800390c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6899      	ldr	r1, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	e00f      	b.n	8003942 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003940:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0202 	bic.w	r2, r2, #2
 8003950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6899      	ldr	r1, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	7e1b      	ldrb	r3, [r3, #24]
 800395c:	005a      	lsls	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800397e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800398e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399a:	3b01      	subs	r3, #1
 800399c:	035a      	lsls	r2, r3, #13
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	e007      	b.n	80039b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80039c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	051a      	lsls	r2, r3, #20
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80039ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6899      	ldr	r1, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80039fa:	025a      	lsls	r2, r3, #9
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6899      	ldr	r1, [r3, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	029a      	lsls	r2, r3, #10
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	40012300 	.word	0x40012300
 8003a38:	0f000001 	.word	0x0f000001

08003a3c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d13c      	bne.n	8003ad0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d12b      	bne.n	8003ac8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d127      	bne.n	8003ac8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d006      	beq.n	8003a94 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d119      	bne.n	8003ac8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0220 	bic.w	r2, r2, #32
 8003aa2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d105      	bne.n	8003ac8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	f043 0201 	orr.w	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f7ff fd7b 	bl	80035c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ace:	e00e      	b.n	8003aee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f7ff fd85 	bl	80035ec <HAL_ADC_ErrorCallback>
}
 8003ae2:	e004      	b.n	8003aee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b02:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f7ff fd67 	bl	80035d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2240      	movs	r2, #64	@ 0x40
 8003b24:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2a:	f043 0204 	orr.w	r2, r3, #4
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f7ff fd5a 	bl	80035ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b50:	4b0c      	ldr	r3, [pc, #48]	@ (8003b84 <__NVIC_SetPriorityGrouping+0x44>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b72:	4a04      	ldr	r2, [pc, #16]	@ (8003b84 <__NVIC_SetPriorityGrouping+0x44>)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	60d3      	str	r3, [r2, #12]
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000ed00 	.word	0xe000ed00

08003b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	0a1b      	lsrs	r3, r3, #8
 8003b92:	f003 0307 	and.w	r3, r3, #7
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	db0b      	blt.n	8003bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	f003 021f 	and.w	r2, r3, #31
 8003bbc:	4907      	ldr	r1, [pc, #28]	@ (8003bdc <__NVIC_EnableIRQ+0x38>)
 8003bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	e000e100 	.word	0xe000e100

08003be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	6039      	str	r1, [r7, #0]
 8003bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	db0a      	blt.n	8003c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	490c      	ldr	r1, [pc, #48]	@ (8003c2c <__NVIC_SetPriority+0x4c>)
 8003bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfe:	0112      	lsls	r2, r2, #4
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	440b      	add	r3, r1
 8003c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c08:	e00a      	b.n	8003c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4908      	ldr	r1, [pc, #32]	@ (8003c30 <__NVIC_SetPriority+0x50>)
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	3b04      	subs	r3, #4
 8003c18:	0112      	lsls	r2, r2, #4
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	761a      	strb	r2, [r3, #24]
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	e000e100 	.word	0xe000e100
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b089      	sub	sp, #36	@ 0x24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f1c3 0307 	rsb	r3, r3, #7
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	bf28      	it	cs
 8003c52:	2304      	movcs	r3, #4
 8003c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	2b06      	cmp	r3, #6
 8003c5c:	d902      	bls.n	8003c64 <NVIC_EncodePriority+0x30>
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	3b03      	subs	r3, #3
 8003c62:	e000      	b.n	8003c66 <NVIC_EncodePriority+0x32>
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c68:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43da      	mvns	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	401a      	ands	r2, r3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	fa01 f303 	lsl.w	r3, r1, r3
 8003c86:	43d9      	mvns	r1, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c8c:	4313      	orrs	r3, r2
         );
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3724      	adds	r7, #36	@ 0x24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cac:	d301      	bcc.n	8003cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e00f      	b.n	8003cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003cdc <SysTick_Config+0x40>)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cba:	210f      	movs	r1, #15
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc0:	f7ff ff8e 	bl	8003be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cc4:	4b05      	ldr	r3, [pc, #20]	@ (8003cdc <SysTick_Config+0x40>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cca:	4b04      	ldr	r3, [pc, #16]	@ (8003cdc <SysTick_Config+0x40>)
 8003ccc:	2207      	movs	r2, #7
 8003cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	e000e010 	.word	0xe000e010

08003ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff ff29 	bl	8003b40 <__NVIC_SetPriorityGrouping>
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b086      	sub	sp, #24
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d08:	f7ff ff3e 	bl	8003b88 <__NVIC_GetPriorityGrouping>
 8003d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68b9      	ldr	r1, [r7, #8]
 8003d12:	6978      	ldr	r0, [r7, #20]
 8003d14:	f7ff ff8e 	bl	8003c34 <NVIC_EncodePriority>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff ff5d 	bl	8003be0 <__NVIC_SetPriority>
}
 8003d26:	bf00      	nop
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	4603      	mov	r3, r0
 8003d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ff31 	bl	8003ba4 <__NVIC_EnableIRQ>
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff ffa2 	bl	8003c9c <SysTick_Config>
 8003d58:	4603      	mov	r3, r0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d70:	f7ff faa4 	bl	80032bc <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e099      	b.n	8003eb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003da0:	e00f      	b.n	8003dc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003da2:	f7ff fa8b 	bl	80032bc <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b05      	cmp	r3, #5
 8003dae:	d908      	bls.n	8003dc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2203      	movs	r2, #3
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e078      	b.n	8003eb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e8      	bne.n	8003da2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4b38      	ldr	r3, [pc, #224]	@ (8003ebc <HAL_DMA_Init+0x158>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d107      	bne.n	8003e2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	4313      	orrs	r3, r2
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 0307 	bic.w	r3, r3, #7
 8003e42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d117      	bne.n	8003e86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00e      	beq.n	8003e86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fb01 	bl	8004470 <DMA_CheckFifoParam>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2240      	movs	r2, #64	@ 0x40
 8003e78:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003e82:	2301      	movs	r3, #1
 8003e84:	e016      	b.n	8003eb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fab8 	bl	8004404 <DMA_CalcBaseAndBitshift>
 8003e94:	4603      	mov	r3, r0
 8003e96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9c:	223f      	movs	r2, #63	@ 0x3f
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	f010803f 	.word	0xf010803f

08003ec0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_DMA_Start_IT+0x26>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e040      	b.n	8003f68 <HAL_DMA_Start_IT+0xa8>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d12f      	bne.n	8003f5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2202      	movs	r2, #2
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fa4a 	bl	80043a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f18:	223f      	movs	r2, #63	@ 0x3f
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0216 	orr.w	r2, r2, #22
 8003f2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0208 	orr.w	r2, r2, #8
 8003f46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	e005      	b.n	8003f66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f62:	2302      	movs	r3, #2
 8003f64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f7e:	f7ff f99d 	bl	80032bc <HAL_GetTick>
 8003f82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d008      	beq.n	8003fa2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2280      	movs	r2, #128	@ 0x80
 8003f94:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e052      	b.n	8004048 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0216 	bic.w	r2, r2, #22
 8003fb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695a      	ldr	r2, [r3, #20]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d103      	bne.n	8003fd2 <HAL_DMA_Abort+0x62>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0208 	bic.w	r2, r2, #8
 8003fe0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ff2:	e013      	b.n	800401c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ff4:	f7ff f962 	bl	80032bc <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b05      	cmp	r3, #5
 8004000:	d90c      	bls.n	800401c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2203      	movs	r2, #3
 800400c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e015      	b.n	8004048 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e4      	bne.n	8003ff4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402e:	223f      	movs	r2, #63	@ 0x3f
 8004030:	409a      	lsls	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d004      	beq.n	800406e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2280      	movs	r2, #128	@ 0x80
 8004068:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e00c      	b.n	8004088 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2205      	movs	r2, #5
 8004072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0201 	bic.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040a0:	4b8e      	ldr	r3, [pc, #568]	@ (80042dc <HAL_DMA_IRQHandler+0x248>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a8e      	ldr	r2, [pc, #568]	@ (80042e0 <HAL_DMA_IRQHandler+0x24c>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	0a9b      	lsrs	r3, r3, #10
 80040ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040be:	2208      	movs	r2, #8
 80040c0:	409a      	lsls	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01a      	beq.n	8004100 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d013      	beq.n	8004100 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0204 	bic.w	r2, r2, #4
 80040e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ec:	2208      	movs	r2, #8
 80040ee:	409a      	lsls	r2, r3
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f8:	f043 0201 	orr.w	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004104:	2201      	movs	r2, #1
 8004106:	409a      	lsls	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d012      	beq.n	8004136 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00b      	beq.n	8004136 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004122:	2201      	movs	r2, #1
 8004124:	409a      	lsls	r2, r3
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412e:	f043 0202 	orr.w	r2, r3, #2
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800413a:	2204      	movs	r2, #4
 800413c:	409a      	lsls	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4013      	ands	r3, r2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d012      	beq.n	800416c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00b      	beq.n	800416c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004158:	2204      	movs	r2, #4
 800415a:	409a      	lsls	r2, r3
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004164:	f043 0204 	orr.w	r2, r3, #4
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004170:	2210      	movs	r2, #16
 8004172:	409a      	lsls	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4013      	ands	r3, r2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d043      	beq.n	8004204 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d03c      	beq.n	8004204 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418e:	2210      	movs	r2, #16
 8004190:	409a      	lsls	r2, r3
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d018      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d108      	bne.n	80041c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d024      	beq.n	8004204 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	4798      	blx	r3
 80041c2:	e01f      	b.n	8004204 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01b      	beq.n	8004204 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	4798      	blx	r3
 80041d4:	e016      	b.n	8004204 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d107      	bne.n	80041f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0208 	bic.w	r2, r2, #8
 80041f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004208:	2220      	movs	r2, #32
 800420a:	409a      	lsls	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4013      	ands	r3, r2
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 808f 	beq.w	8004334 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8087 	beq.w	8004334 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800422a:	2220      	movs	r2, #32
 800422c:	409a      	lsls	r2, r3
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b05      	cmp	r3, #5
 800423c:	d136      	bne.n	80042ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0216 	bic.w	r2, r2, #22
 800424c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800425c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <HAL_DMA_IRQHandler+0x1da>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0208 	bic.w	r2, r2, #8
 800427c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004282:	223f      	movs	r2, #63	@ 0x3f
 8004284:	409a      	lsls	r2, r3
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d07e      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	4798      	blx	r3
        }
        return;
 80042aa:	e079      	b.n	80043a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d01d      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10d      	bne.n	80042e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d031      	beq.n	8004334 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
 80042d8:	e02c      	b.n	8004334 <HAL_DMA_IRQHandler+0x2a0>
 80042da:	bf00      	nop
 80042dc:	20000200 	.word	0x20000200
 80042e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d023      	beq.n	8004334 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
 80042f4:	e01e      	b.n	8004334 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10f      	bne.n	8004324 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0210 	bic.w	r2, r2, #16
 8004312:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004338:	2b00      	cmp	r3, #0
 800433a:	d032      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d022      	beq.n	800438e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2205      	movs	r2, #5
 800434c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0201 	bic.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	3301      	adds	r3, #1
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	429a      	cmp	r2, r3
 800436a:	d307      	bcc.n	800437c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f2      	bne.n	8004360 <HAL_DMA_IRQHandler+0x2cc>
 800437a:	e000      	b.n	800437e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800437c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4798      	blx	r3
 800439e:	e000      	b.n	80043a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80043a0:	bf00      	nop
    }
  }
}
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80043c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b40      	cmp	r3, #64	@ 0x40
 80043d4:	d108      	bne.n	80043e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043e6:	e007      	b.n	80043f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	60da      	str	r2, [r3, #12]
}
 80043f8:	bf00      	nop
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	3b10      	subs	r3, #16
 8004414:	4a14      	ldr	r2, [pc, #80]	@ (8004468 <DMA_CalcBaseAndBitshift+0x64>)
 8004416:	fba2 2303 	umull	r2, r3, r2, r3
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800441e:	4a13      	ldr	r2, [pc, #76]	@ (800446c <DMA_CalcBaseAndBitshift+0x68>)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b03      	cmp	r3, #3
 8004430:	d909      	bls.n	8004446 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800443a:	f023 0303 	bic.w	r3, r3, #3
 800443e:	1d1a      	adds	r2, r3, #4
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	659a      	str	r2, [r3, #88]	@ 0x58
 8004444:	e007      	b.n	8004456 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800444e:	f023 0303 	bic.w	r3, r3, #3
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	aaaaaaab 	.word	0xaaaaaaab
 800446c:	0800a9d0 	.word	0x0800a9d0

08004470 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d11f      	bne.n	80044ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b03      	cmp	r3, #3
 800448e:	d856      	bhi.n	800453e <DMA_CheckFifoParam+0xce>
 8004490:	a201      	add	r2, pc, #4	@ (adr r2, 8004498 <DMA_CheckFifoParam+0x28>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	080044a9 	.word	0x080044a9
 800449c:	080044bb 	.word	0x080044bb
 80044a0:	080044a9 	.word	0x080044a9
 80044a4:	0800453f 	.word	0x0800453f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d046      	beq.n	8004542 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b8:	e043      	b.n	8004542 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80044c2:	d140      	bne.n	8004546 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044c8:	e03d      	b.n	8004546 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044d2:	d121      	bne.n	8004518 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d837      	bhi.n	800454a <DMA_CheckFifoParam+0xda>
 80044da:	a201      	add	r2, pc, #4	@ (adr r2, 80044e0 <DMA_CheckFifoParam+0x70>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	080044f1 	.word	0x080044f1
 80044e4:	080044f7 	.word	0x080044f7
 80044e8:	080044f1 	.word	0x080044f1
 80044ec:	08004509 	.word	0x08004509
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      break;
 80044f4:	e030      	b.n	8004558 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d025      	beq.n	800454e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004506:	e022      	b.n	800454e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004510:	d11f      	bne.n	8004552 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004516:	e01c      	b.n	8004552 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d903      	bls.n	8004526 <DMA_CheckFifoParam+0xb6>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b03      	cmp	r3, #3
 8004522:	d003      	beq.n	800452c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004524:	e018      	b.n	8004558 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	73fb      	strb	r3, [r7, #15]
      break;
 800452a:	e015      	b.n	8004558 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004530:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00e      	beq.n	8004556 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	73fb      	strb	r3, [r7, #15]
      break;
 800453c:	e00b      	b.n	8004556 <DMA_CheckFifoParam+0xe6>
      break;
 800453e:	bf00      	nop
 8004540:	e00a      	b.n	8004558 <DMA_CheckFifoParam+0xe8>
      break;
 8004542:	bf00      	nop
 8004544:	e008      	b.n	8004558 <DMA_CheckFifoParam+0xe8>
      break;
 8004546:	bf00      	nop
 8004548:	e006      	b.n	8004558 <DMA_CheckFifoParam+0xe8>
      break;
 800454a:	bf00      	nop
 800454c:	e004      	b.n	8004558 <DMA_CheckFifoParam+0xe8>
      break;
 800454e:	bf00      	nop
 8004550:	e002      	b.n	8004558 <DMA_CheckFifoParam+0xe8>
      break;   
 8004552:	bf00      	nop
 8004554:	e000      	b.n	8004558 <DMA_CheckFifoParam+0xe8>
      break;
 8004556:	bf00      	nop
    }
  } 
  
  return status; 
 8004558:	7bfb      	ldrb	r3, [r7, #15]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop

08004568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	@ 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004572:	2300      	movs	r3, #0
 8004574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004576:	2300      	movs	r3, #0
 8004578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	e16b      	b.n	800485c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004584:	2201      	movs	r2, #1
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	429a      	cmp	r2, r3
 800459e:	f040 815a 	bne.w	8004856 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d005      	beq.n	80045ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d130      	bne.n	800461c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	2203      	movs	r2, #3
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4013      	ands	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045f0:	2201      	movs	r2, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4013      	ands	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 0201 	and.w	r2, r3, #1
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	2b03      	cmp	r3, #3
 8004626:	d017      	beq.n	8004658 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	2203      	movs	r2, #3
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d123      	bne.n	80046ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	08da      	lsrs	r2, r3, #3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3208      	adds	r2, #8
 800466c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	220f      	movs	r2, #15
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4013      	ands	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	08da      	lsrs	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3208      	adds	r2, #8
 80046a6:	69b9      	ldr	r1, [r7, #24]
 80046a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	2203      	movs	r2, #3
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0203 	and.w	r2, r3, #3
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80b4 	beq.w	8004856 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	4b60      	ldr	r3, [pc, #384]	@ (8004874 <HAL_GPIO_Init+0x30c>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f6:	4a5f      	ldr	r2, [pc, #380]	@ (8004874 <HAL_GPIO_Init+0x30c>)
 80046f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80046fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004874 <HAL_GPIO_Init+0x30c>)
 8004700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800470a:	4a5b      	ldr	r2, [pc, #364]	@ (8004878 <HAL_GPIO_Init+0x310>)
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	089b      	lsrs	r3, r3, #2
 8004710:	3302      	adds	r3, #2
 8004712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	220f      	movs	r2, #15
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43db      	mvns	r3, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4013      	ands	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a52      	ldr	r2, [pc, #328]	@ (800487c <HAL_GPIO_Init+0x314>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d02b      	beq.n	800478e <HAL_GPIO_Init+0x226>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a51      	ldr	r2, [pc, #324]	@ (8004880 <HAL_GPIO_Init+0x318>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d025      	beq.n	800478a <HAL_GPIO_Init+0x222>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a50      	ldr	r2, [pc, #320]	@ (8004884 <HAL_GPIO_Init+0x31c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d01f      	beq.n	8004786 <HAL_GPIO_Init+0x21e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a4f      	ldr	r2, [pc, #316]	@ (8004888 <HAL_GPIO_Init+0x320>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d019      	beq.n	8004782 <HAL_GPIO_Init+0x21a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a4e      	ldr	r2, [pc, #312]	@ (800488c <HAL_GPIO_Init+0x324>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_GPIO_Init+0x216>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a4d      	ldr	r2, [pc, #308]	@ (8004890 <HAL_GPIO_Init+0x328>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00d      	beq.n	800477a <HAL_GPIO_Init+0x212>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a4c      	ldr	r2, [pc, #304]	@ (8004894 <HAL_GPIO_Init+0x32c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <HAL_GPIO_Init+0x20e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a4b      	ldr	r2, [pc, #300]	@ (8004898 <HAL_GPIO_Init+0x330>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <HAL_GPIO_Init+0x20a>
 800476e:	2307      	movs	r3, #7
 8004770:	e00e      	b.n	8004790 <HAL_GPIO_Init+0x228>
 8004772:	2308      	movs	r3, #8
 8004774:	e00c      	b.n	8004790 <HAL_GPIO_Init+0x228>
 8004776:	2306      	movs	r3, #6
 8004778:	e00a      	b.n	8004790 <HAL_GPIO_Init+0x228>
 800477a:	2305      	movs	r3, #5
 800477c:	e008      	b.n	8004790 <HAL_GPIO_Init+0x228>
 800477e:	2304      	movs	r3, #4
 8004780:	e006      	b.n	8004790 <HAL_GPIO_Init+0x228>
 8004782:	2303      	movs	r3, #3
 8004784:	e004      	b.n	8004790 <HAL_GPIO_Init+0x228>
 8004786:	2302      	movs	r3, #2
 8004788:	e002      	b.n	8004790 <HAL_GPIO_Init+0x228>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_GPIO_Init+0x228>
 800478e:	2300      	movs	r3, #0
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	f002 0203 	and.w	r2, r2, #3
 8004796:	0092      	lsls	r2, r2, #2
 8004798:	4093      	lsls	r3, r2
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047a0:	4935      	ldr	r1, [pc, #212]	@ (8004878 <HAL_GPIO_Init+0x310>)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	3302      	adds	r3, #2
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047ae:	4b3b      	ldr	r3, [pc, #236]	@ (800489c <HAL_GPIO_Init+0x334>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4013      	ands	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047d2:	4a32      	ldr	r2, [pc, #200]	@ (800489c <HAL_GPIO_Init+0x334>)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047d8:	4b30      	ldr	r3, [pc, #192]	@ (800489c <HAL_GPIO_Init+0x334>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047fc:	4a27      	ldr	r2, [pc, #156]	@ (800489c <HAL_GPIO_Init+0x334>)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004802:	4b26      	ldr	r3, [pc, #152]	@ (800489c <HAL_GPIO_Init+0x334>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004826:	4a1d      	ldr	r2, [pc, #116]	@ (800489c <HAL_GPIO_Init+0x334>)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800482c:	4b1b      	ldr	r3, [pc, #108]	@ (800489c <HAL_GPIO_Init+0x334>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004850:	4a12      	ldr	r2, [pc, #72]	@ (800489c <HAL_GPIO_Init+0x334>)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	3301      	adds	r3, #1
 800485a:	61fb      	str	r3, [r7, #28]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	2b0f      	cmp	r3, #15
 8004860:	f67f ae90 	bls.w	8004584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	3724      	adds	r7, #36	@ 0x24
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	40013800 	.word	0x40013800
 800487c:	40020000 	.word	0x40020000
 8004880:	40020400 	.word	0x40020400
 8004884:	40020800 	.word	0x40020800
 8004888:	40020c00 	.word	0x40020c00
 800488c:	40021000 	.word	0x40021000
 8004890:	40021400 	.word	0x40021400
 8004894:	40021800 	.word	0x40021800
 8004898:	40021c00 	.word	0x40021c00
 800489c:	40013c00 	.word	0x40013c00

080048a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	807b      	strh	r3, [r7, #2]
 80048ac:	4613      	mov	r3, r2
 80048ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048b0:	787b      	ldrb	r3, [r7, #1]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048bc:	e003      	b.n	80048c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048be:	887b      	ldrh	r3, [r7, #2]
 80048c0:	041a      	lsls	r2, r3, #16
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	619a      	str	r2, [r3, #24]
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048e4:	887a      	ldrh	r2, [r7, #2]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4013      	ands	r3, r2
 80048ea:	041a      	lsls	r2, r3, #16
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	43d9      	mvns	r1, r3
 80048f0:	887b      	ldrh	r3, [r7, #2]
 80048f2:	400b      	ands	r3, r1
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	619a      	str	r2, [r3, #24]
}
 80048fa:	bf00      	nop
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e12b      	b.n	8004b72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fc ff84 	bl	800183c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2224      	movs	r2, #36	@ 0x24
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0201 	bic.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800495a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800496a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800496c:	f000 fd80 	bl	8005470 <HAL_RCC_GetPCLK1Freq>
 8004970:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4a81      	ldr	r2, [pc, #516]	@ (8004b7c <HAL_I2C_Init+0x274>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d807      	bhi.n	800498c <HAL_I2C_Init+0x84>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4a80      	ldr	r2, [pc, #512]	@ (8004b80 <HAL_I2C_Init+0x278>)
 8004980:	4293      	cmp	r3, r2
 8004982:	bf94      	ite	ls
 8004984:	2301      	movls	r3, #1
 8004986:	2300      	movhi	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	e006      	b.n	800499a <HAL_I2C_Init+0x92>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a7d      	ldr	r2, [pc, #500]	@ (8004b84 <HAL_I2C_Init+0x27c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	bf94      	ite	ls
 8004994:	2301      	movls	r3, #1
 8004996:	2300      	movhi	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e0e7      	b.n	8004b72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4a78      	ldr	r2, [pc, #480]	@ (8004b88 <HAL_I2C_Init+0x280>)
 80049a6:	fba2 2303 	umull	r2, r3, r2, r3
 80049aa:	0c9b      	lsrs	r3, r3, #18
 80049ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	4a6a      	ldr	r2, [pc, #424]	@ (8004b7c <HAL_I2C_Init+0x274>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d802      	bhi.n	80049dc <HAL_I2C_Init+0xd4>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	3301      	adds	r3, #1
 80049da:	e009      	b.n	80049f0 <HAL_I2C_Init+0xe8>
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80049e2:	fb02 f303 	mul.w	r3, r2, r3
 80049e6:	4a69      	ldr	r2, [pc, #420]	@ (8004b8c <HAL_I2C_Init+0x284>)
 80049e8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ec:	099b      	lsrs	r3, r3, #6
 80049ee:	3301      	adds	r3, #1
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	430b      	orrs	r3, r1
 80049f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	495c      	ldr	r1, [pc, #368]	@ (8004b7c <HAL_I2C_Init+0x274>)
 8004a0c:	428b      	cmp	r3, r1
 8004a0e:	d819      	bhi.n	8004a44 <HAL_I2C_Init+0x13c>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	1e59      	subs	r1, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a1e:	1c59      	adds	r1, r3, #1
 8004a20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a24:	400b      	ands	r3, r1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <HAL_I2C_Init+0x138>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1e59      	subs	r1, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a3e:	e051      	b.n	8004ae4 <HAL_I2C_Init+0x1dc>
 8004a40:	2304      	movs	r3, #4
 8004a42:	e04f      	b.n	8004ae4 <HAL_I2C_Init+0x1dc>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d111      	bne.n	8004a70 <HAL_I2C_Init+0x168>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	1e58      	subs	r0, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6859      	ldr	r1, [r3, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	440b      	add	r3, r1
 8004a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a5e:	3301      	adds	r3, #1
 8004a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	bf0c      	ite	eq
 8004a68:	2301      	moveq	r3, #1
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e012      	b.n	8004a96 <HAL_I2C_Init+0x18e>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1e58      	subs	r0, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6859      	ldr	r1, [r3, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	0099      	lsls	r1, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a86:	3301      	adds	r3, #1
 8004a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	bf0c      	ite	eq
 8004a90:	2301      	moveq	r3, #1
 8004a92:	2300      	movne	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_I2C_Init+0x196>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e022      	b.n	8004ae4 <HAL_I2C_Init+0x1dc>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10e      	bne.n	8004ac4 <HAL_I2C_Init+0x1bc>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1e58      	subs	r0, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6859      	ldr	r1, [r3, #4]
 8004aae:	460b      	mov	r3, r1
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	440b      	add	r3, r1
 8004ab4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ab8:	3301      	adds	r3, #1
 8004aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ac2:	e00f      	b.n	8004ae4 <HAL_I2C_Init+0x1dc>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	1e58      	subs	r0, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6859      	ldr	r1, [r3, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	0099      	lsls	r1, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ada:	3301      	adds	r3, #1
 8004adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	6809      	ldr	r1, [r1, #0]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69da      	ldr	r2, [r3, #28]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6911      	ldr	r1, [r2, #16]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68d2      	ldr	r2, [r2, #12]
 8004b1e:	4311      	orrs	r1, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	430b      	orrs	r3, r1
 8004b26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695a      	ldr	r2, [r3, #20]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	000186a0 	.word	0x000186a0
 8004b80:	001e847f 	.word	0x001e847f
 8004b84:	003d08ff 	.word	0x003d08ff
 8004b88:	431bde83 	.word	0x431bde83
 8004b8c:	10624dd3 	.word	0x10624dd3

08004b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e267      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d075      	beq.n	8004c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bae:	4b88      	ldr	r3, [pc, #544]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bba:	4b85      	ldr	r3, [pc, #532]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d112      	bne.n	8004bec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bc6:	4b82      	ldr	r3, [pc, #520]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bd2:	d10b      	bne.n	8004bec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd4:	4b7e      	ldr	r3, [pc, #504]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d05b      	beq.n	8004c98 <HAL_RCC_OscConfig+0x108>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d157      	bne.n	8004c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e242      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf4:	d106      	bne.n	8004c04 <HAL_RCC_OscConfig+0x74>
 8004bf6:	4b76      	ldr	r3, [pc, #472]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a75      	ldr	r2, [pc, #468]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e01d      	b.n	8004c40 <HAL_RCC_OscConfig+0xb0>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c0c:	d10c      	bne.n	8004c28 <HAL_RCC_OscConfig+0x98>
 8004c0e:	4b70      	ldr	r3, [pc, #448]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a6f      	ldr	r2, [pc, #444]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a6c      	ldr	r2, [pc, #432]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	e00b      	b.n	8004c40 <HAL_RCC_OscConfig+0xb0>
 8004c28:	4b69      	ldr	r3, [pc, #420]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a68      	ldr	r2, [pc, #416]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	4b66      	ldr	r3, [pc, #408]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a65      	ldr	r2, [pc, #404]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d013      	beq.n	8004c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c48:	f7fe fb38 	bl	80032bc <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c50:	f7fe fb34 	bl	80032bc <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	@ 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e207      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c62:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0xc0>
 8004c6e:	e014      	b.n	8004c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c70:	f7fe fb24 	bl	80032bc <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c78:	f7fe fb20 	bl	80032bc <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b64      	cmp	r3, #100	@ 0x64
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e1f3      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c8a:	4b51      	ldr	r3, [pc, #324]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f0      	bne.n	8004c78 <HAL_RCC_OscConfig+0xe8>
 8004c96:	e000      	b.n	8004c9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d063      	beq.n	8004d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00b      	beq.n	8004cca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb2:	4b47      	ldr	r3, [pc, #284]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d11c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cbe:	4b44      	ldr	r3, [pc, #272]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d116      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cca:	4b41      	ldr	r3, [pc, #260]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x152>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d001      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e1c7      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4937      	ldr	r1, [pc, #220]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf6:	e03a      	b.n	8004d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d020      	beq.n	8004d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d00:	4b34      	ldr	r3, [pc, #208]	@ (8004dd4 <HAL_RCC_OscConfig+0x244>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d06:	f7fe fad9 	bl	80032bc <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d0e:	f7fe fad5 	bl	80032bc <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e1a8      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d20:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2c:	4b28      	ldr	r3, [pc, #160]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4925      	ldr	r1, [pc, #148]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	600b      	str	r3, [r1, #0]
 8004d40:	e015      	b.n	8004d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d42:	4b24      	ldr	r3, [pc, #144]	@ (8004dd4 <HAL_RCC_OscConfig+0x244>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fe fab8 	bl	80032bc <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d50:	f7fe fab4 	bl	80032bc <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e187      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d62:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d036      	beq.n	8004de8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d016      	beq.n	8004db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d82:	4b15      	ldr	r3, [pc, #84]	@ (8004dd8 <HAL_RCC_OscConfig+0x248>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d88:	f7fe fa98 	bl	80032bc <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d90:	f7fe fa94 	bl	80032bc <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e167      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da2:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd0 <HAL_RCC_OscConfig+0x240>)
 8004da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCC_OscConfig+0x200>
 8004dae:	e01b      	b.n	8004de8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db0:	4b09      	ldr	r3, [pc, #36]	@ (8004dd8 <HAL_RCC_OscConfig+0x248>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db6:	f7fe fa81 	bl	80032bc <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dbc:	e00e      	b.n	8004ddc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dbe:	f7fe fa7d 	bl	80032bc <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d907      	bls.n	8004ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e150      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	42470000 	.word	0x42470000
 8004dd8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ddc:	4b88      	ldr	r3, [pc, #544]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004dde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1ea      	bne.n	8004dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8097 	beq.w	8004f24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df6:	2300      	movs	r3, #0
 8004df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dfa:	4b81      	ldr	r3, [pc, #516]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10f      	bne.n	8004e26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	4b7d      	ldr	r3, [pc, #500]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	4a7c      	ldr	r2, [pc, #496]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e16:	4b7a      	ldr	r3, [pc, #488]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e1e:	60bb      	str	r3, [r7, #8]
 8004e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e22:	2301      	movs	r3, #1
 8004e24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e26:	4b77      	ldr	r3, [pc, #476]	@ (8005004 <HAL_RCC_OscConfig+0x474>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d118      	bne.n	8004e64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e32:	4b74      	ldr	r3, [pc, #464]	@ (8005004 <HAL_RCC_OscConfig+0x474>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a73      	ldr	r2, [pc, #460]	@ (8005004 <HAL_RCC_OscConfig+0x474>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e3e:	f7fe fa3d 	bl	80032bc <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e46:	f7fe fa39 	bl	80032bc <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e10c      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e58:	4b6a      	ldr	r3, [pc, #424]	@ (8005004 <HAL_RCC_OscConfig+0x474>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0f0      	beq.n	8004e46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d106      	bne.n	8004e7a <HAL_RCC_OscConfig+0x2ea>
 8004e6c:	4b64      	ldr	r3, [pc, #400]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e70:	4a63      	ldr	r2, [pc, #396]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e78:	e01c      	b.n	8004eb4 <HAL_RCC_OscConfig+0x324>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b05      	cmp	r3, #5
 8004e80:	d10c      	bne.n	8004e9c <HAL_RCC_OscConfig+0x30c>
 8004e82:	4b5f      	ldr	r3, [pc, #380]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e86:	4a5e      	ldr	r2, [pc, #376]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e88:	f043 0304 	orr.w	r3, r3, #4
 8004e8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e8e:	4b5c      	ldr	r3, [pc, #368]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e92:	4a5b      	ldr	r2, [pc, #364]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e94:	f043 0301 	orr.w	r3, r3, #1
 8004e98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e9a:	e00b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x324>
 8004e9c:	4b58      	ldr	r3, [pc, #352]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea0:	4a57      	ldr	r2, [pc, #348]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	f023 0301 	bic.w	r3, r3, #1
 8004ea6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea8:	4b55      	ldr	r3, [pc, #340]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eac:	4a54      	ldr	r2, [pc, #336]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004eae:	f023 0304 	bic.w	r3, r3, #4
 8004eb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d015      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ebc:	f7fe f9fe 	bl	80032bc <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec2:	e00a      	b.n	8004eda <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec4:	f7fe f9fa 	bl	80032bc <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e0cb      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eda:	4b49      	ldr	r3, [pc, #292]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0ee      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x334>
 8004ee6:	e014      	b.n	8004f12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee8:	f7fe f9e8 	bl	80032bc <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef0:	f7fe f9e4 	bl	80032bc <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e0b5      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f06:	4b3e      	ldr	r3, [pc, #248]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1ee      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f12:	7dfb      	ldrb	r3, [r7, #23]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d105      	bne.n	8004f24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f18:	4b39      	ldr	r3, [pc, #228]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1c:	4a38      	ldr	r2, [pc, #224]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 80a1 	beq.w	8005070 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f2e:	4b34      	ldr	r3, [pc, #208]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d05c      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d141      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f42:	4b31      	ldr	r3, [pc, #196]	@ (8005008 <HAL_RCC_OscConfig+0x478>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fe f9b8 	bl	80032bc <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f50:	f7fe f9b4 	bl	80032bc <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e087      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f62:	4b27      	ldr	r3, [pc, #156]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69da      	ldr	r2, [r3, #28]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	019b      	lsls	r3, r3, #6
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f84:	085b      	lsrs	r3, r3, #1
 8004f86:	3b01      	subs	r3, #1
 8004f88:	041b      	lsls	r3, r3, #16
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f90:	061b      	lsls	r3, r3, #24
 8004f92:	491b      	ldr	r1, [pc, #108]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f98:	4b1b      	ldr	r3, [pc, #108]	@ (8005008 <HAL_RCC_OscConfig+0x478>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9e:	f7fe f98d 	bl	80032bc <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa6:	f7fe f989 	bl	80032bc <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e05c      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb8:	4b11      	ldr	r3, [pc, #68]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x416>
 8004fc4:	e054      	b.n	8005070 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc6:	4b10      	ldr	r3, [pc, #64]	@ (8005008 <HAL_RCC_OscConfig+0x478>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fcc:	f7fe f976 	bl	80032bc <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fe f972 	bl	80032bc <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e045      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <HAL_RCC_OscConfig+0x470>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x444>
 8004ff2:	e03d      	b.n	8005070 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d107      	bne.n	800500c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e038      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
 8005000:	40023800 	.word	0x40023800
 8005004:	40007000 	.word	0x40007000
 8005008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800500c:	4b1b      	ldr	r3, [pc, #108]	@ (800507c <HAL_RCC_OscConfig+0x4ec>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d028      	beq.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d121      	bne.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d11a      	bne.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005044:	4293      	cmp	r3, r2
 8005046:	d111      	bne.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	3b01      	subs	r3, #1
 8005056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d107      	bne.n	800506c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800

08005080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e0cc      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005094:	4b68      	ldr	r3, [pc, #416]	@ (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d90c      	bls.n	80050bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a2:	4b65      	ldr	r3, [pc, #404]	@ (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050aa:	4b63      	ldr	r3, [pc, #396]	@ (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d001      	beq.n	80050bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0b8      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d020      	beq.n	800510a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050d4:	4b59      	ldr	r3, [pc, #356]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	4a58      	ldr	r2, [pc, #352]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050ec:	4b53      	ldr	r3, [pc, #332]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	4a52      	ldr	r2, [pc, #328]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f8:	4b50      	ldr	r3, [pc, #320]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	494d      	ldr	r1, [pc, #308]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	4313      	orrs	r3, r2
 8005108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d044      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d107      	bne.n	800512e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511e:	4b47      	ldr	r3, [pc, #284]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d119      	bne.n	800515e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e07f      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d003      	beq.n	800513e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800513a:	2b03      	cmp	r3, #3
 800513c:	d107      	bne.n	800514e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513e:	4b3f      	ldr	r3, [pc, #252]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e06f      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514e:	4b3b      	ldr	r3, [pc, #236]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e067      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800515e:	4b37      	ldr	r3, [pc, #220]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f023 0203 	bic.w	r2, r3, #3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	4934      	ldr	r1, [pc, #208]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	4313      	orrs	r3, r2
 800516e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005170:	f7fe f8a4 	bl	80032bc <HAL_GetTick>
 8005174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005176:	e00a      	b.n	800518e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005178:	f7fe f8a0 	bl	80032bc <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005186:	4293      	cmp	r3, r2
 8005188:	d901      	bls.n	800518e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e04f      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518e:	4b2b      	ldr	r3, [pc, #172]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 020c 	and.w	r2, r3, #12
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	429a      	cmp	r2, r3
 800519e:	d1eb      	bne.n	8005178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051a0:	4b25      	ldr	r3, [pc, #148]	@ (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d20c      	bcs.n	80051c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ae:	4b22      	ldr	r3, [pc, #136]	@ (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b6:	4b20      	ldr	r3, [pc, #128]	@ (8005238 <HAL_RCC_ClockConfig+0x1b8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d001      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e032      	b.n	800522e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d4:	4b19      	ldr	r3, [pc, #100]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4916      	ldr	r1, [pc, #88]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051f2:	4b12      	ldr	r3, [pc, #72]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	490e      	ldr	r1, [pc, #56]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005206:	f000 f821 	bl	800524c <HAL_RCC_GetSysClockFreq>
 800520a:	4602      	mov	r2, r0
 800520c:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	490a      	ldr	r1, [pc, #40]	@ (8005240 <HAL_RCC_ClockConfig+0x1c0>)
 8005218:	5ccb      	ldrb	r3, [r1, r3]
 800521a:	fa22 f303 	lsr.w	r3, r2, r3
 800521e:	4a09      	ldr	r2, [pc, #36]	@ (8005244 <HAL_RCC_ClockConfig+0x1c4>)
 8005220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005222:	4b09      	ldr	r3, [pc, #36]	@ (8005248 <HAL_RCC_ClockConfig+0x1c8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe f804 	bl	8003234 <HAL_InitTick>

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40023c00 	.word	0x40023c00
 800523c:	40023800 	.word	0x40023800
 8005240:	0800a9b8 	.word	0x0800a9b8
 8005244:	20000200 	.word	0x20000200
 8005248:	20000204 	.word	0x20000204

0800524c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800524c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005250:	b094      	sub	sp, #80	@ 0x50
 8005252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005264:	4b79      	ldr	r3, [pc, #484]	@ (800544c <HAL_RCC_GetSysClockFreq+0x200>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 030c 	and.w	r3, r3, #12
 800526c:	2b08      	cmp	r3, #8
 800526e:	d00d      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0x40>
 8005270:	2b08      	cmp	r3, #8
 8005272:	f200 80e1 	bhi.w	8005438 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0x34>
 800527a:	2b04      	cmp	r3, #4
 800527c:	d003      	beq.n	8005286 <HAL_RCC_GetSysClockFreq+0x3a>
 800527e:	e0db      	b.n	8005438 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005280:	4b73      	ldr	r3, [pc, #460]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x204>)
 8005282:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005284:	e0db      	b.n	800543e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005286:	4b73      	ldr	r3, [pc, #460]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x208>)
 8005288:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800528a:	e0d8      	b.n	800543e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800528c:	4b6f      	ldr	r3, [pc, #444]	@ (800544c <HAL_RCC_GetSysClockFreq+0x200>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005294:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005296:	4b6d      	ldr	r3, [pc, #436]	@ (800544c <HAL_RCC_GetSysClockFreq+0x200>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d063      	beq.n	800536a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a2:	4b6a      	ldr	r3, [pc, #424]	@ (800544c <HAL_RCC_GetSysClockFreq+0x200>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	099b      	lsrs	r3, r3, #6
 80052a8:	2200      	movs	r2, #0
 80052aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80052b6:	2300      	movs	r3, #0
 80052b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052be:	4622      	mov	r2, r4
 80052c0:	462b      	mov	r3, r5
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	f04f 0100 	mov.w	r1, #0
 80052ca:	0159      	lsls	r1, r3, #5
 80052cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052d0:	0150      	lsls	r0, r2, #5
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	4621      	mov	r1, r4
 80052d8:	1a51      	subs	r1, r2, r1
 80052da:	6139      	str	r1, [r7, #16]
 80052dc:	4629      	mov	r1, r5
 80052de:	eb63 0301 	sbc.w	r3, r3, r1
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052f0:	4659      	mov	r1, fp
 80052f2:	018b      	lsls	r3, r1, #6
 80052f4:	4651      	mov	r1, sl
 80052f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052fa:	4651      	mov	r1, sl
 80052fc:	018a      	lsls	r2, r1, #6
 80052fe:	4651      	mov	r1, sl
 8005300:	ebb2 0801 	subs.w	r8, r2, r1
 8005304:	4659      	mov	r1, fp
 8005306:	eb63 0901 	sbc.w	r9, r3, r1
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800531a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800531e:	4690      	mov	r8, r2
 8005320:	4699      	mov	r9, r3
 8005322:	4623      	mov	r3, r4
 8005324:	eb18 0303 	adds.w	r3, r8, r3
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	462b      	mov	r3, r5
 800532c:	eb49 0303 	adc.w	r3, r9, r3
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800533e:	4629      	mov	r1, r5
 8005340:	024b      	lsls	r3, r1, #9
 8005342:	4621      	mov	r1, r4
 8005344:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005348:	4621      	mov	r1, r4
 800534a:	024a      	lsls	r2, r1, #9
 800534c:	4610      	mov	r0, r2
 800534e:	4619      	mov	r1, r3
 8005350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005352:	2200      	movs	r2, #0
 8005354:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005356:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005358:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800535c:	f7fb fb52 	bl	8000a04 <__aeabi_uldivmod>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4613      	mov	r3, r2
 8005366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005368:	e058      	b.n	800541c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800536a:	4b38      	ldr	r3, [pc, #224]	@ (800544c <HAL_RCC_GetSysClockFreq+0x200>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	099b      	lsrs	r3, r3, #6
 8005370:	2200      	movs	r2, #0
 8005372:	4618      	mov	r0, r3
 8005374:	4611      	mov	r1, r2
 8005376:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800537a:	623b      	str	r3, [r7, #32]
 800537c:	2300      	movs	r3, #0
 800537e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005380:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005384:	4642      	mov	r2, r8
 8005386:	464b      	mov	r3, r9
 8005388:	f04f 0000 	mov.w	r0, #0
 800538c:	f04f 0100 	mov.w	r1, #0
 8005390:	0159      	lsls	r1, r3, #5
 8005392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005396:	0150      	lsls	r0, r2, #5
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4641      	mov	r1, r8
 800539e:	ebb2 0a01 	subs.w	sl, r2, r1
 80053a2:	4649      	mov	r1, r9
 80053a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053bc:	ebb2 040a 	subs.w	r4, r2, sl
 80053c0:	eb63 050b 	sbc.w	r5, r3, fp
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	00eb      	lsls	r3, r5, #3
 80053ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053d2:	00e2      	lsls	r2, r4, #3
 80053d4:	4614      	mov	r4, r2
 80053d6:	461d      	mov	r5, r3
 80053d8:	4643      	mov	r3, r8
 80053da:	18e3      	adds	r3, r4, r3
 80053dc:	603b      	str	r3, [r7, #0]
 80053de:	464b      	mov	r3, r9
 80053e0:	eb45 0303 	adc.w	r3, r5, r3
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053f2:	4629      	mov	r1, r5
 80053f4:	028b      	lsls	r3, r1, #10
 80053f6:	4621      	mov	r1, r4
 80053f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053fc:	4621      	mov	r1, r4
 80053fe:	028a      	lsls	r2, r1, #10
 8005400:	4610      	mov	r0, r2
 8005402:	4619      	mov	r1, r3
 8005404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005406:	2200      	movs	r2, #0
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	61fa      	str	r2, [r7, #28]
 800540c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005410:	f7fb faf8 	bl	8000a04 <__aeabi_uldivmod>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4613      	mov	r3, r2
 800541a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800541c:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <HAL_RCC_GetSysClockFreq+0x200>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	0c1b      	lsrs	r3, r3, #16
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	3301      	adds	r3, #1
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800542c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800542e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005436:	e002      	b.n	800543e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005438:	4b05      	ldr	r3, [pc, #20]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x204>)
 800543a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800543c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800543e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005440:	4618      	mov	r0, r3
 8005442:	3750      	adds	r7, #80	@ 0x50
 8005444:	46bd      	mov	sp, r7
 8005446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800544a:	bf00      	nop
 800544c:	40023800 	.word	0x40023800
 8005450:	00f42400 	.word	0x00f42400
 8005454:	007a1200 	.word	0x007a1200

08005458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800545c:	4b03      	ldr	r3, [pc, #12]	@ (800546c <HAL_RCC_GetHCLKFreq+0x14>)
 800545e:	681b      	ldr	r3, [r3, #0]
}
 8005460:	4618      	mov	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000200 	.word	0x20000200

08005470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005474:	f7ff fff0 	bl	8005458 <HAL_RCC_GetHCLKFreq>
 8005478:	4602      	mov	r2, r0
 800547a:	4b05      	ldr	r3, [pc, #20]	@ (8005490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	0a9b      	lsrs	r3, r3, #10
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	4903      	ldr	r1, [pc, #12]	@ (8005494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005486:	5ccb      	ldrb	r3, [r1, r3]
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800548c:	4618      	mov	r0, r3
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40023800 	.word	0x40023800
 8005494:	0800a9c8 	.word	0x0800a9c8

08005498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800549c:	f7ff ffdc 	bl	8005458 <HAL_RCC_GetHCLKFreq>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4b05      	ldr	r3, [pc, #20]	@ (80054b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	0b5b      	lsrs	r3, r3, #13
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	4903      	ldr	r1, [pc, #12]	@ (80054bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ae:	5ccb      	ldrb	r3, [r1, r3]
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40023800 	.word	0x40023800
 80054bc:	0800a9c8 	.word	0x0800a9c8

080054c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e07b      	b.n	80055ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d108      	bne.n	80054ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054e2:	d009      	beq.n	80054f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	61da      	str	r2, [r3, #28]
 80054ea:	e005      	b.n	80054f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fd fb10 	bl	8002b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800552e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557c:	ea42 0103 	orr.w	r1, r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	0c1b      	lsrs	r3, r3, #16
 8005596:	f003 0104 	and.w	r1, r3, #4
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	f003 0210 	and.w	r2, r3, #16
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e038      	b.n	800565a <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d106      	bne.n	8005602 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f7fb ffdf 	bl	80015c0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3308      	adds	r3, #8
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f002 f8e3 	bl	80077d8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	461a      	mov	r2, r3
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	f002 f945 	bl	80078ac <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6858      	ldr	r0, [r3, #4]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	f002 f972 	bl	8007918 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	6892      	ldr	r2, [r2, #8]
 800563c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	6892      	ldr	r2, [r2, #8]
 8005648:	f041 0101 	orr.w	r1, r1, #1
 800564c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e041      	b.n	80056f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7fd fc17 	bl	8002ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2202      	movs	r2, #2
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3304      	adds	r3, #4
 800569e:	4619      	mov	r1, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	f000 fc61 	bl	8005f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	d001      	beq.n	8005718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e04e      	b.n	80057b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a23      	ldr	r2, [pc, #140]	@ (80057c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d022      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x80>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005742:	d01d      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x80>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1f      	ldr	r2, [pc, #124]	@ (80057c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d018      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x80>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1e      	ldr	r2, [pc, #120]	@ (80057cc <HAL_TIM_Base_Start_IT+0xcc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d013      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x80>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1c      	ldr	r2, [pc, #112]	@ (80057d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00e      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x80>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1b      	ldr	r2, [pc, #108]	@ (80057d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d009      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x80>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a19      	ldr	r2, [pc, #100]	@ (80057d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x80>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a18      	ldr	r2, [pc, #96]	@ (80057dc <HAL_TIM_Base_Start_IT+0xdc>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d111      	bne.n	80057a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b06      	cmp	r3, #6
 8005790:	d010      	beq.n	80057b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0201 	orr.w	r2, r2, #1
 80057a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a2:	e007      	b.n	80057b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40000800 	.word	0x40000800
 80057d0:	40000c00 	.word	0x40000c00
 80057d4:	40010400 	.word	0x40010400
 80057d8:	40014000 	.word	0x40014000
 80057dc:	40001800 	.word	0x40001800

080057e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e041      	b.n	8005876 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f839 	bl	800587e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3304      	adds	r3, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4610      	mov	r0, r2
 8005820:	f000 fba2 	bl	8005f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d109      	bne.n	80058b8 <HAL_TIM_PWM_Start+0x24>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	bf14      	ite	ne
 80058b0:	2301      	movne	r3, #1
 80058b2:	2300      	moveq	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	e022      	b.n	80058fe <HAL_TIM_PWM_Start+0x6a>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d109      	bne.n	80058d2 <HAL_TIM_PWM_Start+0x3e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	bf14      	ite	ne
 80058ca:	2301      	movne	r3, #1
 80058cc:	2300      	moveq	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	e015      	b.n	80058fe <HAL_TIM_PWM_Start+0x6a>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d109      	bne.n	80058ec <HAL_TIM_PWM_Start+0x58>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	bf14      	ite	ne
 80058e4:	2301      	movne	r3, #1
 80058e6:	2300      	moveq	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	e008      	b.n	80058fe <HAL_TIM_PWM_Start+0x6a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	bf14      	ite	ne
 80058f8:	2301      	movne	r3, #1
 80058fa:	2300      	moveq	r3, #0
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e07c      	b.n	8005a00 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <HAL_TIM_PWM_Start+0x82>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005914:	e013      	b.n	800593e <HAL_TIM_PWM_Start+0xaa>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b04      	cmp	r3, #4
 800591a:	d104      	bne.n	8005926 <HAL_TIM_PWM_Start+0x92>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005924:	e00b      	b.n	800593e <HAL_TIM_PWM_Start+0xaa>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b08      	cmp	r3, #8
 800592a:	d104      	bne.n	8005936 <HAL_TIM_PWM_Start+0xa2>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005934:	e003      	b.n	800593e <HAL_TIM_PWM_Start+0xaa>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2201      	movs	r2, #1
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fe04 	bl	8006554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a2d      	ldr	r2, [pc, #180]	@ (8005a08 <HAL_TIM_PWM_Start+0x174>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_TIM_PWM_Start+0xcc>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a2c      	ldr	r2, [pc, #176]	@ (8005a0c <HAL_TIM_PWM_Start+0x178>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d101      	bne.n	8005964 <HAL_TIM_PWM_Start+0xd0>
 8005960:	2301      	movs	r3, #1
 8005962:	e000      	b.n	8005966 <HAL_TIM_PWM_Start+0xd2>
 8005964:	2300      	movs	r3, #0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005978:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a22      	ldr	r2, [pc, #136]	@ (8005a08 <HAL_TIM_PWM_Start+0x174>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d022      	beq.n	80059ca <HAL_TIM_PWM_Start+0x136>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598c:	d01d      	beq.n	80059ca <HAL_TIM_PWM_Start+0x136>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1f      	ldr	r2, [pc, #124]	@ (8005a10 <HAL_TIM_PWM_Start+0x17c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d018      	beq.n	80059ca <HAL_TIM_PWM_Start+0x136>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1d      	ldr	r2, [pc, #116]	@ (8005a14 <HAL_TIM_PWM_Start+0x180>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d013      	beq.n	80059ca <HAL_TIM_PWM_Start+0x136>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a18 <HAL_TIM_PWM_Start+0x184>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00e      	beq.n	80059ca <HAL_TIM_PWM_Start+0x136>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a16      	ldr	r2, [pc, #88]	@ (8005a0c <HAL_TIM_PWM_Start+0x178>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d009      	beq.n	80059ca <HAL_TIM_PWM_Start+0x136>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a18      	ldr	r2, [pc, #96]	@ (8005a1c <HAL_TIM_PWM_Start+0x188>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_TIM_PWM_Start+0x136>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a16      	ldr	r2, [pc, #88]	@ (8005a20 <HAL_TIM_PWM_Start+0x18c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d111      	bne.n	80059ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b06      	cmp	r3, #6
 80059da:	d010      	beq.n	80059fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ec:	e007      	b.n	80059fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 0201 	orr.w	r2, r2, #1
 80059fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40010000 	.word	0x40010000
 8005a0c:	40010400 	.word	0x40010400
 8005a10:	40000400 	.word	0x40000400
 8005a14:	40000800 	.word	0x40000800
 8005a18:	40000c00 	.word	0x40000c00
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	40001800 	.word	0x40001800

08005a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d020      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01b      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0202 	mvn.w	r2, #2
 8005a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fa5b 	bl	8005f2a <HAL_TIM_IC_CaptureCallback>
 8005a74:	e005      	b.n	8005a82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa4d 	bl	8005f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fa5e 	bl	8005f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d020      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01b      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0204 	mvn.w	r2, #4
 8005aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fa35 	bl	8005f2a <HAL_TIM_IC_CaptureCallback>
 8005ac0:	e005      	b.n	8005ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fa27 	bl	8005f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fa38 	bl	8005f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d020      	beq.n	8005b20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01b      	beq.n	8005b20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0208 	mvn.w	r2, #8
 8005af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2204      	movs	r2, #4
 8005af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fa0f 	bl	8005f2a <HAL_TIM_IC_CaptureCallback>
 8005b0c:	e005      	b.n	8005b1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fa01 	bl	8005f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fa12 	bl	8005f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d020      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01b      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0210 	mvn.w	r2, #16
 8005b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2208      	movs	r2, #8
 8005b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f9e9 	bl	8005f2a <HAL_TIM_IC_CaptureCallback>
 8005b58:	e005      	b.n	8005b66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9db 	bl	8005f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f9ec 	bl	8005f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00c      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d007      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0201 	mvn.w	r2, #1
 8005b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fc fb52 	bl	8002234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00c      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fd7c 	bl	80066ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00c      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f9bd 	bl	8005f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00c      	beq.n	8005bfc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0220 	mvn.w	r2, #32
 8005bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fd4e 	bl	8006698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e0ae      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b0c      	cmp	r3, #12
 8005c2e:	f200 809f 	bhi.w	8005d70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c32:	a201      	add	r2, pc, #4	@ (adr r2, 8005c38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c6d 	.word	0x08005c6d
 8005c3c:	08005d71 	.word	0x08005d71
 8005c40:	08005d71 	.word	0x08005d71
 8005c44:	08005d71 	.word	0x08005d71
 8005c48:	08005cad 	.word	0x08005cad
 8005c4c:	08005d71 	.word	0x08005d71
 8005c50:	08005d71 	.word	0x08005d71
 8005c54:	08005d71 	.word	0x08005d71
 8005c58:	08005cef 	.word	0x08005cef
 8005c5c:	08005d71 	.word	0x08005d71
 8005c60:	08005d71 	.word	0x08005d71
 8005c64:	08005d71 	.word	0x08005d71
 8005c68:	08005d2f 	.word	0x08005d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fa24 	bl	80060c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0208 	orr.w	r2, r2, #8
 8005c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0204 	bic.w	r2, r2, #4
 8005c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6999      	ldr	r1, [r3, #24]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	691a      	ldr	r2, [r3, #16]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	619a      	str	r2, [r3, #24]
      break;
 8005caa:	e064      	b.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fa74 	bl	80061a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6999      	ldr	r1, [r3, #24]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	021a      	lsls	r2, r3, #8
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	619a      	str	r2, [r3, #24]
      break;
 8005cec:	e043      	b.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fac9 	bl	800628c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0208 	orr.w	r2, r2, #8
 8005d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69da      	ldr	r2, [r3, #28]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0204 	bic.w	r2, r2, #4
 8005d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69d9      	ldr	r1, [r3, #28]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	691a      	ldr	r2, [r3, #16]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	61da      	str	r2, [r3, #28]
      break;
 8005d2c:	e023      	b.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fb1d 	bl	8006374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69d9      	ldr	r1, [r3, #28]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	021a      	lsls	r2, r3, #8
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	61da      	str	r2, [r3, #28]
      break;
 8005d6e:	e002      	b.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	75fb      	strb	r3, [r7, #23]
      break;
 8005d74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_TIM_ConfigClockSource+0x1c>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e0b4      	b.n	8005f0e <HAL_TIM_ConfigClockSource+0x186>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ddc:	d03e      	beq.n	8005e5c <HAL_TIM_ConfigClockSource+0xd4>
 8005dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005de2:	f200 8087 	bhi.w	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dea:	f000 8086 	beq.w	8005efa <HAL_TIM_ConfigClockSource+0x172>
 8005dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005df2:	d87f      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005df4:	2b70      	cmp	r3, #112	@ 0x70
 8005df6:	d01a      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0xa6>
 8005df8:	2b70      	cmp	r3, #112	@ 0x70
 8005dfa:	d87b      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dfc:	2b60      	cmp	r3, #96	@ 0x60
 8005dfe:	d050      	beq.n	8005ea2 <HAL_TIM_ConfigClockSource+0x11a>
 8005e00:	2b60      	cmp	r3, #96	@ 0x60
 8005e02:	d877      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e04:	2b50      	cmp	r3, #80	@ 0x50
 8005e06:	d03c      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0xfa>
 8005e08:	2b50      	cmp	r3, #80	@ 0x50
 8005e0a:	d873      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e0c:	2b40      	cmp	r3, #64	@ 0x40
 8005e0e:	d058      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x13a>
 8005e10:	2b40      	cmp	r3, #64	@ 0x40
 8005e12:	d86f      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e14:	2b30      	cmp	r3, #48	@ 0x30
 8005e16:	d064      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e18:	2b30      	cmp	r3, #48	@ 0x30
 8005e1a:	d86b      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d060      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d867      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d05c      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e28:	2b10      	cmp	r3, #16
 8005e2a:	d05a      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e2c:	e062      	b.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e3e:	f000 fb69 	bl	8006514 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	609a      	str	r2, [r3, #8]
      break;
 8005e5a:	e04f      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e6c:	f000 fb52 	bl	8006514 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e7e:	609a      	str	r2, [r3, #8]
      break;
 8005e80:	e03c      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f000 fac6 	bl	8006420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2150      	movs	r1, #80	@ 0x50
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fb1f 	bl	80064de <TIM_ITRx_SetConfig>
      break;
 8005ea0:	e02c      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f000 fae5 	bl	800647e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2160      	movs	r1, #96	@ 0x60
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fb0f 	bl	80064de <TIM_ITRx_SetConfig>
      break;
 8005ec0:	e01c      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f000 faa6 	bl	8006420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2140      	movs	r1, #64	@ 0x40
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 faff 	bl	80064de <TIM_ITRx_SetConfig>
      break;
 8005ee0:	e00c      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4619      	mov	r1, r3
 8005eec:	4610      	mov	r0, r2
 8005eee:	f000 faf6 	bl	80064de <TIM_ITRx_SetConfig>
      break;
 8005ef2:	e003      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef8:	e000      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
	...

08005f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a46      	ldr	r2, [pc, #280]	@ (8006094 <TIM_Base_SetConfig+0x12c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d013      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f86:	d00f      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a43      	ldr	r2, [pc, #268]	@ (8006098 <TIM_Base_SetConfig+0x130>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00b      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a42      	ldr	r2, [pc, #264]	@ (800609c <TIM_Base_SetConfig+0x134>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d007      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a41      	ldr	r2, [pc, #260]	@ (80060a0 <TIM_Base_SetConfig+0x138>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d003      	beq.n	8005fa8 <TIM_Base_SetConfig+0x40>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a40      	ldr	r2, [pc, #256]	@ (80060a4 <TIM_Base_SetConfig+0x13c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d108      	bne.n	8005fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a35      	ldr	r2, [pc, #212]	@ (8006094 <TIM_Base_SetConfig+0x12c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d02b      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc8:	d027      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a32      	ldr	r2, [pc, #200]	@ (8006098 <TIM_Base_SetConfig+0x130>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d023      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a31      	ldr	r2, [pc, #196]	@ (800609c <TIM_Base_SetConfig+0x134>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01f      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a30      	ldr	r2, [pc, #192]	@ (80060a0 <TIM_Base_SetConfig+0x138>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d01b      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80060a4 <TIM_Base_SetConfig+0x13c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d017      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a2e      	ldr	r2, [pc, #184]	@ (80060a8 <TIM_Base_SetConfig+0x140>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d013      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80060ac <TIM_Base_SetConfig+0x144>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00f      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80060b0 <TIM_Base_SetConfig+0x148>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00b      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2b      	ldr	r2, [pc, #172]	@ (80060b4 <TIM_Base_SetConfig+0x14c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d007      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2a      	ldr	r2, [pc, #168]	@ (80060b8 <TIM_Base_SetConfig+0x150>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d003      	beq.n	800601a <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a29      	ldr	r2, [pc, #164]	@ (80060bc <TIM_Base_SetConfig+0x154>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d108      	bne.n	800602c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a10      	ldr	r2, [pc, #64]	@ (8006094 <TIM_Base_SetConfig+0x12c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d003      	beq.n	8006060 <TIM_Base_SetConfig+0xf8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a12      	ldr	r2, [pc, #72]	@ (80060a4 <TIM_Base_SetConfig+0x13c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d103      	bne.n	8006068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b01      	cmp	r3, #1
 8006078:	d105      	bne.n	8006086 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f023 0201 	bic.w	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	611a      	str	r2, [r3, #16]
  }
}
 8006086:	bf00      	nop
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40010000 	.word	0x40010000
 8006098:	40000400 	.word	0x40000400
 800609c:	40000800 	.word	0x40000800
 80060a0:	40000c00 	.word	0x40000c00
 80060a4:	40010400 	.word	0x40010400
 80060a8:	40014000 	.word	0x40014000
 80060ac:	40014400 	.word	0x40014400
 80060b0:	40014800 	.word	0x40014800
 80060b4:	40001800 	.word	0x40001800
 80060b8:	40001c00 	.word	0x40001c00
 80060bc:	40002000 	.word	0x40002000

080060c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f023 0201 	bic.w	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0303 	bic.w	r3, r3, #3
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f023 0302 	bic.w	r3, r3, #2
 8006108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a20      	ldr	r2, [pc, #128]	@ (8006198 <TIM_OC1_SetConfig+0xd8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d003      	beq.n	8006124 <TIM_OC1_SetConfig+0x64>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a1f      	ldr	r2, [pc, #124]	@ (800619c <TIM_OC1_SetConfig+0xdc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d10c      	bne.n	800613e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f023 0308 	bic.w	r3, r3, #8
 800612a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f023 0304 	bic.w	r3, r3, #4
 800613c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a15      	ldr	r2, [pc, #84]	@ (8006198 <TIM_OC1_SetConfig+0xd8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d003      	beq.n	800614e <TIM_OC1_SetConfig+0x8e>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a14      	ldr	r2, [pc, #80]	@ (800619c <TIM_OC1_SetConfig+0xdc>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d111      	bne.n	8006172 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800615c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	621a      	str	r2, [r3, #32]
}
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	40010000 	.word	0x40010000
 800619c:	40010400 	.word	0x40010400

080061a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	f023 0210 	bic.w	r2, r3, #16
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	021b      	lsls	r3, r3, #8
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f023 0320 	bic.w	r3, r3, #32
 80061ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a22      	ldr	r2, [pc, #136]	@ (8006284 <TIM_OC2_SetConfig+0xe4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_OC2_SetConfig+0x68>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a21      	ldr	r2, [pc, #132]	@ (8006288 <TIM_OC2_SetConfig+0xe8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d10d      	bne.n	8006224 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800620e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006222:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a17      	ldr	r2, [pc, #92]	@ (8006284 <TIM_OC2_SetConfig+0xe4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d003      	beq.n	8006234 <TIM_OC2_SetConfig+0x94>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a16      	ldr	r2, [pc, #88]	@ (8006288 <TIM_OC2_SetConfig+0xe8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d113      	bne.n	800625c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800623a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	621a      	str	r2, [r3, #32]
}
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40010000 	.word	0x40010000
 8006288:	40010400 	.word	0x40010400

0800628c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a21      	ldr	r2, [pc, #132]	@ (800636c <TIM_OC3_SetConfig+0xe0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d003      	beq.n	80062f2 <TIM_OC3_SetConfig+0x66>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a20      	ldr	r2, [pc, #128]	@ (8006370 <TIM_OC3_SetConfig+0xe4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d10d      	bne.n	800630e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800630c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a16      	ldr	r2, [pc, #88]	@ (800636c <TIM_OC3_SetConfig+0xe0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d003      	beq.n	800631e <TIM_OC3_SetConfig+0x92>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a15      	ldr	r2, [pc, #84]	@ (8006370 <TIM_OC3_SetConfig+0xe4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d113      	bne.n	8006346 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800632c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	621a      	str	r2, [r3, #32]
}
 8006360:	bf00      	nop
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	40010000 	.word	0x40010000
 8006370:	40010400 	.word	0x40010400

08006374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	021b      	lsls	r3, r3, #8
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	031b      	lsls	r3, r3, #12
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a12      	ldr	r2, [pc, #72]	@ (8006418 <TIM_OC4_SetConfig+0xa4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_OC4_SetConfig+0x68>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a11      	ldr	r2, [pc, #68]	@ (800641c <TIM_OC4_SetConfig+0xa8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d109      	bne.n	80063f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	019b      	lsls	r3, r3, #6
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	621a      	str	r2, [r3, #32]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40010000 	.word	0x40010000
 800641c:	40010400 	.word	0x40010400

08006420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f023 0201 	bic.w	r2, r3, #1
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800644a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f023 030a 	bic.w	r3, r3, #10
 800645c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800647e:	b480      	push	{r7}
 8006480:	b087      	sub	sp, #28
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	f023 0210 	bic.w	r2, r3, #16
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	031b      	lsls	r3, r3, #12
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	621a      	str	r2, [r3, #32]
}
 80064d2:	bf00      	nop
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064de:	b480      	push	{r7}
 80064e0:	b085      	sub	sp, #20
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f043 0307 	orr.w	r3, r3, #7
 8006500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	609a      	str	r2, [r3, #8]
}
 8006508:	bf00      	nop
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800652e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	021a      	lsls	r2, r3, #8
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	431a      	orrs	r2, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4313      	orrs	r3, r2
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	609a      	str	r2, [r3, #8]
}
 8006548:	bf00      	nop
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	2201      	movs	r2, #1
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1a      	ldr	r2, [r3, #32]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	43db      	mvns	r3, r3
 8006576:	401a      	ands	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a1a      	ldr	r2, [r3, #32]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	fa01 f303 	lsl.w	r3, r1, r3
 800658c:	431a      	orrs	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	621a      	str	r2, [r3, #32]
}
 8006592:	bf00      	nop
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
	...

080065a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e05a      	b.n	800666e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a21      	ldr	r2, [pc, #132]	@ (800667c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d022      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006604:	d01d      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1d      	ldr	r2, [pc, #116]	@ (8006680 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d018      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1b      	ldr	r2, [pc, #108]	@ (8006684 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a1a      	ldr	r2, [pc, #104]	@ (8006688 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00e      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a18      	ldr	r2, [pc, #96]	@ (800668c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d009      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a17      	ldr	r2, [pc, #92]	@ (8006690 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d004      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a15      	ldr	r2, [pc, #84]	@ (8006694 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d10c      	bne.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	4313      	orrs	r3, r2
 8006652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	40010400 	.word	0x40010400
 8006690:	40014000 	.word	0x40014000
 8006694:	40001800 	.word	0x40001800

08006698 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e042      	b.n	8006758 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7fc fcc8 	bl	800307c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2224      	movs	r2, #36	@ 0x24
 80066f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fdf3 	bl	80072f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695a      	ldr	r2, [r3, #20]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08a      	sub	sp, #40	@ 0x28
 8006764:	af02      	add	r7, sp, #8
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	4613      	mov	r3, r2
 800676e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b20      	cmp	r3, #32
 800677e:	d175      	bne.n	800686c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <HAL_UART_Transmit+0x2c>
 8006786:	88fb      	ldrh	r3, [r7, #6]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e06e      	b.n	800686e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2221      	movs	r2, #33	@ 0x21
 800679a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800679e:	f7fc fd8d 	bl	80032bc <HAL_GetTick>
 80067a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	88fa      	ldrh	r2, [r7, #6]
 80067a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	88fa      	ldrh	r2, [r7, #6]
 80067ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067b8:	d108      	bne.n	80067cc <HAL_UART_Transmit+0x6c>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d104      	bne.n	80067cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	61bb      	str	r3, [r7, #24]
 80067ca:	e003      	b.n	80067d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067d0:	2300      	movs	r3, #0
 80067d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067d4:	e02e      	b.n	8006834 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2200      	movs	r2, #0
 80067de:	2180      	movs	r1, #128	@ 0x80
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fb55 	bl	8006e90 <UART_WaitOnFlagUntilTimeout>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e03a      	b.n	800686e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10b      	bne.n	8006816 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800680c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	3302      	adds	r3, #2
 8006812:	61bb      	str	r3, [r7, #24]
 8006814:	e007      	b.n	8006826 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	3301      	adds	r3, #1
 8006824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800682a:	b29b      	uxth	r3, r3
 800682c:	3b01      	subs	r3, #1
 800682e:	b29a      	uxth	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006838:	b29b      	uxth	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1cb      	bne.n	80067d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2200      	movs	r2, #0
 8006846:	2140      	movs	r1, #64	@ 0x40
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fb21 	bl	8006e90 <UART_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2220      	movs	r2, #32
 8006858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e006      	b.n	800686e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	e000      	b.n	800686e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800686c:	2302      	movs	r3, #2
  }
}
 800686e:	4618      	mov	r0, r3
 8006870:	3720      	adds	r7, #32
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b08c      	sub	sp, #48	@ 0x30
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	4613      	mov	r3, r2
 8006882:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b20      	cmp	r3, #32
 800688e:	d14a      	bne.n	8006926 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8006896:	88fb      	ldrh	r3, [r7, #6]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e043      	b.n	8006928 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2201      	movs	r2, #1
 80068a4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80068ac:	88fb      	ldrh	r3, [r7, #6]
 80068ae:	461a      	mov	r2, r3
 80068b0:	68b9      	ldr	r1, [r7, #8]
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 fb45 	bl	8006f42 <UART_Start_Receive_IT>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80068be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d12c      	bne.n	8006920 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d125      	bne.n	800691a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068ce:	2300      	movs	r3, #0
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	330c      	adds	r3, #12
 80068ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	e853 3f00 	ldrex	r3, [r3]
 80068f2:	617b      	str	r3, [r7, #20]
   return(result);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f043 0310 	orr.w	r3, r3, #16
 80068fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	330c      	adds	r3, #12
 8006902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006904:	627a      	str	r2, [r7, #36]	@ 0x24
 8006906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	6a39      	ldr	r1, [r7, #32]
 800690a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	61fb      	str	r3, [r7, #28]
   return(result);
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e5      	bne.n	80068e4 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8006918:	e002      	b.n	8006920 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006920:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006924:	e000      	b.n	8006928 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006926:	2302      	movs	r3, #2
  }
}
 8006928:	4618      	mov	r0, r3
 800692a:	3730      	adds	r7, #48	@ 0x30
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b0ba      	sub	sp, #232	@ 0xe8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006956:	2300      	movs	r3, #0
 8006958:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800695c:	2300      	movs	r3, #0
 800695e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800696e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10f      	bne.n	8006996 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <HAL_UART_IRQHandler+0x66>
 8006982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fbf0 	bl	8007174 <UART_Receive_IT>
      return;
 8006994:	e25b      	b.n	8006e4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 80de 	beq.w	8006b5c <HAL_UART_IRQHandler+0x22c>
 80069a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d106      	bne.n	80069ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 80d1 	beq.w	8006b5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00b      	beq.n	80069de <HAL_UART_IRQHandler+0xae>
 80069c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d6:	f043 0201 	orr.w	r2, r3, #1
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00b      	beq.n	8006a02 <HAL_UART_IRQHandler+0xd2>
 80069ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069fa:	f043 0202 	orr.w	r2, r3, #2
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00b      	beq.n	8006a26 <HAL_UART_IRQHandler+0xf6>
 8006a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a1e:	f043 0204 	orr.w	r2, r3, #4
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a2a:	f003 0308 	and.w	r3, r3, #8
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d011      	beq.n	8006a56 <HAL_UART_IRQHandler+0x126>
 8006a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d105      	bne.n	8006a4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a4e:	f043 0208 	orr.w	r2, r3, #8
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 81f2 	beq.w	8006e44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d008      	beq.n	8006a7e <HAL_UART_IRQHandler+0x14e>
 8006a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a70:	f003 0320 	and.w	r3, r3, #32
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fb7b 	bl	8007174 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a88:	2b40      	cmp	r3, #64	@ 0x40
 8006a8a:	bf0c      	ite	eq
 8006a8c:	2301      	moveq	r3, #1
 8006a8e:	2300      	movne	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9a:	f003 0308 	and.w	r3, r3, #8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d103      	bne.n	8006aaa <HAL_UART_IRQHandler+0x17a>
 8006aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d04f      	beq.n	8006b4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fa83 	bl	8006fb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aba:	2b40      	cmp	r3, #64	@ 0x40
 8006abc:	d141      	bne.n	8006b42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3314      	adds	r3, #20
 8006ac4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006adc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3314      	adds	r3, #20
 8006ae6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006aea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006aee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006af6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1d9      	bne.n	8006abe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d013      	beq.n	8006b3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b16:	4a7e      	ldr	r2, [pc, #504]	@ (8006d10 <HAL_UART_IRQHandler+0x3e0>)
 8006b18:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fd fa96 	bl	8004050 <HAL_DMA_Abort_IT>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d016      	beq.n	8006b58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b34:	4610      	mov	r0, r2
 8006b36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b38:	e00e      	b.n	8006b58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f99e 	bl	8006e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b40:	e00a      	b.n	8006b58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f99a 	bl	8006e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b48:	e006      	b.n	8006b58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f996 	bl	8006e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006b56:	e175      	b.n	8006e44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b58:	bf00      	nop
    return;
 8006b5a:	e173      	b.n	8006e44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	f040 814f 	bne.w	8006e04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b6a:	f003 0310 	and.w	r3, r3, #16
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 8148 	beq.w	8006e04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b78:	f003 0310 	and.w	r3, r3, #16
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8141 	beq.w	8006e04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b82:	2300      	movs	r3, #0
 8006b84:	60bb      	str	r3, [r7, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	60bb      	str	r3, [r7, #8]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	60bb      	str	r3, [r7, #8]
 8006b96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba2:	2b40      	cmp	r3, #64	@ 0x40
 8006ba4:	f040 80b6 	bne.w	8006d14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 8145 	beq.w	8006e48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	f080 813e 	bcs.w	8006e48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bd2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bde:	f000 8088 	beq.w	8006cf2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	330c      	adds	r3, #12
 8006be8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	330c      	adds	r3, #12
 8006c0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006c0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1d9      	bne.n	8006be2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3314      	adds	r3, #20
 8006c34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3314      	adds	r3, #20
 8006c4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c52:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c56:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e1      	bne.n	8006c2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3314      	adds	r3, #20
 8006c70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c74:	e853 3f00 	ldrex	r3, [r3]
 8006c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3314      	adds	r3, #20
 8006c8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e3      	bne.n	8006c6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	330c      	adds	r3, #12
 8006cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cba:	e853 3f00 	ldrex	r3, [r3]
 8006cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cc2:	f023 0310 	bic.w	r3, r3, #16
 8006cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006cd4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006cd6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e3      	bne.n	8006cb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fd f93f 	bl	8003f70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7fb fa81 	bl	8002210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d0e:	e09b      	b.n	8006e48 <HAL_UART_IRQHandler+0x518>
 8006d10:	0800707d 	.word	0x0800707d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 808e 	beq.w	8006e4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 8089 	beq.w	8006e4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	330c      	adds	r3, #12
 8006d40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d44:	e853 3f00 	ldrex	r3, [r3]
 8006d48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	330c      	adds	r3, #12
 8006d5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006d5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e3      	bne.n	8006d3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3314      	adds	r3, #20
 8006d78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	623b      	str	r3, [r7, #32]
   return(result);
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	f023 0301 	bic.w	r3, r3, #1
 8006d88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3314      	adds	r3, #20
 8006d92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d96:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e3      	bne.n	8006d72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	330c      	adds	r3, #12
 8006dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0310 	bic.w	r3, r3, #16
 8006dce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	330c      	adds	r3, #12
 8006dd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ddc:	61fa      	str	r2, [r7, #28]
 8006dde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	69b9      	ldr	r1, [r7, #24]
 8006de2:	69fa      	ldr	r2, [r7, #28]
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e3      	bne.n	8006db8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006df6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7fb fa07 	bl	8002210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e02:	e023      	b.n	8006e4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d009      	beq.n	8006e24 <HAL_UART_IRQHandler+0x4f4>
 8006e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f941 	bl	80070a4 <UART_Transmit_IT>
    return;
 8006e22:	e014      	b.n	8006e4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00e      	beq.n	8006e4e <HAL_UART_IRQHandler+0x51e>
 8006e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d008      	beq.n	8006e4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f981 	bl	8007144 <UART_EndTransmit_IT>
    return;
 8006e42:	e004      	b.n	8006e4e <HAL_UART_IRQHandler+0x51e>
    return;
 8006e44:	bf00      	nop
 8006e46:	e002      	b.n	8006e4e <HAL_UART_IRQHandler+0x51e>
      return;
 8006e48:	bf00      	nop
 8006e4a:	e000      	b.n	8006e4e <HAL_UART_IRQHandler+0x51e>
      return;
 8006e4c:	bf00      	nop
  }
}
 8006e4e:	37e8      	adds	r7, #232	@ 0xe8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ea0:	e03b      	b.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea8:	d037      	beq.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eaa:	f7fc fa07 	bl	80032bc <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	6a3a      	ldr	r2, [r7, #32]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d302      	bcc.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e03a      	b.n	8006f3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d023      	beq.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b80      	cmp	r3, #128	@ 0x80
 8006ed6:	d020      	beq.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b40      	cmp	r3, #64	@ 0x40
 8006edc:	d01d      	beq.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d116      	bne.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006eec:	2300      	movs	r3, #0
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 f857 	bl	8006fb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e00f      	b.n	8006f3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4013      	ands	r3, r2
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	bf0c      	ite	eq
 8006f2a:	2301      	moveq	r3, #1
 8006f2c:	2300      	movne	r3, #0
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	79fb      	ldrb	r3, [r7, #7]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d0b4      	beq.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b085      	sub	sp, #20
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	88fa      	ldrh	r2, [r7, #6]
 8006f5a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	88fa      	ldrh	r2, [r7, #6]
 8006f60:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2222      	movs	r2, #34	@ 0x22
 8006f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d007      	beq.n	8006f88 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f86:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	695a      	ldr	r2, [r3, #20]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0201 	orr.w	r2, r2, #1
 8006f96:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0220 	orr.w	r2, r2, #32
 8006fa6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b095      	sub	sp, #84	@ 0x54
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	330c      	adds	r3, #12
 8006fc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	330c      	adds	r3, #12
 8006fdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006fde:	643a      	str	r2, [r7, #64]	@ 0x40
 8006fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fe4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e5      	bne.n	8006fbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3314      	adds	r3, #20
 8006ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	e853 3f00 	ldrex	r3, [r3]
 8007000:	61fb      	str	r3, [r7, #28]
   return(result);
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	f023 0301 	bic.w	r3, r3, #1
 8007008:	64bb      	str	r3, [r7, #72]	@ 0x48
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3314      	adds	r3, #20
 8007010:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007012:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007014:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007016:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e5      	bne.n	8006ff2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800702a:	2b01      	cmp	r3, #1
 800702c:	d119      	bne.n	8007062 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	330c      	adds	r3, #12
 8007034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	60bb      	str	r3, [r7, #8]
   return(result);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f023 0310 	bic.w	r3, r3, #16
 8007044:	647b      	str	r3, [r7, #68]	@ 0x44
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800704e:	61ba      	str	r2, [r7, #24]
 8007050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6979      	ldr	r1, [r7, #20]
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	613b      	str	r3, [r7, #16]
   return(result);
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e5      	bne.n	800702e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007070:	bf00      	nop
 8007072:	3754      	adds	r7, #84	@ 0x54
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007088:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f7ff fef0 	bl	8006e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800709c:	bf00      	nop
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b21      	cmp	r3, #33	@ 0x21
 80070b6:	d13e      	bne.n	8007136 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070c0:	d114      	bne.n	80070ec <UART_Transmit_IT+0x48>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d110      	bne.n	80070ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	461a      	mov	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	1c9a      	adds	r2, r3, #2
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	621a      	str	r2, [r3, #32]
 80070ea:	e008      	b.n	80070fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	1c59      	adds	r1, r3, #1
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6211      	str	r1, [r2, #32]
 80070f6:	781a      	ldrb	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007102:	b29b      	uxth	r3, r3
 8007104:	3b01      	subs	r3, #1
 8007106:	b29b      	uxth	r3, r3
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	4619      	mov	r1, r3
 800710c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10f      	bne.n	8007132 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007120:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68da      	ldr	r2, [r3, #12]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007130:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	e000      	b.n	8007138 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007136:	2302      	movs	r3, #2
  }
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800715a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff fe75 	bl	8006e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b08c      	sub	sp, #48	@ 0x30
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b22      	cmp	r3, #34	@ 0x22
 8007186:	f040 80ae 	bne.w	80072e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007192:	d117      	bne.n	80071c4 <UART_Receive_IT+0x50>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d113      	bne.n	80071c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800719c:	2300      	movs	r3, #0
 800719e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071bc:	1c9a      	adds	r2, r3, #2
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80071c2:	e026      	b.n	8007212 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d6:	d007      	beq.n	80071e8 <UART_Receive_IT+0x74>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10a      	bne.n	80071f6 <UART_Receive_IT+0x82>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d106      	bne.n	80071f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f2:	701a      	strb	r2, [r3, #0]
 80071f4:	e008      	b.n	8007208 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007202:	b2da      	uxtb	r2, r3
 8007204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007206:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29b      	uxth	r3, r3
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	4619      	mov	r1, r3
 8007220:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007222:	2b00      	cmp	r3, #0
 8007224:	d15d      	bne.n	80072e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0220 	bic.w	r2, r2, #32
 8007234:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007244:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695a      	ldr	r2, [r3, #20]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0201 	bic.w	r2, r2, #1
 8007254:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007268:	2b01      	cmp	r3, #1
 800726a:	d135      	bne.n	80072d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	330c      	adds	r3, #12
 8007278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	613b      	str	r3, [r7, #16]
   return(result);
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f023 0310 	bic.w	r3, r3, #16
 8007288:	627b      	str	r3, [r7, #36]	@ 0x24
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	330c      	adds	r3, #12
 8007290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007292:	623a      	str	r2, [r7, #32]
 8007294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	69f9      	ldr	r1, [r7, #28]
 8007298:	6a3a      	ldr	r2, [r7, #32]
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	61bb      	str	r3, [r7, #24]
   return(result);
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e5      	bne.n	8007272 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0310 	and.w	r3, r3, #16
 80072b0:	2b10      	cmp	r3, #16
 80072b2:	d10a      	bne.n	80072ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7fa ff9d 	bl	8002210 <HAL_UARTEx_RxEventCallback>
 80072d6:	e002      	b.n	80072de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff fdc5 	bl	8006e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	e002      	b.n	80072e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e000      	b.n	80072e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80072e6:	2302      	movs	r3, #2
  }
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3730      	adds	r7, #48	@ 0x30
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072f4:	b0c0      	sub	sp, #256	@ 0x100
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730c:	68d9      	ldr	r1, [r3, #12]
 800730e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	ea40 0301 	orr.w	r3, r0, r1
 8007318:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800731a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	431a      	orrs	r2, r3
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	431a      	orrs	r2, r3
 8007330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	4313      	orrs	r3, r2
 8007338:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007348:	f021 010c 	bic.w	r1, r1, #12
 800734c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007356:	430b      	orrs	r3, r1
 8007358:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800735a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736a:	6999      	ldr	r1, [r3, #24]
 800736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	ea40 0301 	orr.w	r3, r0, r1
 8007376:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4b8f      	ldr	r3, [pc, #572]	@ (80075bc <UART_SetConfig+0x2cc>)
 8007380:	429a      	cmp	r2, r3
 8007382:	d005      	beq.n	8007390 <UART_SetConfig+0xa0>
 8007384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	4b8d      	ldr	r3, [pc, #564]	@ (80075c0 <UART_SetConfig+0x2d0>)
 800738c:	429a      	cmp	r2, r3
 800738e:	d104      	bne.n	800739a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007390:	f7fe f882 	bl	8005498 <HAL_RCC_GetPCLK2Freq>
 8007394:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007398:	e003      	b.n	80073a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800739a:	f7fe f869 	bl	8005470 <HAL_RCC_GetPCLK1Freq>
 800739e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a6:	69db      	ldr	r3, [r3, #28]
 80073a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073ac:	f040 810c 	bne.w	80075c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073b4:	2200      	movs	r2, #0
 80073b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80073be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80073c2:	4622      	mov	r2, r4
 80073c4:	462b      	mov	r3, r5
 80073c6:	1891      	adds	r1, r2, r2
 80073c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80073ca:	415b      	adcs	r3, r3
 80073cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80073d2:	4621      	mov	r1, r4
 80073d4:	eb12 0801 	adds.w	r8, r2, r1
 80073d8:	4629      	mov	r1, r5
 80073da:	eb43 0901 	adc.w	r9, r3, r1
 80073de:	f04f 0200 	mov.w	r2, #0
 80073e2:	f04f 0300 	mov.w	r3, #0
 80073e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073f2:	4690      	mov	r8, r2
 80073f4:	4699      	mov	r9, r3
 80073f6:	4623      	mov	r3, r4
 80073f8:	eb18 0303 	adds.w	r3, r8, r3
 80073fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007400:	462b      	mov	r3, r5
 8007402:	eb49 0303 	adc.w	r3, r9, r3
 8007406:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800740a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007416:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800741a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800741e:	460b      	mov	r3, r1
 8007420:	18db      	adds	r3, r3, r3
 8007422:	653b      	str	r3, [r7, #80]	@ 0x50
 8007424:	4613      	mov	r3, r2
 8007426:	eb42 0303 	adc.w	r3, r2, r3
 800742a:	657b      	str	r3, [r7, #84]	@ 0x54
 800742c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007430:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007434:	f7f9 fae6 	bl	8000a04 <__aeabi_uldivmod>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4b61      	ldr	r3, [pc, #388]	@ (80075c4 <UART_SetConfig+0x2d4>)
 800743e:	fba3 2302 	umull	r2, r3, r3, r2
 8007442:	095b      	lsrs	r3, r3, #5
 8007444:	011c      	lsls	r4, r3, #4
 8007446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800744a:	2200      	movs	r2, #0
 800744c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007450:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007454:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007458:	4642      	mov	r2, r8
 800745a:	464b      	mov	r3, r9
 800745c:	1891      	adds	r1, r2, r2
 800745e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007460:	415b      	adcs	r3, r3
 8007462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007464:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007468:	4641      	mov	r1, r8
 800746a:	eb12 0a01 	adds.w	sl, r2, r1
 800746e:	4649      	mov	r1, r9
 8007470:	eb43 0b01 	adc.w	fp, r3, r1
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007480:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007484:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007488:	4692      	mov	sl, r2
 800748a:	469b      	mov	fp, r3
 800748c:	4643      	mov	r3, r8
 800748e:	eb1a 0303 	adds.w	r3, sl, r3
 8007492:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007496:	464b      	mov	r3, r9
 8007498:	eb4b 0303 	adc.w	r3, fp, r3
 800749c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80074b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80074b4:	460b      	mov	r3, r1
 80074b6:	18db      	adds	r3, r3, r3
 80074b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80074ba:	4613      	mov	r3, r2
 80074bc:	eb42 0303 	adc.w	r3, r2, r3
 80074c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80074c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80074c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80074ca:	f7f9 fa9b 	bl	8000a04 <__aeabi_uldivmod>
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4611      	mov	r1, r2
 80074d4:	4b3b      	ldr	r3, [pc, #236]	@ (80075c4 <UART_SetConfig+0x2d4>)
 80074d6:	fba3 2301 	umull	r2, r3, r3, r1
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	2264      	movs	r2, #100	@ 0x64
 80074de:	fb02 f303 	mul.w	r3, r2, r3
 80074e2:	1acb      	subs	r3, r1, r3
 80074e4:	00db      	lsls	r3, r3, #3
 80074e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80074ea:	4b36      	ldr	r3, [pc, #216]	@ (80075c4 <UART_SetConfig+0x2d4>)
 80074ec:	fba3 2302 	umull	r2, r3, r3, r2
 80074f0:	095b      	lsrs	r3, r3, #5
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80074f8:	441c      	add	r4, r3
 80074fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074fe:	2200      	movs	r2, #0
 8007500:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007504:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007508:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800750c:	4642      	mov	r2, r8
 800750e:	464b      	mov	r3, r9
 8007510:	1891      	adds	r1, r2, r2
 8007512:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007514:	415b      	adcs	r3, r3
 8007516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007518:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800751c:	4641      	mov	r1, r8
 800751e:	1851      	adds	r1, r2, r1
 8007520:	6339      	str	r1, [r7, #48]	@ 0x30
 8007522:	4649      	mov	r1, r9
 8007524:	414b      	adcs	r3, r1
 8007526:	637b      	str	r3, [r7, #52]	@ 0x34
 8007528:	f04f 0200 	mov.w	r2, #0
 800752c:	f04f 0300 	mov.w	r3, #0
 8007530:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007534:	4659      	mov	r1, fp
 8007536:	00cb      	lsls	r3, r1, #3
 8007538:	4651      	mov	r1, sl
 800753a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800753e:	4651      	mov	r1, sl
 8007540:	00ca      	lsls	r2, r1, #3
 8007542:	4610      	mov	r0, r2
 8007544:	4619      	mov	r1, r3
 8007546:	4603      	mov	r3, r0
 8007548:	4642      	mov	r2, r8
 800754a:	189b      	adds	r3, r3, r2
 800754c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007550:	464b      	mov	r3, r9
 8007552:	460a      	mov	r2, r1
 8007554:	eb42 0303 	adc.w	r3, r2, r3
 8007558:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007568:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800756c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007570:	460b      	mov	r3, r1
 8007572:	18db      	adds	r3, r3, r3
 8007574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007576:	4613      	mov	r3, r2
 8007578:	eb42 0303 	adc.w	r3, r2, r3
 800757c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800757e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007582:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007586:	f7f9 fa3d 	bl	8000a04 <__aeabi_uldivmod>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4b0d      	ldr	r3, [pc, #52]	@ (80075c4 <UART_SetConfig+0x2d4>)
 8007590:	fba3 1302 	umull	r1, r3, r3, r2
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	2164      	movs	r1, #100	@ 0x64
 8007598:	fb01 f303 	mul.w	r3, r1, r3
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	3332      	adds	r3, #50	@ 0x32
 80075a2:	4a08      	ldr	r2, [pc, #32]	@ (80075c4 <UART_SetConfig+0x2d4>)
 80075a4:	fba2 2303 	umull	r2, r3, r2, r3
 80075a8:	095b      	lsrs	r3, r3, #5
 80075aa:	f003 0207 	and.w	r2, r3, #7
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4422      	add	r2, r4
 80075b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075b8:	e106      	b.n	80077c8 <UART_SetConfig+0x4d8>
 80075ba:	bf00      	nop
 80075bc:	40011000 	.word	0x40011000
 80075c0:	40011400 	.word	0x40011400
 80075c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075cc:	2200      	movs	r2, #0
 80075ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80075d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80075da:	4642      	mov	r2, r8
 80075dc:	464b      	mov	r3, r9
 80075de:	1891      	adds	r1, r2, r2
 80075e0:	6239      	str	r1, [r7, #32]
 80075e2:	415b      	adcs	r3, r3
 80075e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80075e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075ea:	4641      	mov	r1, r8
 80075ec:	1854      	adds	r4, r2, r1
 80075ee:	4649      	mov	r1, r9
 80075f0:	eb43 0501 	adc.w	r5, r3, r1
 80075f4:	f04f 0200 	mov.w	r2, #0
 80075f8:	f04f 0300 	mov.w	r3, #0
 80075fc:	00eb      	lsls	r3, r5, #3
 80075fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007602:	00e2      	lsls	r2, r4, #3
 8007604:	4614      	mov	r4, r2
 8007606:	461d      	mov	r5, r3
 8007608:	4643      	mov	r3, r8
 800760a:	18e3      	adds	r3, r4, r3
 800760c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007610:	464b      	mov	r3, r9
 8007612:	eb45 0303 	adc.w	r3, r5, r3
 8007616:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800761a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007626:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800762a:	f04f 0200 	mov.w	r2, #0
 800762e:	f04f 0300 	mov.w	r3, #0
 8007632:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007636:	4629      	mov	r1, r5
 8007638:	008b      	lsls	r3, r1, #2
 800763a:	4621      	mov	r1, r4
 800763c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007640:	4621      	mov	r1, r4
 8007642:	008a      	lsls	r2, r1, #2
 8007644:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007648:	f7f9 f9dc 	bl	8000a04 <__aeabi_uldivmod>
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	4b60      	ldr	r3, [pc, #384]	@ (80077d4 <UART_SetConfig+0x4e4>)
 8007652:	fba3 2302 	umull	r2, r3, r3, r2
 8007656:	095b      	lsrs	r3, r3, #5
 8007658:	011c      	lsls	r4, r3, #4
 800765a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800765e:	2200      	movs	r2, #0
 8007660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007664:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007668:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800766c:	4642      	mov	r2, r8
 800766e:	464b      	mov	r3, r9
 8007670:	1891      	adds	r1, r2, r2
 8007672:	61b9      	str	r1, [r7, #24]
 8007674:	415b      	adcs	r3, r3
 8007676:	61fb      	str	r3, [r7, #28]
 8007678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800767c:	4641      	mov	r1, r8
 800767e:	1851      	adds	r1, r2, r1
 8007680:	6139      	str	r1, [r7, #16]
 8007682:	4649      	mov	r1, r9
 8007684:	414b      	adcs	r3, r1
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	f04f 0200 	mov.w	r2, #0
 800768c:	f04f 0300 	mov.w	r3, #0
 8007690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007694:	4659      	mov	r1, fp
 8007696:	00cb      	lsls	r3, r1, #3
 8007698:	4651      	mov	r1, sl
 800769a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800769e:	4651      	mov	r1, sl
 80076a0:	00ca      	lsls	r2, r1, #3
 80076a2:	4610      	mov	r0, r2
 80076a4:	4619      	mov	r1, r3
 80076a6:	4603      	mov	r3, r0
 80076a8:	4642      	mov	r2, r8
 80076aa:	189b      	adds	r3, r3, r2
 80076ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076b0:	464b      	mov	r3, r9
 80076b2:	460a      	mov	r2, r1
 80076b4:	eb42 0303 	adc.w	r3, r2, r3
 80076b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80076c8:	f04f 0200 	mov.w	r2, #0
 80076cc:	f04f 0300 	mov.w	r3, #0
 80076d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80076d4:	4649      	mov	r1, r9
 80076d6:	008b      	lsls	r3, r1, #2
 80076d8:	4641      	mov	r1, r8
 80076da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076de:	4641      	mov	r1, r8
 80076e0:	008a      	lsls	r2, r1, #2
 80076e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80076e6:	f7f9 f98d 	bl	8000a04 <__aeabi_uldivmod>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4611      	mov	r1, r2
 80076f0:	4b38      	ldr	r3, [pc, #224]	@ (80077d4 <UART_SetConfig+0x4e4>)
 80076f2:	fba3 2301 	umull	r2, r3, r3, r1
 80076f6:	095b      	lsrs	r3, r3, #5
 80076f8:	2264      	movs	r2, #100	@ 0x64
 80076fa:	fb02 f303 	mul.w	r3, r2, r3
 80076fe:	1acb      	subs	r3, r1, r3
 8007700:	011b      	lsls	r3, r3, #4
 8007702:	3332      	adds	r3, #50	@ 0x32
 8007704:	4a33      	ldr	r2, [pc, #204]	@ (80077d4 <UART_SetConfig+0x4e4>)
 8007706:	fba2 2303 	umull	r2, r3, r2, r3
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007710:	441c      	add	r4, r3
 8007712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007716:	2200      	movs	r2, #0
 8007718:	673b      	str	r3, [r7, #112]	@ 0x70
 800771a:	677a      	str	r2, [r7, #116]	@ 0x74
 800771c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007720:	4642      	mov	r2, r8
 8007722:	464b      	mov	r3, r9
 8007724:	1891      	adds	r1, r2, r2
 8007726:	60b9      	str	r1, [r7, #8]
 8007728:	415b      	adcs	r3, r3
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007730:	4641      	mov	r1, r8
 8007732:	1851      	adds	r1, r2, r1
 8007734:	6039      	str	r1, [r7, #0]
 8007736:	4649      	mov	r1, r9
 8007738:	414b      	adcs	r3, r1
 800773a:	607b      	str	r3, [r7, #4]
 800773c:	f04f 0200 	mov.w	r2, #0
 8007740:	f04f 0300 	mov.w	r3, #0
 8007744:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007748:	4659      	mov	r1, fp
 800774a:	00cb      	lsls	r3, r1, #3
 800774c:	4651      	mov	r1, sl
 800774e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007752:	4651      	mov	r1, sl
 8007754:	00ca      	lsls	r2, r1, #3
 8007756:	4610      	mov	r0, r2
 8007758:	4619      	mov	r1, r3
 800775a:	4603      	mov	r3, r0
 800775c:	4642      	mov	r2, r8
 800775e:	189b      	adds	r3, r3, r2
 8007760:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007762:	464b      	mov	r3, r9
 8007764:	460a      	mov	r2, r1
 8007766:	eb42 0303 	adc.w	r3, r2, r3
 800776a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	663b      	str	r3, [r7, #96]	@ 0x60
 8007776:	667a      	str	r2, [r7, #100]	@ 0x64
 8007778:	f04f 0200 	mov.w	r2, #0
 800777c:	f04f 0300 	mov.w	r3, #0
 8007780:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007784:	4649      	mov	r1, r9
 8007786:	008b      	lsls	r3, r1, #2
 8007788:	4641      	mov	r1, r8
 800778a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800778e:	4641      	mov	r1, r8
 8007790:	008a      	lsls	r2, r1, #2
 8007792:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007796:	f7f9 f935 	bl	8000a04 <__aeabi_uldivmod>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4b0d      	ldr	r3, [pc, #52]	@ (80077d4 <UART_SetConfig+0x4e4>)
 80077a0:	fba3 1302 	umull	r1, r3, r3, r2
 80077a4:	095b      	lsrs	r3, r3, #5
 80077a6:	2164      	movs	r1, #100	@ 0x64
 80077a8:	fb01 f303 	mul.w	r3, r1, r3
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	3332      	adds	r3, #50	@ 0x32
 80077b2:	4a08      	ldr	r2, [pc, #32]	@ (80077d4 <UART_SetConfig+0x4e4>)
 80077b4:	fba2 2303 	umull	r2, r3, r2, r3
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	f003 020f 	and.w	r2, r3, #15
 80077be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4422      	add	r2, r4
 80077c6:	609a      	str	r2, [r3, #8]
}
 80077c8:	bf00      	nop
 80077ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80077ce:	46bd      	mov	sp, r7
 80077d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077d4:	51eb851f 	.word	0x51eb851f

080077d8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	6812      	ldr	r2, [r2, #0]
 80077f0:	f023 0101 	bic.w	r1, r3, #1
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d102      	bne.n	8007808 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007802:	2340      	movs	r3, #64	@ 0x40
 8007804:	617b      	str	r3, [r7, #20]
 8007806:	e001      	b.n	800780c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007808:	2300      	movs	r3, #0
 800780a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007818:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800781e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007824:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800782a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007830:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007836:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 800783c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8007842:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8007848:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4313      	orrs	r3, r2
 800785a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	4313      	orrs	r3, r2
 8007864:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8007866:	4b10      	ldr	r3, [pc, #64]	@ (80078a8 <FSMC_NORSRAM_Init+0xd0>)
 8007868:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007870:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8007878:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	43db      	mvns	r3, r3
 8007888:	ea02 0103 	and.w	r1, r2, r3
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	4319      	orrs	r1, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	0008fb7f 	.word	0x0008fb7f

080078ac <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c2:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	431a      	orrs	r2, r3
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	021b      	lsls	r3, r3, #8
 80078d8:	431a      	orrs	r2, r3
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	041b      	lsls	r3, r3, #16
 80078e0:	431a      	orrs	r2, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	051b      	lsls	r3, r3, #20
 80078ea:	431a      	orrs	r2, r3
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	3b02      	subs	r3, #2
 80078f2:	061b      	lsls	r3, r3, #24
 80078f4:	431a      	orrs	r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	3201      	adds	r2, #1
 8007900:	4319      	orrs	r1, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
	...

08007918 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800792c:	d11d      	bne.n	800796a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007936:	4b13      	ldr	r3, [pc, #76]	@ (8007984 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007938:	4013      	ands	r3, r2
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	6811      	ldr	r1, [r2, #0]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	6852      	ldr	r2, [r2, #4]
 8007942:	0112      	lsls	r2, r2, #4
 8007944:	4311      	orrs	r1, r2
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	6892      	ldr	r2, [r2, #8]
 800794a:	0212      	lsls	r2, r2, #8
 800794c:	4311      	orrs	r1, r2
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	6992      	ldr	r2, [r2, #24]
 8007952:	4311      	orrs	r1, r2
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	68d2      	ldr	r2, [r2, #12]
 8007958:	0412      	lsls	r2, r2, #16
 800795a:	430a      	orrs	r2, r1
 800795c:	ea43 0102 	orr.w	r1, r3, r2
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007968:	e005      	b.n	8007976 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8007972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	cff00000 	.word	0xcff00000

08007988 <memset>:
 8007988:	4402      	add	r2, r0
 800798a:	4603      	mov	r3, r0
 800798c:	4293      	cmp	r3, r2
 800798e:	d100      	bne.n	8007992 <memset+0xa>
 8007990:	4770      	bx	lr
 8007992:	f803 1b01 	strb.w	r1, [r3], #1
 8007996:	e7f9      	b.n	800798c <memset+0x4>

08007998 <__libc_init_array>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	4d0d      	ldr	r5, [pc, #52]	@ (80079d0 <__libc_init_array+0x38>)
 800799c:	4c0d      	ldr	r4, [pc, #52]	@ (80079d4 <__libc_init_array+0x3c>)
 800799e:	1b64      	subs	r4, r4, r5
 80079a0:	10a4      	asrs	r4, r4, #2
 80079a2:	2600      	movs	r6, #0
 80079a4:	42a6      	cmp	r6, r4
 80079a6:	d109      	bne.n	80079bc <__libc_init_array+0x24>
 80079a8:	4d0b      	ldr	r5, [pc, #44]	@ (80079d8 <__libc_init_array+0x40>)
 80079aa:	4c0c      	ldr	r4, [pc, #48]	@ (80079dc <__libc_init_array+0x44>)
 80079ac:	f000 f818 	bl	80079e0 <_init>
 80079b0:	1b64      	subs	r4, r4, r5
 80079b2:	10a4      	asrs	r4, r4, #2
 80079b4:	2600      	movs	r6, #0
 80079b6:	42a6      	cmp	r6, r4
 80079b8:	d105      	bne.n	80079c6 <__libc_init_array+0x2e>
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
 80079bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c0:	4798      	blx	r3
 80079c2:	3601      	adds	r6, #1
 80079c4:	e7ee      	b.n	80079a4 <__libc_init_array+0xc>
 80079c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ca:	4798      	blx	r3
 80079cc:	3601      	adds	r6, #1
 80079ce:	e7f2      	b.n	80079b6 <__libc_init_array+0x1e>
 80079d0:	0800a9e0 	.word	0x0800a9e0
 80079d4:	0800a9e0 	.word	0x0800a9e0
 80079d8:	0800a9e0 	.word	0x0800a9e0
 80079dc:	0800a9e4 	.word	0x0800a9e4

080079e0 <_init>:
 80079e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e2:	bf00      	nop
 80079e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e6:	bc08      	pop	{r3}
 80079e8:	469e      	mov	lr, r3
 80079ea:	4770      	bx	lr

080079ec <_fini>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	bf00      	nop
 80079f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f2:	bc08      	pop	{r3}
 80079f4:	469e      	mov	lr, r3
 80079f6:	4770      	bx	lr
