
Modbus_Project_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003018  080080d8  080080d8  000180d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0f0  0800b0f0  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0f0  0800b0f0  0001b0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0f8  0800b0f8  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0f8  0800b0f8  0001b0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0fc  0800b0fc  0001b0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800b100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002025c  2**0
                  CONTENTS
 10 .bss          000008d8  2000025c  2000025c  0002025c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b34  20000b34  0002025c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b236  00000000  00000000  000202cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004793  00000000  00000000  0003b505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001808  00000000  00000000  0003fc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001294  00000000  00000000  000414a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026c26  00000000  00000000  00042734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002167b  00000000  00000000  0006935a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e0c67  00000000  00000000  0008a9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006848  00000000  00000000  0016b63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00171e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000025c 	.word	0x2000025c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080c0 	.word	0x080080c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000260 	.word	0x20000260
 80001cc:	080080c0 	.word	0x080080c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <InitSlave>:


Slave_Device BKIT01;


void InitSlave(Slave_Device* hDev){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	hDev->signal = IDLE;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	705a      	strb	r2, [r3, #1]
	hDev->subsignal.s = 0;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
	hDev->Address = SLAVE_ADDRESS;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	759a      	strb	r2, [r3, #22]
	memset(hDev->Register, 0, sizeof(hDev->Register));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	2214      	movs	r2, #20
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f006 fcf4 	bl	80077b8 <memset>
	Modbus_Init(&slave, &huart3);
 8000dd0:	4903      	ldr	r1, [pc, #12]	; (8000de0 <InitSlave+0x38>)
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <InitSlave+0x3c>)
 8000dd4:	f001 fc6a 	bl	80026ac <Modbus_Init>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200009a0 	.word	0x200009a0
 8000de4:	200005f0 	.word	0x200005f0

08000de8 <CommandParser_handler>:

void CommandParser_handler(Slave_Device* hDev){
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	switch(slave.Rx_buf[1]){
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <CommandParser_handler+0x84>)
 8000df2:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8000df6:	3b01      	subs	r3, #1
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d831      	bhi.n	8000e60 <CommandParser_handler+0x78>
 8000dfc:	a201      	add	r2, pc, #4	; (adr r2, 8000e04 <CommandParser_handler+0x1c>)
 8000dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e02:	bf00      	nop
 8000e04:	08000e5d 	.word	0x08000e5d
 8000e08:	08000e5d 	.word	0x08000e5d
 8000e0c:	08000e45 	.word	0x08000e45
 8000e10:	08000e5d 	.word	0x08000e5d
 8000e14:	08000e5d 	.word	0x08000e5d
 8000e18:	08000e4d 	.word	0x08000e4d
 8000e1c:	08000e61 	.word	0x08000e61
 8000e20:	08000e61 	.word	0x08000e61
 8000e24:	08000e61 	.word	0x08000e61
 8000e28:	08000e61 	.word	0x08000e61
 8000e2c:	08000e61 	.word	0x08000e61
 8000e30:	08000e61 	.word	0x08000e61
 8000e34:	08000e61 	.word	0x08000e61
 8000e38:	08000e61 	.word	0x08000e61
 8000e3c:	08000e5d 	.word	0x08000e5d
 8000e40:	08000e55 	.word	0x08000e55
	}
	case READ_DISCRETE_INPUT:{
		break;
	}
	case READ_HOLDING_REGISTER:{
		hDev->signal = READ_HOLDING_REGISTER_HANDLER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2204      	movs	r2, #4
 8000e48:	705a      	strb	r2, [r3, #1]
		break;
 8000e4a:	e008      	b.n	8000e5e <CommandParser_handler+0x76>
	}
	case WRITE_SINGLE_COIL:{
		break;
	}
	case WRITE_SINGLE_HOLDING_REGISTER:{
		hDev->signal = WRITE_HOLDING_REGISTER_HANDLER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2205      	movs	r2, #5
 8000e50:	705a      	strb	r2, [r3, #1]
		break;
 8000e52:	e004      	b.n	8000e5e <CommandParser_handler+0x76>
	}
	case WRITE_MULTIPLE_COIL:{
		break;
	}
	case WRITE_MULTIPLE_HOLDING_REGISTER:{
		hDev->signal = READ_MULTIPLE_HOLDING_REGISTER_HANDLER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2203      	movs	r2, #3
 8000e58:	705a      	strb	r2, [r3, #1]
		break;
 8000e5a:	e000      	b.n	8000e5e <CommandParser_handler+0x76>
		break;
 8000e5c:	bf00      	nop
	}
	}
	return;
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
}
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	200005f0 	.word	0x200005f0

08000e70 <splitFloat>:

void splitFloat(float _input, uint8_t *data) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e7a:	6038      	str	r0, [r7, #0]
	data[0] = *(((uint8_t*)&_input)+0);
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	701a      	strb	r2, [r3, #0]
	    data[1] = *(((uint8_t*)&_input)+1);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	797a      	ldrb	r2, [r7, #5]
 8000e8a:	701a      	strb	r2, [r3, #0]
	    data[2] = *(((uint8_t*)&_input)+2);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	3302      	adds	r3, #2
 8000e90:	79ba      	ldrb	r2, [r7, #6]
 8000e92:	701a      	strb	r2, [r3, #0]
	    data[3] = *(((uint8_t*)&_input)+3);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	3303      	adds	r3, #3
 8000e98:	79fa      	ldrb	r2, [r7, #7]
 8000e9a:	701a      	strb	r2, [r3, #0]
//	memcpy(data, &_input, sizeof(float));
};
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <splitUint16>:

void splitUint16(uint16_t input, uint8_t *higherByte, uint8_t *lowerByte) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	81fb      	strh	r3, [r7, #14]
    *higherByte = (input >> 8) & 0xFF; // Lấy 8 bit cao
 8000eb6:	89fb      	ldrh	r3, [r7, #14]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	701a      	strb	r2, [r3, #0]
    *lowerByte = input & 0xFF;        // Lấy 8 bit thấp
 8000ec2:	89fb      	ldrh	r3, [r7, #14]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	701a      	strb	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <Read_multiple_holding_register_handler>:


void Read_multiple_holding_register_handler(Slave_Device* hDev){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	uint16_t startReg = (uint16_t)(slave.Rx_buf[2]) << 8 | (uint16_t)(slave.Rx_buf[3]);
 8000ee0:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <Read_multiple_holding_register_handler+0xa8>)
 8000ee2:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <Read_multiple_holding_register_handler+0xa8>)
 8000eec:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	817b      	strh	r3, [r7, #10]
	uint16_t numberOfReg = (uint16_t)(slave.Rx_buf[4]) << 8 | (uint16_t)(slave.Rx_buf[5]);
 8000ef8:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <Read_multiple_holding_register_handler+0xa8>)
 8000efa:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <Read_multiple_holding_register_handler+0xa8>)
 8000f04:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	813b      	strh	r3, [r7, #8]
	slave.Tx_buf[0] = hDev->Address;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7d9a      	ldrb	r2, [r3, #22]
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <Read_multiple_holding_register_handler+0xa8>)
 8000f16:	715a      	strb	r2, [r3, #5]
	slave.Tx_buf[1] = slave.Rx_buf[1];
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <Read_multiple_holding_register_handler+0xa8>)
 8000f1a:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <Read_multiple_holding_register_handler+0xa8>)
 8000f20:	719a      	strb	r2, [r3, #6]
	slave.Tx_buf[2] = numberOfReg * 2;
 8000f22:	893b      	ldrh	r3, [r7, #8]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <Read_multiple_holding_register_handler+0xa8>)
 8000f2c:	71da      	strb	r2, [r3, #7]
	int i;
	for(i = 0; i < numberOfReg * 2; i++){
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	e00c      	b.n	8000f4e <Read_multiple_holding_register_handler+0x76>
		slave.Tx_buf[i + 3] = hDev->Register[startReg];
 8000f34:	897a      	ldrh	r2, [r7, #10]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3303      	adds	r3, #3
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	440a      	add	r2, r1
 8000f3e:	7891      	ldrb	r1, [r2, #2]
 8000f40:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <Read_multiple_holding_register_handler+0xa8>)
 8000f42:	4413      	add	r3, r2
 8000f44:	460a      	mov	r2, r1
 8000f46:	715a      	strb	r2, [r3, #5]
	for(i = 0; i < numberOfReg * 2; i++){
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	893b      	ldrh	r3, [r7, #8]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dbed      	blt.n	8000f34 <Read_multiple_holding_register_handler+0x5c>
	}
	slave.Tx_size = i + 3;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	3303      	adds	r3, #3
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <Read_multiple_holding_register_handler+0xa8>)
 8000f62:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	rs485_send_cmd(slave.Tx_buf, slave.Tx_size);
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <Read_multiple_holding_register_handler+0xa8>)
 8000f68:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <Read_multiple_holding_register_handler+0xac>)
 8000f72:	f001 fb17 	bl	80025a4 <rs485_send_cmd>

//	Modbus_Transmit_Slave(&slave, hDev->Address, slave.Rx_buf[1], &hDev->Register[startReg], numberOfReg * 2, 100);

	return;
 8000f76:	bf00      	nop
}
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200005f0 	.word	0x200005f0
 8000f84:	200005f5 	.word	0x200005f5

08000f88 <Read_holding_register_handler>:

void Read_holding_register_handler(Slave_Device* hDev){
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
//		slave.Tx_buf[i + 3] = hDev->Register[startReg];
//	}
//	slave.Tx_size = i + 3;
//	Modbus_Transmit_Slave(&slave, hDev->Address, slave.Rx_buf[1], data, 3, 100);
//	return;
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <ReadData>:

static void ReadData(Slave_Device* hDev){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	float tempCur = sensor_get_current();
 8000fa4:	f001 fc24 	bl	80027f0 <sensor_get_current>
 8000fa8:	ed87 0a05 	vstr	s0, [r7, #20]
	uint16_t tempLt = sensor_get_light();
 8000fac:	f001 fbca 	bl	8002744 <sensor_get_light>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	827b      	strh	r3, [r7, #18]
	uint16_t tempPt =sensor_get_potentiometer();
 8000fb4:	f001 fbd2 	bl	800275c <sensor_get_potentiometer>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	823b      	strh	r3, [r7, #16]
	float tempT = sensor_get_temperature();
 8000fbc:	f001 fc74 	bl	80028a8 <sensor_get_temperature>
 8000fc0:	ed87 0a03 	vstr	s0, [r7, #12]
	float tempVol = sensor_get_voltage();
 8000fc4:	f001 fbd8 	bl	8002778 <sensor_get_voltage>
 8000fc8:	ed87 0a02 	vstr	s0, [r7, #8]

	// Current
	splitFloat(tempCur, &hDev->Register[CURRENT_REGISTER_ADDRESS]);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	330c      	adds	r3, #12
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	ed97 0a05 	vldr	s0, [r7, #20]
 8000fd6:	f7ff ff4b 	bl	8000e70 <splitFloat>
	// Temperature
	splitFloat(tempT, &hDev->Register[TEMPERATURE_REGISTER_ADDRESS]);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3308      	adds	r3, #8
 8000fde:	4618      	mov	r0, r3
 8000fe0:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fe4:	f7ff ff44 	bl	8000e70 <splitFloat>
	// Voltage
	splitFloat(tempVol, &hDev->Register[VOLTAGE_REGISTER_ADDRESS]);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3310      	adds	r3, #16
 8000fec:	4618      	mov	r0, r3
 8000fee:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ff2:	f7ff ff3d 	bl	8000e70 <splitFloat>
	// Light
	splitUint16(tempLt, &hDev->Register[LIGHT_REGISTER_ADDRESS], &hDev->Register[LIGHT_REGISTER_ADDRESS + 1]);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	1d99      	adds	r1, r3, #6
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	1dda      	adds	r2, r3, #7
 8000ffe:	8a7b      	ldrh	r3, [r7, #18]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff51 	bl	8000ea8 <splitUint16>
	// Potentiometer
	splitUint16(tempPt, &hDev->Register[POTENTIOMETER_REGISTER_ADDRESS], &hDev->Register[POTENTIOMETER_REGISTER_ADDRESS + 1]);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	1c99      	adds	r1, r3, #2
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	1cda      	adds	r2, r3, #3
 800100e:	8a3b      	ldrh	r3, [r7, #16]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff49 	bl	8000ea8 <splitUint16>

}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <Write_holding_register_handler>:

void Write_holding_register_handler(Slave_Device* hDev){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

//	HAL_UART_Transmit(&huart3, slave.Rx_buf, slave.Rx_size, 1000);
	rs485_send_cmd(slave.Rx_buf, slave.Rx_size);
 8001028:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <Write_holding_register_handler+0xa8>)
 800102a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800102e:	b2db      	uxtb	r3, r3
 8001030:	4619      	mov	r1, r3
 8001032:	4826      	ldr	r0, [pc, #152]	; (80010cc <Write_holding_register_handler+0xac>)
 8001034:	f001 fab6 	bl	80025a4 <rs485_send_cmd>
	hDev->Register[LED_REGISTER_ADDRESS] = slave.Rx_buf[4];
 8001038:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <Write_holding_register_handler+0xa8>)
 800103a:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	711a      	strb	r2, [r3, #4]
	hDev->Register[LED_REGISTER_ADDRESS + 1] = slave.Rx_buf[5];
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <Write_holding_register_handler+0xa8>)
 8001044:	f893 210d 	ldrb.w	r2, [r3, #269]	; 0x10d
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	715a      	strb	r2, [r3, #5]
	uint8_t CoilState = hDev->Register[LED_REGISTER_ADDRESS + 1];
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	795b      	ldrb	r3, [r3, #5]
 8001050:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, CoilState & COIL_A);
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	461a      	mov	r2, r3
 800105c:	2120      	movs	r1, #32
 800105e:	481c      	ldr	r0, [pc, #112]	; (80010d0 <Write_holding_register_handler+0xb0>)
 8001060:	f003 fbd2 	bl	8004808 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, CoilState & COIL_B);
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	b2db      	uxtb	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	2140      	movs	r1, #64	; 0x40
 8001070:	4817      	ldr	r0, [pc, #92]	; (80010d0 <Write_holding_register_handler+0xb0>)
 8001072:	f003 fbc9 	bl	8004808 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X0_GPIO_Port, OUTPUT_X0_Pin, CoilState & COIL_C);
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	b2db      	uxtb	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	2140      	movs	r1, #64	; 0x40
 8001082:	4814      	ldr	r0, [pc, #80]	; (80010d4 <Write_holding_register_handler+0xb4>)
 8001084:	f003 fbc0 	bl	8004808 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X1_GPIO_Port, OUTPUT_X1_Pin, CoilState & COIL_D);
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	b2db      	uxtb	r3, r3
 8001090:	461a      	mov	r2, r3
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <Write_holding_register_handler+0xb4>)
 8001096:	f003 fbb7 	bl	8004808 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X2_GPIO_Port, OUTPUT_X2_Pin, CoilState & COIL_E);
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	2110      	movs	r1, #16
 80010a6:	480c      	ldr	r0, [pc, #48]	; (80010d8 <Write_holding_register_handler+0xb8>)
 80010a8:	f003 fbae 	bl	8004808 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_X3_GPIO_Port, OUTPUT_X3_Pin, CoilState & COIL_F);
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	f003 0320 	and.w	r3, r3, #32
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	2120      	movs	r1, #32
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <Write_holding_register_handler+0xb8>)
 80010ba:	f003 fba5 	bl	8004808 <HAL_GPIO_WritePin>
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200005f0 	.word	0x200005f0
 80010cc:	200006f8 	.word	0x200006f8
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40020800 	.word	0x40020800

080010dc <slave_behavior>:
		HAL_GPIO_WritePin(OUTPUT_X1_GPIO_Port, OUTPUT_X1_Pin, RESET);
		HAL_GPIO_WritePin(OUTPUT_X2_GPIO_Port, OUTPUT_X2_Pin, RESET);
		HAL_GPIO_WritePin(OUTPUT_X3_GPIO_Port, OUTPUT_X3_Pin, RESET);
};

void slave_behavior(Slave_Device* hDev){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	switch(hDev->signal){
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	785b      	ldrb	r3, [r3, #1]
 80010e8:	2b05      	cmp	r3, #5
 80010ea:	d83b      	bhi.n	8001164 <slave_behavior+0x88>
 80010ec:	a201      	add	r2, pc, #4	; (adr r2, 80010f4 <slave_behavior+0x18>)
 80010ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f2:	bf00      	nop
 80010f4:	0800110d 	.word	0x0800110d
 80010f8:	08001115 	.word	0x08001115
 80010fc:	08001131 	.word	0x08001131
 8001100:	08001147 	.word	0x08001147
 8001104:	08001139 	.word	0x08001139
 8001108:	08001155 	.word	0x08001155
	case IDLE:{
		hDev->signal = WAITTING_FOR_CMD;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	705a      	strb	r2, [r3, #1]
		break;
 8001112:	e027      	b.n	8001164 <slave_behavior+0x88>
	}
	case WAITTING_FOR_CMD:{
		ReadData(hDev);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff41 	bl	8000f9c <ReadData>
		if(Receive_Flag){
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <slave_behavior+0x90>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d01f      	beq.n	8001162 <slave_behavior+0x86>
			hDev->signal = COMMAND_PARSER;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2202      	movs	r2, #2
 8001126:	705a      	strb	r2, [r3, #1]
			Receive_Flag = 0;
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <slave_behavior+0x90>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
			break;
 800112e:	e019      	b.n	8001164 <slave_behavior+0x88>
		}
		break;
	}
	case COMMAND_PARSER:{
		CommandParser_handler(hDev);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff fe59 	bl	8000de8 <CommandParser_handler>
		break;
 8001136:	e015      	b.n	8001164 <slave_behavior+0x88>
	}
	case READ_HOLDING_REGISTER_HANDLER:{
		Read_holding_register_handler(hDev);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff25 	bl	8000f88 <Read_holding_register_handler>
		hDev->signal = IDLE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	705a      	strb	r2, [r3, #1]
		break;
 8001144:	e00e      	b.n	8001164 <slave_behavior+0x88>
	}
	case READ_MULTIPLE_HOLDING_REGISTER_HANDLER:{
		Read_multiple_holding_register_handler(hDev);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fec6 	bl	8000ed8 <Read_multiple_holding_register_handler>
		hDev->signal = IDLE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	705a      	strb	r2, [r3, #1]
		break;
 8001152:	e007      	b.n	8001164 <slave_behavior+0x88>
	}
	case WRITE_HOLDING_REGISTER_HANDLER:{
		Write_holding_register_handler(hDev);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff63 	bl	8001020 <Write_holding_register_handler>
		hDev->signal = IDLE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	705a      	strb	r2, [r3, #1]
		break;
 8001160:	e000      	b.n	8001164 <slave_behavior+0x88>
		break;
 8001162:	bf00      	nop
	}
	}
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200005ef 	.word	0x200005ef

08001170 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <MX_ADC1_Init+0x108>)
 8001184:	4a3d      	ldr	r2, [pc, #244]	; (800127c <MX_ADC1_Init+0x10c>)
 8001186:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001188:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <MX_ADC1_Init+0x108>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118e:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <MX_ADC1_Init+0x108>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001194:	4b38      	ldr	r3, [pc, #224]	; (8001278 <MX_ADC1_Init+0x108>)
 8001196:	2201      	movs	r2, #1
 8001198:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800119a:	4b37      	ldr	r3, [pc, #220]	; (8001278 <MX_ADC1_Init+0x108>)
 800119c:	2200      	movs	r2, #0
 800119e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a0:	4b35      	ldr	r3, [pc, #212]	; (8001278 <MX_ADC1_Init+0x108>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <MX_ADC1_Init+0x108>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ae:	4b32      	ldr	r3, [pc, #200]	; (8001278 <MX_ADC1_Init+0x108>)
 80011b0:	4a33      	ldr	r2, [pc, #204]	; (8001280 <MX_ADC1_Init+0x110>)
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b4:	4b30      	ldr	r3, [pc, #192]	; (8001278 <MX_ADC1_Init+0x108>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80011ba:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <MX_ADC1_Init+0x108>)
 80011bc:	2205      	movs	r2, #5
 80011be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011c0:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <MX_ADC1_Init+0x108>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c8:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <MX_ADC1_Init+0x108>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ce:	482a      	ldr	r0, [pc, #168]	; (8001278 <MX_ADC1_Init+0x108>)
 80011d0:	f002 f858 	bl	8003284 <HAL_ADC_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011da:	f001 f9dd 	bl	8002598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011de:	2308      	movs	r3, #8
 80011e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4822      	ldr	r0, [pc, #136]	; (8001278 <MX_ADC1_Init+0x108>)
 80011f0:	f002 f9ba 	bl	8003568 <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011fa:	f001 f9cd 	bl	8002598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80011fe:	2309      	movs	r3, #9
 8001200:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001202:	2302      	movs	r3, #2
 8001204:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001206:	463b      	mov	r3, r7
 8001208:	4619      	mov	r1, r3
 800120a:	481b      	ldr	r0, [pc, #108]	; (8001278 <MX_ADC1_Init+0x108>)
 800120c:	f002 f9ac 	bl	8003568 <HAL_ADC_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001216:	f001 f9bf 	bl	8002598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800121a:	230a      	movs	r3, #10
 800121c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800121e:	2303      	movs	r3, #3
 8001220:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001222:	463b      	mov	r3, r7
 8001224:	4619      	mov	r1, r3
 8001226:	4814      	ldr	r0, [pc, #80]	; (8001278 <MX_ADC1_Init+0x108>)
 8001228:	f002 f99e 	bl	8003568 <HAL_ADC_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001232:	f001 f9b1 	bl	8002598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001236:	230b      	movs	r3, #11
 8001238:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800123a:	2304      	movs	r3, #4
 800123c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123e:	463b      	mov	r3, r7
 8001240:	4619      	mov	r1, r3
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_ADC1_Init+0x108>)
 8001244:	f002 f990 	bl	8003568 <HAL_ADC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800124e:	f001 f9a3 	bl	8002598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001252:	230c      	movs	r3, #12
 8001254:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001256:	2305      	movs	r3, #5
 8001258:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <MX_ADC1_Init+0x108>)
 8001260:	f002 f982 	bl	8003568 <HAL_ADC_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800126a:	f001 f995 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000290 	.word	0x20000290
 800127c:	40012000 	.word	0x40012000
 8001280:	0f000001 	.word	0x0f000001

08001284 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a3c      	ldr	r2, [pc, #240]	; (8001394 <HAL_ADC_MspInit+0x110>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d171      	bne.n	800138a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <HAL_ADC_MspInit+0x114>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a3a      	ldr	r2, [pc, #232]	; (8001398 <HAL_ADC_MspInit+0x114>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b38      	ldr	r3, [pc, #224]	; (8001398 <HAL_ADC_MspInit+0x114>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b34      	ldr	r3, [pc, #208]	; (8001398 <HAL_ADC_MspInit+0x114>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a33      	ldr	r2, [pc, #204]	; (8001398 <HAL_ADC_MspInit+0x114>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b31      	ldr	r3, [pc, #196]	; (8001398 <HAL_ADC_MspInit+0x114>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_ADC_MspInit+0x114>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a2c      	ldr	r2, [pc, #176]	; (8001398 <HAL_ADC_MspInit+0x114>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_ADC_MspInit+0x114>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80012fa:	2307      	movs	r3, #7
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fe:	2303      	movs	r3, #3
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4823      	ldr	r0, [pc, #140]	; (800139c <HAL_ADC_MspInit+0x118>)
 800130e:	f003 f8df 	bl	80044d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001312:	2303      	movs	r3, #3
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	481e      	ldr	r0, [pc, #120]	; (80013a0 <HAL_ADC_MspInit+0x11c>)
 8001326:	f003 f8d3 	bl	80044d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_ADC_MspInit+0x120>)
 800132c:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <HAL_ADC_MspInit+0x124>)
 800132e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_ADC_MspInit+0x120>)
 8001332:	2200      	movs	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_ADC_MspInit+0x120>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HAL_ADC_MspInit+0x120>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_ADC_MspInit+0x120>)
 8001344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001348:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_ADC_MspInit+0x120>)
 800134c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001350:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <HAL_ADC_MspInit+0x120>)
 8001354:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001358:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_ADC_MspInit+0x120>)
 800135c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001360:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_ADC_MspInit+0x120>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_ADC_MspInit+0x120>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <HAL_ADC_MspInit+0x120>)
 8001370:	f002 fcac 	bl	8003ccc <HAL_DMA_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800137a:	f001 f90d 	bl	8002598 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_ADC_MspInit+0x120>)
 8001382:	639a      	str	r2, [r3, #56]	; 0x38
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_ADC_MspInit+0x120>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40012000 	.word	0x40012000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020400 	.word	0x40020400
 80013a4:	200002d8 	.word	0x200002d8
 80013a8:	40026410 	.word	0x40026410

080013ac <button_init>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void button_init() {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80013b0:	2201      	movs	r2, #1
 80013b2:	2108      	movs	r1, #8
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <button_init+0x14>)
 80013b6:	f003 fa27 	bl	8004808 <HAL_GPIO_WritePin>
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40020c00 	.word	0x40020c00

080013c4 <buzzer_init>:

/* Variables */
uint8_t buzzerduty_cycle = 0;

/* Functions */
void buzzer_init() {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80013c8:	2100      	movs	r1, #0
 80013ca:	4802      	ldr	r0, [pc, #8]	; (80013d4 <buzzer_init+0x10>)
 80013cc:	f004 fa16 	bl	80057fc <HAL_TIM_PWM_Start>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000910 	.word	0x20000910

080013d8 <crc16>:
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

uint16_t crc16(const uint8_t *data, uint16_t num_bytes)
{
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 80013e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e8:	82fb      	strh	r3, [r7, #22]
    const uint8_t *ptr = data;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	613b      	str	r3, [r7, #16]

    if (ptr != NULL)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d018      	beq.n	8001426 <crc16+0x4e>
    {
        for (uint16_t i = 0; i < num_bytes; i++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	81fb      	strh	r3, [r7, #14]
 80013f8:	e011      	b.n	800141e <crc16+0x46>
        {
            crc = (crc >> 8) ^ crc16_lookup_table[(crc ^ (uint16_t)*ptr++) & 0x00FF];
 80013fa:	8afb      	ldrh	r3, [r7, #22]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	b29a      	uxth	r2, r3
 8001400:	8af9      	ldrh	r1, [r7, #22]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1c58      	adds	r0, r3, #1
 8001406:	6138      	str	r0, [r7, #16]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	404b      	eors	r3, r1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4909      	ldr	r1, [pc, #36]	; (8001434 <crc16+0x5c>)
 8001410:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001414:	4053      	eors	r3, r2
 8001416:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < num_bytes; i++)
 8001418:	89fb      	ldrh	r3, [r7, #14]
 800141a:	3301      	adds	r3, #1
 800141c:	81fb      	strh	r3, [r7, #14]
 800141e:	89fa      	ldrh	r2, [r7, #14]
 8001420:	887b      	ldrh	r3, [r7, #2]
 8001422:	429a      	cmp	r2, r3
 8001424:	d3e9      	bcc.n	80013fa <crc16+0x22>
        }
    }

    return crc;
 8001426:	8afb      	ldrh	r3, [r7, #22]
}
 8001428:	4618      	mov	r0, r3
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	20000000 	.word	0x20000000

08001438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_DMA_Init+0x3c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <MX_DMA_Init+0x3c>)
 8001448:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_DMA_Init+0x3c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2038      	movs	r0, #56	; 0x38
 8001460:	f002 fbfd 	bl	8003c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001464:	2038      	movs	r0, #56	; 0x38
 8001466:	f002 fc16 	bl	8003c96 <HAL_NVIC_EnableIRQ>

}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08e      	sub	sp, #56	; 0x38
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001492:	463b      	mov	r3, r7
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
 80014a0:	615a      	str	r2, [r3, #20]
 80014a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80014a4:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <MX_FSMC_Init+0xec>)
 80014a6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80014aa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80014ac:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <MX_FSMC_Init+0xec>)
 80014ae:	4a2e      	ldr	r2, [pc, #184]	; (8001568 <MX_FSMC_Init+0xf0>)
 80014b0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <MX_FSMC_Init+0xec>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80014b8:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <MX_FSMC_Init+0xec>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80014be:	4b29      	ldr	r3, [pc, #164]	; (8001564 <MX_FSMC_Init+0xec>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <MX_FSMC_Init+0xec>)
 80014c6:	2210      	movs	r2, #16
 80014c8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <MX_FSMC_Init+0xec>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <MX_FSMC_Init+0xec>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <MX_FSMC_Init+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <MX_FSMC_Init+0xec>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <MX_FSMC_Init+0xec>)
 80014e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <MX_FSMC_Init+0xec>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_FSMC_Init+0xec>)
 80014f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_FSMC_Init+0xec>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_FSMC_Init+0xec>)
 8001500:	2200      	movs	r2, #0
 8001502:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_FSMC_Init+0xec>)
 8001506:	2200      	movs	r2, #0
 8001508:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800150a:	230f      	movs	r3, #15
 800150c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800150e:	230f      	movs	r3, #15
 8001510:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001512:	233c      	movs	r3, #60	; 0x3c
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800151a:	2310      	movs	r3, #16
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800151e:	2311      	movs	r3, #17
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001522:	2300      	movs	r3, #0
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001526:	2308      	movs	r3, #8
 8001528:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800152a:	230f      	movs	r3, #15
 800152c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800152e:	2309      	movs	r3, #9
 8001530:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001536:	2310      	movs	r3, #16
 8001538:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800153a:	2311      	movs	r3, #17
 800153c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001542:	463a      	mov	r2, r7
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <MX_FSMC_Init+0xec>)
 800154c:	f003 fff5 	bl	800553a <HAL_SRAM_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001556:	f001 f81f 	bl	8002598 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800155a:	bf00      	nop
 800155c:	3738      	adds	r7, #56	; 0x38
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000338 	.word	0x20000338
 8001568:	a0000104 	.word	0xa0000104

0800156c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <HAL_FSMC_MspInit+0x88>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d131      	bne.n	80015ec <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <HAL_FSMC_MspInit+0x88>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_FSMC_MspInit+0x8c>)
 8001594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001596:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <HAL_FSMC_MspInit+0x8c>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6393      	str	r3, [r2, #56]	; 0x38
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_FSMC_MspInit+0x8c>)
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80015aa:	f64f 7388 	movw	r3, #65416	; 0xff88
 80015ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015bc:	230c      	movs	r3, #12
 80015be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <HAL_FSMC_MspInit+0x90>)
 80015c6:	f002 ff83 	bl	80044d0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80015ca:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80015ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015dc:	230c      	movs	r3, #12
 80015de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4806      	ldr	r0, [pc, #24]	; (8001600 <HAL_FSMC_MspInit+0x94>)
 80015e6:	f002 ff73 	bl	80044d0 <HAL_GPIO_Init>
 80015ea:	e000      	b.n	80015ee <HAL_FSMC_MspInit+0x82>
    return;
 80015ec:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000388 	.word	0x20000388
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40021000 	.word	0x40021000
 8001600:	40020c00 	.word	0x40020c00

08001604 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800160c:	f7ff ffae 	bl	800156c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08e      	sub	sp, #56	; 0x38
 800161c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
 8001632:	4b76      	ldr	r3, [pc, #472]	; (800180c <MX_GPIO_Init+0x1f4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a75      	ldr	r2, [pc, #468]	; (800180c <MX_GPIO_Init+0x1f4>)
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b73      	ldr	r3, [pc, #460]	; (800180c <MX_GPIO_Init+0x1f4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	623b      	str	r3, [r7, #32]
 8001648:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	4b6f      	ldr	r3, [pc, #444]	; (800180c <MX_GPIO_Init+0x1f4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a6e      	ldr	r2, [pc, #440]	; (800180c <MX_GPIO_Init+0x1f4>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b6c      	ldr	r3, [pc, #432]	; (800180c <MX_GPIO_Init+0x1f4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
 800166a:	4b68      	ldr	r3, [pc, #416]	; (800180c <MX_GPIO_Init+0x1f4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a67      	ldr	r2, [pc, #412]	; (800180c <MX_GPIO_Init+0x1f4>)
 8001670:	f043 0320 	orr.w	r3, r3, #32
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b65      	ldr	r3, [pc, #404]	; (800180c <MX_GPIO_Init+0x1f4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	61bb      	str	r3, [r7, #24]
 8001680:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	4b61      	ldr	r3, [pc, #388]	; (800180c <MX_GPIO_Init+0x1f4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a60      	ldr	r2, [pc, #384]	; (800180c <MX_GPIO_Init+0x1f4>)
 800168c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b5e      	ldr	r3, [pc, #376]	; (800180c <MX_GPIO_Init+0x1f4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b5a      	ldr	r3, [pc, #360]	; (800180c <MX_GPIO_Init+0x1f4>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a59      	ldr	r2, [pc, #356]	; (800180c <MX_GPIO_Init+0x1f4>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b57      	ldr	r3, [pc, #348]	; (800180c <MX_GPIO_Init+0x1f4>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b53      	ldr	r3, [pc, #332]	; (800180c <MX_GPIO_Init+0x1f4>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a52      	ldr	r2, [pc, #328]	; (800180c <MX_GPIO_Init+0x1f4>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b50      	ldr	r3, [pc, #320]	; (800180c <MX_GPIO_Init+0x1f4>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	4b4c      	ldr	r3, [pc, #304]	; (800180c <MX_GPIO_Init+0x1f4>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a4b      	ldr	r2, [pc, #300]	; (800180c <MX_GPIO_Init+0x1f4>)
 80016e0:	f043 0308 	orr.w	r3, r3, #8
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b49      	ldr	r3, [pc, #292]	; (800180c <MX_GPIO_Init+0x1f4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b45      	ldr	r3, [pc, #276]	; (800180c <MX_GPIO_Init+0x1f4>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a44      	ldr	r2, [pc, #272]	; (800180c <MX_GPIO_Init+0x1f4>)
 80016fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b42      	ldr	r3, [pc, #264]	; (800180c <MX_GPIO_Init+0x1f4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2170      	movs	r1, #112	; 0x70
 8001712:	483f      	ldr	r0, [pc, #252]	; (8001810 <MX_GPIO_Init+0x1f8>)
 8001714:	f003 f878 	bl	8004808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|OUTPUT_X3_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f242 0120 	movw	r1, #8224	; 0x2020
 800171e:	483d      	ldr	r0, [pc, #244]	; (8001814 <MX_GPIO_Init+0x1fc>)
 8001720:	f003 f872 	bl	8004808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUTPUT_X0_Pin|FSMC_BLK_Pin|MODBUS_EN_Pin, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f248 1140 	movw	r1, #33088	; 0x8140
 800172a:	483b      	ldr	r0, [pc, #236]	; (8001818 <MX_GPIO_Init+0x200>)
 800172c:	f003 f86c 	bl	8004808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2140      	movs	r1, #64	; 0x40
 8001734:	4839      	ldr	r0, [pc, #228]	; (800181c <MX_GPIO_Init+0x204>)
 8001736:	f003 f867 	bl	8004808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2108      	movs	r1, #8
 800173e:	4838      	ldr	r0, [pc, #224]	; (8001820 <MX_GPIO_Init+0x208>)
 8001740:	f003 f862 	bl	8004808 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001744:	2370      	movs	r3, #112	; 0x70
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	482d      	ldr	r0, [pc, #180]	; (8001810 <MX_GPIO_Init+0x1f8>)
 800175c:	f002 feb8 	bl	80044d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|OUTPUT_X3_Pin;
 8001760:	f242 0320 	movw	r3, #8224	; 0x2020
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	4826      	ldr	r0, [pc, #152]	; (8001814 <MX_GPIO_Init+0x1fc>)
 800177a:	f002 fea9 	bl	80044d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OUTPUT_X0_Pin|FSMC_BLK_Pin|MODBUS_EN_Pin;
 800177e:	f248 1340 	movw	r3, #33088	; 0x8140
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	4820      	ldr	r0, [pc, #128]	; (8001818 <MX_GPIO_Init+0x200>)
 8001798:	f002 fe9a 	bl	80044d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUTPUT_X1_Pin;
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OUTPUT_X1_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	481a      	ldr	r0, [pc, #104]	; (8001818 <MX_GPIO_Init+0x200>)
 80017b0:	f002 fe8e 	bl	80044d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUTPUT_X2_Pin;
 80017b4:	2310      	movs	r3, #16
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OUTPUT_X2_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	4619      	mov	r1, r3
 80017c6:	4813      	ldr	r0, [pc, #76]	; (8001814 <MX_GPIO_Init+0x1fc>)
 80017c8:	f002 fe82 	bl	80044d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80017cc:	2340      	movs	r3, #64	; 0x40
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e0:	4619      	mov	r1, r3
 80017e2:	480e      	ldr	r0, [pc, #56]	; (800181c <MX_GPIO_Init+0x204>)
 80017e4:	f002 fe74 	bl	80044d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80017e8:	2308      	movs	r3, #8
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	4808      	ldr	r0, [pc, #32]	; (8001820 <MX_GPIO_Init+0x208>)
 8001800:	f002 fe66 	bl	80044d0 <HAL_GPIO_Init>

}
 8001804:	bf00      	nop
 8001806:	3738      	adds	r7, #56	; 0x38
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	40021000 	.word	0x40021000
 8001814:	40020800 	.word	0x40020800
 8001818:	40020000 	.word	0x40020000
 800181c:	40021800 	.word	0x40021800
 8001820:	40020c00 	.word	0x40020c00

08001824 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <MX_I2C1_Init+0x50>)
 800182a:	4a13      	ldr	r2, [pc, #76]	; (8001878 <MX_I2C1_Init+0x54>)
 800182c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_I2C1_Init+0x50>)
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <MX_I2C1_Init+0x58>)
 8001832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_I2C1_Init+0x50>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_I2C1_Init+0x50>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_I2C1_Init+0x50>)
 8001842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001846:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <MX_I2C1_Init+0x50>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_I2C1_Init+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <MX_I2C1_Init+0x50>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_I2C1_Init+0x50>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001860:	4804      	ldr	r0, [pc, #16]	; (8001874 <MX_I2C1_Init+0x50>)
 8001862:	f003 f805 	bl	8004870 <HAL_I2C_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800186c:	f000 fe94 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	2000038c 	.word	0x2000038c
 8001878:	40005400 	.word	0x40005400
 800187c:	000186a0 	.word	0x000186a0

08001880 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_I2C_MspInit+0x84>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d12b      	bne.n	80018fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_I2C_MspInit+0x88>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a17      	ldr	r2, [pc, #92]	; (8001908 <HAL_I2C_MspInit+0x88>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_I2C_MspInit+0x88>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018be:	23c0      	movs	r3, #192	; 0xc0
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c2:	2312      	movs	r3, #18
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ce:	2304      	movs	r3, #4
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	480c      	ldr	r0, [pc, #48]	; (800190c <HAL_I2C_MspInit+0x8c>)
 80018da:	f002 fdf9 	bl	80044d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_I2C_MspInit+0x88>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <HAL_I2C_MspInit+0x88>)
 80018e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_I2C_MspInit+0x88>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40005400 	.word	0x40005400
 8001908:	40023800 	.word	0x40023800
 800190c:	40020400 	.word	0x40020400

08001910 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 800191a:	4a04      	ldr	r2, [pc, #16]	; (800192c <LCD_WR_REG+0x1c>)
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	8013      	strh	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	600ffffe 	.word	0x600ffffe

08001930 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <LCD_WR_DATA+0x1c>)
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	8053      	strh	r3, [r2, #2]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	600ffffe 	.word	0x600ffffe

08001950 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <LCD_RD_DATA+0x20>)
 8001958:	885b      	ldrh	r3, [r3, #2]
 800195a:	b29b      	uxth	r3, r3
 800195c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	b29b      	uxth	r3, r3
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	600ffffe 	.word	0x600ffffe

08001974 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4604      	mov	r4, r0
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	461a      	mov	r2, r3
 8001982:	4623      	mov	r3, r4
 8001984:	80fb      	strh	r3, [r7, #6]
 8001986:	4603      	mov	r3, r0
 8001988:	80bb      	strh	r3, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	807b      	strh	r3, [r7, #2]
 800198e:	4613      	mov	r3, r2
 8001990:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8001992:	202a      	movs	r0, #42	; 0x2a
 8001994:	f7ff ffbc 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	b29b      	uxth	r3, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ffc6 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ffc0 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ffba 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ffb4 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 80019c8:	202b      	movs	r0, #43	; 0x2b
 80019ca:	f7ff ffa1 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 80019ce:	88bb      	ldrh	r3, [r7, #4]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ffab 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ffa5 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 80019e6:	883b      	ldrh	r3, [r7, #0]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff9f 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 80019f2:	883b      	ldrh	r3, [r7, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff99 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 80019fe:	202c      	movs	r0, #44	; 0x2c
 8001a00:	f7ff ff86 	bl	8001910 <LCD_WR_REG>
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}

08001a0c <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <lcd_clear+0x60>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <lcd_clear+0x60>)
 8001a20:	885b      	ldrh	r3, [r3, #2]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2100      	movs	r1, #0
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff ffa3 	bl	8001974 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 8001a2e:	2300      	movs	r3, #0
 8001a30:	81fb      	strh	r3, [r7, #14]
 8001a32:	e011      	b.n	8001a58 <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	81bb      	strh	r3, [r7, #12]
 8001a38:	e006      	b.n	8001a48 <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff77 	bl	8001930 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 8001a42:	89bb      	ldrh	r3, [r7, #12]
 8001a44:	3301      	adds	r3, #1
 8001a46:	81bb      	strh	r3, [r7, #12]
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <lcd_clear+0x60>)
 8001a4a:	885b      	ldrh	r3, [r3, #2]
 8001a4c:	89ba      	ldrh	r2, [r7, #12]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d3f3      	bcc.n	8001a3a <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 8001a52:	89fb      	ldrh	r3, [r7, #14]
 8001a54:	3301      	adds	r3, #1
 8001a56:	81fb      	strh	r3, [r7, #14]
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <lcd_clear+0x60>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	89fa      	ldrh	r2, [r7, #14]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d3e8      	bcc.n	8001a34 <lcd_clear+0x28>
		}
	}
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200003e0 	.word	0x200003e0

08001a70 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	80bb      	strh	r3, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8001a82:	88bb      	ldrh	r3, [r7, #4]
 8001a84:	88fa      	ldrh	r2, [r7, #6]
 8001a86:	88b9      	ldrh	r1, [r7, #4]
 8001a88:	88f8      	ldrh	r0, [r7, #6]
 8001a8a:	f7ff ff73 	bl	8001974 <lcd_set_address>
	LCD_WR_DATA(color);
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff4d 	bl	8001930 <LCD_WR_DATA>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	4611      	mov	r1, r2
 8001aac:	461a      	mov	r2, r3
 8001aae:	4623      	mov	r3, r4
 8001ab0:	80fb      	strh	r3, [r7, #6]
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80bb      	strh	r3, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	70fb      	strb	r3, [r7, #3]
 8001aba:	4613      	mov	r3, r2
 8001abc:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8001ac6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001aca:	085b      	lsrs	r3, r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	bf14      	ite	ne
 8001ae2:	2301      	movne	r3, #1
 8001ae4:	2300      	moveq	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	fb12 f303 	smulbb	r3, r2, r3
 8001af6:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	3b20      	subs	r3, #32
 8001afc:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	4413      	add	r3, r2
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b29c      	uxth	r4, r3
 8001b0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	88bb      	ldrh	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	88b9      	ldrh	r1, [r7, #4]
 8001b1e:	88f8      	ldrh	r0, [r7, #6]
 8001b20:	4622      	mov	r2, r4
 8001b22:	f7ff ff27 	bl	8001974 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8001b26:	2300      	movs	r3, #0
 8001b28:	827b      	strh	r3, [r7, #18]
 8001b2a:	e07a      	b.n	8001c22 <lcd_show_char+0x182>
		if (sizey == 12)
 8001b2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d028      	beq.n	8001b86 <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8001b34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b38:	2b10      	cmp	r3, #16
 8001b3a:	d108      	bne.n	8001b4e <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8001b3c:	78fa      	ldrb	r2, [r7, #3]
 8001b3e:	8a7b      	ldrh	r3, [r7, #18]
 8001b40:	493c      	ldr	r1, [pc, #240]	; (8001c34 <lcd_show_char+0x194>)
 8001b42:	0112      	lsls	r2, r2, #4
 8001b44:	440a      	add	r2, r1
 8001b46:	4413      	add	r3, r2
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	75fb      	strb	r3, [r7, #23]
 8001b4c:	e01b      	b.n	8001b86 <lcd_show_char+0xe6>
		else if (sizey == 24)
 8001b4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b52:	2b18      	cmp	r3, #24
 8001b54:	d10b      	bne.n	8001b6e <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	8a79      	ldrh	r1, [r7, #18]
 8001b5a:	4837      	ldr	r0, [pc, #220]	; (8001c38 <lcd_show_char+0x198>)
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	4403      	add	r3, r0
 8001b66:	440b      	add	r3, r1
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	75fb      	strb	r3, [r7, #23]
 8001b6c:	e00b      	b.n	8001b86 <lcd_show_char+0xe6>
		else if (sizey == 32)
 8001b6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b72:	2b20      	cmp	r3, #32
 8001b74:	d15a      	bne.n	8001c2c <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8001b76:	78fa      	ldrb	r2, [r7, #3]
 8001b78:	8a7b      	ldrh	r3, [r7, #18]
 8001b7a:	4930      	ldr	r1, [pc, #192]	; (8001c3c <lcd_show_char+0x19c>)
 8001b7c:	0192      	lsls	r2, r2, #6
 8001b7e:	440a      	add	r2, r1
 8001b80:	4413      	add	r3, r2
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	75bb      	strb	r3, [r7, #22]
 8001b8a:	e044      	b.n	8001c16 <lcd_show_char+0x176>
			if (!mode) {
 8001b8c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d120      	bne.n	8001bd6 <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8001b94:	7dfa      	ldrb	r2, [r7, #23]
 8001b96:	7dbb      	ldrb	r3, [r7, #22]
 8001b98:	fa42 f303 	asr.w	r3, r2, r3
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d004      	beq.n	8001bae <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8001ba4:	883b      	ldrh	r3, [r7, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fec2 	bl	8001930 <LCD_WR_DATA>
 8001bac:	e003      	b.n	8001bb6 <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8001bae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff febd 	bl	8001930 <LCD_WR_DATA>
				m++;
 8001bb6:	7d7b      	ldrb	r3, [r7, #21]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8001bbc:	7d7b      	ldrb	r3, [r7, #21]
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bc4:	fb01 f202 	mul.w	r2, r1, r2
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d11f      	bne.n	8001c10 <lcd_show_char+0x170>
					m = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	757b      	strb	r3, [r7, #21]
					break;
 8001bd4:	e022      	b.n	8001c1c <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8001bd6:	7dfa      	ldrb	r2, [r7, #23]
 8001bd8:	7dbb      	ldrb	r3, [r7, #22]
 8001bda:	fa42 f303 	asr.w	r3, r2, r3
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8001be6:	883a      	ldrh	r2, [r7, #0]
 8001be8:	88b9      	ldrh	r1, [r7, #4]
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff3f 	bl	8001a70 <lcd_draw_point>
				x++;
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8001bf8:	88fa      	ldrh	r2, [r7, #6]
 8001bfa:	8a3b      	ldrh	r3, [r7, #16]
 8001bfc:	1ad2      	subs	r2, r2, r3
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d105      	bne.n	8001c10 <lcd_show_char+0x170>
					x = x0;
 8001c04:	8a3b      	ldrh	r3, [r7, #16]
 8001c06:	80fb      	strh	r3, [r7, #6]
					y++;
 8001c08:	88bb      	ldrh	r3, [r7, #4]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	80bb      	strh	r3, [r7, #4]
					break;
 8001c0e:	e005      	b.n	8001c1c <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8001c10:	7dbb      	ldrb	r3, [r7, #22]
 8001c12:	3301      	adds	r3, #1
 8001c14:	75bb      	strb	r3, [r7, #22]
 8001c16:	7dbb      	ldrb	r3, [r7, #22]
 8001c18:	2b07      	cmp	r3, #7
 8001c1a:	d9b7      	bls.n	8001b8c <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8001c1c:	8a7b      	ldrh	r3, [r7, #18]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	827b      	strh	r3, [r7, #18]
 8001c22:	8a7a      	ldrh	r2, [r7, #18]
 8001c24:	89bb      	ldrh	r3, [r7, #12]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d380      	bcc.n	8001b2c <lcd_show_char+0x8c>
 8001c2a:	e000      	b.n	8001c2e <lcd_show_char+0x18e>
			return;
 8001c2c:	bf00      	nop
				}
			}
		}
	}
}
 8001c2e:	371c      	adds	r7, #28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd90      	pop	{r4, r7, pc}
 8001c34:	0800811c 	.word	0x0800811c
 8001c38:	0800870c 	.word	0x0800870c
 8001c3c:	080098dc 	.word	0x080098dc

08001c40 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	460a      	mov	r2, r1
 8001c4a:	71fb      	strb	r3, [r7, #7]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001c50:	2301      	movs	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001c54:	e004      	b.n	8001c60 <mypow+0x20>
		result *= m;
 8001c56:	79fa      	ldrb	r2, [r7, #7]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001c60:	79bb      	ldrb	r3, [r7, #6]
 8001c62:	1e5a      	subs	r2, r3, #1
 8001c64:	71ba      	strb	r2, [r7, #6]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f5      	bne.n	8001c56 <mypow+0x16>
	return result;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af04      	add	r7, sp, #16
 8001c7e:	4604      	mov	r4, r0
 8001c80:	4608      	mov	r0, r1
 8001c82:	4611      	mov	r1, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	4623      	mov	r3, r4
 8001c88:	80fb      	strh	r3, [r7, #6]
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80bb      	strh	r3, [r7, #4]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	807b      	strh	r3, [r7, #2]
 8001c92:	4613      	mov	r3, r2
 8001c94:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 8001c9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	e059      	b.n	8001d5c <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 8001ca8:	887c      	ldrh	r4, [r7, #2]
 8001caa:	787a      	ldrb	r2, [r7, #1]
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	200a      	movs	r0, #10
 8001cba:	f7ff ffc1 	bl	8001c40 <mypow>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	fbb4 f1f3 	udiv	r1, r4, r3
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <lcd_show_int_num+0xf8>)
 8001cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8001cca:	08da      	lsrs	r2, r3, #3
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	1aca      	subs	r2, r1, r3
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8001cda:	7bbb      	ldrb	r3, [r7, #14]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d121      	bne.n	8001d24 <lcd_show_int_num+0xac>
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	787b      	ldrb	r3, [r7, #1]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	da1c      	bge.n	8001d24 <lcd_show_int_num+0xac>
			if (temp == 0) {
 8001cea:	7b3b      	ldrb	r3, [r7, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d117      	bne.n	8001d20 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	7b7b      	ldrb	r3, [r7, #13]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	fb12 f303 	smulbb	r3, r2, r3
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	4413      	add	r3, r2
 8001d02:	b298      	uxth	r0, r3
 8001d04:	8c3a      	ldrh	r2, [r7, #32]
 8001d06:	88b9      	ldrh	r1, [r7, #4]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9302      	str	r3, [sp, #8]
 8001d0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	4613      	mov	r3, r2
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f7ff fec1 	bl	8001aa0 <lcd_show_char>
				continue;
 8001d1e:	e01a      	b.n	8001d56 <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	7b7b      	ldrb	r3, [r7, #13]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	fb12 f303 	smulbb	r3, r2, r3
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	4413      	add	r3, r2
 8001d36:	b298      	uxth	r0, r3
 8001d38:	7b3b      	ldrb	r3, [r7, #12]
 8001d3a:	3330      	adds	r3, #48	; 0x30
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	8c3c      	ldrh	r4, [r7, #32]
 8001d40:	88b9      	ldrh	r1, [r7, #4]
 8001d42:	2300      	movs	r3, #0
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	4623      	mov	r3, r4
 8001d52:	f7ff fea5 	bl	8001aa0 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	787b      	ldrb	r3, [r7, #1]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d3a1      	bcc.n	8001ca8 <lcd_show_int_num+0x30>
	}
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd90      	pop	{r4, r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	cccccccd 	.word	0xcccccccd

08001d74 <lcd_show_float_num>:

void lcd_show_float_num(uint16_t x, uint16_t y, float num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	b08b      	sub	sp, #44	; 0x2c
 8001d78:	af04      	add	r7, sp, #16
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	4608      	mov	r0, r1
 8001d7e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d82:	4611      	mov	r1, r2
 8001d84:	461a      	mov	r2, r3
 8001d86:	4623      	mov	r3, r4
 8001d88:	81fb      	strh	r3, [r7, #14]
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	81bb      	strh	r3, [r7, #12]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	71fb      	strb	r3, [r7, #7]
 8001d92:	4613      	mov	r3, r2
 8001d94:	80bb      	strh	r3, [r7, #4]
	uint8_t t, temp, sizex;
	uint16_t num1;
	sizex = sizey / 2;
 8001d96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d9a:	085b      	lsrs	r3, r3, #1
 8001d9c:	75bb      	strb	r3, [r7, #22]
	num1 = num * 100;
 8001d9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001da2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001e7c <lcd_show_float_num+0x108>
 8001da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dae:	ee17 3a90 	vmov	r3, s15
 8001db2:	82bb      	strh	r3, [r7, #20]
	for (t = 0; t < len; t++) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	75fb      	strb	r3, [r7, #23]
 8001db8:	e057      	b.n	8001e6a <lcd_show_float_num+0xf6>
		temp = (num1 / mypow(10, len - t - 1)) % 10;
 8001dba:	8abc      	ldrh	r4, [r7, #20]
 8001dbc:	79fa      	ldrb	r2, [r7, #7]
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	4619      	mov	r1, r3
 8001dca:	200a      	movs	r0, #10
 8001dcc:	f7ff ff38 	bl	8001c40 <mypow>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	fbb4 f1f3 	udiv	r1, r4, r3
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <lcd_show_float_num+0x10c>)
 8001dd8:	fba3 2301 	umull	r2, r3, r3, r1
 8001ddc:	08da      	lsrs	r2, r3, #3
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	1aca      	subs	r2, r1, r3
 8001de8:	4613      	mov	r3, r2
 8001dea:	74fb      	strb	r3, [r7, #19]
		if (t == (len - 2)) {
 8001dec:	7dfa      	ldrb	r2, [r7, #23]
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	3b02      	subs	r3, #2
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d11d      	bne.n	8001e32 <lcd_show_float_num+0xbe>
			lcd_show_char(x + (len - 2) * sizex, y, '.', fc, bc, sizey, 0);
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	3b02      	subs	r3, #2
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	7dbb      	ldrb	r3, [r7, #22]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	fb12 f303 	smulbb	r3, r2, r3
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	89fb      	ldrh	r3, [r7, #14]
 8001e08:	4413      	add	r3, r2
 8001e0a:	b298      	uxth	r0, r3
 8001e0c:	88ba      	ldrh	r2, [r7, #4]
 8001e0e:	89b9      	ldrh	r1, [r7, #12]
 8001e10:	2300      	movs	r3, #0
 8001e12:	9302      	str	r3, [sp, #8]
 8001e14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	222e      	movs	r2, #46	; 0x2e
 8001e22:	f7ff fe3d 	bl	8001aa0 <lcd_show_char>
			t++;
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	75fb      	strb	r3, [r7, #23]
			len += 1;
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	71fb      	strb	r3, [r7, #7]
		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	7dbb      	ldrb	r3, [r7, #22]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	fb12 f303 	smulbb	r3, r2, r3
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	89fb      	ldrh	r3, [r7, #14]
 8001e42:	4413      	add	r3, r2
 8001e44:	b298      	uxth	r0, r3
 8001e46:	7cfb      	ldrb	r3, [r7, #19]
 8001e48:	3330      	adds	r3, #48	; 0x30
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	88bc      	ldrh	r4, [r7, #4]
 8001e4e:	89b9      	ldrh	r1, [r7, #12]
 8001e50:	2300      	movs	r3, #0
 8001e52:	9302      	str	r3, [sp, #8]
 8001e54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	4623      	mov	r3, r4
 8001e60:	f7ff fe1e 	bl	8001aa0 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	3301      	adds	r3, #1
 8001e68:	75fb      	strb	r3, [r7, #23]
 8001e6a:	7dfa      	ldrb	r2, [r7, #23]
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d3a3      	bcc.n	8001dba <lcd_show_float_num+0x46>
	}
}
 8001e72:	bf00      	nop
 8001e74:	bf00      	nop
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd90      	pop	{r4, r7, pc}
 8001e7c:	42c80000 	.word	0x42c80000
 8001e80:	cccccccd 	.word	0xcccccccd

08001e84 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <lcd_set_direction+0x44>)
 8001ea0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ea4:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <lcd_set_direction+0x44>)
 8001ea8:	22f0      	movs	r2, #240	; 0xf0
 8001eaa:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8001eac:	e006      	b.n	8001ebc <lcd_set_direction+0x38>
		lcddev.width = 240;
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <lcd_set_direction+0x44>)
 8001eb0:	22f0      	movs	r2, #240	; 0xf0
 8001eb2:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001eb4:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <lcd_set_direction+0x44>)
 8001eb6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001eba:	805a      	strh	r2, [r3, #2]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	200003e0 	.word	0x200003e0

08001ecc <lcd_init>:

void lcd_init(void) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed6:	48aa      	ldr	r0, [pc, #680]	; (8002180 <lcd_init+0x2b4>)
 8001ed8:	f002 fc96 	bl	8004808 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001edc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ee0:	f001 f9ac 	bl	800323c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eea:	48a5      	ldr	r0, [pc, #660]	; (8002180 <lcd_init+0x2b4>)
 8001eec:	f002 fc8c 	bl	8004808 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001ef0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ef4:	f001 f9a2 	bl	800323c <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff ffc3 	bl	8001e84 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8001efe:	20d3      	movs	r0, #211	; 0xd3
 8001f00:	f7ff fd06 	bl	8001910 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001f04:	f7ff fd24 	bl	8001950 <LCD_RD_DATA>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b9d      	ldr	r3, [pc, #628]	; (8002184 <lcd_init+0x2b8>)
 8001f0e:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001f10:	f7ff fd1e 	bl	8001950 <LCD_RD_DATA>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b9a      	ldr	r3, [pc, #616]	; (8002184 <lcd_init+0x2b8>)
 8001f1a:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001f1c:	f7ff fd18 	bl	8001950 <LCD_RD_DATA>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b97      	ldr	r3, [pc, #604]	; (8002184 <lcd_init+0x2b8>)
 8001f26:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8001f28:	4b96      	ldr	r3, [pc, #600]	; (8002184 <lcd_init+0x2b8>)
 8001f2a:	889b      	ldrh	r3, [r3, #4]
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b94      	ldr	r3, [pc, #592]	; (8002184 <lcd_init+0x2b8>)
 8001f32:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8001f34:	f7ff fd0c 	bl	8001950 <LCD_RD_DATA>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b91      	ldr	r3, [pc, #580]	; (8002184 <lcd_init+0x2b8>)
 8001f3e:	889b      	ldrh	r3, [r3, #4]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b8f      	ldr	r3, [pc, #572]	; (8002184 <lcd_init+0x2b8>)
 8001f46:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001f48:	20cf      	movs	r0, #207	; 0xcf
 8001f4a:	f7ff fce1 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff fcee 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001f54:	20c1      	movs	r0, #193	; 0xc1
 8001f56:	f7ff fceb 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001f5a:	2030      	movs	r0, #48	; 0x30
 8001f5c:	f7ff fce8 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001f60:	20ed      	movs	r0, #237	; 0xed
 8001f62:	f7ff fcd5 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001f66:	2064      	movs	r0, #100	; 0x64
 8001f68:	f7ff fce2 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	f7ff fcdf 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001f72:	2012      	movs	r0, #18
 8001f74:	f7ff fcdc 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001f78:	2081      	movs	r0, #129	; 0x81
 8001f7a:	f7ff fcd9 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001f7e:	20e8      	movs	r0, #232	; 0xe8
 8001f80:	f7ff fcc6 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001f84:	2085      	movs	r0, #133	; 0x85
 8001f86:	f7ff fcd3 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f8a:	2010      	movs	r0, #16
 8001f8c:	f7ff fcd0 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001f90:	207a      	movs	r0, #122	; 0x7a
 8001f92:	f7ff fccd 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001f96:	20cb      	movs	r0, #203	; 0xcb
 8001f98:	f7ff fcba 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001f9c:	2039      	movs	r0, #57	; 0x39
 8001f9e:	f7ff fcc7 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001fa2:	202c      	movs	r0, #44	; 0x2c
 8001fa4:	f7ff fcc4 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff fcc1 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001fae:	2034      	movs	r0, #52	; 0x34
 8001fb0:	f7ff fcbe 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f7ff fcbb 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001fba:	20f7      	movs	r0, #247	; 0xf7
 8001fbc:	f7ff fca8 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001fc0:	2020      	movs	r0, #32
 8001fc2:	f7ff fcb5 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001fc6:	20ea      	movs	r0, #234	; 0xea
 8001fc8:	f7ff fca2 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff fcaf 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7ff fcac 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001fd8:	20c0      	movs	r0, #192	; 0xc0
 8001fda:	f7ff fc99 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001fde:	201b      	movs	r0, #27
 8001fe0:	f7ff fca6 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001fe4:	20c1      	movs	r0, #193	; 0xc1
 8001fe6:	f7ff fc93 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001fea:	2001      	movs	r0, #1
 8001fec:	f7ff fca0 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001ff0:	20c5      	movs	r0, #197	; 0xc5
 8001ff2:	f7ff fc8d 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001ff6:	2030      	movs	r0, #48	; 0x30
 8001ff8:	f7ff fc9a 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001ffc:	2030      	movs	r0, #48	; 0x30
 8001ffe:	f7ff fc97 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002002:	20c7      	movs	r0, #199	; 0xc7
 8002004:	f7ff fc84 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002008:	20b7      	movs	r0, #183	; 0xb7
 800200a:	f7ff fc91 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800200e:	2036      	movs	r0, #54	; 0x36
 8002010:	f7ff fc7e 	bl	8001910 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8002014:	2008      	movs	r0, #8
 8002016:	f7ff fc8b 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800201a:	203a      	movs	r0, #58	; 0x3a
 800201c:	f7ff fc78 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002020:	2055      	movs	r0, #85	; 0x55
 8002022:	f7ff fc85 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002026:	20b1      	movs	r0, #177	; 0xb1
 8002028:	f7ff fc72 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff fc7f 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002032:	201a      	movs	r0, #26
 8002034:	f7ff fc7c 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002038:	20b6      	movs	r0, #182	; 0xb6
 800203a:	f7ff fc69 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800203e:	200a      	movs	r0, #10
 8002040:	f7ff fc76 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002044:	20a2      	movs	r0, #162	; 0xa2
 8002046:	f7ff fc73 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800204a:	20f2      	movs	r0, #242	; 0xf2
 800204c:	f7ff fc60 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff fc6d 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002056:	2026      	movs	r0, #38	; 0x26
 8002058:	f7ff fc5a 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800205c:	2001      	movs	r0, #1
 800205e:	f7ff fc67 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002062:	20e0      	movs	r0, #224	; 0xe0
 8002064:	f7ff fc54 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002068:	200f      	movs	r0, #15
 800206a:	f7ff fc61 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800206e:	202a      	movs	r0, #42	; 0x2a
 8002070:	f7ff fc5e 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002074:	2028      	movs	r0, #40	; 0x28
 8002076:	f7ff fc5b 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800207a:	2008      	movs	r0, #8
 800207c:	f7ff fc58 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002080:	200e      	movs	r0, #14
 8002082:	f7ff fc55 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002086:	2008      	movs	r0, #8
 8002088:	f7ff fc52 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800208c:	2054      	movs	r0, #84	; 0x54
 800208e:	f7ff fc4f 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002092:	20a9      	movs	r0, #169	; 0xa9
 8002094:	f7ff fc4c 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002098:	2043      	movs	r0, #67	; 0x43
 800209a:	f7ff fc49 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800209e:	200a      	movs	r0, #10
 80020a0:	f7ff fc46 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020a4:	200f      	movs	r0, #15
 80020a6:	f7ff fc43 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7ff fc40 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff fc3d 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7ff fc3a 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020bc:	2000      	movs	r0, #0
 80020be:	f7ff fc37 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80020c2:	20e1      	movs	r0, #225	; 0xe1
 80020c4:	f7ff fc24 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7ff fc31 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80020ce:	2015      	movs	r0, #21
 80020d0:	f7ff fc2e 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80020d4:	2017      	movs	r0, #23
 80020d6:	f7ff fc2b 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80020da:	2007      	movs	r0, #7
 80020dc:	f7ff fc28 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80020e0:	2011      	movs	r0, #17
 80020e2:	f7ff fc25 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80020e6:	2006      	movs	r0, #6
 80020e8:	f7ff fc22 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80020ec:	202b      	movs	r0, #43	; 0x2b
 80020ee:	f7ff fc1f 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80020f2:	2056      	movs	r0, #86	; 0x56
 80020f4:	f7ff fc1c 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80020f8:	203c      	movs	r0, #60	; 0x3c
 80020fa:	f7ff fc19 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80020fe:	2005      	movs	r0, #5
 8002100:	f7ff fc16 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002104:	2010      	movs	r0, #16
 8002106:	f7ff fc13 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800210a:	200f      	movs	r0, #15
 800210c:	f7ff fc10 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002110:	203f      	movs	r0, #63	; 0x3f
 8002112:	f7ff fc0d 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002116:	203f      	movs	r0, #63	; 0x3f
 8002118:	f7ff fc0a 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800211c:	200f      	movs	r0, #15
 800211e:	f7ff fc07 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002122:	202b      	movs	r0, #43	; 0x2b
 8002124:	f7ff fbf4 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff fc01 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800212e:	2000      	movs	r0, #0
 8002130:	f7ff fbfe 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002134:	2001      	movs	r0, #1
 8002136:	f7ff fbfb 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800213a:	203f      	movs	r0, #63	; 0x3f
 800213c:	f7ff fbf8 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002140:	202a      	movs	r0, #42	; 0x2a
 8002142:	f7ff fbe5 	bl	8001910 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002146:	2000      	movs	r0, #0
 8002148:	f7ff fbf2 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff fbef 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002152:	2000      	movs	r0, #0
 8002154:	f7ff fbec 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002158:	20ef      	movs	r0, #239	; 0xef
 800215a:	f7ff fbe9 	bl	8001930 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 800215e:	2011      	movs	r0, #17
 8002160:	f7ff fbd6 	bl	8001910 <LCD_WR_REG>
	HAL_Delay(120);
 8002164:	2078      	movs	r0, #120	; 0x78
 8002166:	f001 f869 	bl	800323c <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 800216a:	2029      	movs	r0, #41	; 0x29
 800216c:	f7ff fbd0 	bl	8001910 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002170:	2201      	movs	r2, #1
 8002172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002176:	4804      	ldr	r0, [pc, #16]	; (8002188 <lcd_init+0x2bc>)
 8002178:	f002 fb46 	bl	8004808 <HAL_GPIO_WritePin>
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40020800 	.word	0x40020800
 8002184:	200003e0 	.word	0x200003e0
 8002188:	40020000 	.word	0x40020000

0800218c <lcd_show_string>:
		}
	}
}

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b08b      	sub	sp, #44	; 0x2c
 8002190:	af04      	add	r7, sp, #16
 8002192:	60ba      	str	r2, [r7, #8]
 8002194:	461a      	mov	r2, r3
 8002196:	4603      	mov	r3, r0
 8002198:	81fb      	strh	r3, [r7, #14]
 800219a:	460b      	mov	r3, r1
 800219c:	81bb      	strh	r3, [r7, #12]
 800219e:	4613      	mov	r3, r2
 80021a0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 80021a2:	89fb      	ldrh	r3, [r7, #14]
 80021a4:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 80021aa:	e048      	b.n	800223e <lcd_show_string+0xb2>
		if (!bHz) {
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d145      	bne.n	800223e <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 80021b2:	89fa      	ldrh	r2, [r7, #14]
 80021b4:	4b26      	ldr	r3, [pc, #152]	; (8002250 <lcd_show_string+0xc4>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	1acb      	subs	r3, r1, r3
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dc3f      	bgt.n	8002248 <lcd_show_string+0xbc>
 80021c8:	89ba      	ldrh	r2, [r7, #12]
 80021ca:	4b21      	ldr	r3, [pc, #132]	; (8002250 <lcd_show_string+0xc4>)
 80021cc:	885b      	ldrh	r3, [r3, #2]
 80021ce:	4619      	mov	r1, r3
 80021d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021d4:	1acb      	subs	r3, r1, r3
 80021d6:	429a      	cmp	r2, r3
 80021d8:	dc36      	bgt.n	8002248 <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b80      	cmp	r3, #128	; 0x80
 80021e0:	d902      	bls.n	80021e8 <lcd_show_string+0x5c>
				bHz = 1;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
 80021e6:	e02a      	b.n	800223e <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b0d      	cmp	r3, #13
 80021ee:	d10b      	bne.n	8002208 <lcd_show_string+0x7c>
					y += sizey;
 80021f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	89bb      	ldrh	r3, [r7, #12]
 80021f8:	4413      	add	r3, r2
 80021fa:	81bb      	strh	r3, [r7, #12]
					x = x0;
 80021fc:	8abb      	ldrh	r3, [r7, #20]
 80021fe:	81fb      	strh	r3, [r7, #14]
					str++;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	3301      	adds	r3, #1
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	e017      	b.n	8002238 <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	781a      	ldrb	r2, [r3, #0]
 800220c:	88fc      	ldrh	r4, [r7, #6]
 800220e:	89b9      	ldrh	r1, [r7, #12]
 8002210:	89f8      	ldrh	r0, [r7, #14]
 8002212:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002216:	9302      	str	r3, [sp, #8]
 8002218:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	4623      	mov	r3, r4
 8002224:	f7ff fc3c 	bl	8001aa0 <lcd_show_char>
					x += sizey / 2;
 8002228:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	b29a      	uxth	r2, r3
 8002232:	89fb      	ldrh	r3, [r7, #14]
 8002234:	4413      	add	r3, r2
 8002236:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	3301      	adds	r3, #1
 800223c:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1b2      	bne.n	80021ac <lcd_show_string+0x20>
 8002246:	e000      	b.n	800224a <lcd_show_string+0xbe>
				return;
 8002248:	bf00      	nop
			}
		}
	}
}
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd90      	pop	{r4, r7, pc}
 8002250:	200003e0 	.word	0x200003e0

08002254 <HAL_UART_RxCpltCallback>:
void TestADC();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	RS485_UART_Callback(huart);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f9dd 	bl	800261c <RS485_UART_Callback>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227a:	d101      	bne.n	8002280 <HAL_TIM_PeriodElapsedCallback+0x16>

		TimerRun();
 800227c:	f000 fb78 	bl	8002970 <TimerRun>
	}

}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800228c:	f000 ff64 	bl	8003158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002290:	f000 f84a 	bl	8002328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002294:	f7ff f9c0 	bl	8001618 <MX_GPIO_Init>
  MX_DMA_Init();
 8002298:	f7ff f8ce 	bl	8001438 <MX_DMA_Init>
  MX_SPI1_Init();
 800229c:	f000 fb9a 	bl	80029d4 <MX_SPI1_Init>
  MX_FSMC_Init();
 80022a0:	f7ff f8ea 	bl	8001478 <MX_FSMC_Init>
  MX_I2C1_Init();
 80022a4:	f7ff fabe 	bl	8001824 <MX_I2C1_Init>
  MX_TIM13_Init();
 80022a8:	f000 fd6e 	bl	8002d88 <MX_TIM13_Init>
  MX_TIM2_Init();
 80022ac:	f000 fcd2 	bl	8002c54 <MX_TIM2_Init>
  MX_ADC1_Init();
 80022b0:	f7fe ff5e 	bl	8001170 <MX_ADC1_Init>
  MX_TIM4_Init();
 80022b4:	f000 fd1a 	bl	8002cec <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80022b8:	f000 fe40 	bl	8002f3c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80022bc:	f000 fe68 	bl	8002f90 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	system_init();
 80022c0:	f000 f89c 	bl	80023fc <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	InitSlave(&BKIT01);
 80022c4:	4815      	ldr	r0, [pc, #84]	; (800231c <main+0x94>)
 80022c6:	f7fe fd6f 	bl	8000da8 <InitSlave>
	InitTimer();
 80022ca:	f000 fb15 	bl	80028f8 <InitTimer>
	lcd_clear(BLACK);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff fb9c 	bl	8001a0c <lcd_clear>
	set_timer(10, 0);
 80022d4:	2100      	movs	r1, #0
 80022d6:	200a      	movs	r0, #10
 80022d8:	f000 fb30 	bl	800293c <set_timer>
	set_timer(1000, 1);
 80022dc:	2101      	movs	r1, #1
 80022de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022e2:	f000 fb2b 	bl	800293c <set_timer>


	while (1) {
//		HAL_Delay(10);
		if(timer_flag[0]){
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <main+0x98>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <main+0x78>
			slave_behavior(&BKIT01);
 80022ee:	480b      	ldr	r0, [pc, #44]	; (800231c <main+0x94>)
 80022f0:	f7fe fef4 	bl	80010dc <slave_behavior>
			TestADC();
 80022f4:	f000 f890 	bl	8002418 <TestADC>
			set_timer(10, 0);
 80022f8:	2100      	movs	r1, #0
 80022fa:	200a      	movs	r0, #10
 80022fc:	f000 fb1e 	bl	800293c <set_timer>
		}
		if(timer_flag[1]){
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <main+0x98>)
 8002302:	785b      	ldrb	r3, [r3, #1]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ee      	beq.n	80022e6 <main+0x5e>
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002308:	2110      	movs	r1, #16
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <main+0x9c>)
 800230c:	f002 fa95 	bl	800483a <HAL_GPIO_TogglePin>
			set_timer(1000, 1);
 8002310:	2101      	movs	r1, #1
 8002312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002316:	f000 fb11 	bl	800293c <set_timer>
		if(timer_flag[0]){
 800231a:	e7e4      	b.n	80022e6 <main+0x5e>
 800231c:	20000278 	.word	0x20000278
 8002320:	20000808 	.word	0x20000808
 8002324:	40021000 	.word	0x40021000

08002328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b094      	sub	sp, #80	; 0x50
 800232c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800232e:	f107 0320 	add.w	r3, r7, #32
 8002332:	2230      	movs	r2, #48	; 0x30
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f005 fa3e 	bl	80077b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	2300      	movs	r3, #0
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <SystemClock_Config+0xcc>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	4a27      	ldr	r2, [pc, #156]	; (80023f4 <SystemClock_Config+0xcc>)
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235a:	6413      	str	r3, [r2, #64]	; 0x40
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <SystemClock_Config+0xcc>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002368:	2300      	movs	r3, #0
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <SystemClock_Config+0xd0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <SystemClock_Config+0xd0>)
 8002372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <SystemClock_Config+0xd0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002384:	2302      	movs	r3, #2
 8002386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002388:	2301      	movs	r3, #1
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800238c:	2310      	movs	r3, #16
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002390:	2302      	movs	r3, #2
 8002392:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002394:	2300      	movs	r3, #0
 8002396:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002398:	2308      	movs	r3, #8
 800239a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800239c:	23a8      	movs	r3, #168	; 0xa8
 800239e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023a0:	2302      	movs	r3, #2
 80023a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023a4:	2304      	movs	r3, #4
 80023a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a8:	f107 0320 	add.w	r3, r7, #32
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 fba3 	bl	8004af8 <HAL_RCC_OscConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023b8:	f000 f8ee 	bl	8002598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023bc:	230f      	movs	r3, #15
 80023be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023c0:	2302      	movs	r3, #2
 80023c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80023ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	2105      	movs	r1, #5
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 fe04 	bl	8004fe8 <HAL_RCC_ClockConfig>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023e6:	f000 f8d7 	bl	8002598 <Error_Handler>
  }
}
 80023ea:	bf00      	nop
 80023ec:	3750      	adds	r7, #80	; 0x50
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40007000 	.word	0x40007000

080023fc <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
	button_init();
 8002400:	f7fe ffd4 	bl	80013ac <button_init>
	lcd_init();
 8002404:	f7ff fd62 	bl	8001ecc <lcd_init>

	sensor_init();
 8002408:	f000 f980 	bl	800270c <sensor_init>
	buzzer_init();
 800240c:	f7fe ffda 	bl	80013c4 <buzzer_init>

	timer2_init();
 8002410:	f000 fa68 	bl	80028e4 <timer2_init>
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <TestADC>:
	else
		return 0;
}

uint8_t count_adc = 0;
void TestADC() {
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1) % 20;
 800241e:	4b57      	ldr	r3, [pc, #348]	; (800257c <TestADC+0x164>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	4b56      	ldr	r3, [pc, #344]	; (8002580 <TestADC+0x168>)
 8002426:	fb83 1302 	smull	r1, r3, r3, r2
 800242a:	10d9      	asrs	r1, r3, #3
 800242c:	17d3      	asrs	r3, r2, #31
 800242e:	1ac9      	subs	r1, r1, r3
 8002430:	460b      	mov	r3, r1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	1ad1      	subs	r1, r2, r3
 800243a:	b2ca      	uxtb	r2, r1
 800243c:	4b4f      	ldr	r3, [pc, #316]	; (800257c <TestADC+0x164>)
 800243e:	701a      	strb	r2, [r3, #0]
	if (count_adc == 0) {
 8002440:	4b4e      	ldr	r3, [pc, #312]	; (800257c <TestADC+0x164>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 8096 	bne.w	8002576 <TestADC+0x15e>
		sensor_read();
 800244a:	f000 f96d 	bl	8002728 <sensor_read>
		lcd_show_string(10, 100, "Voltage:", RED, BLACK, 16, 0);
 800244e:	2300      	movs	r3, #0
 8002450:	9302      	str	r3, [sp, #8]
 8002452:	2310      	movs	r3, #16
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	2300      	movs	r3, #0
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800245e:	4a49      	ldr	r2, [pc, #292]	; (8002584 <TestADC+0x16c>)
 8002460:	2164      	movs	r1, #100	; 0x64
 8002462:	200a      	movs	r0, #10
 8002464:	f7ff fe92 	bl	800218c <lcd_show_string>
		lcd_show_float_num(130, 100, sensor_get_voltage(), 4, RED, BLACK, 16);
 8002468:	f000 f986 	bl	8002778 <sensor_get_voltage>
 800246c:	eef0 7a40 	vmov.f32	s15, s0
 8002470:	2310      	movs	r3, #16
 8002472:	9301      	str	r3, [sp, #4]
 8002474:	2300      	movs	r3, #0
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800247c:	2204      	movs	r2, #4
 800247e:	eeb0 0a67 	vmov.f32	s0, s15
 8002482:	2164      	movs	r1, #100	; 0x64
 8002484:	2082      	movs	r0, #130	; 0x82
 8002486:	f7ff fc75 	bl	8001d74 <lcd_show_float_num>
		lcd_show_string(10, 120, "Current:", RED, BLACK, 16, 0);
 800248a:	2300      	movs	r3, #0
 800248c:	9302      	str	r3, [sp, #8]
 800248e:	2310      	movs	r3, #16
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	2300      	movs	r3, #0
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800249a:	4a3b      	ldr	r2, [pc, #236]	; (8002588 <TestADC+0x170>)
 800249c:	2178      	movs	r1, #120	; 0x78
 800249e:	200a      	movs	r0, #10
 80024a0:	f7ff fe74 	bl	800218c <lcd_show_string>
		lcd_show_float_num(130, 120, sensor_get_current(), 4, RED, BLACK, 16);
 80024a4:	f000 f9a4 	bl	80027f0 <sensor_get_current>
 80024a8:	eef0 7a40 	vmov.f32	s15, s0
 80024ac:	2310      	movs	r3, #16
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	2300      	movs	r3, #0
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024b8:	2204      	movs	r2, #4
 80024ba:	eeb0 0a67 	vmov.f32	s0, s15
 80024be:	2178      	movs	r1, #120	; 0x78
 80024c0:	2082      	movs	r0, #130	; 0x82
 80024c2:	f7ff fc57 	bl	8001d74 <lcd_show_float_num>
		lcd_show_string(10, 140, "Light:", RED, BLACK, 16, 0);
 80024c6:	2300      	movs	r3, #0
 80024c8:	9302      	str	r3, [sp, #8]
 80024ca:	2310      	movs	r3, #16
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	2300      	movs	r3, #0
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024d6:	4a2d      	ldr	r2, [pc, #180]	; (800258c <TestADC+0x174>)
 80024d8:	218c      	movs	r1, #140	; 0x8c
 80024da:	200a      	movs	r0, #10
 80024dc:	f7ff fe56 	bl	800218c <lcd_show_string>
		lcd_show_int_num(130, 140, sensor_get_light(), 4, RED, BLACK, 16);
 80024e0:	f000 f930 	bl	8002744 <sensor_get_light>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	2310      	movs	r3, #16
 80024ea:	9302      	str	r3, [sp, #8]
 80024ec:	2300      	movs	r3, #0
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	2304      	movs	r3, #4
 80024f8:	218c      	movs	r1, #140	; 0x8c
 80024fa:	2082      	movs	r0, #130	; 0x82
 80024fc:	f7ff fbbc 	bl	8001c78 <lcd_show_int_num>
		lcd_show_string(10, 160, "Potentiometer:", RED, BLACK, 16, 0);
 8002500:	2300      	movs	r3, #0
 8002502:	9302      	str	r3, [sp, #8]
 8002504:	2310      	movs	r3, #16
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	2300      	movs	r3, #0
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002510:	4a1f      	ldr	r2, [pc, #124]	; (8002590 <TestADC+0x178>)
 8002512:	21a0      	movs	r1, #160	; 0xa0
 8002514:	200a      	movs	r0, #10
 8002516:	f7ff fe39 	bl	800218c <lcd_show_string>
		lcd_show_int_num(130, 160, sensor_get_potentiometer(), 4, RED, BLACK,
 800251a:	f000 f91f 	bl	800275c <sensor_get_potentiometer>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	2310      	movs	r3, #16
 8002524:	9302      	str	r3, [sp, #8]
 8002526:	2300      	movs	r3, #0
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2304      	movs	r3, #4
 8002532:	21a0      	movs	r1, #160	; 0xa0
 8002534:	2082      	movs	r0, #130	; 0x82
 8002536:	f7ff fb9f 	bl	8001c78 <lcd_show_int_num>
				16);
		lcd_show_string(10, 180, "Temperature:", RED, BLACK, 16, 0);
 800253a:	2300      	movs	r3, #0
 800253c:	9302      	str	r3, [sp, #8]
 800253e:	2310      	movs	r3, #16
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	2300      	movs	r3, #0
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <TestADC+0x17c>)
 800254c:	21b4      	movs	r1, #180	; 0xb4
 800254e:	200a      	movs	r0, #10
 8002550:	f7ff fe1c 	bl	800218c <lcd_show_string>
		lcd_show_float_num(130, 180, sensor_get_temperature(), 4, RED, BLACK,
 8002554:	f000 f9a8 	bl	80028a8 <sensor_get_temperature>
 8002558:	eef0 7a40 	vmov.f32	s15, s0
 800255c:	2310      	movs	r3, #16
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2300      	movs	r3, #0
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002568:	2204      	movs	r2, #4
 800256a:	eeb0 0a67 	vmov.f32	s0, s15
 800256e:	21b4      	movs	r1, #180	; 0xb4
 8002570:	2082      	movs	r0, #130	; 0x82
 8002572:	f7ff fbff 	bl	8001d74 <lcd_show_float_num>
				16);
	}
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	200003e6 	.word	0x200003e6
 8002580:	66666667 	.word	0x66666667
 8002584:	080080d8 	.word	0x080080d8
 8002588:	080080e4 	.word	0x080080e4
 800258c:	080080f0 	.word	0x080080f0
 8002590:	080080f8 	.word	0x080080f8
 8002594:	08008108 	.word	0x08008108

08002598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800259c:	b672      	cpsid	i
}
 800259e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80025a0:	e7fe      	b.n	80025a0 <Error_Handler+0x8>
	...

080025a4 <rs485_send_cmd>:
enum modbus485_state_t MODBUS485_STATE = RS485_SUPER_INIT;
uint8_t character_received_flag = 0;
uint8_t transmit_flag = 0;

void rs485_send_cmd(uint8_t* cmd_without_crc, uint8_t cmd_size_without_crc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	70fb      	strb	r3, [r7, #3]
	if (sizeof(cmd_without_crc) > 254) return;

	sprintf((void*)transmit_buffer,"%s",cmd_without_crc);
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4916      	ldr	r1, [pc, #88]	; (800260c <rs485_send_cmd+0x68>)
 80025b4:	4816      	ldr	r0, [pc, #88]	; (8002610 <rs485_send_cmd+0x6c>)
 80025b6:	f005 f8df 	bl	8007778 <siprintf>
	transmit_size = cmd_size_without_crc;
 80025ba:	4a16      	ldr	r2, [pc, #88]	; (8002614 <rs485_send_cmd+0x70>)
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	7013      	strb	r3, [r2, #0]

	uint16_t crc = crc16(transmit_buffer, transmit_size);
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <rs485_send_cmd+0x70>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4619      	mov	r1, r3
 80025c8:	4811      	ldr	r0, [pc, #68]	; (8002610 <rs485_send_cmd+0x6c>)
 80025ca:	f7fe ff05 	bl	80013d8 <crc16>
 80025ce:	4603      	mov	r3, r0
 80025d0:	81fb      	strh	r3, [r7, #14]
	transmit_buffer[transmit_size] = (uint8_t)(crc & 0x00FF); // CRC low
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <rs485_send_cmd+0x70>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	89fb      	ldrh	r3, [r7, #14]
 80025da:	b2d9      	uxtb	r1, r3
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <rs485_send_cmd+0x6c>)
 80025de:	5499      	strb	r1, [r3, r2]
	transmit_buffer[transmit_size + 1] = (uint8_t)((crc >> 8) & 0x00FF); // CRC high
 80025e0:	89fb      	ldrh	r3, [r7, #14]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <rs485_send_cmd+0x70>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	b2d1      	uxtb	r1, r2
 80025ee:	4a08      	ldr	r2, [pc, #32]	; (8002610 <rs485_send_cmd+0x6c>)
 80025f0:	54d1      	strb	r1, [r2, r3]

	transmit_size += 2;
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <rs485_send_cmd+0x70>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	3302      	adds	r3, #2
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <rs485_send_cmd+0x70>)
 80025fc:	701a      	strb	r2, [r3, #0]
	transmit_flag = 1;
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <rs485_send_cmd+0x74>)
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
}
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	08008118 	.word	0x08008118
 8002610:	200003e8 	.word	0x200003e8
 8002614:	200004e8 	.word	0x200004e8
 8002618:	200005ee 	.word	0x200005ee

0800261c <RS485_UART_Callback>:
		frame_size = receive_index;
		isCRCChecking = 1;
	}
}
void RS485_UART_Callback(UART_HandleTypeDef *huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0c      	ldr	r2, [pc, #48]	; (800265c <RS485_UART_Callback+0x40>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d112      	bne.n	8002654 <RS485_UART_Callback+0x38>
	{
		receive_buffer[receive_index++] = receive_byte_buffer;
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <RS485_UART_Callback+0x44>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	b2d1      	uxtb	r1, r2
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <RS485_UART_Callback+0x44>)
 8002638:	7011      	strb	r1, [r2, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <RS485_UART_Callback+0x48>)
 800263e:	7819      	ldrb	r1, [r3, #0]
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <RS485_UART_Callback+0x4c>)
 8002642:	5499      	strb	r1, [r3, r2]
		character_received_flag = 1;
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <RS485_UART_Callback+0x50>)
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]

		// DEBUG
//		HAL_UART_Transmit(&huart1, &receive_byte_buffer, 1, HAL_MAX_DELAY);
		// END DEBUG

		HAL_UART_Receive_IT(&huart3, &receive_byte_buffer, 1);
 800264a:	2201      	movs	r2, #1
 800264c:	4905      	ldr	r1, [pc, #20]	; (8002664 <RS485_UART_Callback+0x48>)
 800264e:	4808      	ldr	r0, [pc, #32]	; (8002670 <RS485_UART_Callback+0x54>)
 8002650:	f004 f83a 	bl	80066c8 <HAL_UART_Receive_IT>
	}
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40004800 	.word	0x40004800
 8002660:	200005ec 	.word	0x200005ec
 8002664:	200004e9 	.word	0x200004e9
 8002668:	200004ec 	.word	0x200004ec
 800266c:	200005ed 	.word	0x200005ed
 8002670:	200009a0 	.word	0x200009a0

08002674 <Modbus_Receive>:
	}
	HAL_Delay(5);
	return MODBUS_OKE;
}

Modbus_Status Modbus_Receive(Modbus_HandleTypeDef* hModbus){ //Thieu timeout
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800268a:	4619      	mov	r1, r3
 800268c:	f004 f841 	bl	8006712 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002696:	4804      	ldr	r0, [pc, #16]	; (80026a8 <Modbus_Receive+0x34>)
 8002698:	f002 f8b6 	bl	8004808 <HAL_GPIO_WritePin>
	return MODBUS_OKE;
 800269c:	2302      	movs	r3, #2
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40020000 	.word	0x40020000

080026ac <Modbus_Init>:
	Receive_Flag = Modbus_CheckData(hModbus);
//	HAL_UART_Transmit(&huart1, hModbus->Rx_buf, hModbus->Rx_size, HAL_MAX_DELAY);
	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
}

void Modbus_Init(Modbus_HandleTypeDef* hModbus, UART_HandleTypeDef* huart){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
	hModbus->huart = huart;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	601a      	str	r2, [r3, #0]
	hModbus->Address = 0;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	711a      	strb	r2, [r3, #4]
	memset(hModbus->Rx_buf,0,sizeof(hModbus->Rx_buf));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80026c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f005 f872 	bl	80077b8 <memset>
	hModbus->Rx_size = 256;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026da:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	memset(hModbus->Tx_buf,0,sizeof(hModbus->Tx_buf));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3305      	adds	r3, #5
 80026e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f005 f865 	bl	80077b8 <memset>
	hModbus->Tx_size = 0;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	hModbus->RxFlag = 0;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
	Modbus_Receive(hModbus);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ffb8 	bl	8002674 <Modbus_Receive>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <sensor_init>:

/* Variables */
uint16_t adc_receive[5];

/* Functions */
void sensor_init() {
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*) adc_receive, 5);
 8002710:	2205      	movs	r2, #5
 8002712:	4903      	ldr	r1, [pc, #12]	; (8002720 <sensor_init+0x14>)
 8002714:	4803      	ldr	r0, [pc, #12]	; (8002724 <sensor_init+0x18>)
 8002716:	f000 fdf9 	bl	800330c <HAL_ADC_Start_DMA>
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200007fc 	.word	0x200007fc
 8002724:	20000290 	.word	0x20000290

08002728 <sensor_read>:

void sensor_read() {
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_receive, 5);
 800272c:	2205      	movs	r2, #5
 800272e:	4903      	ldr	r1, [pc, #12]	; (800273c <sensor_read+0x14>)
 8002730:	4803      	ldr	r0, [pc, #12]	; (8002740 <sensor_read+0x18>)
 8002732:	f000 fdeb 	bl	800330c <HAL_ADC_Start_DMA>
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200007fc 	.word	0x200007fc
 8002740:	20000290 	.word	0x20000290

08002744 <sensor_get_light>:

uint16_t sensor_get_light() {
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <sensor_get_light+0x14>)
 800274a:	889b      	ldrh	r3, [r3, #4]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	200007fc 	.word	0x200007fc

0800275c <sensor_get_potentiometer>:

uint16_t sensor_get_potentiometer() {
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <sensor_get_potentiometer+0x14>)
 8002762:	88db      	ldrh	r3, [r3, #6]
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	200007fc 	.word	0x200007fc
 8002774:	00000000 	.word	0x00000000

08002778 <sensor_get_voltage>:

float sensor_get_voltage() {
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
	return ((float) adc_receive[0] * 3.3 * 12) / (4095 * 1.565);
 800277c:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <sensor_get_voltage+0x70>)
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	ee07 3a90 	vmov	s15, r3
 8002784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002788:	ee17 0a90 	vmov	r0, s15
 800278c:	f7fd fed4 	bl	8000538 <__aeabi_f2d>
 8002790:	a311      	add	r3, pc, #68	; (adr r3, 80027d8 <sensor_get_voltage+0x60>)
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	f7fd ff27 	bl	80005e8 <__aeabi_dmul>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	4b11      	ldr	r3, [pc, #68]	; (80027ec <sensor_get_voltage+0x74>)
 80027a8:	f7fd ff1e 	bl	80005e8 <__aeabi_dmul>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4610      	mov	r0, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	a30a      	add	r3, pc, #40	; (adr r3, 80027e0 <sensor_get_voltage+0x68>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fe f83f 	bl	800083c <__aeabi_ddiv>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	f7fe f921 	bl	8000a0c <__aeabi_d2f>
 80027ca:	4603      	mov	r3, r0
 80027cc:	ee07 3a90 	vmov	s15, r3
}
 80027d0:	eeb0 0a67 	vmov.f32	s0, s15
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	66666666 	.word	0x66666666
 80027dc:	400a6666 	.word	0x400a6666
 80027e0:	cccccccd 	.word	0xcccccccd
 80027e4:	40b908ac 	.word	0x40b908ac
 80027e8:	200007fc 	.word	0x200007fc
 80027ec:	40280000 	.word	0x40280000

080027f0 <sensor_get_current>:

float sensor_get_current() {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	return (((float) adc_receive[1] * 3.3 * 1000) / (4095 * 0.647) - 2.5) * 5
 80027f4:	4b28      	ldr	r3, [pc, #160]	; (8002898 <sensor_get_current+0xa8>)
 80027f6:	885b      	ldrh	r3, [r3, #2]
 80027f8:	ee07 3a90 	vmov	s15, r3
 80027fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002800:	ee17 0a90 	vmov	r0, s15
 8002804:	f7fd fe98 	bl	8000538 <__aeabi_f2d>
 8002808:	a31f      	add	r3, pc, #124	; (adr r3, 8002888 <sensor_get_current+0x98>)
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	f7fd feeb 	bl	80005e8 <__aeabi_dmul>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	4b1f      	ldr	r3, [pc, #124]	; (800289c <sensor_get_current+0xac>)
 8002820:	f7fd fee2 	bl	80005e8 <__aeabi_dmul>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	a318      	add	r3, pc, #96	; (adr r3, 8002890 <sensor_get_current+0xa0>)
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	f7fe f803 	bl	800083c <__aeabi_ddiv>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <sensor_get_current+0xb0>)
 8002844:	f7fd fd18 	bl	8000278 <__aeabi_dsub>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <sensor_get_current+0xb4>)
 8002856:	f7fd fec7 	bl	80005e8 <__aeabi_dmul>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
			/ 2.5;
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <sensor_get_current+0xb0>)
 8002868:	f7fd ffe8 	bl	800083c <__aeabi_ddiv>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	f7fe f8ca 	bl	8000a0c <__aeabi_d2f>
 8002878:	4603      	mov	r3, r0
 800287a:	ee07 3a90 	vmov	s15, r3
}
 800287e:	eeb0 0a67 	vmov.f32	s0, s15
 8002882:	bd80      	pop	{r7, pc}
 8002884:	f3af 8000 	nop.w
 8002888:	66666666 	.word	0x66666666
 800288c:	400a6666 	.word	0x400a6666
 8002890:	147ae148 	.word	0x147ae148
 8002894:	40a4b2ee 	.word	0x40a4b2ee
 8002898:	200007fc 	.word	0x200007fc
 800289c:	408f4000 	.word	0x408f4000
 80028a0:	40040000 	.word	0x40040000
 80028a4:	40140000 	.word	0x40140000

080028a8 <sensor_get_temperature>:

float sensor_get_temperature() {
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
	return ((float) adc_receive[4] * 330) / (4095);
 80028ac:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <sensor_get_temperature+0x30>)
 80028ae:	891b      	ldrh	r3, [r3, #8]
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80028dc <sensor_get_temperature+0x34>
 80028bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80028e0 <sensor_get_temperature+0x38>
 80028c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028c8:	eef0 7a66 	vmov.f32	s15, s13
}
 80028cc:	eeb0 0a67 	vmov.f32	s0, s15
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	200007fc 	.word	0x200007fc
 80028dc:	43a50000 	.word	0x43a50000
 80028e0:	457ff000 	.word	0x457ff000

080028e4 <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <timer2_init+0x10>)
 80028ea:	f002 febd 	bl	8005668 <HAL_TIM_Base_Start_IT>
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000880 	.word	0x20000880

080028f8 <InitTimer>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void InitTimer(void){
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
	for(int i = 0; i < __MAX_TIM; i++){
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	e00c      	b.n	800291e <InitTimer+0x26>
		timer_counter[i] = 0;
 8002904:	4a0b      	ldr	r2, [pc, #44]	; (8002934 <InitTimer+0x3c>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2100      	movs	r1, #0
 800290a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timer_flag[i] = 0;
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <InitTimer+0x40>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < __MAX_TIM; i++){
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3301      	adds	r3, #1
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b04      	cmp	r3, #4
 8002922:	ddef      	ble.n	8002904 <InitTimer+0xc>
	}
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000810 	.word	0x20000810
 8002938:	20000808 	.word	0x20000808

0800293c <set_timer>:

void set_timer(uint32_t ms, uint8_t idx){
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	70fb      	strb	r3, [r7, #3]
	timer_flag[idx] = 0;
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	4a07      	ldr	r2, [pc, #28]	; (8002968 <set_timer+0x2c>)
 800294c:	2100      	movs	r1, #0
 800294e:	54d1      	strb	r1, [r2, r3]
	timer_counter[idx] = ms;
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	4906      	ldr	r1, [pc, #24]	; (800296c <set_timer+0x30>)
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000808 	.word	0x20000808
 800296c:	20000810 	.word	0x20000810

08002970 <TimerRun>:

void TimerRun(void){
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
	for(int i = 0; i < __MAX_TIM; i++){
 8002976:	2300      	movs	r3, #0
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	e01c      	b.n	80029b6 <TimerRun+0x46>
		if(timer_counter[i] > 0){
 800297c:	4a13      	ldr	r2, [pc, #76]	; (80029cc <TimerRun+0x5c>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d013      	beq.n	80029b0 <TimerRun+0x40>
			timer_counter[i]--;
 8002988:	4a10      	ldr	r2, [pc, #64]	; (80029cc <TimerRun+0x5c>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002990:	1e5a      	subs	r2, r3, #1
 8002992:	490e      	ldr	r1, [pc, #56]	; (80029cc <TimerRun+0x5c>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] == 0){
 800299a:	4a0c      	ldr	r2, [pc, #48]	; (80029cc <TimerRun+0x5c>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d104      	bne.n	80029b0 <TimerRun+0x40>
				timer_flag[i] = 1;
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <TimerRun+0x60>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4413      	add	r3, r2
 80029ac:	2201      	movs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < __MAX_TIM; i++){
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3301      	adds	r3, #1
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	dddf      	ble.n	800297c <TimerRun+0xc>
			}
		}
	}
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000810 	.word	0x20000810
 80029d0:	20000808 	.word	0x20000808

080029d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029d8:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <MX_SPI1_Init+0x64>)
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <MX_SPI1_Init+0x68>)
 80029dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <MX_SPI1_Init+0x64>)
 80029e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <MX_SPI1_Init+0x64>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <MX_SPI1_Init+0x64>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <MX_SPI1_Init+0x64>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029f8:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <MX_SPI1_Init+0x64>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <MX_SPI1_Init+0x64>)
 8002a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <MX_SPI1_Init+0x64>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <MX_SPI1_Init+0x64>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <MX_SPI1_Init+0x64>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <MX_SPI1_Init+0x64>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <MX_SPI1_Init+0x64>)
 8002a20:	220a      	movs	r2, #10
 8002a22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a24:	4804      	ldr	r0, [pc, #16]	; (8002a38 <MX_SPI1_Init+0x64>)
 8002a26:	f002 fcff 	bl	8005428 <HAL_SPI_Init>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a30:	f7ff fdb2 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000824 	.word	0x20000824
 8002a3c:	40013000 	.word	0x40013000

08002a40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <HAL_SPI_MspInit+0x84>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d12b      	bne.n	8002aba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_SPI_MspInit+0x88>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <HAL_SPI_MspInit+0x88>)
 8002a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <HAL_SPI_MspInit+0x88>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_SPI_MspInit+0x88>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a10      	ldr	r2, [pc, #64]	; (8002ac8 <HAL_SPI_MspInit+0x88>)
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_SPI_MspInit+0x88>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a9a:	2338      	movs	r3, #56	; 0x38
 8002a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002aaa:	2305      	movs	r3, #5
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4805      	ldr	r0, [pc, #20]	; (8002acc <HAL_SPI_MspInit+0x8c>)
 8002ab6:	f001 fd0b 	bl	80044d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002aba:	bf00      	nop
 8002abc:	3728      	adds	r7, #40	; 0x28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40013000 	.word	0x40013000
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020400 	.word	0x40020400

08002ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_MspInit+0x4c>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	4a0f      	ldr	r2, [pc, #60]	; (8002b1c <HAL_MspInit+0x4c>)
 8002ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <HAL_MspInit+0x4c>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_MspInit+0x4c>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <HAL_MspInit+0x4c>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_MspInit+0x4c>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800

08002b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <NMI_Handler+0x4>

08002b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2a:	e7fe      	b.n	8002b2a <HardFault_Handler+0x4>

08002b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b30:	e7fe      	b.n	8002b30 <MemManage_Handler+0x4>

08002b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b36:	e7fe      	b.n	8002b36 <BusFault_Handler+0x4>

08002b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <UsageFault_Handler+0x4>

08002b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b6c:	f000 fb46 	bl	80031fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <TIM2_IRQHandler+0x10>)
 8002b7a:	f002 ff07 	bl	800598c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000880 	.word	0x20000880

08002b88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <USART1_IRQHandler+0x10>)
 8002b8e:	f003 fe1d 	bl	80067cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000958 	.word	0x20000958

08002b9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <USART3_IRQHandler+0x10>)
 8002ba2:	f003 fe13 	bl	80067cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200009a0 	.word	0x200009a0

08002bb0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <DMA2_Stream0_IRQHandler+0x10>)
 8002bb6:	f001 fa21 	bl	8003ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200002d8 	.word	0x200002d8

08002bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <_sbrk+0x5c>)
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <_sbrk+0x60>)
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <_sbrk+0x64>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <_sbrk+0x64>)
 8002be2:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <_sbrk+0x68>)
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <_sbrk+0x64>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d207      	bcs.n	8002c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf4:	f004 fde8 	bl	80077c8 <__errno>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002c02:	e009      	b.n	8002c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <_sbrk+0x64>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <_sbrk+0x64>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <_sbrk+0x64>)
 8002c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20020000 	.word	0x20020000
 8002c24:	00000400 	.word	0x00000400
 8002c28:	2000087c 	.word	0x2000087c
 8002c2c:	20000b38 	.word	0x20000b38

08002c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <SystemInit+0x20>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <SystemInit+0x20>)
 8002c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c68:	463b      	mov	r3, r7
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002c7a:	f240 3247 	movw	r2, #839	; 0x347
 8002c7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002c86:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002c88:	2263      	movs	r2, #99	; 0x63
 8002c8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c98:	4813      	ldr	r0, [pc, #76]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002c9a:	f002 fc96 	bl	80055ca <HAL_TIM_Base_Init>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002ca4:	f7ff fc78 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cae:	f107 0308 	add.w	r3, r7, #8
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	480c      	ldr	r0, [pc, #48]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002cb6:	f003 f81b 	bl	8005cf0 <HAL_TIM_ConfigClockSource>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002cc0:	f7ff fc6a 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ccc:	463b      	mov	r3, r7
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <MX_TIM2_Init+0x94>)
 8002cd2:	f003 fc19 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002cdc:	f7ff fc5c 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ce0:	bf00      	nop
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000880 	.word	0x20000880

08002cec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cf2:	f107 0308 	add.w	r3, r7, #8
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d00:	463b      	mov	r3, r7
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <MX_TIM4_Init+0x94>)
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <MX_TIM4_Init+0x98>)
 8002d0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <MX_TIM4_Init+0x94>)
 8002d10:	f240 3247 	movw	r2, #839	; 0x347
 8002d14:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <MX_TIM4_Init+0x94>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <MX_TIM4_Init+0x94>)
 8002d1e:	2263      	movs	r2, #99	; 0x63
 8002d20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <MX_TIM4_Init+0x94>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d28:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <MX_TIM4_Init+0x94>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d2e:	4814      	ldr	r0, [pc, #80]	; (8002d80 <MX_TIM4_Init+0x94>)
 8002d30:	f002 fc4b 	bl	80055ca <HAL_TIM_Base_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002d3a:	f7ff fc2d 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d44:	f107 0308 	add.w	r3, r7, #8
 8002d48:	4619      	mov	r1, r3
 8002d4a:	480d      	ldr	r0, [pc, #52]	; (8002d80 <MX_TIM4_Init+0x94>)
 8002d4c:	f002 ffd0 	bl	8005cf0 <HAL_TIM_ConfigClockSource>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002d56:	f7ff fc1f 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d62:	463b      	mov	r3, r7
 8002d64:	4619      	mov	r1, r3
 8002d66:	4806      	ldr	r0, [pc, #24]	; (8002d80 <MX_TIM4_Init+0x94>)
 8002d68:	f003 fbce 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002d72:	f7ff fc11 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200008c8 	.word	0x200008c8
 8002d84:	40000800 	.word	0x40000800

08002d88 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d8e:	1d3b      	adds	r3, r7, #4
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
 8002d9c:	615a      	str	r2, [r3, #20]
 8002d9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002da0:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <MX_TIM13_Init+0x94>)
 8002da2:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <MX_TIM13_Init+0x98>)
 8002da4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <MX_TIM13_Init+0x94>)
 8002da8:	f240 3247 	movw	r2, #839	; 0x347
 8002dac:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dae:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <MX_TIM13_Init+0x94>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002db4:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <MX_TIM13_Init+0x94>)
 8002db6:	2263      	movs	r2, #99	; 0x63
 8002db8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dba:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <MX_TIM13_Init+0x94>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc0:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <MX_TIM13_Init+0x94>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002dc6:	4815      	ldr	r0, [pc, #84]	; (8002e1c <MX_TIM13_Init+0x94>)
 8002dc8:	f002 fbff 	bl	80055ca <HAL_TIM_Base_Init>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002dd2:	f7ff fbe1 	bl	8002598 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002dd6:	4811      	ldr	r0, [pc, #68]	; (8002e1c <MX_TIM13_Init+0x94>)
 8002dd8:	f002 fcb6 	bl	8005748 <HAL_TIM_PWM_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002de2:	f7ff fbd9 	bl	8002598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002de6:	2360      	movs	r3, #96	; 0x60
 8002de8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	2200      	movs	r2, #0
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4807      	ldr	r0, [pc, #28]	; (8002e1c <MX_TIM13_Init+0x94>)
 8002dfe:	f002 feb5 	bl	8005b6c <HAL_TIM_PWM_ConfigChannel>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002e08:	f7ff fbc6 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002e0c:	4803      	ldr	r0, [pc, #12]	; (8002e1c <MX_TIM13_Init+0x94>)
 8002e0e:	f000 f85b 	bl	8002ec8 <HAL_TIM_MspPostInit>

}
 8002e12:	bf00      	nop
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000910 	.word	0x20000910
 8002e20:	40001c00 	.word	0x40001c00

08002e24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e34:	d116      	bne.n	8002e64 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_TIM_Base_MspInit+0x98>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <HAL_TIM_Base_MspInit+0x98>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
 8002e46:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <HAL_TIM_Base_MspInit+0x98>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	201c      	movs	r0, #28
 8002e58:	f000 ff01 	bl	8003c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e5c:	201c      	movs	r0, #28
 8002e5e:	f000 ff1a 	bl	8003c96 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002e62:	e026      	b.n	8002eb2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM4)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <HAL_TIM_Base_MspInit+0x9c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10e      	bne.n	8002e8c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_TIM_Base_MspInit+0x98>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <HAL_TIM_Base_MspInit+0x98>)
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <HAL_TIM_Base_MspInit+0x98>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	693b      	ldr	r3, [r7, #16]
}
 8002e8a:	e012      	b.n	8002eb2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <HAL_TIM_Base_MspInit+0xa0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10d      	bne.n	8002eb2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <HAL_TIM_Base_MspInit+0x98>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <HAL_TIM_Base_MspInit+0x98>)
 8002ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_TIM_Base_MspInit+0x98>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
}
 8002eb2:	bf00      	nop
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40000800 	.word	0x40000800
 8002ec4:	40001c00 	.word	0x40001c00

08002ec8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 030c 	add.w	r3, r7, #12
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <HAL_TIM_MspPostInit+0x68>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d11e      	bne.n	8002f28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_TIM_MspPostInit+0x6c>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	4a10      	ldr	r2, [pc, #64]	; (8002f34 <HAL_TIM_MspPostInit+0x6c>)
 8002ef4:	f043 0320 	orr.w	r3, r3, #32
 8002ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <HAL_TIM_MspPostInit+0x6c>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002f18:	2309      	movs	r3, #9
 8002f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f1c:	f107 030c 	add.w	r3, r7, #12
 8002f20:	4619      	mov	r1, r3
 8002f22:	4805      	ldr	r0, [pc, #20]	; (8002f38 <HAL_TIM_MspPostInit+0x70>)
 8002f24:	f001 fad4 	bl	80044d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002f28:	bf00      	nop
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40001c00 	.word	0x40001c00
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40021400 	.word	0x40021400

08002f3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f42:	4a12      	ldr	r2, [pc, #72]	; (8002f8c <MX_USART1_UART_Init+0x50>)
 8002f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f62:	220c      	movs	r2, #12
 8002f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f72:	4805      	ldr	r0, [pc, #20]	; (8002f88 <MX_USART1_UART_Init+0x4c>)
 8002f74:	f003 fb58 	bl	8006628 <HAL_UART_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f7e:	f7ff fb0b 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000958 	.word	0x20000958
 8002f8c:	40011000 	.word	0x40011000

08002f90 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <MX_USART3_UART_Init+0x4c>)
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <MX_USART3_UART_Init+0x50>)
 8002f98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <MX_USART3_UART_Init+0x4c>)
 8002f9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <MX_USART3_UART_Init+0x4c>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <MX_USART3_UART_Init+0x4c>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <MX_USART3_UART_Init+0x4c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <MX_USART3_UART_Init+0x4c>)
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <MX_USART3_UART_Init+0x4c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <MX_USART3_UART_Init+0x4c>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fc6:	4805      	ldr	r0, [pc, #20]	; (8002fdc <MX_USART3_UART_Init+0x4c>)
 8002fc8:	f003 fb2e 	bl	8006628 <HAL_UART_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002fd2:	f7ff fae1 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200009a0 	.word	0x200009a0
 8002fe0:	40004800 	.word	0x40004800

08002fe4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08c      	sub	sp, #48	; 0x30
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fec:	f107 031c 	add.w	r3, r7, #28
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	60da      	str	r2, [r3, #12]
 8002ffa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a3b      	ldr	r2, [pc, #236]	; (80030f0 <HAL_UART_MspInit+0x10c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d135      	bne.n	8003072 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	4b3a      	ldr	r3, [pc, #232]	; (80030f4 <HAL_UART_MspInit+0x110>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	4a39      	ldr	r2, [pc, #228]	; (80030f4 <HAL_UART_MspInit+0x110>)
 8003010:	f043 0310 	orr.w	r3, r3, #16
 8003014:	6453      	str	r3, [r2, #68]	; 0x44
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <HAL_UART_MspInit+0x110>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	4b33      	ldr	r3, [pc, #204]	; (80030f4 <HAL_UART_MspInit+0x110>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	4a32      	ldr	r2, [pc, #200]	; (80030f4 <HAL_UART_MspInit+0x110>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6313      	str	r3, [r2, #48]	; 0x30
 8003032:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <HAL_UART_MspInit+0x110>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800303e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003044:	2302      	movs	r3, #2
 8003046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304c:	2303      	movs	r3, #3
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003050:	2307      	movs	r3, #7
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003054:	f107 031c 	add.w	r3, r7, #28
 8003058:	4619      	mov	r1, r3
 800305a:	4827      	ldr	r0, [pc, #156]	; (80030f8 <HAL_UART_MspInit+0x114>)
 800305c:	f001 fa38 	bl	80044d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003060:	2200      	movs	r2, #0
 8003062:	2100      	movs	r1, #0
 8003064:	2025      	movs	r0, #37	; 0x25
 8003066:	f000 fdfa 	bl	8003c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800306a:	2025      	movs	r0, #37	; 0x25
 800306c:	f000 fe13 	bl	8003c96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003070:	e039      	b.n	80030e6 <HAL_UART_MspInit+0x102>
  else if(uartHandle->Instance==USART3)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a21      	ldr	r2, [pc, #132]	; (80030fc <HAL_UART_MspInit+0x118>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d134      	bne.n	80030e6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 800307c:	2300      	movs	r3, #0
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <HAL_UART_MspInit+0x110>)
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <HAL_UART_MspInit+0x110>)
 8003086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800308a:	6413      	str	r3, [r2, #64]	; 0x40
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_UART_MspInit+0x110>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003098:	2300      	movs	r3, #0
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_UART_MspInit+0x110>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <HAL_UART_MspInit+0x110>)
 80030a2:	f043 0304 	orr.w	r3, r3, #4
 80030a6:	6313      	str	r3, [r2, #48]	; 0x30
 80030a8:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_UART_MspInit+0x110>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80030b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ba:	2302      	movs	r3, #2
 80030bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c2:	2303      	movs	r3, #3
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030c6:	2307      	movs	r3, #7
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ca:	f107 031c 	add.w	r3, r7, #28
 80030ce:	4619      	mov	r1, r3
 80030d0:	480b      	ldr	r0, [pc, #44]	; (8003100 <HAL_UART_MspInit+0x11c>)
 80030d2:	f001 f9fd 	bl	80044d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2100      	movs	r1, #0
 80030da:	2027      	movs	r0, #39	; 0x27
 80030dc:	f000 fdbf 	bl	8003c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80030e0:	2027      	movs	r0, #39	; 0x27
 80030e2:	f000 fdd8 	bl	8003c96 <HAL_NVIC_EnableIRQ>
}
 80030e6:	bf00      	nop
 80030e8:	3730      	adds	r7, #48	; 0x30
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40011000 	.word	0x40011000
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40020000 	.word	0x40020000
 80030fc:	40004800 	.word	0x40004800
 8003100:	40020800 	.word	0x40020800

08003104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800313c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003108:	480d      	ldr	r0, [pc, #52]	; (8003140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800310a:	490e      	ldr	r1, [pc, #56]	; (8003144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800310c:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800310e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003110:	e002      	b.n	8003118 <LoopCopyDataInit>

08003112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003116:	3304      	adds	r3, #4

08003118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800311a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800311c:	d3f9      	bcc.n	8003112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800311e:	4a0b      	ldr	r2, [pc, #44]	; (800314c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003120:	4c0b      	ldr	r4, [pc, #44]	; (8003150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003124:	e001      	b.n	800312a <LoopFillZerobss>

08003126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003128:	3204      	adds	r2, #4

0800312a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800312a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800312c:	d3fb      	bcc.n	8003126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800312e:	f7ff fd7f 	bl	8002c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003132:	f004 fb4f 	bl	80077d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003136:	f7ff f8a7 	bl	8002288 <main>
  bx  lr    
 800313a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800313c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003144:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8003148:	0800b100 	.word	0x0800b100
  ldr r2, =_sbss
 800314c:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8003150:	20000b34 	.word	0x20000b34

08003154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003154:	e7fe      	b.n	8003154 <ADC_IRQHandler>
	...

08003158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_Init+0x40>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <HAL_Init+0x40>)
 8003162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_Init+0x40>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <HAL_Init+0x40>)
 800316e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_Init+0x40>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_Init+0x40>)
 800317a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003180:	2003      	movs	r0, #3
 8003182:	f000 fd61 	bl	8003c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003186:	200f      	movs	r0, #15
 8003188:	f000 f808 	bl	800319c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800318c:	f7ff fca0 	bl	8002ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023c00 	.word	0x40023c00

0800319c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <HAL_InitTick+0x54>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_InitTick+0x58>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fd79 	bl	8003cb2 <HAL_SYSTICK_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00e      	b.n	80031e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b0f      	cmp	r3, #15
 80031ce:	d80a      	bhi.n	80031e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d0:	2200      	movs	r2, #0
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	f000 fd41 	bl	8003c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031dc:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <HAL_InitTick+0x5c>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000200 	.word	0x20000200
 80031f4:	20000208 	.word	0x20000208
 80031f8:	20000204 	.word	0x20000204

080031fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_IncTick+0x20>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_IncTick+0x24>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4413      	add	r3, r2
 800320c:	4a04      	ldr	r2, [pc, #16]	; (8003220 <HAL_IncTick+0x24>)
 800320e:	6013      	str	r3, [r2, #0]
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000208 	.word	0x20000208
 8003220:	200009e8 	.word	0x200009e8

08003224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return uwTick;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_GetTick+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	200009e8 	.word	0x200009e8

0800323c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003244:	f7ff ffee 	bl	8003224 <HAL_GetTick>
 8003248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d005      	beq.n	8003262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_Delay+0x44>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003262:	bf00      	nop
 8003264:	f7ff ffde 	bl	8003224 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	d8f7      	bhi.n	8003264 <HAL_Delay+0x28>
  {
  }
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000208 	.word	0x20000208

08003284 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e033      	b.n	8003302 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fd ffee 	bl	8001284 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d118      	bne.n	80032f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032ca:	f023 0302 	bic.w	r3, r3, #2
 80032ce:	f043 0202 	orr.w	r2, r3, #2
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fa68 	bl	80037ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f023 0303 	bic.w	r3, r3, #3
 80032ea:	f043 0201 	orr.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40
 80032f2:	e001      	b.n	80032f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003300:	7bfb      	ldrb	r3, [r7, #15]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_ADC_Start_DMA+0x1e>
 8003326:	2302      	movs	r3, #2
 8003328:	e0e9      	b.n	80034fe <HAL_ADC_Start_DMA+0x1f2>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d018      	beq.n	8003372 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003350:	4b6d      	ldr	r3, [pc, #436]	; (8003508 <HAL_ADC_Start_DMA+0x1fc>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6d      	ldr	r2, [pc, #436]	; (800350c <HAL_ADC_Start_DMA+0x200>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	0c9a      	lsrs	r2, r3, #18
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003364:	e002      	b.n	800336c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	3b01      	subs	r3, #1
 800336a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f9      	bne.n	8003366 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003380:	d107      	bne.n	8003392 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003390:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	f040 80a1 	bne.w	80034e4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d007      	beq.n	80033d4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e0:	d106      	bne.n	80033f0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	f023 0206 	bic.w	r2, r3, #6
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
 80033ee:	e002      	b.n	80033f6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033fe:	4b44      	ldr	r3, [pc, #272]	; (8003510 <HAL_ADC_Start_DMA+0x204>)
 8003400:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	4a43      	ldr	r2, [pc, #268]	; (8003514 <HAL_ADC_Start_DMA+0x208>)
 8003408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	4a42      	ldr	r2, [pc, #264]	; (8003518 <HAL_ADC_Start_DMA+0x20c>)
 8003410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	4a41      	ldr	r2, [pc, #260]	; (800351c <HAL_ADC_Start_DMA+0x210>)
 8003418:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003422:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003432:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003442:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	334c      	adds	r3, #76	; 0x4c
 800344e:	4619      	mov	r1, r3
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f000 fce8 	bl	8003e28 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	2b00      	cmp	r3, #0
 8003462:	d12a      	bne.n	80034ba <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2d      	ldr	r2, [pc, #180]	; (8003520 <HAL_ADC_Start_DMA+0x214>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d015      	beq.n	800349a <HAL_ADC_Start_DMA+0x18e>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a2c      	ldr	r2, [pc, #176]	; (8003524 <HAL_ADC_Start_DMA+0x218>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d105      	bne.n	8003484 <HAL_ADC_Start_DMA+0x178>
 8003478:	4b25      	ldr	r3, [pc, #148]	; (8003510 <HAL_ADC_Start_DMA+0x204>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a27      	ldr	r2, [pc, #156]	; (8003528 <HAL_ADC_Start_DMA+0x21c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d136      	bne.n	80034fc <HAL_ADC_Start_DMA+0x1f0>
 800348e:	4b20      	ldr	r3, [pc, #128]	; (8003510 <HAL_ADC_Start_DMA+0x204>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d130      	bne.n	80034fc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d129      	bne.n	80034fc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	e020      	b.n	80034fc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a18      	ldr	r2, [pc, #96]	; (8003520 <HAL_ADC_Start_DMA+0x214>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d11b      	bne.n	80034fc <HAL_ADC_Start_DMA+0x1f0>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d114      	bne.n	80034fc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034e0:	609a      	str	r2, [r3, #8]
 80034e2:	e00b      	b.n	80034fc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	f043 0210 	orr.w	r2, r3, #16
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	f043 0201 	orr.w	r2, r3, #1
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000200 	.word	0x20000200
 800350c:	431bde83 	.word	0x431bde83
 8003510:	40012300 	.word	0x40012300
 8003514:	080039a5 	.word	0x080039a5
 8003518:	08003a5f 	.word	0x08003a5f
 800351c:	08003a7b 	.word	0x08003a7b
 8003520:	40012000 	.word	0x40012000
 8003524:	40012100 	.word	0x40012100
 8003528:	40012200 	.word	0x40012200

0800352c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x1c>
 8003580:	2302      	movs	r3, #2
 8003582:	e105      	b.n	8003790 <HAL_ADC_ConfigChannel+0x228>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b09      	cmp	r3, #9
 8003592:	d925      	bls.n	80035e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68d9      	ldr	r1, [r3, #12]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	3b1e      	subs	r3, #30
 80035aa:	2207      	movs	r2, #7
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43da      	mvns	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	400a      	ands	r2, r1
 80035b8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68d9      	ldr	r1, [r3, #12]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	4618      	mov	r0, r3
 80035cc:	4603      	mov	r3, r0
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4403      	add	r3, r0
 80035d2:	3b1e      	subs	r3, #30
 80035d4:	409a      	lsls	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	e022      	b.n	8003626 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6919      	ldr	r1, [r3, #16]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	4613      	mov	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4413      	add	r3, r2
 80035f4:	2207      	movs	r2, #7
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43da      	mvns	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	400a      	ands	r2, r1
 8003602:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6919      	ldr	r1, [r3, #16]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	b29b      	uxth	r3, r3
 8003614:	4618      	mov	r0, r3
 8003616:	4603      	mov	r3, r0
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4403      	add	r3, r0
 800361c:	409a      	lsls	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b06      	cmp	r3, #6
 800362c:	d824      	bhi.n	8003678 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	3b05      	subs	r3, #5
 8003640:	221f      	movs	r2, #31
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43da      	mvns	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	400a      	ands	r2, r1
 800364e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	4618      	mov	r0, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	3b05      	subs	r3, #5
 800366a:	fa00 f203 	lsl.w	r2, r0, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	635a      	str	r2, [r3, #52]	; 0x34
 8003676:	e04c      	b.n	8003712 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b0c      	cmp	r3, #12
 800367e:	d824      	bhi.n	80036ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	3b23      	subs	r3, #35	; 0x23
 8003692:	221f      	movs	r2, #31
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43da      	mvns	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	400a      	ands	r2, r1
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	4618      	mov	r0, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	3b23      	subs	r3, #35	; 0x23
 80036bc:	fa00 f203 	lsl.w	r2, r0, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
 80036c8:	e023      	b.n	8003712 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	3b41      	subs	r3, #65	; 0x41
 80036dc:	221f      	movs	r2, #31
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43da      	mvns	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	400a      	ands	r2, r1
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	4618      	mov	r0, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	3b41      	subs	r3, #65	; 0x41
 8003706:	fa00 f203 	lsl.w	r2, r0, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003712:	4b22      	ldr	r3, [pc, #136]	; (800379c <HAL_ADC_ConfigChannel+0x234>)
 8003714:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a21      	ldr	r2, [pc, #132]	; (80037a0 <HAL_ADC_ConfigChannel+0x238>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d109      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x1cc>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b12      	cmp	r3, #18
 8003726:	d105      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <HAL_ADC_ConfigChannel+0x238>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d123      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x21e>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b10      	cmp	r3, #16
 8003744:	d003      	beq.n	800374e <HAL_ADC_ConfigChannel+0x1e6>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b11      	cmp	r3, #17
 800374c:	d11b      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b10      	cmp	r3, #16
 8003760:	d111      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <HAL_ADC_ConfigChannel+0x23c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a10      	ldr	r2, [pc, #64]	; (80037a8 <HAL_ADC_ConfigChannel+0x240>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	0c9a      	lsrs	r2, r3, #18
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003778:	e002      	b.n	8003780 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	3b01      	subs	r3, #1
 800377e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f9      	bne.n	800377a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40012300 	.word	0x40012300
 80037a0:	40012000 	.word	0x40012000
 80037a4:	20000200 	.word	0x20000200
 80037a8:	431bde83 	.word	0x431bde83

080037ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037b4:	4b79      	ldr	r3, [pc, #484]	; (800399c <ADC_Init+0x1f0>)
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	021a      	lsls	r2, r3, #8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003804:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003826:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6899      	ldr	r1, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	4a58      	ldr	r2, [pc, #352]	; (80039a0 <ADC_Init+0x1f4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d022      	beq.n	800388a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003852:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6899      	ldr	r1, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003874:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6899      	ldr	r1, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	e00f      	b.n	80038aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0202 	bic.w	r2, r2, #2
 80038b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6899      	ldr	r1, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7e1b      	ldrb	r3, [r3, #24]
 80038c4:	005a      	lsls	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038e6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	3b01      	subs	r3, #1
 8003904:	035a      	lsls	r2, r3, #13
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	e007      	b.n	8003920 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800392e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	3b01      	subs	r3, #1
 800393c:	051a      	lsls	r2, r3, #20
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003954:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6899      	ldr	r1, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003962:	025a      	lsls	r2, r3, #9
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6899      	ldr	r1, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	029a      	lsls	r2, r3, #10
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40012300 	.word	0x40012300
 80039a0:	0f000001 	.word	0x0f000001

080039a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d13c      	bne.n	8003a38 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d12b      	bne.n	8003a30 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d127      	bne.n	8003a30 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d006      	beq.n	80039fc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d119      	bne.n	8003a30 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0220 	bic.w	r2, r2, #32
 8003a0a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d105      	bne.n	8003a30 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f043 0201 	orr.w	r2, r3, #1
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f7ff fd7b 	bl	800352c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a36:	e00e      	b.n	8003a56 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff fd85 	bl	8003554 <HAL_ADC_ErrorCallback>
}
 8003a4a:	e004      	b.n	8003a56 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f7ff fd67 	bl	8003540 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a72:	bf00      	nop
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2240      	movs	r2, #64	; 0x40
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f043 0204 	orr.w	r2, r3, #4
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f7ff fd5a 	bl	8003554 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <__NVIC_SetPriorityGrouping+0x44>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ada:	4a04      	ldr	r2, [pc, #16]	; (8003aec <__NVIC_SetPriorityGrouping+0x44>)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	60d3      	str	r3, [r2, #12]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <__NVIC_GetPriorityGrouping+0x18>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	f003 0307 	and.w	r3, r3, #7
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	db0b      	blt.n	8003b36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	f003 021f 	and.w	r2, r3, #31
 8003b24:	4907      	ldr	r1, [pc, #28]	; (8003b44 <__NVIC_EnableIRQ+0x38>)
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	e000e100 	.word	0xe000e100

08003b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	6039      	str	r1, [r7, #0]
 8003b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	db0a      	blt.n	8003b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	490c      	ldr	r1, [pc, #48]	; (8003b94 <__NVIC_SetPriority+0x4c>)
 8003b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b66:	0112      	lsls	r2, r2, #4
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b70:	e00a      	b.n	8003b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	4908      	ldr	r1, [pc, #32]	; (8003b98 <__NVIC_SetPriority+0x50>)
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	3b04      	subs	r3, #4
 8003b80:	0112      	lsls	r2, r2, #4
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	440b      	add	r3, r1
 8003b86:	761a      	strb	r2, [r3, #24]
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	e000e100 	.word	0xe000e100
 8003b98:	e000ed00 	.word	0xe000ed00

08003b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b089      	sub	sp, #36	; 0x24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f1c3 0307 	rsb	r3, r3, #7
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	bf28      	it	cs
 8003bba:	2304      	movcs	r3, #4
 8003bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	2b06      	cmp	r3, #6
 8003bc4:	d902      	bls.n	8003bcc <NVIC_EncodePriority+0x30>
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	3b03      	subs	r3, #3
 8003bca:	e000      	b.n	8003bce <NVIC_EncodePriority+0x32>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43da      	mvns	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	401a      	ands	r2, r3
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003be4:	f04f 31ff 	mov.w	r1, #4294967295
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	43d9      	mvns	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf4:	4313      	orrs	r3, r2
         );
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3724      	adds	r7, #36	; 0x24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c14:	d301      	bcc.n	8003c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c16:	2301      	movs	r3, #1
 8003c18:	e00f      	b.n	8003c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c1a:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <SysTick_Config+0x40>)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c22:	210f      	movs	r1, #15
 8003c24:	f04f 30ff 	mov.w	r0, #4294967295
 8003c28:	f7ff ff8e 	bl	8003b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <SysTick_Config+0x40>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c32:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <SysTick_Config+0x40>)
 8003c34:	2207      	movs	r2, #7
 8003c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	e000e010 	.word	0xe000e010

08003c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff ff29 	bl	8003aa8 <__NVIC_SetPriorityGrouping>
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b086      	sub	sp, #24
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	4603      	mov	r3, r0
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c70:	f7ff ff3e 	bl	8003af0 <__NVIC_GetPriorityGrouping>
 8003c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	6978      	ldr	r0, [r7, #20]
 8003c7c:	f7ff ff8e 	bl	8003b9c <NVIC_EncodePriority>
 8003c80:	4602      	mov	r2, r0
 8003c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c86:	4611      	mov	r1, r2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff5d 	bl	8003b48 <__NVIC_SetPriority>
}
 8003c8e:	bf00      	nop
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ff31 	bl	8003b0c <__NVIC_EnableIRQ>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff ffa2 	bl	8003c04 <SysTick_Config>
 8003cc0:	4603      	mov	r3, r0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cd8:	f7ff faa4 	bl	8003224 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e099      	b.n	8003e1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d08:	e00f      	b.n	8003d2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d0a:	f7ff fa8b 	bl	8003224 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b05      	cmp	r3, #5
 8003d16:	d908      	bls.n	8003d2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2203      	movs	r2, #3
 8003d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e078      	b.n	8003e1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e8      	bne.n	8003d0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4b38      	ldr	r3, [pc, #224]	; (8003e24 <HAL_DMA_Init+0x158>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d107      	bne.n	8003d94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f023 0307 	bic.w	r3, r3, #7
 8003daa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d117      	bne.n	8003dee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00e      	beq.n	8003dee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fb01 	bl	80043d8 <DMA_CheckFifoParam>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2240      	movs	r2, #64	; 0x40
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dea:	2301      	movs	r3, #1
 8003dec:	e016      	b.n	8003e1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fab8 	bl	800436c <DMA_CalcBaseAndBitshift>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e04:	223f      	movs	r2, #63	; 0x3f
 8003e06:	409a      	lsls	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	f010803f 	.word	0xf010803f

08003e28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_DMA_Start_IT+0x26>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e040      	b.n	8003ed0 <HAL_DMA_Start_IT+0xa8>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d12f      	bne.n	8003ec2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2202      	movs	r2, #2
 8003e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 fa4a 	bl	8004310 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	223f      	movs	r2, #63	; 0x3f
 8003e82:	409a      	lsls	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0216 	orr.w	r2, r2, #22
 8003e96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0208 	orr.w	r2, r2, #8
 8003eae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e005      	b.n	8003ece <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ee6:	f7ff f99d 	bl	8003224 <HAL_GetTick>
 8003eea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d008      	beq.n	8003f0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2280      	movs	r2, #128	; 0x80
 8003efc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e052      	b.n	8003fb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0216 	bic.w	r2, r2, #22
 8003f18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d103      	bne.n	8003f3a <HAL_DMA_Abort+0x62>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0208 	bic.w	r2, r2, #8
 8003f48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f5a:	e013      	b.n	8003f84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f5c:	f7ff f962 	bl	8003224 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	d90c      	bls.n	8003f84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2203      	movs	r2, #3
 8003f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e015      	b.n	8003fb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e4      	bne.n	8003f5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	223f      	movs	r2, #63	; 0x3f
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d004      	beq.n	8003fd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2280      	movs	r2, #128	; 0x80
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e00c      	b.n	8003ff0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2205      	movs	r2, #5
 8003fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004008:	4b8e      	ldr	r3, [pc, #568]	; (8004244 <HAL_DMA_IRQHandler+0x248>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a8e      	ldr	r2, [pc, #568]	; (8004248 <HAL_DMA_IRQHandler+0x24c>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	0a9b      	lsrs	r3, r3, #10
 8004014:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004026:	2208      	movs	r2, #8
 8004028:	409a      	lsls	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4013      	ands	r3, r2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01a      	beq.n	8004068 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d013      	beq.n	8004068 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0204 	bic.w	r2, r2, #4
 800404e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004054:	2208      	movs	r2, #8
 8004056:	409a      	lsls	r2, r3
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004060:	f043 0201 	orr.w	r2, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	2201      	movs	r2, #1
 800406e:	409a      	lsls	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d012      	beq.n	800409e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408a:	2201      	movs	r2, #1
 800408c:	409a      	lsls	r2, r3
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	f043 0202 	orr.w	r2, r3, #2
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a2:	2204      	movs	r2, #4
 80040a4:	409a      	lsls	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d012      	beq.n	80040d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00b      	beq.n	80040d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c0:	2204      	movs	r2, #4
 80040c2:	409a      	lsls	r2, r3
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	f043 0204 	orr.w	r2, r3, #4
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	2210      	movs	r2, #16
 80040da:	409a      	lsls	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d043      	beq.n	800416c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d03c      	beq.n	800416c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f6:	2210      	movs	r2, #16
 80040f8:	409a      	lsls	r2, r3
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d018      	beq.n	800413e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d108      	bne.n	800412c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	d024      	beq.n	800416c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
 800412a:	e01f      	b.n	800416c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01b      	beq.n	800416c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	4798      	blx	r3
 800413c:	e016      	b.n	800416c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d107      	bne.n	800415c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0208 	bic.w	r2, r2, #8
 800415a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	2220      	movs	r2, #32
 8004172:	409a      	lsls	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4013      	ands	r3, r2
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 808f 	beq.w	800429c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8087 	beq.w	800429c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004192:	2220      	movs	r2, #32
 8004194:	409a      	lsls	r2, r3
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b05      	cmp	r3, #5
 80041a4:	d136      	bne.n	8004214 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0216 	bic.w	r2, r2, #22
 80041b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695a      	ldr	r2, [r3, #20]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <HAL_DMA_IRQHandler+0x1da>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0208 	bic.w	r2, r2, #8
 80041e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ea:	223f      	movs	r2, #63	; 0x3f
 80041ec:	409a      	lsls	r2, r3
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004206:	2b00      	cmp	r3, #0
 8004208:	d07e      	beq.n	8004308 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
        }
        return;
 8004212:	e079      	b.n	8004308 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d01d      	beq.n	800425e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10d      	bne.n	800424c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	2b00      	cmp	r3, #0
 8004236:	d031      	beq.n	800429c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4798      	blx	r3
 8004240:	e02c      	b.n	800429c <HAL_DMA_IRQHandler+0x2a0>
 8004242:	bf00      	nop
 8004244:	20000200 	.word	0x20000200
 8004248:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d023      	beq.n	800429c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	4798      	blx	r3
 800425c:	e01e      	b.n	800429c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10f      	bne.n	800428c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0210 	bic.w	r2, r2, #16
 800427a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d032      	beq.n	800430a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d022      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2205      	movs	r2, #5
 80042b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d307      	bcc.n	80042e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f2      	bne.n	80042c8 <HAL_DMA_IRQHandler+0x2cc>
 80042e2:	e000      	b.n	80042e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
 8004306:	e000      	b.n	800430a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004308:	bf00      	nop
    }
  }
}
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800432c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b40      	cmp	r3, #64	; 0x40
 800433c:	d108      	bne.n	8004350 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800434e:	e007      	b.n	8004360 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	60da      	str	r2, [r3, #12]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	3b10      	subs	r3, #16
 800437c:	4a14      	ldr	r2, [pc, #80]	; (80043d0 <DMA_CalcBaseAndBitshift+0x64>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	091b      	lsrs	r3, r3, #4
 8004384:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004386:	4a13      	ldr	r2, [pc, #76]	; (80043d4 <DMA_CalcBaseAndBitshift+0x68>)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b03      	cmp	r3, #3
 8004398:	d909      	bls.n	80043ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	1d1a      	adds	r2, r3, #4
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	659a      	str	r2, [r3, #88]	; 0x58
 80043ac:	e007      	b.n	80043be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043b6:	f023 0303 	bic.w	r3, r3, #3
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	aaaaaaab 	.word	0xaaaaaaab
 80043d4:	0800b0b4 	.word	0x0800b0b4

080043d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d11f      	bne.n	8004432 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d856      	bhi.n	80044a6 <DMA_CheckFifoParam+0xce>
 80043f8:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <DMA_CheckFifoParam+0x28>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	08004411 	.word	0x08004411
 8004404:	08004423 	.word	0x08004423
 8004408:	08004411 	.word	0x08004411
 800440c:	080044a7 	.word	0x080044a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d046      	beq.n	80044aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004420:	e043      	b.n	80044aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800442a:	d140      	bne.n	80044ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004430:	e03d      	b.n	80044ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443a:	d121      	bne.n	8004480 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b03      	cmp	r3, #3
 8004440:	d837      	bhi.n	80044b2 <DMA_CheckFifoParam+0xda>
 8004442:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <DMA_CheckFifoParam+0x70>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	08004459 	.word	0x08004459
 800444c:	0800445f 	.word	0x0800445f
 8004450:	08004459 	.word	0x08004459
 8004454:	08004471 	.word	0x08004471
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
      break;
 800445c:	e030      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d025      	beq.n	80044b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800446e:	e022      	b.n	80044b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004478:	d11f      	bne.n	80044ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800447e:	e01c      	b.n	80044ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d903      	bls.n	800448e <DMA_CheckFifoParam+0xb6>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d003      	beq.n	8004494 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800448c:	e018      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
      break;
 8004492:	e015      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00e      	beq.n	80044be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
      break;
 80044a4:	e00b      	b.n	80044be <DMA_CheckFifoParam+0xe6>
      break;
 80044a6:	bf00      	nop
 80044a8:	e00a      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      break;
 80044aa:	bf00      	nop
 80044ac:	e008      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      break;
 80044ae:	bf00      	nop
 80044b0:	e006      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      break;
 80044b2:	bf00      	nop
 80044b4:	e004      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      break;
 80044b6:	bf00      	nop
 80044b8:	e002      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80044ba:	bf00      	nop
 80044bc:	e000      	b.n	80044c0 <DMA_CheckFifoParam+0xe8>
      break;
 80044be:	bf00      	nop
    }
  } 
  
  return status; 
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop

080044d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b089      	sub	sp, #36	; 0x24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044e6:	2300      	movs	r3, #0
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	e16b      	b.n	80047c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044ec:	2201      	movs	r2, #1
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4013      	ands	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	429a      	cmp	r2, r3
 8004506:	f040 815a 	bne.w	80047be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b01      	cmp	r3, #1
 8004514:	d005      	beq.n	8004522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800451e:	2b02      	cmp	r3, #2
 8004520:	d130      	bne.n	8004584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	2203      	movs	r2, #3
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004558:	2201      	movs	r2, #1
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 0201 	and.w	r2, r3, #1
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b03      	cmp	r3, #3
 800458e:	d017      	beq.n	80045c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	2203      	movs	r2, #3
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d123      	bne.n	8004614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	08da      	lsrs	r2, r3, #3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3208      	adds	r2, #8
 80045d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	220f      	movs	r2, #15
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	08da      	lsrs	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3208      	adds	r2, #8
 800460e:	69b9      	ldr	r1, [r7, #24]
 8004610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	2203      	movs	r2, #3
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4013      	ands	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 0203 	and.w	r2, r3, #3
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80b4 	beq.w	80047be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	4b60      	ldr	r3, [pc, #384]	; (80047dc <HAL_GPIO_Init+0x30c>)
 800465c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465e:	4a5f      	ldr	r2, [pc, #380]	; (80047dc <HAL_GPIO_Init+0x30c>)
 8004660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004664:	6453      	str	r3, [r2, #68]	; 0x44
 8004666:	4b5d      	ldr	r3, [pc, #372]	; (80047dc <HAL_GPIO_Init+0x30c>)
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004672:	4a5b      	ldr	r2, [pc, #364]	; (80047e0 <HAL_GPIO_Init+0x310>)
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	089b      	lsrs	r3, r3, #2
 8004678:	3302      	adds	r3, #2
 800467a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800467e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	220f      	movs	r2, #15
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43db      	mvns	r3, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4013      	ands	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a52      	ldr	r2, [pc, #328]	; (80047e4 <HAL_GPIO_Init+0x314>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d02b      	beq.n	80046f6 <HAL_GPIO_Init+0x226>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a51      	ldr	r2, [pc, #324]	; (80047e8 <HAL_GPIO_Init+0x318>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d025      	beq.n	80046f2 <HAL_GPIO_Init+0x222>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a50      	ldr	r2, [pc, #320]	; (80047ec <HAL_GPIO_Init+0x31c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d01f      	beq.n	80046ee <HAL_GPIO_Init+0x21e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a4f      	ldr	r2, [pc, #316]	; (80047f0 <HAL_GPIO_Init+0x320>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d019      	beq.n	80046ea <HAL_GPIO_Init+0x21a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a4e      	ldr	r2, [pc, #312]	; (80047f4 <HAL_GPIO_Init+0x324>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <HAL_GPIO_Init+0x216>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a4d      	ldr	r2, [pc, #308]	; (80047f8 <HAL_GPIO_Init+0x328>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00d      	beq.n	80046e2 <HAL_GPIO_Init+0x212>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a4c      	ldr	r2, [pc, #304]	; (80047fc <HAL_GPIO_Init+0x32c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <HAL_GPIO_Init+0x20e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a4b      	ldr	r2, [pc, #300]	; (8004800 <HAL_GPIO_Init+0x330>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d101      	bne.n	80046da <HAL_GPIO_Init+0x20a>
 80046d6:	2307      	movs	r3, #7
 80046d8:	e00e      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046da:	2308      	movs	r3, #8
 80046dc:	e00c      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046de:	2306      	movs	r3, #6
 80046e0:	e00a      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046e2:	2305      	movs	r3, #5
 80046e4:	e008      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046e6:	2304      	movs	r3, #4
 80046e8:	e006      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046ea:	2303      	movs	r3, #3
 80046ec:	e004      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e002      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <HAL_GPIO_Init+0x228>
 80046f6:	2300      	movs	r3, #0
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	f002 0203 	and.w	r2, r2, #3
 80046fe:	0092      	lsls	r2, r2, #2
 8004700:	4093      	lsls	r3, r2
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004708:	4935      	ldr	r1, [pc, #212]	; (80047e0 <HAL_GPIO_Init+0x310>)
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	089b      	lsrs	r3, r3, #2
 800470e:	3302      	adds	r3, #2
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004716:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <HAL_GPIO_Init+0x334>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	43db      	mvns	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4013      	ands	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800473a:	4a32      	ldr	r2, [pc, #200]	; (8004804 <HAL_GPIO_Init+0x334>)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004740:	4b30      	ldr	r3, [pc, #192]	; (8004804 <HAL_GPIO_Init+0x334>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	43db      	mvns	r3, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004764:	4a27      	ldr	r2, [pc, #156]	; (8004804 <HAL_GPIO_Init+0x334>)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800476a:	4b26      	ldr	r3, [pc, #152]	; (8004804 <HAL_GPIO_Init+0x334>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	43db      	mvns	r3, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4013      	ands	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800478e:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <HAL_GPIO_Init+0x334>)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004794:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <HAL_GPIO_Init+0x334>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047b8:	4a12      	ldr	r2, [pc, #72]	; (8004804 <HAL_GPIO_Init+0x334>)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	3301      	adds	r3, #1
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	2b0f      	cmp	r3, #15
 80047c8:	f67f ae90 	bls.w	80044ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	3724      	adds	r7, #36	; 0x24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40023800 	.word	0x40023800
 80047e0:	40013800 	.word	0x40013800
 80047e4:	40020000 	.word	0x40020000
 80047e8:	40020400 	.word	0x40020400
 80047ec:	40020800 	.word	0x40020800
 80047f0:	40020c00 	.word	0x40020c00
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40021400 	.word	0x40021400
 80047fc:	40021800 	.word	0x40021800
 8004800:	40021c00 	.word	0x40021c00
 8004804:	40013c00 	.word	0x40013c00

08004808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	807b      	strh	r3, [r7, #2]
 8004814:	4613      	mov	r3, r2
 8004816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004818:	787b      	ldrb	r3, [r7, #1]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800481e:	887a      	ldrh	r2, [r7, #2]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004824:	e003      	b.n	800482e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004826:	887b      	ldrh	r3, [r7, #2]
 8004828:	041a      	lsls	r2, r3, #16
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	619a      	str	r2, [r3, #24]
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	460b      	mov	r3, r1
 8004844:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800484c:	887a      	ldrh	r2, [r7, #2]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4013      	ands	r3, r2
 8004852:	041a      	lsls	r2, r3, #16
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	43d9      	mvns	r1, r3
 8004858:	887b      	ldrh	r3, [r7, #2]
 800485a:	400b      	ands	r3, r1
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	619a      	str	r2, [r3, #24]
}
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e12b      	b.n	8004ada <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc fff2 	bl	8001880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2224      	movs	r2, #36	; 0x24
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048d4:	f000 fd80 	bl	80053d8 <HAL_RCC_GetPCLK1Freq>
 80048d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4a81      	ldr	r2, [pc, #516]	; (8004ae4 <HAL_I2C_Init+0x274>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d807      	bhi.n	80048f4 <HAL_I2C_Init+0x84>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4a80      	ldr	r2, [pc, #512]	; (8004ae8 <HAL_I2C_Init+0x278>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	bf94      	ite	ls
 80048ec:	2301      	movls	r3, #1
 80048ee:	2300      	movhi	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	e006      	b.n	8004902 <HAL_I2C_Init+0x92>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4a7d      	ldr	r2, [pc, #500]	; (8004aec <HAL_I2C_Init+0x27c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	bf94      	ite	ls
 80048fc:	2301      	movls	r3, #1
 80048fe:	2300      	movhi	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e0e7      	b.n	8004ada <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4a78      	ldr	r2, [pc, #480]	; (8004af0 <HAL_I2C_Init+0x280>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	0c9b      	lsrs	r3, r3, #18
 8004914:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4a6a      	ldr	r2, [pc, #424]	; (8004ae4 <HAL_I2C_Init+0x274>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d802      	bhi.n	8004944 <HAL_I2C_Init+0xd4>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	3301      	adds	r3, #1
 8004942:	e009      	b.n	8004958 <HAL_I2C_Init+0xe8>
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	4a69      	ldr	r2, [pc, #420]	; (8004af4 <HAL_I2C_Init+0x284>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	099b      	lsrs	r3, r3, #6
 8004956:	3301      	adds	r3, #1
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6812      	ldr	r2, [r2, #0]
 800495c:	430b      	orrs	r3, r1
 800495e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800496a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	495c      	ldr	r1, [pc, #368]	; (8004ae4 <HAL_I2C_Init+0x274>)
 8004974:	428b      	cmp	r3, r1
 8004976:	d819      	bhi.n	80049ac <HAL_I2C_Init+0x13c>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1e59      	subs	r1, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	fbb1 f3f3 	udiv	r3, r1, r3
 8004986:	1c59      	adds	r1, r3, #1
 8004988:	f640 73fc 	movw	r3, #4092	; 0xffc
 800498c:	400b      	ands	r3, r1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_I2C_Init+0x138>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1e59      	subs	r1, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	fbb1 f3f3 	udiv	r3, r1, r3
 80049a0:	3301      	adds	r3, #1
 80049a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a6:	e051      	b.n	8004a4c <HAL_I2C_Init+0x1dc>
 80049a8:	2304      	movs	r3, #4
 80049aa:	e04f      	b.n	8004a4c <HAL_I2C_Init+0x1dc>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d111      	bne.n	80049d8 <HAL_I2C_Init+0x168>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1e58      	subs	r0, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6859      	ldr	r1, [r3, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	440b      	add	r3, r1
 80049c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c6:	3301      	adds	r3, #1
 80049c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf0c      	ite	eq
 80049d0:	2301      	moveq	r3, #1
 80049d2:	2300      	movne	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e012      	b.n	80049fe <HAL_I2C_Init+0x18e>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1e58      	subs	r0, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6859      	ldr	r1, [r3, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	0099      	lsls	r1, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ee:	3301      	adds	r3, #1
 80049f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bf0c      	ite	eq
 80049f8:	2301      	moveq	r3, #1
 80049fa:	2300      	movne	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_I2C_Init+0x196>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e022      	b.n	8004a4c <HAL_I2C_Init+0x1dc>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10e      	bne.n	8004a2c <HAL_I2C_Init+0x1bc>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1e58      	subs	r0, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6859      	ldr	r1, [r3, #4]
 8004a16:	460b      	mov	r3, r1
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	440b      	add	r3, r1
 8004a1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a20:	3301      	adds	r3, #1
 8004a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2a:	e00f      	b.n	8004a4c <HAL_I2C_Init+0x1dc>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	1e58      	subs	r0, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6859      	ldr	r1, [r3, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	0099      	lsls	r1, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a42:	3301      	adds	r3, #1
 8004a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	6809      	ldr	r1, [r1, #0]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69da      	ldr	r2, [r3, #28]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6911      	ldr	r1, [r2, #16]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68d2      	ldr	r2, [r2, #12]
 8004a86:	4311      	orrs	r1, r2
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	000186a0 	.word	0x000186a0
 8004ae8:	001e847f 	.word	0x001e847f
 8004aec:	003d08ff 	.word	0x003d08ff
 8004af0:	431bde83 	.word	0x431bde83
 8004af4:	10624dd3 	.word	0x10624dd3

08004af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e267      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d075      	beq.n	8004c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b16:	4b88      	ldr	r3, [pc, #544]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d00c      	beq.n	8004b3c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b22:	4b85      	ldr	r3, [pc, #532]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d112      	bne.n	8004b54 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b2e:	4b82      	ldr	r3, [pc, #520]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b3a:	d10b      	bne.n	8004b54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b3c:	4b7e      	ldr	r3, [pc, #504]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d05b      	beq.n	8004c00 <HAL_RCC_OscConfig+0x108>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d157      	bne.n	8004c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e242      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5c:	d106      	bne.n	8004b6c <HAL_RCC_OscConfig+0x74>
 8004b5e:	4b76      	ldr	r3, [pc, #472]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a75      	ldr	r2, [pc, #468]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e01d      	b.n	8004ba8 <HAL_RCC_OscConfig+0xb0>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCC_OscConfig+0x98>
 8004b76:	4b70      	ldr	r3, [pc, #448]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a6f      	ldr	r2, [pc, #444]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	4b6d      	ldr	r3, [pc, #436]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a6c      	ldr	r2, [pc, #432]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e00b      	b.n	8004ba8 <HAL_RCC_OscConfig+0xb0>
 8004b90:	4b69      	ldr	r3, [pc, #420]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a68      	ldr	r2, [pc, #416]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	4b66      	ldr	r3, [pc, #408]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a65      	ldr	r2, [pc, #404]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d013      	beq.n	8004bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb0:	f7fe fb38 	bl	8003224 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb8:	f7fe fb34 	bl	8003224 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	; 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e207      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bca:	4b5b      	ldr	r3, [pc, #364]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0xc0>
 8004bd6:	e014      	b.n	8004c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7fe fb24 	bl	8003224 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be0:	f7fe fb20 	bl	8003224 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b64      	cmp	r3, #100	; 0x64
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e1f3      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bf2:	4b51      	ldr	r3, [pc, #324]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0xe8>
 8004bfe:	e000      	b.n	8004c02 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d063      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c0e:	4b4a      	ldr	r3, [pc, #296]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00b      	beq.n	8004c32 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c1a:	4b47      	ldr	r3, [pc, #284]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d11c      	bne.n	8004c60 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c26:	4b44      	ldr	r3, [pc, #272]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d116      	bne.n	8004c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c32:	4b41      	ldr	r3, [pc, #260]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <HAL_RCC_OscConfig+0x152>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d001      	beq.n	8004c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e1c7      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4a:	4b3b      	ldr	r3, [pc, #236]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	4937      	ldr	r1, [pc, #220]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c5e:	e03a      	b.n	8004cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d020      	beq.n	8004caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c68:	4b34      	ldr	r3, [pc, #208]	; (8004d3c <HAL_RCC_OscConfig+0x244>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6e:	f7fe fad9 	bl	8003224 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c76:	f7fe fad5 	bl	8003224 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e1a8      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c88:	4b2b      	ldr	r3, [pc, #172]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0f0      	beq.n	8004c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c94:	4b28      	ldr	r3, [pc, #160]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4925      	ldr	r1, [pc, #148]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	600b      	str	r3, [r1, #0]
 8004ca8:	e015      	b.n	8004cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004caa:	4b24      	ldr	r3, [pc, #144]	; (8004d3c <HAL_RCC_OscConfig+0x244>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fe fab8 	bl	8003224 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb8:	f7fe fab4 	bl	8003224 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e187      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cca:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f0      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d036      	beq.n	8004d50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d016      	beq.n	8004d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cea:	4b15      	ldr	r3, [pc, #84]	; (8004d40 <HAL_RCC_OscConfig+0x248>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf0:	f7fe fa98 	bl	8003224 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf8:	f7fe fa94 	bl	8003224 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e167      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x200>
 8004d16:	e01b      	b.n	8004d50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d18:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <HAL_RCC_OscConfig+0x248>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d1e:	f7fe fa81 	bl	8003224 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d24:	e00e      	b.n	8004d44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d26:	f7fe fa7d 	bl	8003224 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d907      	bls.n	8004d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e150      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	42470000 	.word	0x42470000
 8004d40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d44:	4b88      	ldr	r3, [pc, #544]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1ea      	bne.n	8004d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 8097 	beq.w	8004e8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d62:	4b81      	ldr	r3, [pc, #516]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10f      	bne.n	8004d8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	4b7d      	ldr	r3, [pc, #500]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	4a7c      	ldr	r2, [pc, #496]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d7e:	4b7a      	ldr	r3, [pc, #488]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8e:	4b77      	ldr	r3, [pc, #476]	; (8004f6c <HAL_RCC_OscConfig+0x474>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d118      	bne.n	8004dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d9a:	4b74      	ldr	r3, [pc, #464]	; (8004f6c <HAL_RCC_OscConfig+0x474>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a73      	ldr	r2, [pc, #460]	; (8004f6c <HAL_RCC_OscConfig+0x474>)
 8004da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004da6:	f7fe fa3d 	bl	8003224 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dae:	f7fe fa39 	bl	8003224 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e10c      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc0:	4b6a      	ldr	r3, [pc, #424]	; (8004f6c <HAL_RCC_OscConfig+0x474>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d106      	bne.n	8004de2 <HAL_RCC_OscConfig+0x2ea>
 8004dd4:	4b64      	ldr	r3, [pc, #400]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd8:	4a63      	ldr	r2, [pc, #396]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004dda:	f043 0301 	orr.w	r3, r3, #1
 8004dde:	6713      	str	r3, [r2, #112]	; 0x70
 8004de0:	e01c      	b.n	8004e1c <HAL_RCC_OscConfig+0x324>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b05      	cmp	r3, #5
 8004de8:	d10c      	bne.n	8004e04 <HAL_RCC_OscConfig+0x30c>
 8004dea:	4b5f      	ldr	r3, [pc, #380]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dee:	4a5e      	ldr	r2, [pc, #376]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004df0:	f043 0304 	orr.w	r3, r3, #4
 8004df4:	6713      	str	r3, [r2, #112]	; 0x70
 8004df6:	4b5c      	ldr	r3, [pc, #368]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfa:	4a5b      	ldr	r2, [pc, #364]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	6713      	str	r3, [r2, #112]	; 0x70
 8004e02:	e00b      	b.n	8004e1c <HAL_RCC_OscConfig+0x324>
 8004e04:	4b58      	ldr	r3, [pc, #352]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	4a57      	ldr	r2, [pc, #348]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e10:	4b55      	ldr	r3, [pc, #340]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	4a54      	ldr	r2, [pc, #336]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e16:	f023 0304 	bic.w	r3, r3, #4
 8004e1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d015      	beq.n	8004e50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e24:	f7fe f9fe 	bl	8003224 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2c:	f7fe f9fa 	bl	8003224 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e0cb      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e42:	4b49      	ldr	r3, [pc, #292]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0ee      	beq.n	8004e2c <HAL_RCC_OscConfig+0x334>
 8004e4e:	e014      	b.n	8004e7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e50:	f7fe f9e8 	bl	8003224 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e56:	e00a      	b.n	8004e6e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e58:	f7fe f9e4 	bl	8003224 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e0b5      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e6e:	4b3e      	ldr	r3, [pc, #248]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1ee      	bne.n	8004e58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e7a:	7dfb      	ldrb	r3, [r7, #23]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d105      	bne.n	8004e8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e80:	4b39      	ldr	r3, [pc, #228]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	4a38      	ldr	r2, [pc, #224]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80a1 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e96:	4b34      	ldr	r3, [pc, #208]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 030c 	and.w	r3, r3, #12
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d05c      	beq.n	8004f5c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d141      	bne.n	8004f2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eaa:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <HAL_RCC_OscConfig+0x478>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb0:	f7fe f9b8 	bl	8003224 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fe f9b4 	bl	8003224 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e087      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eca:	4b27      	ldr	r3, [pc, #156]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69da      	ldr	r2, [r3, #28]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	019b      	lsls	r3, r3, #6
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	061b      	lsls	r3, r3, #24
 8004efa:	491b      	ldr	r1, [pc, #108]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f00:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <HAL_RCC_OscConfig+0x478>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f06:	f7fe f98d 	bl	8003224 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fe f989 	bl	8003224 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e05c      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f20:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x416>
 8004f2c:	e054      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <HAL_RCC_OscConfig+0x478>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fe f976 	bl	8003224 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3c:	f7fe f972 	bl	8003224 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e045      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4e:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <HAL_RCC_OscConfig+0x470>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0x444>
 8004f5a:	e03d      	b.n	8004fd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d107      	bne.n	8004f74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e038      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	40007000 	.word	0x40007000
 8004f70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f74:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <HAL_RCC_OscConfig+0x4ec>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d028      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d121      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d11a      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004faa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d111      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800

08004fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0cc      	b.n	8005196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ffc:	4b68      	ldr	r3, [pc, #416]	; (80051a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d90c      	bls.n	8005024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500a:	4b65      	ldr	r3, [pc, #404]	; (80051a0 <HAL_RCC_ClockConfig+0x1b8>)
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005012:	4b63      	ldr	r3, [pc, #396]	; (80051a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d001      	beq.n	8005024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e0b8      	b.n	8005196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d020      	beq.n	8005072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800503c:	4b59      	ldr	r3, [pc, #356]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4a58      	ldr	r2, [pc, #352]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005046:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005054:	4b53      	ldr	r3, [pc, #332]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	4a52      	ldr	r2, [pc, #328]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800505e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005060:	4b50      	ldr	r3, [pc, #320]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	494d      	ldr	r1, [pc, #308]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	4313      	orrs	r3, r2
 8005070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d044      	beq.n	8005108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d107      	bne.n	8005096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005086:	4b47      	ldr	r3, [pc, #284]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d119      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e07f      	b.n	8005196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d003      	beq.n	80050a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a6:	4b3f      	ldr	r3, [pc, #252]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e06f      	b.n	8005196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b6:	4b3b      	ldr	r3, [pc, #236]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e067      	b.n	8005196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050c6:	4b37      	ldr	r3, [pc, #220]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f023 0203 	bic.w	r2, r3, #3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	4934      	ldr	r1, [pc, #208]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050d8:	f7fe f8a4 	bl	8003224 <HAL_GetTick>
 80050dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e0:	f7fe f8a0 	bl	8003224 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e04f      	b.n	8005196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f6:	4b2b      	ldr	r3, [pc, #172]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 020c 	and.w	r2, r3, #12
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	429a      	cmp	r2, r3
 8005106:	d1eb      	bne.n	80050e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005108:	4b25      	ldr	r3, [pc, #148]	; (80051a0 <HAL_RCC_ClockConfig+0x1b8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d20c      	bcs.n	8005130 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b22      	ldr	r3, [pc, #136]	; (80051a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d001      	beq.n	8005130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e032      	b.n	8005196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800513c:	4b19      	ldr	r3, [pc, #100]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	4916      	ldr	r1, [pc, #88]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	4313      	orrs	r3, r2
 800514c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800515a:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	490e      	ldr	r1, [pc, #56]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800516e:	f000 f821 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 8005172:	4602      	mov	r2, r0
 8005174:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	091b      	lsrs	r3, r3, #4
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	490a      	ldr	r1, [pc, #40]	; (80051a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005180:	5ccb      	ldrb	r3, [r1, r3]
 8005182:	fa22 f303 	lsr.w	r3, r2, r3
 8005186:	4a09      	ldr	r2, [pc, #36]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f7fe f804 	bl	800319c <HAL_InitTick>

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40023c00 	.word	0x40023c00
 80051a4:	40023800 	.word	0x40023800
 80051a8:	0800b09c 	.word	0x0800b09c
 80051ac:	20000200 	.word	0x20000200
 80051b0:	20000204 	.word	0x20000204

080051b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051b8:	b094      	sub	sp, #80	; 0x50
 80051ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051cc:	4b79      	ldr	r3, [pc, #484]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 030c 	and.w	r3, r3, #12
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d00d      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0x40>
 80051d8:	2b08      	cmp	r3, #8
 80051da:	f200 80e1 	bhi.w	80053a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <HAL_RCC_GetSysClockFreq+0x34>
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d003      	beq.n	80051ee <HAL_RCC_GetSysClockFreq+0x3a>
 80051e6:	e0db      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051e8:	4b73      	ldr	r3, [pc, #460]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80051ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051ec:	e0db      	b.n	80053a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ee:	4b73      	ldr	r3, [pc, #460]	; (80053bc <HAL_RCC_GetSysClockFreq+0x208>)
 80051f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051f2:	e0d8      	b.n	80053a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051f4:	4b6f      	ldr	r3, [pc, #444]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051fc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051fe:	4b6d      	ldr	r3, [pc, #436]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d063      	beq.n	80052d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800520a:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	099b      	lsrs	r3, r3, #6
 8005210:	2200      	movs	r2, #0
 8005212:	63bb      	str	r3, [r7, #56]	; 0x38
 8005214:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521c:	633b      	str	r3, [r7, #48]	; 0x30
 800521e:	2300      	movs	r3, #0
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
 8005222:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005226:	4622      	mov	r2, r4
 8005228:	462b      	mov	r3, r5
 800522a:	f04f 0000 	mov.w	r0, #0
 800522e:	f04f 0100 	mov.w	r1, #0
 8005232:	0159      	lsls	r1, r3, #5
 8005234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005238:	0150      	lsls	r0, r2, #5
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4621      	mov	r1, r4
 8005240:	1a51      	subs	r1, r2, r1
 8005242:	6139      	str	r1, [r7, #16]
 8005244:	4629      	mov	r1, r5
 8005246:	eb63 0301 	sbc.w	r3, r3, r1
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005258:	4659      	mov	r1, fp
 800525a:	018b      	lsls	r3, r1, #6
 800525c:	4651      	mov	r1, sl
 800525e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005262:	4651      	mov	r1, sl
 8005264:	018a      	lsls	r2, r1, #6
 8005266:	4651      	mov	r1, sl
 8005268:	ebb2 0801 	subs.w	r8, r2, r1
 800526c:	4659      	mov	r1, fp
 800526e:	eb63 0901 	sbc.w	r9, r3, r1
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800527e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005286:	4690      	mov	r8, r2
 8005288:	4699      	mov	r9, r3
 800528a:	4623      	mov	r3, r4
 800528c:	eb18 0303 	adds.w	r3, r8, r3
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	462b      	mov	r3, r5
 8005294:	eb49 0303 	adc.w	r3, r9, r3
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052a6:	4629      	mov	r1, r5
 80052a8:	024b      	lsls	r3, r1, #9
 80052aa:	4621      	mov	r1, r4
 80052ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052b0:	4621      	mov	r1, r4
 80052b2:	024a      	lsls	r2, r1, #9
 80052b4:	4610      	mov	r0, r2
 80052b6:	4619      	mov	r1, r3
 80052b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ba:	2200      	movs	r2, #0
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052c4:	f7fb fbf2 	bl	8000aac <__aeabi_uldivmod>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4613      	mov	r3, r2
 80052ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d0:	e058      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d2:	4b38      	ldr	r3, [pc, #224]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	099b      	lsrs	r3, r3, #6
 80052d8:	2200      	movs	r2, #0
 80052da:	4618      	mov	r0, r3
 80052dc:	4611      	mov	r1, r2
 80052de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052e2:	623b      	str	r3, [r7, #32]
 80052e4:	2300      	movs	r3, #0
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
 80052e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052ec:	4642      	mov	r2, r8
 80052ee:	464b      	mov	r3, r9
 80052f0:	f04f 0000 	mov.w	r0, #0
 80052f4:	f04f 0100 	mov.w	r1, #0
 80052f8:	0159      	lsls	r1, r3, #5
 80052fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052fe:	0150      	lsls	r0, r2, #5
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4641      	mov	r1, r8
 8005306:	ebb2 0a01 	subs.w	sl, r2, r1
 800530a:	4649      	mov	r1, r9
 800530c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800531c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005320:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005324:	ebb2 040a 	subs.w	r4, r2, sl
 8005328:	eb63 050b 	sbc.w	r5, r3, fp
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	00eb      	lsls	r3, r5, #3
 8005336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800533a:	00e2      	lsls	r2, r4, #3
 800533c:	4614      	mov	r4, r2
 800533e:	461d      	mov	r5, r3
 8005340:	4643      	mov	r3, r8
 8005342:	18e3      	adds	r3, r4, r3
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	464b      	mov	r3, r9
 8005348:	eb45 0303 	adc.w	r3, r5, r3
 800534c:	607b      	str	r3, [r7, #4]
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800535a:	4629      	mov	r1, r5
 800535c:	028b      	lsls	r3, r1, #10
 800535e:	4621      	mov	r1, r4
 8005360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005364:	4621      	mov	r1, r4
 8005366:	028a      	lsls	r2, r1, #10
 8005368:	4610      	mov	r0, r2
 800536a:	4619      	mov	r1, r3
 800536c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800536e:	2200      	movs	r2, #0
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	61fa      	str	r2, [r7, #28]
 8005374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005378:	f7fb fb98 	bl	8000aac <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4613      	mov	r3, r2
 8005382:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	0c1b      	lsrs	r3, r3, #16
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	3301      	adds	r3, #1
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005398:	fbb2 f3f3 	udiv	r3, r2, r3
 800539c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800539e:	e002      	b.n	80053a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80053a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3750      	adds	r7, #80	; 0x50
 80053ac:	46bd      	mov	sp, r7
 80053ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800
 80053b8:	00f42400 	.word	0x00f42400
 80053bc:	007a1200 	.word	0x007a1200

080053c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053c6:	681b      	ldr	r3, [r3, #0]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	20000200 	.word	0x20000200

080053d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053dc:	f7ff fff0 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 80053e0:	4602      	mov	r2, r0
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	0a9b      	lsrs	r3, r3, #10
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	4903      	ldr	r1, [pc, #12]	; (80053fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ee:	5ccb      	ldrb	r3, [r1, r3]
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40023800 	.word	0x40023800
 80053fc:	0800b0ac 	.word	0x0800b0ac

08005400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005404:	f7ff ffdc 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 8005408:	4602      	mov	r2, r0
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	0b5b      	lsrs	r3, r3, #13
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	4903      	ldr	r1, [pc, #12]	; (8005424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005416:	5ccb      	ldrb	r3, [r1, r3]
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800541c:	4618      	mov	r0, r3
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40023800 	.word	0x40023800
 8005424:	0800b0ac 	.word	0x0800b0ac

08005428 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e07b      	b.n	8005532 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	2b00      	cmp	r3, #0
 8005440:	d108      	bne.n	8005454 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800544a:	d009      	beq.n	8005460 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	61da      	str	r2, [r3, #28]
 8005452:	e005      	b.n	8005460 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fd fae0 	bl	8002a40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005496:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	ea42 0103 	orr.w	r1, r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	0c1b      	lsrs	r3, r3, #16
 80054fe:	f003 0104 	and.w	r1, r3, #4
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	f003 0210 	and.w	r2, r3, #16
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005520:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e038      	b.n	80055c2 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f7fc f84d 	bl	8001604 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3308      	adds	r3, #8
 8005572:	4619      	mov	r1, r3
 8005574:	4610      	mov	r0, r2
 8005576:	f002 f827 	bl	80075c8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	461a      	mov	r2, r3
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	f002 f889 	bl	800769c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6858      	ldr	r0, [r3, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	f002 f8b6 	bl	8007708 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	6892      	ldr	r2, [r2, #8]
 80055a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	6892      	ldr	r2, [r2, #8]
 80055b0:	f041 0101 	orr.w	r1, r1, #1
 80055b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e041      	b.n	8005660 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7fd fc17 	bl	8002e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2202      	movs	r2, #2
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3304      	adds	r3, #4
 8005606:	4619      	mov	r1, r3
 8005608:	4610      	mov	r0, r2
 800560a:	f000 fc61 	bl	8005ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d001      	beq.n	8005680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e04e      	b.n	800571e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a23      	ldr	r2, [pc, #140]	; (800572c <HAL_TIM_Base_Start_IT+0xc4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d022      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x80>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056aa:	d01d      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x80>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1f      	ldr	r2, [pc, #124]	; (8005730 <HAL_TIM_Base_Start_IT+0xc8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d018      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x80>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1e      	ldr	r2, [pc, #120]	; (8005734 <HAL_TIM_Base_Start_IT+0xcc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d013      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x80>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1c      	ldr	r2, [pc, #112]	; (8005738 <HAL_TIM_Base_Start_IT+0xd0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00e      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x80>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a1b      	ldr	r2, [pc, #108]	; (800573c <HAL_TIM_Base_Start_IT+0xd4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d009      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x80>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a19      	ldr	r2, [pc, #100]	; (8005740 <HAL_TIM_Base_Start_IT+0xd8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d004      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x80>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a18      	ldr	r2, [pc, #96]	; (8005744 <HAL_TIM_Base_Start_IT+0xdc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d111      	bne.n	800570c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b06      	cmp	r3, #6
 80056f8:	d010      	beq.n	800571c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f042 0201 	orr.w	r2, r2, #1
 8005708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570a:	e007      	b.n	800571c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00
 800573c:	40010400 	.word	0x40010400
 8005740:	40014000 	.word	0x40014000
 8005744:	40001800 	.word	0x40001800

08005748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e041      	b.n	80057de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f839 	bl	80057e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f000 fba2 	bl	8005ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d109      	bne.n	8005820 <HAL_TIM_PWM_Start+0x24>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	bf14      	ite	ne
 8005818:	2301      	movne	r3, #1
 800581a:	2300      	moveq	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	e022      	b.n	8005866 <HAL_TIM_PWM_Start+0x6a>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b04      	cmp	r3, #4
 8005824:	d109      	bne.n	800583a <HAL_TIM_PWM_Start+0x3e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b01      	cmp	r3, #1
 8005830:	bf14      	ite	ne
 8005832:	2301      	movne	r3, #1
 8005834:	2300      	moveq	r3, #0
 8005836:	b2db      	uxtb	r3, r3
 8005838:	e015      	b.n	8005866 <HAL_TIM_PWM_Start+0x6a>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b08      	cmp	r3, #8
 800583e:	d109      	bne.n	8005854 <HAL_TIM_PWM_Start+0x58>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b01      	cmp	r3, #1
 800584a:	bf14      	ite	ne
 800584c:	2301      	movne	r3, #1
 800584e:	2300      	moveq	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	e008      	b.n	8005866 <HAL_TIM_PWM_Start+0x6a>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b01      	cmp	r3, #1
 800585e:	bf14      	ite	ne
 8005860:	2301      	movne	r3, #1
 8005862:	2300      	moveq	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e07c      	b.n	8005968 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d104      	bne.n	800587e <HAL_TIM_PWM_Start+0x82>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800587c:	e013      	b.n	80058a6 <HAL_TIM_PWM_Start+0xaa>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b04      	cmp	r3, #4
 8005882:	d104      	bne.n	800588e <HAL_TIM_PWM_Start+0x92>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800588c:	e00b      	b.n	80058a6 <HAL_TIM_PWM_Start+0xaa>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b08      	cmp	r3, #8
 8005892:	d104      	bne.n	800589e <HAL_TIM_PWM_Start+0xa2>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800589c:	e003      	b.n	80058a6 <HAL_TIM_PWM_Start+0xaa>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2202      	movs	r2, #2
 80058a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2201      	movs	r2, #1
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fe04 	bl	80064bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a2d      	ldr	r2, [pc, #180]	; (8005970 <HAL_TIM_PWM_Start+0x174>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d004      	beq.n	80058c8 <HAL_TIM_PWM_Start+0xcc>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a2c      	ldr	r2, [pc, #176]	; (8005974 <HAL_TIM_PWM_Start+0x178>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d101      	bne.n	80058cc <HAL_TIM_PWM_Start+0xd0>
 80058c8:	2301      	movs	r3, #1
 80058ca:	e000      	b.n	80058ce <HAL_TIM_PWM_Start+0xd2>
 80058cc:	2300      	movs	r3, #0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d007      	beq.n	80058e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a22      	ldr	r2, [pc, #136]	; (8005970 <HAL_TIM_PWM_Start+0x174>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d022      	beq.n	8005932 <HAL_TIM_PWM_Start+0x136>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f4:	d01d      	beq.n	8005932 <HAL_TIM_PWM_Start+0x136>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1f      	ldr	r2, [pc, #124]	; (8005978 <HAL_TIM_PWM_Start+0x17c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d018      	beq.n	8005932 <HAL_TIM_PWM_Start+0x136>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1d      	ldr	r2, [pc, #116]	; (800597c <HAL_TIM_PWM_Start+0x180>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d013      	beq.n	8005932 <HAL_TIM_PWM_Start+0x136>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1c      	ldr	r2, [pc, #112]	; (8005980 <HAL_TIM_PWM_Start+0x184>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00e      	beq.n	8005932 <HAL_TIM_PWM_Start+0x136>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a16      	ldr	r2, [pc, #88]	; (8005974 <HAL_TIM_PWM_Start+0x178>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d009      	beq.n	8005932 <HAL_TIM_PWM_Start+0x136>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a18      	ldr	r2, [pc, #96]	; (8005984 <HAL_TIM_PWM_Start+0x188>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d004      	beq.n	8005932 <HAL_TIM_PWM_Start+0x136>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a16      	ldr	r2, [pc, #88]	; (8005988 <HAL_TIM_PWM_Start+0x18c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d111      	bne.n	8005956 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b06      	cmp	r3, #6
 8005942:	d010      	beq.n	8005966 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0201 	orr.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005954:	e007      	b.n	8005966 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40010000 	.word	0x40010000
 8005974:	40010400 	.word	0x40010400
 8005978:	40000400 	.word	0x40000400
 800597c:	40000800 	.word	0x40000800
 8005980:	40000c00 	.word	0x40000c00
 8005984:	40014000 	.word	0x40014000
 8005988:	40001800 	.word	0x40001800

0800598c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d020      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01b      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0202 	mvn.w	r2, #2
 80059c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fa5b 	bl	8005e92 <HAL_TIM_IC_CaptureCallback>
 80059dc:	e005      	b.n	80059ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fa4d 	bl	8005e7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa5e 	bl	8005ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d020      	beq.n	8005a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01b      	beq.n	8005a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0204 	mvn.w	r2, #4
 8005a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2202      	movs	r2, #2
 8005a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fa35 	bl	8005e92 <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa27 	bl	8005e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fa38 	bl	8005ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d020      	beq.n	8005a88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01b      	beq.n	8005a88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0208 	mvn.w	r2, #8
 8005a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2204      	movs	r2, #4
 8005a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fa0f 	bl	8005e92 <HAL_TIM_IC_CaptureCallback>
 8005a74:	e005      	b.n	8005a82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa01 	bl	8005e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fa12 	bl	8005ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d020      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01b      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0210 	mvn.w	r2, #16
 8005aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9e9 	bl	8005e92 <HAL_TIM_IC_CaptureCallback>
 8005ac0:	e005      	b.n	8005ace <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9db 	bl	8005e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f9ec 	bl	8005ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00c      	beq.n	8005af8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0201 	mvn.w	r2, #1
 8005af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fc fbb9 	bl	800226a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00c      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d007      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fd7c 	bl	8006614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00c      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f9bd 	bl	8005eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00c      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0220 	mvn.w	r2, #32
 8005b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fd4e 	bl	8006600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b64:	bf00      	nop
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e0ae      	b.n	8005ce8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b0c      	cmp	r3, #12
 8005b96:	f200 809f 	bhi.w	8005cd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005bd5 	.word	0x08005bd5
 8005ba4:	08005cd9 	.word	0x08005cd9
 8005ba8:	08005cd9 	.word	0x08005cd9
 8005bac:	08005cd9 	.word	0x08005cd9
 8005bb0:	08005c15 	.word	0x08005c15
 8005bb4:	08005cd9 	.word	0x08005cd9
 8005bb8:	08005cd9 	.word	0x08005cd9
 8005bbc:	08005cd9 	.word	0x08005cd9
 8005bc0:	08005c57 	.word	0x08005c57
 8005bc4:	08005cd9 	.word	0x08005cd9
 8005bc8:	08005cd9 	.word	0x08005cd9
 8005bcc:	08005cd9 	.word	0x08005cd9
 8005bd0:	08005c97 	.word	0x08005c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fa24 	bl	8006028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699a      	ldr	r2, [r3, #24]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0208 	orr.w	r2, r2, #8
 8005bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0204 	bic.w	r2, r2, #4
 8005bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6999      	ldr	r1, [r3, #24]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	619a      	str	r2, [r3, #24]
      break;
 8005c12:	e064      	b.n	8005cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 fa74 	bl	8006108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6999      	ldr	r1, [r3, #24]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	021a      	lsls	r2, r3, #8
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	619a      	str	r2, [r3, #24]
      break;
 8005c54:	e043      	b.n	8005cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fac9 	bl	80061f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69da      	ldr	r2, [r3, #28]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0208 	orr.w	r2, r2, #8
 8005c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69da      	ldr	r2, [r3, #28]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0204 	bic.w	r2, r2, #4
 8005c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69d9      	ldr	r1, [r3, #28]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	61da      	str	r2, [r3, #28]
      break;
 8005c94:	e023      	b.n	8005cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68b9      	ldr	r1, [r7, #8]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fb1d 	bl	80062dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69da      	ldr	r2, [r3, #28]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69d9      	ldr	r1, [r3, #28]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	021a      	lsls	r2, r3, #8
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	61da      	str	r2, [r3, #28]
      break;
 8005cd6:	e002      	b.n	8005cde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	75fb      	strb	r3, [r7, #23]
      break;
 8005cdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_TIM_ConfigClockSource+0x1c>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e0b4      	b.n	8005e76 <HAL_TIM_ConfigClockSource+0x186>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d44:	d03e      	beq.n	8005dc4 <HAL_TIM_ConfigClockSource+0xd4>
 8005d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d4a:	f200 8087 	bhi.w	8005e5c <HAL_TIM_ConfigClockSource+0x16c>
 8005d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d52:	f000 8086 	beq.w	8005e62 <HAL_TIM_ConfigClockSource+0x172>
 8005d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5a:	d87f      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x16c>
 8005d5c:	2b70      	cmp	r3, #112	; 0x70
 8005d5e:	d01a      	beq.n	8005d96 <HAL_TIM_ConfigClockSource+0xa6>
 8005d60:	2b70      	cmp	r3, #112	; 0x70
 8005d62:	d87b      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x16c>
 8005d64:	2b60      	cmp	r3, #96	; 0x60
 8005d66:	d050      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0x11a>
 8005d68:	2b60      	cmp	r3, #96	; 0x60
 8005d6a:	d877      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x16c>
 8005d6c:	2b50      	cmp	r3, #80	; 0x50
 8005d6e:	d03c      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0xfa>
 8005d70:	2b50      	cmp	r3, #80	; 0x50
 8005d72:	d873      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x16c>
 8005d74:	2b40      	cmp	r3, #64	; 0x40
 8005d76:	d058      	beq.n	8005e2a <HAL_TIM_ConfigClockSource+0x13a>
 8005d78:	2b40      	cmp	r3, #64	; 0x40
 8005d7a:	d86f      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x16c>
 8005d7c:	2b30      	cmp	r3, #48	; 0x30
 8005d7e:	d064      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x15a>
 8005d80:	2b30      	cmp	r3, #48	; 0x30
 8005d82:	d86b      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x16c>
 8005d84:	2b20      	cmp	r3, #32
 8005d86:	d060      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x15a>
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d867      	bhi.n	8005e5c <HAL_TIM_ConfigClockSource+0x16c>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d05c      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x15a>
 8005d90:	2b10      	cmp	r3, #16
 8005d92:	d05a      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x15a>
 8005d94:	e062      	b.n	8005e5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005da6:	f000 fb69 	bl	800647c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005db8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	609a      	str	r2, [r3, #8]
      break;
 8005dc2:	e04f      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dd4:	f000 fb52 	bl	800647c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005de6:	609a      	str	r2, [r3, #8]
      break;
 8005de8:	e03c      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df6:	461a      	mov	r2, r3
 8005df8:	f000 fac6 	bl	8006388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2150      	movs	r1, #80	; 0x50
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fb1f 	bl	8006446 <TIM_ITRx_SetConfig>
      break;
 8005e08:	e02c      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e16:	461a      	mov	r2, r3
 8005e18:	f000 fae5 	bl	80063e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2160      	movs	r1, #96	; 0x60
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fb0f 	bl	8006446 <TIM_ITRx_SetConfig>
      break;
 8005e28:	e01c      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e36:	461a      	mov	r2, r3
 8005e38:	f000 faa6 	bl	8006388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2140      	movs	r1, #64	; 0x40
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 faff 	bl	8006446 <TIM_ITRx_SetConfig>
      break;
 8005e48:	e00c      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4619      	mov	r1, r3
 8005e54:	4610      	mov	r0, r2
 8005e56:	f000 faf6 	bl	8006446 <TIM_ITRx_SetConfig>
      break;
 8005e5a:	e003      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e60:	e000      	b.n	8005e64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a46      	ldr	r2, [pc, #280]	; (8005ffc <TIM_Base_SetConfig+0x12c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d013      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eee:	d00f      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a43      	ldr	r2, [pc, #268]	; (8006000 <TIM_Base_SetConfig+0x130>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00b      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a42      	ldr	r2, [pc, #264]	; (8006004 <TIM_Base_SetConfig+0x134>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d007      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a41      	ldr	r2, [pc, #260]	; (8006008 <TIM_Base_SetConfig+0x138>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d003      	beq.n	8005f10 <TIM_Base_SetConfig+0x40>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a40      	ldr	r2, [pc, #256]	; (800600c <TIM_Base_SetConfig+0x13c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d108      	bne.n	8005f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a35      	ldr	r2, [pc, #212]	; (8005ffc <TIM_Base_SetConfig+0x12c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d02b      	beq.n	8005f82 <TIM_Base_SetConfig+0xb2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f30:	d027      	beq.n	8005f82 <TIM_Base_SetConfig+0xb2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a32      	ldr	r2, [pc, #200]	; (8006000 <TIM_Base_SetConfig+0x130>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d023      	beq.n	8005f82 <TIM_Base_SetConfig+0xb2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a31      	ldr	r2, [pc, #196]	; (8006004 <TIM_Base_SetConfig+0x134>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d01f      	beq.n	8005f82 <TIM_Base_SetConfig+0xb2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a30      	ldr	r2, [pc, #192]	; (8006008 <TIM_Base_SetConfig+0x138>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d01b      	beq.n	8005f82 <TIM_Base_SetConfig+0xb2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a2f      	ldr	r2, [pc, #188]	; (800600c <TIM_Base_SetConfig+0x13c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d017      	beq.n	8005f82 <TIM_Base_SetConfig+0xb2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a2e      	ldr	r2, [pc, #184]	; (8006010 <TIM_Base_SetConfig+0x140>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d013      	beq.n	8005f82 <TIM_Base_SetConfig+0xb2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a2d      	ldr	r2, [pc, #180]	; (8006014 <TIM_Base_SetConfig+0x144>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00f      	beq.n	8005f82 <TIM_Base_SetConfig+0xb2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a2c      	ldr	r2, [pc, #176]	; (8006018 <TIM_Base_SetConfig+0x148>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00b      	beq.n	8005f82 <TIM_Base_SetConfig+0xb2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a2b      	ldr	r2, [pc, #172]	; (800601c <TIM_Base_SetConfig+0x14c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d007      	beq.n	8005f82 <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a2a      	ldr	r2, [pc, #168]	; (8006020 <TIM_Base_SetConfig+0x150>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d003      	beq.n	8005f82 <TIM_Base_SetConfig+0xb2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a29      	ldr	r2, [pc, #164]	; (8006024 <TIM_Base_SetConfig+0x154>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d108      	bne.n	8005f94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a10      	ldr	r2, [pc, #64]	; (8005ffc <TIM_Base_SetConfig+0x12c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_Base_SetConfig+0xf8>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a12      	ldr	r2, [pc, #72]	; (800600c <TIM_Base_SetConfig+0x13c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d103      	bne.n	8005fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d105      	bne.n	8005fee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f023 0201 	bic.w	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	611a      	str	r2, [r3, #16]
  }
}
 8005fee:	bf00      	nop
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40000400 	.word	0x40000400
 8006004:	40000800 	.word	0x40000800
 8006008:	40000c00 	.word	0x40000c00
 800600c:	40010400 	.word	0x40010400
 8006010:	40014000 	.word	0x40014000
 8006014:	40014400 	.word	0x40014400
 8006018:	40014800 	.word	0x40014800
 800601c:	40001800 	.word	0x40001800
 8006020:	40001c00 	.word	0x40001c00
 8006024:	40002000 	.word	0x40002000

08006028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f023 0201 	bic.w	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0303 	bic.w	r3, r3, #3
 800605e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f023 0302 	bic.w	r3, r3, #2
 8006070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a20      	ldr	r2, [pc, #128]	; (8006100 <TIM_OC1_SetConfig+0xd8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_OC1_SetConfig+0x64>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a1f      	ldr	r2, [pc, #124]	; (8006104 <TIM_OC1_SetConfig+0xdc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d10c      	bne.n	80060a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f023 0308 	bic.w	r3, r3, #8
 8006092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f023 0304 	bic.w	r3, r3, #4
 80060a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a15      	ldr	r2, [pc, #84]	; (8006100 <TIM_OC1_SetConfig+0xd8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_OC1_SetConfig+0x8e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a14      	ldr	r2, [pc, #80]	; (8006104 <TIM_OC1_SetConfig+0xdc>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d111      	bne.n	80060da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	621a      	str	r2, [r3, #32]
}
 80060f4:	bf00      	nop
 80060f6:	371c      	adds	r7, #28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	40010000 	.word	0x40010000
 8006104:	40010400 	.word	0x40010400

08006108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	f023 0210 	bic.w	r2, r3, #16
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800613e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	021b      	lsls	r3, r3, #8
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f023 0320 	bic.w	r3, r3, #32
 8006152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a22      	ldr	r2, [pc, #136]	; (80061ec <TIM_OC2_SetConfig+0xe4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_OC2_SetConfig+0x68>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a21      	ldr	r2, [pc, #132]	; (80061f0 <TIM_OC2_SetConfig+0xe8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d10d      	bne.n	800618c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800618a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a17      	ldr	r2, [pc, #92]	; (80061ec <TIM_OC2_SetConfig+0xe4>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d003      	beq.n	800619c <TIM_OC2_SetConfig+0x94>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a16      	ldr	r2, [pc, #88]	; (80061f0 <TIM_OC2_SetConfig+0xe8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d113      	bne.n	80061c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40010400 	.word	0x40010400

080061f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0303 	bic.w	r3, r3, #3
 800622a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800623c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a21      	ldr	r2, [pc, #132]	; (80062d4 <TIM_OC3_SetConfig+0xe0>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d003      	beq.n	800625a <TIM_OC3_SetConfig+0x66>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a20      	ldr	r2, [pc, #128]	; (80062d8 <TIM_OC3_SetConfig+0xe4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d10d      	bne.n	8006276 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	021b      	lsls	r3, r3, #8
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a16      	ldr	r2, [pc, #88]	; (80062d4 <TIM_OC3_SetConfig+0xe0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d003      	beq.n	8006286 <TIM_OC3_SetConfig+0x92>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a15      	ldr	r2, [pc, #84]	; (80062d8 <TIM_OC3_SetConfig+0xe4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d113      	bne.n	80062ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800628c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	621a      	str	r2, [r3, #32]
}
 80062c8:	bf00      	nop
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40010400 	.word	0x40010400

080062dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	031b      	lsls	r3, r3, #12
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a12      	ldr	r2, [pc, #72]	; (8006380 <TIM_OC4_SetConfig+0xa4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d003      	beq.n	8006344 <TIM_OC4_SetConfig+0x68>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a11      	ldr	r2, [pc, #68]	; (8006384 <TIM_OC4_SetConfig+0xa8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d109      	bne.n	8006358 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800634a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	019b      	lsls	r3, r3, #6
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	621a      	str	r2, [r3, #32]
}
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40010000 	.word	0x40010000
 8006384:	40010400 	.word	0x40010400

08006388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f023 0201 	bic.w	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f023 030a 	bic.w	r3, r3, #10
 80063c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	621a      	str	r2, [r3, #32]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b087      	sub	sp, #28
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	f023 0210 	bic.w	r2, r3, #16
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006410:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	031b      	lsls	r3, r3, #12
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006422:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	621a      	str	r2, [r3, #32]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	f043 0307 	orr.w	r3, r3, #7
 8006468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	609a      	str	r2, [r3, #8]
}
 8006470:	bf00      	nop
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006496:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	021a      	lsls	r2, r3, #8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	431a      	orrs	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	609a      	str	r2, [r3, #8]
}
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	2201      	movs	r2, #1
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a1a      	ldr	r2, [r3, #32]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	43db      	mvns	r3, r3
 80064de:	401a      	ands	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a1a      	ldr	r2, [r3, #32]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	fa01 f303 	lsl.w	r3, r1, r3
 80064f4:	431a      	orrs	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800651c:	2302      	movs	r3, #2
 800651e:	e05a      	b.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a21      	ldr	r2, [pc, #132]	; (80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d022      	beq.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656c:	d01d      	beq.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a1d      	ldr	r2, [pc, #116]	; (80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d018      	beq.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1b      	ldr	r2, [pc, #108]	; (80065ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d013      	beq.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1a      	ldr	r2, [pc, #104]	; (80065f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00e      	beq.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a18      	ldr	r2, [pc, #96]	; (80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d009      	beq.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a17      	ldr	r2, [pc, #92]	; (80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d004      	beq.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a15      	ldr	r2, [pc, #84]	; (80065fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d10c      	bne.n	80065c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	40010000 	.word	0x40010000
 80065e8:	40000400 	.word	0x40000400
 80065ec:	40000800 	.word	0x40000800
 80065f0:	40000c00 	.word	0x40000c00
 80065f4:	40010400 	.word	0x40010400
 80065f8:	40014000 	.word	0x40014000
 80065fc:	40001800 	.word	0x40001800

08006600 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e042      	b.n	80066c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d106      	bne.n	8006654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fc fcc8 	bl	8002fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2224      	movs	r2, #36	; 0x24
 8006658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800666a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fd37 	bl	80070e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695a      	ldr	r2, [r3, #20]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	4613      	mov	r3, r2
 80066d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b20      	cmp	r3, #32
 80066e0:	d112      	bne.n	8006708 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <HAL_UART_Receive_IT+0x26>
 80066e8:	88fb      	ldrh	r3, [r7, #6]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e00b      	b.n	800670a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066f8:	88fb      	ldrh	r3, [r7, #6]
 80066fa:	461a      	mov	r2, r3
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 fb16 	bl	8006d30 <UART_Start_Receive_IT>
 8006704:	4603      	mov	r3, r0
 8006706:	e000      	b.n	800670a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006708:	2302      	movs	r3, #2
  }
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b08c      	sub	sp, #48	; 0x30
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	4613      	mov	r3, r2
 800671e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b20      	cmp	r3, #32
 800672a:	d14a      	bne.n	80067c2 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e043      	b.n	80067c4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2201      	movs	r2, #1
 8006740:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006748:	88fb      	ldrh	r3, [r7, #6]
 800674a:	461a      	mov	r2, r3
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 faee 	bl	8006d30 <UART_Start_Receive_IT>
 8006754:	4603      	mov	r3, r0
 8006756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800675a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800675e:	2b00      	cmp	r3, #0
 8006760:	d12c      	bne.n	80067bc <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	2b01      	cmp	r3, #1
 8006768:	d125      	bne.n	80067b6 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800676a:	2300      	movs	r3, #0
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	613b      	str	r3, [r7, #16]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	613b      	str	r3, [r7, #16]
 800677e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	330c      	adds	r3, #12
 8006786:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	617b      	str	r3, [r7, #20]
   return(result);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f043 0310 	orr.w	r3, r3, #16
 8006796:	62bb      	str	r3, [r7, #40]	; 0x28
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	330c      	adds	r3, #12
 800679e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067a0:	627a      	str	r2, [r7, #36]	; 0x24
 80067a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a4:	6a39      	ldr	r1, [r7, #32]
 80067a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a8:	e841 2300 	strex	r3, r2, [r1]
 80067ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1e5      	bne.n	8006780 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80067b4:	e002      	b.n	80067bc <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80067bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067c0:	e000      	b.n	80067c4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80067c2:	2302      	movs	r3, #2
  }
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3730      	adds	r7, #48	; 0x30
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b0ba      	sub	sp, #232	; 0xe8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800680a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10f      	bne.n	8006832 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d009      	beq.n	8006832 <HAL_UART_IRQHandler+0x66>
 800681e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fb99 	bl	8006f62 <UART_Receive_IT>
      return;
 8006830:	e25b      	b.n	8006cea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 80de 	beq.w	80069f8 <HAL_UART_IRQHandler+0x22c>
 800683c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800684c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 80d1 	beq.w	80069f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <HAL_UART_IRQHandler+0xae>
 8006862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006872:	f043 0201 	orr.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800687a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00b      	beq.n	800689e <HAL_UART_IRQHandler+0xd2>
 8006886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d005      	beq.n	800689e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006896:	f043 0202 	orr.w	r2, r3, #2
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00b      	beq.n	80068c2 <HAL_UART_IRQHandler+0xf6>
 80068aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d005      	beq.n	80068c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ba:	f043 0204 	orr.w	r2, r3, #4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d011      	beq.n	80068f2 <HAL_UART_IRQHandler+0x126>
 80068ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d105      	bne.n	80068e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d005      	beq.n	80068f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ea:	f043 0208 	orr.w	r2, r3, #8
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 81f2 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b00      	cmp	r3, #0
 8006906:	d008      	beq.n	800691a <HAL_UART_IRQHandler+0x14e>
 8006908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fb24 	bl	8006f62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	bf0c      	ite	eq
 8006928:	2301      	moveq	r3, #1
 800692a:	2300      	movne	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d103      	bne.n	8006946 <HAL_UART_IRQHandler+0x17a>
 800693e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006942:	2b00      	cmp	r3, #0
 8006944:	d04f      	beq.n	80069e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa2c 	bl	8006da4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006956:	2b40      	cmp	r3, #64	; 0x40
 8006958:	d141      	bne.n	80069de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3314      	adds	r3, #20
 8006960:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006970:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3314      	adds	r3, #20
 8006982:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006986:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800698a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006992:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800699e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1d9      	bne.n	800695a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d013      	beq.n	80069d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b2:	4a7e      	ldr	r2, [pc, #504]	; (8006bac <HAL_UART_IRQHandler+0x3e0>)
 80069b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fd fafc 	bl	8003fb8 <HAL_DMA_Abort_IT>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d016      	beq.n	80069f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069d0:	4610      	mov	r0, r2
 80069d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d4:	e00e      	b.n	80069f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f994 	bl	8006d04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069dc:	e00a      	b.n	80069f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f990 	bl	8006d04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e4:	e006      	b.n	80069f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f98c 	bl	8006d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80069f2:	e175      	b.n	8006ce0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f4:	bf00      	nop
    return;
 80069f6:	e173      	b.n	8006ce0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	f040 814f 	bne.w	8006ca0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 8148 	beq.w	8006ca0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8141 	beq.w	8006ca0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60bb      	str	r3, [r7, #8]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	60bb      	str	r3, [r7, #8]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3e:	2b40      	cmp	r3, #64	; 0x40
 8006a40:	f040 80b6 	bne.w	8006bb0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 8145 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a62:	429a      	cmp	r2, r3
 8006a64:	f080 813e 	bcs.w	8006ce4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7a:	f000 8088 	beq.w	8006b8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	330c      	adds	r3, #12
 8006a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	330c      	adds	r3, #12
 8006aa6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006aaa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ab6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1d9      	bne.n	8006a7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3314      	adds	r3, #20
 8006ad0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006adc:	f023 0301 	bic.w	r3, r3, #1
 8006ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3314      	adds	r3, #20
 8006aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006aee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006af2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006af6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e1      	bne.n	8006aca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3314      	adds	r3, #20
 8006b0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3314      	adds	r3, #20
 8006b26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e3      	bne.n	8006b06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	330c      	adds	r3, #12
 8006b52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b5e:	f023 0310 	bic.w	r3, r3, #16
 8006b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b70:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e3      	bne.n	8006b4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fd f9a5 	bl	8003ed8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2202      	movs	r2, #2
 8006b92:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f8b7 	bl	8006d18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006baa:	e09b      	b.n	8006ce4 <HAL_UART_IRQHandler+0x518>
 8006bac:	08006e6b 	.word	0x08006e6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 808e 	beq.w	8006ce8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8089 	beq.w	8006ce8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	330c      	adds	r3, #12
 8006bf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006bfa:	647a      	str	r2, [r7, #68]	; 0x44
 8006bfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c02:	e841 2300 	strex	r3, r2, [r1]
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1e3      	bne.n	8006bd6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3314      	adds	r3, #20
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3314      	adds	r3, #20
 8006c2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c32:	633a      	str	r2, [r7, #48]	; 0x30
 8006c34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e3      	bne.n	8006c0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	330c      	adds	r3, #12
 8006c5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	e853 3f00 	ldrex	r3, [r3]
 8006c62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f023 0310 	bic.w	r3, r3, #16
 8006c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	330c      	adds	r3, #12
 8006c74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c78:	61fa      	str	r2, [r7, #28]
 8006c7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	69b9      	ldr	r1, [r7, #24]
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	e841 2300 	strex	r3, r2, [r1]
 8006c84:	617b      	str	r3, [r7, #20]
   return(result);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e3      	bne.n	8006c54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f83d 	bl	8006d18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c9e:	e023      	b.n	8006ce8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d009      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x4f4>
 8006cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f8ea 	bl	8006e92 <UART_Transmit_IT>
    return;
 8006cbe:	e014      	b.n	8006cea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00e      	beq.n	8006cea <HAL_UART_IRQHandler+0x51e>
 8006ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d008      	beq.n	8006cea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f92a 	bl	8006f32 <UART_EndTransmit_IT>
    return;
 8006cde:	e004      	b.n	8006cea <HAL_UART_IRQHandler+0x51e>
    return;
 8006ce0:	bf00      	nop
 8006ce2:	e002      	b.n	8006cea <HAL_UART_IRQHandler+0x51e>
      return;
 8006ce4:	bf00      	nop
 8006ce6:	e000      	b.n	8006cea <HAL_UART_IRQHandler+0x51e>
      return;
 8006ce8:	bf00      	nop
  }
}
 8006cea:	37e8      	adds	r7, #232	; 0xe8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	88fa      	ldrh	r2, [r7, #6]
 8006d48:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	88fa      	ldrh	r2, [r7, #6]
 8006d4e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2222      	movs	r2, #34	; 0x22
 8006d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d007      	beq.n	8006d76 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695a      	ldr	r2, [r3, #20]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0201 	orr.w	r2, r2, #1
 8006d84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0220 	orr.w	r2, r2, #32
 8006d94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b095      	sub	sp, #84	; 0x54
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	330c      	adds	r3, #12
 8006db2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	330c      	adds	r3, #12
 8006dca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dcc:	643a      	str	r2, [r7, #64]	; 0x40
 8006dce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e5      	bne.n	8006dac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3314      	adds	r3, #20
 8006de6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	e853 3f00 	ldrex	r3, [r3]
 8006dee:	61fb      	str	r3, [r7, #28]
   return(result);
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3314      	adds	r3, #20
 8006dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e5      	bne.n	8006de0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d119      	bne.n	8006e50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f023 0310 	bic.w	r3, r3, #16
 8006e32:	647b      	str	r3, [r7, #68]	; 0x44
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e3c:	61ba      	str	r2, [r7, #24]
 8006e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6979      	ldr	r1, [r7, #20]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e5      	bne.n	8006e1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e5e:	bf00      	nop
 8006e60:	3754      	adds	r7, #84	; 0x54
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f7ff ff3d 	bl	8006d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e8a:	bf00      	nop
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b085      	sub	sp, #20
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b21      	cmp	r3, #33	; 0x21
 8006ea4:	d13e      	bne.n	8006f24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eae:	d114      	bne.n	8006eda <UART_Transmit_IT+0x48>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d110      	bne.n	8006eda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ecc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	1c9a      	adds	r2, r3, #2
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	621a      	str	r2, [r3, #32]
 8006ed8:	e008      	b.n	8006eec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	1c59      	adds	r1, r3, #1
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6211      	str	r1, [r2, #32]
 8006ee4:	781a      	ldrb	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10f      	bne.n	8006f20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	e000      	b.n	8006f26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f24:	2302      	movs	r3, #2
  }
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff fecc 	bl	8006cf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b08c      	sub	sp, #48	; 0x30
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b22      	cmp	r3, #34	; 0x22
 8006f74:	f040 80ae 	bne.w	80070d4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f80:	d117      	bne.n	8006fb2 <UART_Receive_IT+0x50>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d113      	bne.n	8006fb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006faa:	1c9a      	adds	r2, r3, #2
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	629a      	str	r2, [r3, #40]	; 0x28
 8006fb0:	e026      	b.n	8007000 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc4:	d007      	beq.n	8006fd6 <UART_Receive_IT+0x74>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <UART_Receive_IT+0x82>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	e008      	b.n	8006ff6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007004:	b29b      	uxth	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	b29b      	uxth	r3, r3
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	4619      	mov	r1, r3
 800700e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007010:	2b00      	cmp	r3, #0
 8007012:	d15d      	bne.n	80070d0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0220 	bic.w	r2, r2, #32
 8007022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695a      	ldr	r2, [r3, #20]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007056:	2b01      	cmp	r3, #1
 8007058:	d135      	bne.n	80070c6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	330c      	adds	r3, #12
 8007066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	613b      	str	r3, [r7, #16]
   return(result);
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f023 0310 	bic.w	r3, r3, #16
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	330c      	adds	r3, #12
 800707e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007080:	623a      	str	r2, [r7, #32]
 8007082:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	69f9      	ldr	r1, [r7, #28]
 8007086:	6a3a      	ldr	r2, [r7, #32]
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	61bb      	str	r3, [r7, #24]
   return(result);
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e5      	bne.n	8007060 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0310 	and.w	r3, r3, #16
 800709e:	2b10      	cmp	r3, #16
 80070a0:	d10a      	bne.n	80070b8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff fe2a 	bl	8006d18 <HAL_UARTEx_RxEventCallback>
 80070c4:	e002      	b.n	80070cc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fb f8c4 	bl	8002254 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	e002      	b.n	80070d6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	e000      	b.n	80070d6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80070d4:	2302      	movs	r3, #2
  }
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3730      	adds	r7, #48	; 0x30
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070e4:	b0c0      	sub	sp, #256	; 0x100
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070fc:	68d9      	ldr	r1, [r3, #12]
 80070fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	ea40 0301 	orr.w	r3, r0, r1
 8007108:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800710a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	431a      	orrs	r2, r3
 8007118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	431a      	orrs	r2, r3
 8007120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	4313      	orrs	r3, r2
 8007128:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800712c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007138:	f021 010c 	bic.w	r1, r1, #12
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007146:	430b      	orrs	r3, r1
 8007148:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800714a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715a:	6999      	ldr	r1, [r3, #24]
 800715c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	ea40 0301 	orr.w	r3, r0, r1
 8007166:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4b8f      	ldr	r3, [pc, #572]	; (80073ac <UART_SetConfig+0x2cc>)
 8007170:	429a      	cmp	r2, r3
 8007172:	d005      	beq.n	8007180 <UART_SetConfig+0xa0>
 8007174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	4b8d      	ldr	r3, [pc, #564]	; (80073b0 <UART_SetConfig+0x2d0>)
 800717c:	429a      	cmp	r2, r3
 800717e:	d104      	bne.n	800718a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007180:	f7fe f93e 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 8007184:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007188:	e003      	b.n	8007192 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800718a:	f7fe f925 	bl	80053d8 <HAL_RCC_GetPCLK1Freq>
 800718e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800719c:	f040 810c 	bne.w	80073b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071b2:	4622      	mov	r2, r4
 80071b4:	462b      	mov	r3, r5
 80071b6:	1891      	adds	r1, r2, r2
 80071b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80071ba:	415b      	adcs	r3, r3
 80071bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071c2:	4621      	mov	r1, r4
 80071c4:	eb12 0801 	adds.w	r8, r2, r1
 80071c8:	4629      	mov	r1, r5
 80071ca:	eb43 0901 	adc.w	r9, r3, r1
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071e2:	4690      	mov	r8, r2
 80071e4:	4699      	mov	r9, r3
 80071e6:	4623      	mov	r3, r4
 80071e8:	eb18 0303 	adds.w	r3, r8, r3
 80071ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071f0:	462b      	mov	r3, r5
 80071f2:	eb49 0303 	adc.w	r3, r9, r3
 80071f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007206:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800720a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800720e:	460b      	mov	r3, r1
 8007210:	18db      	adds	r3, r3, r3
 8007212:	653b      	str	r3, [r7, #80]	; 0x50
 8007214:	4613      	mov	r3, r2
 8007216:	eb42 0303 	adc.w	r3, r2, r3
 800721a:	657b      	str	r3, [r7, #84]	; 0x54
 800721c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007220:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007224:	f7f9 fc42 	bl	8000aac <__aeabi_uldivmod>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	4b61      	ldr	r3, [pc, #388]	; (80073b4 <UART_SetConfig+0x2d4>)
 800722e:	fba3 2302 	umull	r2, r3, r3, r2
 8007232:	095b      	lsrs	r3, r3, #5
 8007234:	011c      	lsls	r4, r3, #4
 8007236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800723a:	2200      	movs	r2, #0
 800723c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007240:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007244:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007248:	4642      	mov	r2, r8
 800724a:	464b      	mov	r3, r9
 800724c:	1891      	adds	r1, r2, r2
 800724e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007250:	415b      	adcs	r3, r3
 8007252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007254:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007258:	4641      	mov	r1, r8
 800725a:	eb12 0a01 	adds.w	sl, r2, r1
 800725e:	4649      	mov	r1, r9
 8007260:	eb43 0b01 	adc.w	fp, r3, r1
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007270:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007274:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007278:	4692      	mov	sl, r2
 800727a:	469b      	mov	fp, r3
 800727c:	4643      	mov	r3, r8
 800727e:	eb1a 0303 	adds.w	r3, sl, r3
 8007282:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007286:	464b      	mov	r3, r9
 8007288:	eb4b 0303 	adc.w	r3, fp, r3
 800728c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800729c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072a4:	460b      	mov	r3, r1
 80072a6:	18db      	adds	r3, r3, r3
 80072a8:	643b      	str	r3, [r7, #64]	; 0x40
 80072aa:	4613      	mov	r3, r2
 80072ac:	eb42 0303 	adc.w	r3, r2, r3
 80072b0:	647b      	str	r3, [r7, #68]	; 0x44
 80072b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072ba:	f7f9 fbf7 	bl	8000aac <__aeabi_uldivmod>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4611      	mov	r1, r2
 80072c4:	4b3b      	ldr	r3, [pc, #236]	; (80073b4 <UART_SetConfig+0x2d4>)
 80072c6:	fba3 2301 	umull	r2, r3, r3, r1
 80072ca:	095b      	lsrs	r3, r3, #5
 80072cc:	2264      	movs	r2, #100	; 0x64
 80072ce:	fb02 f303 	mul.w	r3, r2, r3
 80072d2:	1acb      	subs	r3, r1, r3
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072da:	4b36      	ldr	r3, [pc, #216]	; (80073b4 <UART_SetConfig+0x2d4>)
 80072dc:	fba3 2302 	umull	r2, r3, r3, r2
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072e8:	441c      	add	r4, r3
 80072ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80072f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80072fc:	4642      	mov	r2, r8
 80072fe:	464b      	mov	r3, r9
 8007300:	1891      	adds	r1, r2, r2
 8007302:	63b9      	str	r1, [r7, #56]	; 0x38
 8007304:	415b      	adcs	r3, r3
 8007306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007308:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800730c:	4641      	mov	r1, r8
 800730e:	1851      	adds	r1, r2, r1
 8007310:	6339      	str	r1, [r7, #48]	; 0x30
 8007312:	4649      	mov	r1, r9
 8007314:	414b      	adcs	r3, r1
 8007316:	637b      	str	r3, [r7, #52]	; 0x34
 8007318:	f04f 0200 	mov.w	r2, #0
 800731c:	f04f 0300 	mov.w	r3, #0
 8007320:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007324:	4659      	mov	r1, fp
 8007326:	00cb      	lsls	r3, r1, #3
 8007328:	4651      	mov	r1, sl
 800732a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800732e:	4651      	mov	r1, sl
 8007330:	00ca      	lsls	r2, r1, #3
 8007332:	4610      	mov	r0, r2
 8007334:	4619      	mov	r1, r3
 8007336:	4603      	mov	r3, r0
 8007338:	4642      	mov	r2, r8
 800733a:	189b      	adds	r3, r3, r2
 800733c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007340:	464b      	mov	r3, r9
 8007342:	460a      	mov	r2, r1
 8007344:	eb42 0303 	adc.w	r3, r2, r3
 8007348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800734c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007358:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800735c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007360:	460b      	mov	r3, r1
 8007362:	18db      	adds	r3, r3, r3
 8007364:	62bb      	str	r3, [r7, #40]	; 0x28
 8007366:	4613      	mov	r3, r2
 8007368:	eb42 0303 	adc.w	r3, r2, r3
 800736c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800736e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007372:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007376:	f7f9 fb99 	bl	8000aac <__aeabi_uldivmod>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4b0d      	ldr	r3, [pc, #52]	; (80073b4 <UART_SetConfig+0x2d4>)
 8007380:	fba3 1302 	umull	r1, r3, r3, r2
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	2164      	movs	r1, #100	; 0x64
 8007388:	fb01 f303 	mul.w	r3, r1, r3
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	3332      	adds	r3, #50	; 0x32
 8007392:	4a08      	ldr	r2, [pc, #32]	; (80073b4 <UART_SetConfig+0x2d4>)
 8007394:	fba2 2303 	umull	r2, r3, r2, r3
 8007398:	095b      	lsrs	r3, r3, #5
 800739a:	f003 0207 	and.w	r2, r3, #7
 800739e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4422      	add	r2, r4
 80073a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073a8:	e106      	b.n	80075b8 <UART_SetConfig+0x4d8>
 80073aa:	bf00      	nop
 80073ac:	40011000 	.word	0x40011000
 80073b0:	40011400 	.word	0x40011400
 80073b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073bc:	2200      	movs	r2, #0
 80073be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073ca:	4642      	mov	r2, r8
 80073cc:	464b      	mov	r3, r9
 80073ce:	1891      	adds	r1, r2, r2
 80073d0:	6239      	str	r1, [r7, #32]
 80073d2:	415b      	adcs	r3, r3
 80073d4:	627b      	str	r3, [r7, #36]	; 0x24
 80073d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073da:	4641      	mov	r1, r8
 80073dc:	1854      	adds	r4, r2, r1
 80073de:	4649      	mov	r1, r9
 80073e0:	eb43 0501 	adc.w	r5, r3, r1
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	f04f 0300 	mov.w	r3, #0
 80073ec:	00eb      	lsls	r3, r5, #3
 80073ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073f2:	00e2      	lsls	r2, r4, #3
 80073f4:	4614      	mov	r4, r2
 80073f6:	461d      	mov	r5, r3
 80073f8:	4643      	mov	r3, r8
 80073fa:	18e3      	adds	r3, r4, r3
 80073fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007400:	464b      	mov	r3, r9
 8007402:	eb45 0303 	adc.w	r3, r5, r3
 8007406:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800740a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007416:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800741a:	f04f 0200 	mov.w	r2, #0
 800741e:	f04f 0300 	mov.w	r3, #0
 8007422:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007426:	4629      	mov	r1, r5
 8007428:	008b      	lsls	r3, r1, #2
 800742a:	4621      	mov	r1, r4
 800742c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007430:	4621      	mov	r1, r4
 8007432:	008a      	lsls	r2, r1, #2
 8007434:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007438:	f7f9 fb38 	bl	8000aac <__aeabi_uldivmod>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4b60      	ldr	r3, [pc, #384]	; (80075c4 <UART_SetConfig+0x4e4>)
 8007442:	fba3 2302 	umull	r2, r3, r3, r2
 8007446:	095b      	lsrs	r3, r3, #5
 8007448:	011c      	lsls	r4, r3, #4
 800744a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800744e:	2200      	movs	r2, #0
 8007450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007454:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007458:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800745c:	4642      	mov	r2, r8
 800745e:	464b      	mov	r3, r9
 8007460:	1891      	adds	r1, r2, r2
 8007462:	61b9      	str	r1, [r7, #24]
 8007464:	415b      	adcs	r3, r3
 8007466:	61fb      	str	r3, [r7, #28]
 8007468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800746c:	4641      	mov	r1, r8
 800746e:	1851      	adds	r1, r2, r1
 8007470:	6139      	str	r1, [r7, #16]
 8007472:	4649      	mov	r1, r9
 8007474:	414b      	adcs	r3, r1
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	f04f 0300 	mov.w	r3, #0
 8007480:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007484:	4659      	mov	r1, fp
 8007486:	00cb      	lsls	r3, r1, #3
 8007488:	4651      	mov	r1, sl
 800748a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800748e:	4651      	mov	r1, sl
 8007490:	00ca      	lsls	r2, r1, #3
 8007492:	4610      	mov	r0, r2
 8007494:	4619      	mov	r1, r3
 8007496:	4603      	mov	r3, r0
 8007498:	4642      	mov	r2, r8
 800749a:	189b      	adds	r3, r3, r2
 800749c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074a0:	464b      	mov	r3, r9
 80074a2:	460a      	mov	r2, r1
 80074a4:	eb42 0303 	adc.w	r3, r2, r3
 80074a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80074b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074b8:	f04f 0200 	mov.w	r2, #0
 80074bc:	f04f 0300 	mov.w	r3, #0
 80074c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074c4:	4649      	mov	r1, r9
 80074c6:	008b      	lsls	r3, r1, #2
 80074c8:	4641      	mov	r1, r8
 80074ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ce:	4641      	mov	r1, r8
 80074d0:	008a      	lsls	r2, r1, #2
 80074d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074d6:	f7f9 fae9 	bl	8000aac <__aeabi_uldivmod>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4611      	mov	r1, r2
 80074e0:	4b38      	ldr	r3, [pc, #224]	; (80075c4 <UART_SetConfig+0x4e4>)
 80074e2:	fba3 2301 	umull	r2, r3, r3, r1
 80074e6:	095b      	lsrs	r3, r3, #5
 80074e8:	2264      	movs	r2, #100	; 0x64
 80074ea:	fb02 f303 	mul.w	r3, r2, r3
 80074ee:	1acb      	subs	r3, r1, r3
 80074f0:	011b      	lsls	r3, r3, #4
 80074f2:	3332      	adds	r3, #50	; 0x32
 80074f4:	4a33      	ldr	r2, [pc, #204]	; (80075c4 <UART_SetConfig+0x4e4>)
 80074f6:	fba2 2303 	umull	r2, r3, r2, r3
 80074fa:	095b      	lsrs	r3, r3, #5
 80074fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007500:	441c      	add	r4, r3
 8007502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007506:	2200      	movs	r2, #0
 8007508:	673b      	str	r3, [r7, #112]	; 0x70
 800750a:	677a      	str	r2, [r7, #116]	; 0x74
 800750c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007510:	4642      	mov	r2, r8
 8007512:	464b      	mov	r3, r9
 8007514:	1891      	adds	r1, r2, r2
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	415b      	adcs	r3, r3
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007520:	4641      	mov	r1, r8
 8007522:	1851      	adds	r1, r2, r1
 8007524:	6039      	str	r1, [r7, #0]
 8007526:	4649      	mov	r1, r9
 8007528:	414b      	adcs	r3, r1
 800752a:	607b      	str	r3, [r7, #4]
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	f04f 0300 	mov.w	r3, #0
 8007534:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007538:	4659      	mov	r1, fp
 800753a:	00cb      	lsls	r3, r1, #3
 800753c:	4651      	mov	r1, sl
 800753e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007542:	4651      	mov	r1, sl
 8007544:	00ca      	lsls	r2, r1, #3
 8007546:	4610      	mov	r0, r2
 8007548:	4619      	mov	r1, r3
 800754a:	4603      	mov	r3, r0
 800754c:	4642      	mov	r2, r8
 800754e:	189b      	adds	r3, r3, r2
 8007550:	66bb      	str	r3, [r7, #104]	; 0x68
 8007552:	464b      	mov	r3, r9
 8007554:	460a      	mov	r2, r1
 8007556:	eb42 0303 	adc.w	r3, r2, r3
 800755a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	663b      	str	r3, [r7, #96]	; 0x60
 8007566:	667a      	str	r2, [r7, #100]	; 0x64
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007574:	4649      	mov	r1, r9
 8007576:	008b      	lsls	r3, r1, #2
 8007578:	4641      	mov	r1, r8
 800757a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800757e:	4641      	mov	r1, r8
 8007580:	008a      	lsls	r2, r1, #2
 8007582:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007586:	f7f9 fa91 	bl	8000aac <__aeabi_uldivmod>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <UART_SetConfig+0x4e4>)
 8007590:	fba3 1302 	umull	r1, r3, r3, r2
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	2164      	movs	r1, #100	; 0x64
 8007598:	fb01 f303 	mul.w	r3, r1, r3
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	3332      	adds	r3, #50	; 0x32
 80075a2:	4a08      	ldr	r2, [pc, #32]	; (80075c4 <UART_SetConfig+0x4e4>)
 80075a4:	fba2 2303 	umull	r2, r3, r2, r3
 80075a8:	095b      	lsrs	r3, r3, #5
 80075aa:	f003 020f 	and.w	r2, r3, #15
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4422      	add	r2, r4
 80075b6:	609a      	str	r2, [r3, #8]
}
 80075b8:	bf00      	nop
 80075ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075be:	46bd      	mov	sp, r7
 80075c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075c4:	51eb851f 	.word	0x51eb851f

080075c8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	6812      	ldr	r2, [r2, #0]
 80075e0:	f023 0101 	bic.w	r1, r3, #1
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	2b08      	cmp	r3, #8
 80075f0:	d102      	bne.n	80075f8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80075f2:	2340      	movs	r3, #64	; 0x40
 80075f4:	617b      	str	r3, [r7, #20]
 80075f6:	e001      	b.n	80075fc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007608:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800760e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007614:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800761a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007620:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007626:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800762c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8007632:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8007638:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800763e:	4313      	orrs	r3, r2
 8007640:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4313      	orrs	r3, r2
 800764a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8007656:	4b10      	ldr	r3, [pc, #64]	; (8007698 <FSMC_NORSRAM_Init+0xd0>)
 8007658:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007660:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007668:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	43db      	mvns	r3, r3
 8007678:	ea02 0103 	and.w	r1, r2, r3
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	4319      	orrs	r1, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	371c      	adds	r7, #28
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	0008fb7f 	.word	0x0008fb7f

0800769c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	431a      	orrs	r2, r3
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	431a      	orrs	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	041b      	lsls	r3, r3, #16
 80076d0:	431a      	orrs	r2, r3
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	051b      	lsls	r3, r3, #20
 80076da:	431a      	orrs	r2, r3
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	3b02      	subs	r3, #2
 80076e2:	061b      	lsls	r3, r3, #24
 80076e4:	431a      	orrs	r2, r3
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	3201      	adds	r2, #1
 80076f0:	4319      	orrs	r1, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800771c:	d11d      	bne.n	800775a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007726:	4b13      	ldr	r3, [pc, #76]	; (8007774 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007728:	4013      	ands	r3, r2
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	6811      	ldr	r1, [r2, #0]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	6852      	ldr	r2, [r2, #4]
 8007732:	0112      	lsls	r2, r2, #4
 8007734:	4311      	orrs	r1, r2
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	6892      	ldr	r2, [r2, #8]
 800773a:	0212      	lsls	r2, r2, #8
 800773c:	4311      	orrs	r1, r2
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	6992      	ldr	r2, [r2, #24]
 8007742:	4311      	orrs	r1, r2
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	68d2      	ldr	r2, [r2, #12]
 8007748:	0412      	lsls	r2, r2, #16
 800774a:	430a      	orrs	r2, r1
 800774c:	ea43 0102 	orr.w	r1, r3, r2
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007758:	e005      	b.n	8007766 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	cff00000 	.word	0xcff00000

08007778 <siprintf>:
 8007778:	b40e      	push	{r1, r2, r3}
 800777a:	b500      	push	{lr}
 800777c:	b09c      	sub	sp, #112	; 0x70
 800777e:	ab1d      	add	r3, sp, #116	; 0x74
 8007780:	9002      	str	r0, [sp, #8]
 8007782:	9006      	str	r0, [sp, #24]
 8007784:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007788:	4809      	ldr	r0, [pc, #36]	; (80077b0 <siprintf+0x38>)
 800778a:	9107      	str	r1, [sp, #28]
 800778c:	9104      	str	r1, [sp, #16]
 800778e:	4909      	ldr	r1, [pc, #36]	; (80077b4 <siprintf+0x3c>)
 8007790:	f853 2b04 	ldr.w	r2, [r3], #4
 8007794:	9105      	str	r1, [sp, #20]
 8007796:	6800      	ldr	r0, [r0, #0]
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	a902      	add	r1, sp, #8
 800779c:	f000 f992 	bl	8007ac4 <_svfiprintf_r>
 80077a0:	9b02      	ldr	r3, [sp, #8]
 80077a2:	2200      	movs	r2, #0
 80077a4:	701a      	strb	r2, [r3, #0]
 80077a6:	b01c      	add	sp, #112	; 0x70
 80077a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077ac:	b003      	add	sp, #12
 80077ae:	4770      	bx	lr
 80077b0:	20000258 	.word	0x20000258
 80077b4:	ffff0208 	.word	0xffff0208

080077b8 <memset>:
 80077b8:	4402      	add	r2, r0
 80077ba:	4603      	mov	r3, r0
 80077bc:	4293      	cmp	r3, r2
 80077be:	d100      	bne.n	80077c2 <memset+0xa>
 80077c0:	4770      	bx	lr
 80077c2:	f803 1b01 	strb.w	r1, [r3], #1
 80077c6:	e7f9      	b.n	80077bc <memset+0x4>

080077c8 <__errno>:
 80077c8:	4b01      	ldr	r3, [pc, #4]	; (80077d0 <__errno+0x8>)
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	20000258 	.word	0x20000258

080077d4 <__libc_init_array>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	4d0d      	ldr	r5, [pc, #52]	; (800780c <__libc_init_array+0x38>)
 80077d8:	4c0d      	ldr	r4, [pc, #52]	; (8007810 <__libc_init_array+0x3c>)
 80077da:	1b64      	subs	r4, r4, r5
 80077dc:	10a4      	asrs	r4, r4, #2
 80077de:	2600      	movs	r6, #0
 80077e0:	42a6      	cmp	r6, r4
 80077e2:	d109      	bne.n	80077f8 <__libc_init_array+0x24>
 80077e4:	4d0b      	ldr	r5, [pc, #44]	; (8007814 <__libc_init_array+0x40>)
 80077e6:	4c0c      	ldr	r4, [pc, #48]	; (8007818 <__libc_init_array+0x44>)
 80077e8:	f000 fc6a 	bl	80080c0 <_init>
 80077ec:	1b64      	subs	r4, r4, r5
 80077ee:	10a4      	asrs	r4, r4, #2
 80077f0:	2600      	movs	r6, #0
 80077f2:	42a6      	cmp	r6, r4
 80077f4:	d105      	bne.n	8007802 <__libc_init_array+0x2e>
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fc:	4798      	blx	r3
 80077fe:	3601      	adds	r6, #1
 8007800:	e7ee      	b.n	80077e0 <__libc_init_array+0xc>
 8007802:	f855 3b04 	ldr.w	r3, [r5], #4
 8007806:	4798      	blx	r3
 8007808:	3601      	adds	r6, #1
 800780a:	e7f2      	b.n	80077f2 <__libc_init_array+0x1e>
 800780c:	0800b0f8 	.word	0x0800b0f8
 8007810:	0800b0f8 	.word	0x0800b0f8
 8007814:	0800b0f8 	.word	0x0800b0f8
 8007818:	0800b0fc 	.word	0x0800b0fc

0800781c <__retarget_lock_acquire_recursive>:
 800781c:	4770      	bx	lr

0800781e <__retarget_lock_release_recursive>:
 800781e:	4770      	bx	lr

08007820 <_free_r>:
 8007820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007822:	2900      	cmp	r1, #0
 8007824:	d044      	beq.n	80078b0 <_free_r+0x90>
 8007826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782a:	9001      	str	r0, [sp, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f1a1 0404 	sub.w	r4, r1, #4
 8007832:	bfb8      	it	lt
 8007834:	18e4      	addlt	r4, r4, r3
 8007836:	f000 f8df 	bl	80079f8 <__malloc_lock>
 800783a:	4a1e      	ldr	r2, [pc, #120]	; (80078b4 <_free_r+0x94>)
 800783c:	9801      	ldr	r0, [sp, #4]
 800783e:	6813      	ldr	r3, [r2, #0]
 8007840:	b933      	cbnz	r3, 8007850 <_free_r+0x30>
 8007842:	6063      	str	r3, [r4, #4]
 8007844:	6014      	str	r4, [r2, #0]
 8007846:	b003      	add	sp, #12
 8007848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800784c:	f000 b8da 	b.w	8007a04 <__malloc_unlock>
 8007850:	42a3      	cmp	r3, r4
 8007852:	d908      	bls.n	8007866 <_free_r+0x46>
 8007854:	6825      	ldr	r5, [r4, #0]
 8007856:	1961      	adds	r1, r4, r5
 8007858:	428b      	cmp	r3, r1
 800785a:	bf01      	itttt	eq
 800785c:	6819      	ldreq	r1, [r3, #0]
 800785e:	685b      	ldreq	r3, [r3, #4]
 8007860:	1949      	addeq	r1, r1, r5
 8007862:	6021      	streq	r1, [r4, #0]
 8007864:	e7ed      	b.n	8007842 <_free_r+0x22>
 8007866:	461a      	mov	r2, r3
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	b10b      	cbz	r3, 8007870 <_free_r+0x50>
 800786c:	42a3      	cmp	r3, r4
 800786e:	d9fa      	bls.n	8007866 <_free_r+0x46>
 8007870:	6811      	ldr	r1, [r2, #0]
 8007872:	1855      	adds	r5, r2, r1
 8007874:	42a5      	cmp	r5, r4
 8007876:	d10b      	bne.n	8007890 <_free_r+0x70>
 8007878:	6824      	ldr	r4, [r4, #0]
 800787a:	4421      	add	r1, r4
 800787c:	1854      	adds	r4, r2, r1
 800787e:	42a3      	cmp	r3, r4
 8007880:	6011      	str	r1, [r2, #0]
 8007882:	d1e0      	bne.n	8007846 <_free_r+0x26>
 8007884:	681c      	ldr	r4, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	6053      	str	r3, [r2, #4]
 800788a:	440c      	add	r4, r1
 800788c:	6014      	str	r4, [r2, #0]
 800788e:	e7da      	b.n	8007846 <_free_r+0x26>
 8007890:	d902      	bls.n	8007898 <_free_r+0x78>
 8007892:	230c      	movs	r3, #12
 8007894:	6003      	str	r3, [r0, #0]
 8007896:	e7d6      	b.n	8007846 <_free_r+0x26>
 8007898:	6825      	ldr	r5, [r4, #0]
 800789a:	1961      	adds	r1, r4, r5
 800789c:	428b      	cmp	r3, r1
 800789e:	bf04      	itt	eq
 80078a0:	6819      	ldreq	r1, [r3, #0]
 80078a2:	685b      	ldreq	r3, [r3, #4]
 80078a4:	6063      	str	r3, [r4, #4]
 80078a6:	bf04      	itt	eq
 80078a8:	1949      	addeq	r1, r1, r5
 80078aa:	6021      	streq	r1, [r4, #0]
 80078ac:	6054      	str	r4, [r2, #4]
 80078ae:	e7ca      	b.n	8007846 <_free_r+0x26>
 80078b0:	b003      	add	sp, #12
 80078b2:	bd30      	pop	{r4, r5, pc}
 80078b4:	20000b2c 	.word	0x20000b2c

080078b8 <sbrk_aligned>:
 80078b8:	b570      	push	{r4, r5, r6, lr}
 80078ba:	4e0e      	ldr	r6, [pc, #56]	; (80078f4 <sbrk_aligned+0x3c>)
 80078bc:	460c      	mov	r4, r1
 80078be:	6831      	ldr	r1, [r6, #0]
 80078c0:	4605      	mov	r5, r0
 80078c2:	b911      	cbnz	r1, 80078ca <sbrk_aligned+0x12>
 80078c4:	f000 fba6 	bl	8008014 <_sbrk_r>
 80078c8:	6030      	str	r0, [r6, #0]
 80078ca:	4621      	mov	r1, r4
 80078cc:	4628      	mov	r0, r5
 80078ce:	f000 fba1 	bl	8008014 <_sbrk_r>
 80078d2:	1c43      	adds	r3, r0, #1
 80078d4:	d00a      	beq.n	80078ec <sbrk_aligned+0x34>
 80078d6:	1cc4      	adds	r4, r0, #3
 80078d8:	f024 0403 	bic.w	r4, r4, #3
 80078dc:	42a0      	cmp	r0, r4
 80078de:	d007      	beq.n	80078f0 <sbrk_aligned+0x38>
 80078e0:	1a21      	subs	r1, r4, r0
 80078e2:	4628      	mov	r0, r5
 80078e4:	f000 fb96 	bl	8008014 <_sbrk_r>
 80078e8:	3001      	adds	r0, #1
 80078ea:	d101      	bne.n	80078f0 <sbrk_aligned+0x38>
 80078ec:	f04f 34ff 	mov.w	r4, #4294967295
 80078f0:	4620      	mov	r0, r4
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	20000b30 	.word	0x20000b30

080078f8 <_malloc_r>:
 80078f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078fc:	1ccd      	adds	r5, r1, #3
 80078fe:	f025 0503 	bic.w	r5, r5, #3
 8007902:	3508      	adds	r5, #8
 8007904:	2d0c      	cmp	r5, #12
 8007906:	bf38      	it	cc
 8007908:	250c      	movcc	r5, #12
 800790a:	2d00      	cmp	r5, #0
 800790c:	4607      	mov	r7, r0
 800790e:	db01      	blt.n	8007914 <_malloc_r+0x1c>
 8007910:	42a9      	cmp	r1, r5
 8007912:	d905      	bls.n	8007920 <_malloc_r+0x28>
 8007914:	230c      	movs	r3, #12
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	2600      	movs	r6, #0
 800791a:	4630      	mov	r0, r6
 800791c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007920:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80079f4 <_malloc_r+0xfc>
 8007924:	f000 f868 	bl	80079f8 <__malloc_lock>
 8007928:	f8d8 3000 	ldr.w	r3, [r8]
 800792c:	461c      	mov	r4, r3
 800792e:	bb5c      	cbnz	r4, 8007988 <_malloc_r+0x90>
 8007930:	4629      	mov	r1, r5
 8007932:	4638      	mov	r0, r7
 8007934:	f7ff ffc0 	bl	80078b8 <sbrk_aligned>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	4604      	mov	r4, r0
 800793c:	d155      	bne.n	80079ea <_malloc_r+0xf2>
 800793e:	f8d8 4000 	ldr.w	r4, [r8]
 8007942:	4626      	mov	r6, r4
 8007944:	2e00      	cmp	r6, #0
 8007946:	d145      	bne.n	80079d4 <_malloc_r+0xdc>
 8007948:	2c00      	cmp	r4, #0
 800794a:	d048      	beq.n	80079de <_malloc_r+0xe6>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	4631      	mov	r1, r6
 8007950:	4638      	mov	r0, r7
 8007952:	eb04 0903 	add.w	r9, r4, r3
 8007956:	f000 fb5d 	bl	8008014 <_sbrk_r>
 800795a:	4581      	cmp	r9, r0
 800795c:	d13f      	bne.n	80079de <_malloc_r+0xe6>
 800795e:	6821      	ldr	r1, [r4, #0]
 8007960:	1a6d      	subs	r5, r5, r1
 8007962:	4629      	mov	r1, r5
 8007964:	4638      	mov	r0, r7
 8007966:	f7ff ffa7 	bl	80078b8 <sbrk_aligned>
 800796a:	3001      	adds	r0, #1
 800796c:	d037      	beq.n	80079de <_malloc_r+0xe6>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	442b      	add	r3, r5
 8007972:	6023      	str	r3, [r4, #0]
 8007974:	f8d8 3000 	ldr.w	r3, [r8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d038      	beq.n	80079ee <_malloc_r+0xf6>
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	42a2      	cmp	r2, r4
 8007980:	d12b      	bne.n	80079da <_malloc_r+0xe2>
 8007982:	2200      	movs	r2, #0
 8007984:	605a      	str	r2, [r3, #4]
 8007986:	e00f      	b.n	80079a8 <_malloc_r+0xb0>
 8007988:	6822      	ldr	r2, [r4, #0]
 800798a:	1b52      	subs	r2, r2, r5
 800798c:	d41f      	bmi.n	80079ce <_malloc_r+0xd6>
 800798e:	2a0b      	cmp	r2, #11
 8007990:	d917      	bls.n	80079c2 <_malloc_r+0xca>
 8007992:	1961      	adds	r1, r4, r5
 8007994:	42a3      	cmp	r3, r4
 8007996:	6025      	str	r5, [r4, #0]
 8007998:	bf18      	it	ne
 800799a:	6059      	strne	r1, [r3, #4]
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	bf08      	it	eq
 80079a0:	f8c8 1000 	streq.w	r1, [r8]
 80079a4:	5162      	str	r2, [r4, r5]
 80079a6:	604b      	str	r3, [r1, #4]
 80079a8:	4638      	mov	r0, r7
 80079aa:	f104 060b 	add.w	r6, r4, #11
 80079ae:	f000 f829 	bl	8007a04 <__malloc_unlock>
 80079b2:	f026 0607 	bic.w	r6, r6, #7
 80079b6:	1d23      	adds	r3, r4, #4
 80079b8:	1af2      	subs	r2, r6, r3
 80079ba:	d0ae      	beq.n	800791a <_malloc_r+0x22>
 80079bc:	1b9b      	subs	r3, r3, r6
 80079be:	50a3      	str	r3, [r4, r2]
 80079c0:	e7ab      	b.n	800791a <_malloc_r+0x22>
 80079c2:	42a3      	cmp	r3, r4
 80079c4:	6862      	ldr	r2, [r4, #4]
 80079c6:	d1dd      	bne.n	8007984 <_malloc_r+0x8c>
 80079c8:	f8c8 2000 	str.w	r2, [r8]
 80079cc:	e7ec      	b.n	80079a8 <_malloc_r+0xb0>
 80079ce:	4623      	mov	r3, r4
 80079d0:	6864      	ldr	r4, [r4, #4]
 80079d2:	e7ac      	b.n	800792e <_malloc_r+0x36>
 80079d4:	4634      	mov	r4, r6
 80079d6:	6876      	ldr	r6, [r6, #4]
 80079d8:	e7b4      	b.n	8007944 <_malloc_r+0x4c>
 80079da:	4613      	mov	r3, r2
 80079dc:	e7cc      	b.n	8007978 <_malloc_r+0x80>
 80079de:	230c      	movs	r3, #12
 80079e0:	603b      	str	r3, [r7, #0]
 80079e2:	4638      	mov	r0, r7
 80079e4:	f000 f80e 	bl	8007a04 <__malloc_unlock>
 80079e8:	e797      	b.n	800791a <_malloc_r+0x22>
 80079ea:	6025      	str	r5, [r4, #0]
 80079ec:	e7dc      	b.n	80079a8 <_malloc_r+0xb0>
 80079ee:	605b      	str	r3, [r3, #4]
 80079f0:	deff      	udf	#255	; 0xff
 80079f2:	bf00      	nop
 80079f4:	20000b2c 	.word	0x20000b2c

080079f8 <__malloc_lock>:
 80079f8:	4801      	ldr	r0, [pc, #4]	; (8007a00 <__malloc_lock+0x8>)
 80079fa:	f7ff bf0f 	b.w	800781c <__retarget_lock_acquire_recursive>
 80079fe:	bf00      	nop
 8007a00:	20000b28 	.word	0x20000b28

08007a04 <__malloc_unlock>:
 8007a04:	4801      	ldr	r0, [pc, #4]	; (8007a0c <__malloc_unlock+0x8>)
 8007a06:	f7ff bf0a 	b.w	800781e <__retarget_lock_release_recursive>
 8007a0a:	bf00      	nop
 8007a0c:	20000b28 	.word	0x20000b28

08007a10 <__ssputs_r>:
 8007a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a14:	688e      	ldr	r6, [r1, #8]
 8007a16:	461f      	mov	r7, r3
 8007a18:	42be      	cmp	r6, r7
 8007a1a:	680b      	ldr	r3, [r1, #0]
 8007a1c:	4682      	mov	sl, r0
 8007a1e:	460c      	mov	r4, r1
 8007a20:	4690      	mov	r8, r2
 8007a22:	d82c      	bhi.n	8007a7e <__ssputs_r+0x6e>
 8007a24:	898a      	ldrh	r2, [r1, #12]
 8007a26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a2a:	d026      	beq.n	8007a7a <__ssputs_r+0x6a>
 8007a2c:	6965      	ldr	r5, [r4, #20]
 8007a2e:	6909      	ldr	r1, [r1, #16]
 8007a30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a34:	eba3 0901 	sub.w	r9, r3, r1
 8007a38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a3c:	1c7b      	adds	r3, r7, #1
 8007a3e:	444b      	add	r3, r9
 8007a40:	106d      	asrs	r5, r5, #1
 8007a42:	429d      	cmp	r5, r3
 8007a44:	bf38      	it	cc
 8007a46:	461d      	movcc	r5, r3
 8007a48:	0553      	lsls	r3, r2, #21
 8007a4a:	d527      	bpl.n	8007a9c <__ssputs_r+0x8c>
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	f7ff ff53 	bl	80078f8 <_malloc_r>
 8007a52:	4606      	mov	r6, r0
 8007a54:	b360      	cbz	r0, 8007ab0 <__ssputs_r+0xa0>
 8007a56:	6921      	ldr	r1, [r4, #16]
 8007a58:	464a      	mov	r2, r9
 8007a5a:	f000 faeb 	bl	8008034 <memcpy>
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a68:	81a3      	strh	r3, [r4, #12]
 8007a6a:	6126      	str	r6, [r4, #16]
 8007a6c:	6165      	str	r5, [r4, #20]
 8007a6e:	444e      	add	r6, r9
 8007a70:	eba5 0509 	sub.w	r5, r5, r9
 8007a74:	6026      	str	r6, [r4, #0]
 8007a76:	60a5      	str	r5, [r4, #8]
 8007a78:	463e      	mov	r6, r7
 8007a7a:	42be      	cmp	r6, r7
 8007a7c:	d900      	bls.n	8007a80 <__ssputs_r+0x70>
 8007a7e:	463e      	mov	r6, r7
 8007a80:	6820      	ldr	r0, [r4, #0]
 8007a82:	4632      	mov	r2, r6
 8007a84:	4641      	mov	r1, r8
 8007a86:	f000 faab 	bl	8007fe0 <memmove>
 8007a8a:	68a3      	ldr	r3, [r4, #8]
 8007a8c:	1b9b      	subs	r3, r3, r6
 8007a8e:	60a3      	str	r3, [r4, #8]
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	4433      	add	r3, r6
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	2000      	movs	r0, #0
 8007a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a9c:	462a      	mov	r2, r5
 8007a9e:	f000 fad7 	bl	8008050 <_realloc_r>
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d1e0      	bne.n	8007a6a <__ssputs_r+0x5a>
 8007aa8:	6921      	ldr	r1, [r4, #16]
 8007aaa:	4650      	mov	r0, sl
 8007aac:	f7ff feb8 	bl	8007820 <_free_r>
 8007ab0:	230c      	movs	r3, #12
 8007ab2:	f8ca 3000 	str.w	r3, [sl]
 8007ab6:	89a3      	ldrh	r3, [r4, #12]
 8007ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007abc:	81a3      	strh	r3, [r4, #12]
 8007abe:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac2:	e7e9      	b.n	8007a98 <__ssputs_r+0x88>

08007ac4 <_svfiprintf_r>:
 8007ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac8:	4698      	mov	r8, r3
 8007aca:	898b      	ldrh	r3, [r1, #12]
 8007acc:	061b      	lsls	r3, r3, #24
 8007ace:	b09d      	sub	sp, #116	; 0x74
 8007ad0:	4607      	mov	r7, r0
 8007ad2:	460d      	mov	r5, r1
 8007ad4:	4614      	mov	r4, r2
 8007ad6:	d50e      	bpl.n	8007af6 <_svfiprintf_r+0x32>
 8007ad8:	690b      	ldr	r3, [r1, #16]
 8007ada:	b963      	cbnz	r3, 8007af6 <_svfiprintf_r+0x32>
 8007adc:	2140      	movs	r1, #64	; 0x40
 8007ade:	f7ff ff0b 	bl	80078f8 <_malloc_r>
 8007ae2:	6028      	str	r0, [r5, #0]
 8007ae4:	6128      	str	r0, [r5, #16]
 8007ae6:	b920      	cbnz	r0, 8007af2 <_svfiprintf_r+0x2e>
 8007ae8:	230c      	movs	r3, #12
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	f04f 30ff 	mov.w	r0, #4294967295
 8007af0:	e0d0      	b.n	8007c94 <_svfiprintf_r+0x1d0>
 8007af2:	2340      	movs	r3, #64	; 0x40
 8007af4:	616b      	str	r3, [r5, #20]
 8007af6:	2300      	movs	r3, #0
 8007af8:	9309      	str	r3, [sp, #36]	; 0x24
 8007afa:	2320      	movs	r3, #32
 8007afc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b00:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b04:	2330      	movs	r3, #48	; 0x30
 8007b06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007cac <_svfiprintf_r+0x1e8>
 8007b0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b0e:	f04f 0901 	mov.w	r9, #1
 8007b12:	4623      	mov	r3, r4
 8007b14:	469a      	mov	sl, r3
 8007b16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b1a:	b10a      	cbz	r2, 8007b20 <_svfiprintf_r+0x5c>
 8007b1c:	2a25      	cmp	r2, #37	; 0x25
 8007b1e:	d1f9      	bne.n	8007b14 <_svfiprintf_r+0x50>
 8007b20:	ebba 0b04 	subs.w	fp, sl, r4
 8007b24:	d00b      	beq.n	8007b3e <_svfiprintf_r+0x7a>
 8007b26:	465b      	mov	r3, fp
 8007b28:	4622      	mov	r2, r4
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	f7ff ff6f 	bl	8007a10 <__ssputs_r>
 8007b32:	3001      	adds	r0, #1
 8007b34:	f000 80a9 	beq.w	8007c8a <_svfiprintf_r+0x1c6>
 8007b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b3a:	445a      	add	r2, fp
 8007b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 80a1 	beq.w	8007c8a <_svfiprintf_r+0x1c6>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b52:	f10a 0a01 	add.w	sl, sl, #1
 8007b56:	9304      	str	r3, [sp, #16]
 8007b58:	9307      	str	r3, [sp, #28]
 8007b5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b5e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b60:	4654      	mov	r4, sl
 8007b62:	2205      	movs	r2, #5
 8007b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b68:	4850      	ldr	r0, [pc, #320]	; (8007cac <_svfiprintf_r+0x1e8>)
 8007b6a:	f7f8 fb31 	bl	80001d0 <memchr>
 8007b6e:	9a04      	ldr	r2, [sp, #16]
 8007b70:	b9d8      	cbnz	r0, 8007baa <_svfiprintf_r+0xe6>
 8007b72:	06d0      	lsls	r0, r2, #27
 8007b74:	bf44      	itt	mi
 8007b76:	2320      	movmi	r3, #32
 8007b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b7c:	0711      	lsls	r1, r2, #28
 8007b7e:	bf44      	itt	mi
 8007b80:	232b      	movmi	r3, #43	; 0x2b
 8007b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b86:	f89a 3000 	ldrb.w	r3, [sl]
 8007b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b8c:	d015      	beq.n	8007bba <_svfiprintf_r+0xf6>
 8007b8e:	9a07      	ldr	r2, [sp, #28]
 8007b90:	4654      	mov	r4, sl
 8007b92:	2000      	movs	r0, #0
 8007b94:	f04f 0c0a 	mov.w	ip, #10
 8007b98:	4621      	mov	r1, r4
 8007b9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b9e:	3b30      	subs	r3, #48	; 0x30
 8007ba0:	2b09      	cmp	r3, #9
 8007ba2:	d94d      	bls.n	8007c40 <_svfiprintf_r+0x17c>
 8007ba4:	b1b0      	cbz	r0, 8007bd4 <_svfiprintf_r+0x110>
 8007ba6:	9207      	str	r2, [sp, #28]
 8007ba8:	e014      	b.n	8007bd4 <_svfiprintf_r+0x110>
 8007baa:	eba0 0308 	sub.w	r3, r0, r8
 8007bae:	fa09 f303 	lsl.w	r3, r9, r3
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	9304      	str	r3, [sp, #16]
 8007bb6:	46a2      	mov	sl, r4
 8007bb8:	e7d2      	b.n	8007b60 <_svfiprintf_r+0x9c>
 8007bba:	9b03      	ldr	r3, [sp, #12]
 8007bbc:	1d19      	adds	r1, r3, #4
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	9103      	str	r1, [sp, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bfbb      	ittet	lt
 8007bc6:	425b      	neglt	r3, r3
 8007bc8:	f042 0202 	orrlt.w	r2, r2, #2
 8007bcc:	9307      	strge	r3, [sp, #28]
 8007bce:	9307      	strlt	r3, [sp, #28]
 8007bd0:	bfb8      	it	lt
 8007bd2:	9204      	strlt	r2, [sp, #16]
 8007bd4:	7823      	ldrb	r3, [r4, #0]
 8007bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8007bd8:	d10c      	bne.n	8007bf4 <_svfiprintf_r+0x130>
 8007bda:	7863      	ldrb	r3, [r4, #1]
 8007bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8007bde:	d134      	bne.n	8007c4a <_svfiprintf_r+0x186>
 8007be0:	9b03      	ldr	r3, [sp, #12]
 8007be2:	1d1a      	adds	r2, r3, #4
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	9203      	str	r2, [sp, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	bfb8      	it	lt
 8007bec:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bf0:	3402      	adds	r4, #2
 8007bf2:	9305      	str	r3, [sp, #20]
 8007bf4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007cbc <_svfiprintf_r+0x1f8>
 8007bf8:	7821      	ldrb	r1, [r4, #0]
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	4650      	mov	r0, sl
 8007bfe:	f7f8 fae7 	bl	80001d0 <memchr>
 8007c02:	b138      	cbz	r0, 8007c14 <_svfiprintf_r+0x150>
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	eba0 000a 	sub.w	r0, r0, sl
 8007c0a:	2240      	movs	r2, #64	; 0x40
 8007c0c:	4082      	lsls	r2, r0
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	3401      	adds	r4, #1
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c18:	4825      	ldr	r0, [pc, #148]	; (8007cb0 <_svfiprintf_r+0x1ec>)
 8007c1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c1e:	2206      	movs	r2, #6
 8007c20:	f7f8 fad6 	bl	80001d0 <memchr>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d038      	beq.n	8007c9a <_svfiprintf_r+0x1d6>
 8007c28:	4b22      	ldr	r3, [pc, #136]	; (8007cb4 <_svfiprintf_r+0x1f0>)
 8007c2a:	bb1b      	cbnz	r3, 8007c74 <_svfiprintf_r+0x1b0>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	3307      	adds	r3, #7
 8007c30:	f023 0307 	bic.w	r3, r3, #7
 8007c34:	3308      	adds	r3, #8
 8007c36:	9303      	str	r3, [sp, #12]
 8007c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c3a:	4433      	add	r3, r6
 8007c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c3e:	e768      	b.n	8007b12 <_svfiprintf_r+0x4e>
 8007c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c44:	460c      	mov	r4, r1
 8007c46:	2001      	movs	r0, #1
 8007c48:	e7a6      	b.n	8007b98 <_svfiprintf_r+0xd4>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	3401      	adds	r4, #1
 8007c4e:	9305      	str	r3, [sp, #20]
 8007c50:	4619      	mov	r1, r3
 8007c52:	f04f 0c0a 	mov.w	ip, #10
 8007c56:	4620      	mov	r0, r4
 8007c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c5c:	3a30      	subs	r2, #48	; 0x30
 8007c5e:	2a09      	cmp	r2, #9
 8007c60:	d903      	bls.n	8007c6a <_svfiprintf_r+0x1a6>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0c6      	beq.n	8007bf4 <_svfiprintf_r+0x130>
 8007c66:	9105      	str	r1, [sp, #20]
 8007c68:	e7c4      	b.n	8007bf4 <_svfiprintf_r+0x130>
 8007c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c6e:	4604      	mov	r4, r0
 8007c70:	2301      	movs	r3, #1
 8007c72:	e7f0      	b.n	8007c56 <_svfiprintf_r+0x192>
 8007c74:	ab03      	add	r3, sp, #12
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	462a      	mov	r2, r5
 8007c7a:	4b0f      	ldr	r3, [pc, #60]	; (8007cb8 <_svfiprintf_r+0x1f4>)
 8007c7c:	a904      	add	r1, sp, #16
 8007c7e:	4638      	mov	r0, r7
 8007c80:	f3af 8000 	nop.w
 8007c84:	1c42      	adds	r2, r0, #1
 8007c86:	4606      	mov	r6, r0
 8007c88:	d1d6      	bne.n	8007c38 <_svfiprintf_r+0x174>
 8007c8a:	89ab      	ldrh	r3, [r5, #12]
 8007c8c:	065b      	lsls	r3, r3, #25
 8007c8e:	f53f af2d 	bmi.w	8007aec <_svfiprintf_r+0x28>
 8007c92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c94:	b01d      	add	sp, #116	; 0x74
 8007c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c9a:	ab03      	add	r3, sp, #12
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	462a      	mov	r2, r5
 8007ca0:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <_svfiprintf_r+0x1f4>)
 8007ca2:	a904      	add	r1, sp, #16
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	f000 f879 	bl	8007d9c <_printf_i>
 8007caa:	e7eb      	b.n	8007c84 <_svfiprintf_r+0x1c0>
 8007cac:	0800b0bc 	.word	0x0800b0bc
 8007cb0:	0800b0c6 	.word	0x0800b0c6
 8007cb4:	00000000 	.word	0x00000000
 8007cb8:	08007a11 	.word	0x08007a11
 8007cbc:	0800b0c2 	.word	0x0800b0c2

08007cc0 <_printf_common>:
 8007cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc4:	4616      	mov	r6, r2
 8007cc6:	4699      	mov	r9, r3
 8007cc8:	688a      	ldr	r2, [r1, #8]
 8007cca:	690b      	ldr	r3, [r1, #16]
 8007ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	bfb8      	it	lt
 8007cd4:	4613      	movlt	r3, r2
 8007cd6:	6033      	str	r3, [r6, #0]
 8007cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cdc:	4607      	mov	r7, r0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	b10a      	cbz	r2, 8007ce6 <_printf_common+0x26>
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	6033      	str	r3, [r6, #0]
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	0699      	lsls	r1, r3, #26
 8007cea:	bf42      	ittt	mi
 8007cec:	6833      	ldrmi	r3, [r6, #0]
 8007cee:	3302      	addmi	r3, #2
 8007cf0:	6033      	strmi	r3, [r6, #0]
 8007cf2:	6825      	ldr	r5, [r4, #0]
 8007cf4:	f015 0506 	ands.w	r5, r5, #6
 8007cf8:	d106      	bne.n	8007d08 <_printf_common+0x48>
 8007cfa:	f104 0a19 	add.w	sl, r4, #25
 8007cfe:	68e3      	ldr	r3, [r4, #12]
 8007d00:	6832      	ldr	r2, [r6, #0]
 8007d02:	1a9b      	subs	r3, r3, r2
 8007d04:	42ab      	cmp	r3, r5
 8007d06:	dc26      	bgt.n	8007d56 <_printf_common+0x96>
 8007d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d0c:	1e13      	subs	r3, r2, #0
 8007d0e:	6822      	ldr	r2, [r4, #0]
 8007d10:	bf18      	it	ne
 8007d12:	2301      	movne	r3, #1
 8007d14:	0692      	lsls	r2, r2, #26
 8007d16:	d42b      	bmi.n	8007d70 <_printf_common+0xb0>
 8007d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	4638      	mov	r0, r7
 8007d20:	47c0      	blx	r8
 8007d22:	3001      	adds	r0, #1
 8007d24:	d01e      	beq.n	8007d64 <_printf_common+0xa4>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	6922      	ldr	r2, [r4, #16]
 8007d2a:	f003 0306 	and.w	r3, r3, #6
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	bf02      	ittt	eq
 8007d32:	68e5      	ldreq	r5, [r4, #12]
 8007d34:	6833      	ldreq	r3, [r6, #0]
 8007d36:	1aed      	subeq	r5, r5, r3
 8007d38:	68a3      	ldr	r3, [r4, #8]
 8007d3a:	bf0c      	ite	eq
 8007d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d40:	2500      	movne	r5, #0
 8007d42:	4293      	cmp	r3, r2
 8007d44:	bfc4      	itt	gt
 8007d46:	1a9b      	subgt	r3, r3, r2
 8007d48:	18ed      	addgt	r5, r5, r3
 8007d4a:	2600      	movs	r6, #0
 8007d4c:	341a      	adds	r4, #26
 8007d4e:	42b5      	cmp	r5, r6
 8007d50:	d11a      	bne.n	8007d88 <_printf_common+0xc8>
 8007d52:	2000      	movs	r0, #0
 8007d54:	e008      	b.n	8007d68 <_printf_common+0xa8>
 8007d56:	2301      	movs	r3, #1
 8007d58:	4652      	mov	r2, sl
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	47c0      	blx	r8
 8007d60:	3001      	adds	r0, #1
 8007d62:	d103      	bne.n	8007d6c <_printf_common+0xac>
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295
 8007d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6c:	3501      	adds	r5, #1
 8007d6e:	e7c6      	b.n	8007cfe <_printf_common+0x3e>
 8007d70:	18e1      	adds	r1, r4, r3
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	2030      	movs	r0, #48	; 0x30
 8007d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d7a:	4422      	add	r2, r4
 8007d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d84:	3302      	adds	r3, #2
 8007d86:	e7c7      	b.n	8007d18 <_printf_common+0x58>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	4622      	mov	r2, r4
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	4638      	mov	r0, r7
 8007d90:	47c0      	blx	r8
 8007d92:	3001      	adds	r0, #1
 8007d94:	d0e6      	beq.n	8007d64 <_printf_common+0xa4>
 8007d96:	3601      	adds	r6, #1
 8007d98:	e7d9      	b.n	8007d4e <_printf_common+0x8e>
	...

08007d9c <_printf_i>:
 8007d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007da0:	7e0f      	ldrb	r7, [r1, #24]
 8007da2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007da4:	2f78      	cmp	r7, #120	; 0x78
 8007da6:	4691      	mov	r9, r2
 8007da8:	4680      	mov	r8, r0
 8007daa:	460c      	mov	r4, r1
 8007dac:	469a      	mov	sl, r3
 8007dae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007db2:	d807      	bhi.n	8007dc4 <_printf_i+0x28>
 8007db4:	2f62      	cmp	r7, #98	; 0x62
 8007db6:	d80a      	bhi.n	8007dce <_printf_i+0x32>
 8007db8:	2f00      	cmp	r7, #0
 8007dba:	f000 80d4 	beq.w	8007f66 <_printf_i+0x1ca>
 8007dbe:	2f58      	cmp	r7, #88	; 0x58
 8007dc0:	f000 80c0 	beq.w	8007f44 <_printf_i+0x1a8>
 8007dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007dcc:	e03a      	b.n	8007e44 <_printf_i+0xa8>
 8007dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dd2:	2b15      	cmp	r3, #21
 8007dd4:	d8f6      	bhi.n	8007dc4 <_printf_i+0x28>
 8007dd6:	a101      	add	r1, pc, #4	; (adr r1, 8007ddc <_printf_i+0x40>)
 8007dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ddc:	08007e35 	.word	0x08007e35
 8007de0:	08007e49 	.word	0x08007e49
 8007de4:	08007dc5 	.word	0x08007dc5
 8007de8:	08007dc5 	.word	0x08007dc5
 8007dec:	08007dc5 	.word	0x08007dc5
 8007df0:	08007dc5 	.word	0x08007dc5
 8007df4:	08007e49 	.word	0x08007e49
 8007df8:	08007dc5 	.word	0x08007dc5
 8007dfc:	08007dc5 	.word	0x08007dc5
 8007e00:	08007dc5 	.word	0x08007dc5
 8007e04:	08007dc5 	.word	0x08007dc5
 8007e08:	08007f4d 	.word	0x08007f4d
 8007e0c:	08007e75 	.word	0x08007e75
 8007e10:	08007f07 	.word	0x08007f07
 8007e14:	08007dc5 	.word	0x08007dc5
 8007e18:	08007dc5 	.word	0x08007dc5
 8007e1c:	08007f6f 	.word	0x08007f6f
 8007e20:	08007dc5 	.word	0x08007dc5
 8007e24:	08007e75 	.word	0x08007e75
 8007e28:	08007dc5 	.word	0x08007dc5
 8007e2c:	08007dc5 	.word	0x08007dc5
 8007e30:	08007f0f 	.word	0x08007f0f
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	1d1a      	adds	r2, r3, #4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	602a      	str	r2, [r5, #0]
 8007e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e44:	2301      	movs	r3, #1
 8007e46:	e09f      	b.n	8007f88 <_printf_i+0x1ec>
 8007e48:	6820      	ldr	r0, [r4, #0]
 8007e4a:	682b      	ldr	r3, [r5, #0]
 8007e4c:	0607      	lsls	r7, r0, #24
 8007e4e:	f103 0104 	add.w	r1, r3, #4
 8007e52:	6029      	str	r1, [r5, #0]
 8007e54:	d501      	bpl.n	8007e5a <_printf_i+0xbe>
 8007e56:	681e      	ldr	r6, [r3, #0]
 8007e58:	e003      	b.n	8007e62 <_printf_i+0xc6>
 8007e5a:	0646      	lsls	r6, r0, #25
 8007e5c:	d5fb      	bpl.n	8007e56 <_printf_i+0xba>
 8007e5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e62:	2e00      	cmp	r6, #0
 8007e64:	da03      	bge.n	8007e6e <_printf_i+0xd2>
 8007e66:	232d      	movs	r3, #45	; 0x2d
 8007e68:	4276      	negs	r6, r6
 8007e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e6e:	485a      	ldr	r0, [pc, #360]	; (8007fd8 <_printf_i+0x23c>)
 8007e70:	230a      	movs	r3, #10
 8007e72:	e012      	b.n	8007e9a <_printf_i+0xfe>
 8007e74:	682b      	ldr	r3, [r5, #0]
 8007e76:	6820      	ldr	r0, [r4, #0]
 8007e78:	1d19      	adds	r1, r3, #4
 8007e7a:	6029      	str	r1, [r5, #0]
 8007e7c:	0605      	lsls	r5, r0, #24
 8007e7e:	d501      	bpl.n	8007e84 <_printf_i+0xe8>
 8007e80:	681e      	ldr	r6, [r3, #0]
 8007e82:	e002      	b.n	8007e8a <_printf_i+0xee>
 8007e84:	0641      	lsls	r1, r0, #25
 8007e86:	d5fb      	bpl.n	8007e80 <_printf_i+0xe4>
 8007e88:	881e      	ldrh	r6, [r3, #0]
 8007e8a:	4853      	ldr	r0, [pc, #332]	; (8007fd8 <_printf_i+0x23c>)
 8007e8c:	2f6f      	cmp	r7, #111	; 0x6f
 8007e8e:	bf0c      	ite	eq
 8007e90:	2308      	moveq	r3, #8
 8007e92:	230a      	movne	r3, #10
 8007e94:	2100      	movs	r1, #0
 8007e96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e9a:	6865      	ldr	r5, [r4, #4]
 8007e9c:	60a5      	str	r5, [r4, #8]
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	bfa2      	ittt	ge
 8007ea2:	6821      	ldrge	r1, [r4, #0]
 8007ea4:	f021 0104 	bicge.w	r1, r1, #4
 8007ea8:	6021      	strge	r1, [r4, #0]
 8007eaa:	b90e      	cbnz	r6, 8007eb0 <_printf_i+0x114>
 8007eac:	2d00      	cmp	r5, #0
 8007eae:	d04b      	beq.n	8007f48 <_printf_i+0x1ac>
 8007eb0:	4615      	mov	r5, r2
 8007eb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007eb6:	fb03 6711 	mls	r7, r3, r1, r6
 8007eba:	5dc7      	ldrb	r7, [r0, r7]
 8007ebc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ec0:	4637      	mov	r7, r6
 8007ec2:	42bb      	cmp	r3, r7
 8007ec4:	460e      	mov	r6, r1
 8007ec6:	d9f4      	bls.n	8007eb2 <_printf_i+0x116>
 8007ec8:	2b08      	cmp	r3, #8
 8007eca:	d10b      	bne.n	8007ee4 <_printf_i+0x148>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	07de      	lsls	r6, r3, #31
 8007ed0:	d508      	bpl.n	8007ee4 <_printf_i+0x148>
 8007ed2:	6923      	ldr	r3, [r4, #16]
 8007ed4:	6861      	ldr	r1, [r4, #4]
 8007ed6:	4299      	cmp	r1, r3
 8007ed8:	bfde      	ittt	le
 8007eda:	2330      	movle	r3, #48	; 0x30
 8007edc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ee0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ee4:	1b52      	subs	r2, r2, r5
 8007ee6:	6122      	str	r2, [r4, #16]
 8007ee8:	f8cd a000 	str.w	sl, [sp]
 8007eec:	464b      	mov	r3, r9
 8007eee:	aa03      	add	r2, sp, #12
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	4640      	mov	r0, r8
 8007ef4:	f7ff fee4 	bl	8007cc0 <_printf_common>
 8007ef8:	3001      	adds	r0, #1
 8007efa:	d14a      	bne.n	8007f92 <_printf_i+0x1f6>
 8007efc:	f04f 30ff 	mov.w	r0, #4294967295
 8007f00:	b004      	add	sp, #16
 8007f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	f043 0320 	orr.w	r3, r3, #32
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	4833      	ldr	r0, [pc, #204]	; (8007fdc <_printf_i+0x240>)
 8007f10:	2778      	movs	r7, #120	; 0x78
 8007f12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	6829      	ldr	r1, [r5, #0]
 8007f1a:	061f      	lsls	r7, r3, #24
 8007f1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f20:	d402      	bmi.n	8007f28 <_printf_i+0x18c>
 8007f22:	065f      	lsls	r7, r3, #25
 8007f24:	bf48      	it	mi
 8007f26:	b2b6      	uxthmi	r6, r6
 8007f28:	07df      	lsls	r7, r3, #31
 8007f2a:	bf48      	it	mi
 8007f2c:	f043 0320 	orrmi.w	r3, r3, #32
 8007f30:	6029      	str	r1, [r5, #0]
 8007f32:	bf48      	it	mi
 8007f34:	6023      	strmi	r3, [r4, #0]
 8007f36:	b91e      	cbnz	r6, 8007f40 <_printf_i+0x1a4>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	f023 0320 	bic.w	r3, r3, #32
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	2310      	movs	r3, #16
 8007f42:	e7a7      	b.n	8007e94 <_printf_i+0xf8>
 8007f44:	4824      	ldr	r0, [pc, #144]	; (8007fd8 <_printf_i+0x23c>)
 8007f46:	e7e4      	b.n	8007f12 <_printf_i+0x176>
 8007f48:	4615      	mov	r5, r2
 8007f4a:	e7bd      	b.n	8007ec8 <_printf_i+0x12c>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	6826      	ldr	r6, [r4, #0]
 8007f50:	6961      	ldr	r1, [r4, #20]
 8007f52:	1d18      	adds	r0, r3, #4
 8007f54:	6028      	str	r0, [r5, #0]
 8007f56:	0635      	lsls	r5, r6, #24
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	d501      	bpl.n	8007f60 <_printf_i+0x1c4>
 8007f5c:	6019      	str	r1, [r3, #0]
 8007f5e:	e002      	b.n	8007f66 <_printf_i+0x1ca>
 8007f60:	0670      	lsls	r0, r6, #25
 8007f62:	d5fb      	bpl.n	8007f5c <_printf_i+0x1c0>
 8007f64:	8019      	strh	r1, [r3, #0]
 8007f66:	2300      	movs	r3, #0
 8007f68:	6123      	str	r3, [r4, #16]
 8007f6a:	4615      	mov	r5, r2
 8007f6c:	e7bc      	b.n	8007ee8 <_printf_i+0x14c>
 8007f6e:	682b      	ldr	r3, [r5, #0]
 8007f70:	1d1a      	adds	r2, r3, #4
 8007f72:	602a      	str	r2, [r5, #0]
 8007f74:	681d      	ldr	r5, [r3, #0]
 8007f76:	6862      	ldr	r2, [r4, #4]
 8007f78:	2100      	movs	r1, #0
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f7f8 f928 	bl	80001d0 <memchr>
 8007f80:	b108      	cbz	r0, 8007f86 <_printf_i+0x1ea>
 8007f82:	1b40      	subs	r0, r0, r5
 8007f84:	6060      	str	r0, [r4, #4]
 8007f86:	6863      	ldr	r3, [r4, #4]
 8007f88:	6123      	str	r3, [r4, #16]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f90:	e7aa      	b.n	8007ee8 <_printf_i+0x14c>
 8007f92:	6923      	ldr	r3, [r4, #16]
 8007f94:	462a      	mov	r2, r5
 8007f96:	4649      	mov	r1, r9
 8007f98:	4640      	mov	r0, r8
 8007f9a:	47d0      	blx	sl
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d0ad      	beq.n	8007efc <_printf_i+0x160>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	079b      	lsls	r3, r3, #30
 8007fa4:	d413      	bmi.n	8007fce <_printf_i+0x232>
 8007fa6:	68e0      	ldr	r0, [r4, #12]
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	4298      	cmp	r0, r3
 8007fac:	bfb8      	it	lt
 8007fae:	4618      	movlt	r0, r3
 8007fb0:	e7a6      	b.n	8007f00 <_printf_i+0x164>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	4632      	mov	r2, r6
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	4640      	mov	r0, r8
 8007fba:	47d0      	blx	sl
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	d09d      	beq.n	8007efc <_printf_i+0x160>
 8007fc0:	3501      	adds	r5, #1
 8007fc2:	68e3      	ldr	r3, [r4, #12]
 8007fc4:	9903      	ldr	r1, [sp, #12]
 8007fc6:	1a5b      	subs	r3, r3, r1
 8007fc8:	42ab      	cmp	r3, r5
 8007fca:	dcf2      	bgt.n	8007fb2 <_printf_i+0x216>
 8007fcc:	e7eb      	b.n	8007fa6 <_printf_i+0x20a>
 8007fce:	2500      	movs	r5, #0
 8007fd0:	f104 0619 	add.w	r6, r4, #25
 8007fd4:	e7f5      	b.n	8007fc2 <_printf_i+0x226>
 8007fd6:	bf00      	nop
 8007fd8:	0800b0cd 	.word	0x0800b0cd
 8007fdc:	0800b0de 	.word	0x0800b0de

08007fe0 <memmove>:
 8007fe0:	4288      	cmp	r0, r1
 8007fe2:	b510      	push	{r4, lr}
 8007fe4:	eb01 0402 	add.w	r4, r1, r2
 8007fe8:	d902      	bls.n	8007ff0 <memmove+0x10>
 8007fea:	4284      	cmp	r4, r0
 8007fec:	4623      	mov	r3, r4
 8007fee:	d807      	bhi.n	8008000 <memmove+0x20>
 8007ff0:	1e43      	subs	r3, r0, #1
 8007ff2:	42a1      	cmp	r1, r4
 8007ff4:	d008      	beq.n	8008008 <memmove+0x28>
 8007ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ffa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ffe:	e7f8      	b.n	8007ff2 <memmove+0x12>
 8008000:	4402      	add	r2, r0
 8008002:	4601      	mov	r1, r0
 8008004:	428a      	cmp	r2, r1
 8008006:	d100      	bne.n	800800a <memmove+0x2a>
 8008008:	bd10      	pop	{r4, pc}
 800800a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800800e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008012:	e7f7      	b.n	8008004 <memmove+0x24>

08008014 <_sbrk_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4d06      	ldr	r5, [pc, #24]	; (8008030 <_sbrk_r+0x1c>)
 8008018:	2300      	movs	r3, #0
 800801a:	4604      	mov	r4, r0
 800801c:	4608      	mov	r0, r1
 800801e:	602b      	str	r3, [r5, #0]
 8008020:	f7fa fdd0 	bl	8002bc4 <_sbrk>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	d102      	bne.n	800802e <_sbrk_r+0x1a>
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	b103      	cbz	r3, 800802e <_sbrk_r+0x1a>
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	20000b24 	.word	0x20000b24

08008034 <memcpy>:
 8008034:	440a      	add	r2, r1
 8008036:	4291      	cmp	r1, r2
 8008038:	f100 33ff 	add.w	r3, r0, #4294967295
 800803c:	d100      	bne.n	8008040 <memcpy+0xc>
 800803e:	4770      	bx	lr
 8008040:	b510      	push	{r4, lr}
 8008042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800804a:	4291      	cmp	r1, r2
 800804c:	d1f9      	bne.n	8008042 <memcpy+0xe>
 800804e:	bd10      	pop	{r4, pc}

08008050 <_realloc_r>:
 8008050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008054:	4680      	mov	r8, r0
 8008056:	4614      	mov	r4, r2
 8008058:	460e      	mov	r6, r1
 800805a:	b921      	cbnz	r1, 8008066 <_realloc_r+0x16>
 800805c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008060:	4611      	mov	r1, r2
 8008062:	f7ff bc49 	b.w	80078f8 <_malloc_r>
 8008066:	b92a      	cbnz	r2, 8008074 <_realloc_r+0x24>
 8008068:	f7ff fbda 	bl	8007820 <_free_r>
 800806c:	4625      	mov	r5, r4
 800806e:	4628      	mov	r0, r5
 8008070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008074:	f000 f81b 	bl	80080ae <_malloc_usable_size_r>
 8008078:	4284      	cmp	r4, r0
 800807a:	4607      	mov	r7, r0
 800807c:	d802      	bhi.n	8008084 <_realloc_r+0x34>
 800807e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008082:	d812      	bhi.n	80080aa <_realloc_r+0x5a>
 8008084:	4621      	mov	r1, r4
 8008086:	4640      	mov	r0, r8
 8008088:	f7ff fc36 	bl	80078f8 <_malloc_r>
 800808c:	4605      	mov	r5, r0
 800808e:	2800      	cmp	r0, #0
 8008090:	d0ed      	beq.n	800806e <_realloc_r+0x1e>
 8008092:	42bc      	cmp	r4, r7
 8008094:	4622      	mov	r2, r4
 8008096:	4631      	mov	r1, r6
 8008098:	bf28      	it	cs
 800809a:	463a      	movcs	r2, r7
 800809c:	f7ff ffca 	bl	8008034 <memcpy>
 80080a0:	4631      	mov	r1, r6
 80080a2:	4640      	mov	r0, r8
 80080a4:	f7ff fbbc 	bl	8007820 <_free_r>
 80080a8:	e7e1      	b.n	800806e <_realloc_r+0x1e>
 80080aa:	4635      	mov	r5, r6
 80080ac:	e7df      	b.n	800806e <_realloc_r+0x1e>

080080ae <_malloc_usable_size_r>:
 80080ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080b2:	1f18      	subs	r0, r3, #4
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	bfbc      	itt	lt
 80080b8:	580b      	ldrlt	r3, [r1, r0]
 80080ba:	18c0      	addlt	r0, r0, r3
 80080bc:	4770      	bx	lr
	...

080080c0 <_init>:
 80080c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c2:	bf00      	nop
 80080c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c6:	bc08      	pop	{r3}
 80080c8:	469e      	mov	lr, r3
 80080ca:	4770      	bx	lr

080080cc <_fini>:
 80080cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ce:	bf00      	nop
 80080d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d2:	bc08      	pop	{r3}
 80080d4:	469e      	mov	lr, r3
 80080d6:	4770      	bx	lr
