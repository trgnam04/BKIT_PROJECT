
Modbus_Project_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e64  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000302c  08007fec  08007fec  00008fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b018  0800b018  0000d214  2**0
                  CONTENTS
  4 .ARM          00000008  0800b018  0800b018  0000c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b020  0800b020  0000d214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b020  0800b020  0000c020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b024  0800b024  0000c024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800b028  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d214  2**0
                  CONTENTS
 10 .bss          0000058c  20000214  20000214  0000d214  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007a0  200007a0  0000d214  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ac68  00000000  00000000  0000d244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004667  00000000  00000000  00027eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  0002c518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001220  00000000  00000000  0002dc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026561  00000000  00000000  0002eea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020d0b  00000000  00000000  00055401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dff0e  00000000  00000000  0007610c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015601a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006104  00000000  00000000  00156060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0015c164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000214 	.word	0x20000214
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007fd4 	.word	0x08007fd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000218 	.word	0x20000218
 80001c4:	08007fd4 	.word	0x08007fd4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <InitSlave>:
#include "lcd.h"

Slave_Device BKIT01;


void InitSlave(Slave_Device* hDev){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	hDev->signal = IDLE;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	705a      	strb	r2, [r3, #1]
	hDev->subsignal.s = 0;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
	hDev->Address = SLAVE_ADDRESS;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	731a      	strb	r2, [r3, #12]
	memset(hDev->Register, 0, sizeof(hDev->Register));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3302      	adds	r3, #2
 8000d12:	220a      	movs	r2, #10
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f007 f930 	bl	8007f7c <memset>
	Modbus_Init(&slave, &huart3);
 8000d1c:	4903      	ldr	r1, [pc, #12]	@ (8000d2c <InitSlave+0x38>)
 8000d1e:	4804      	ldr	r0, [pc, #16]	@ (8000d30 <InitSlave+0x3c>)
 8000d20:	f001 fd9c 	bl	800285c <Modbus_Init>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000754 	.word	0x20000754
 8000d30:	2000039c 	.word	0x2000039c

08000d34 <CommandParser_handler>:

void CommandParser_handler(Slave_Device* hDev){
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	switch(slave.Rx_buf[1]){
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <CommandParser_handler+0x7c>)
 8000d3e:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 8000d42:	3b01      	subs	r3, #1
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d82d      	bhi.n	8000da4 <CommandParser_handler+0x70>
 8000d48:	a201      	add	r2, pc, #4	@ (adr r2, 8000d50 <CommandParser_handler+0x1c>)
 8000d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4e:	bf00      	nop
 8000d50:	08000da1 	.word	0x08000da1
 8000d54:	08000da1 	.word	0x08000da1
 8000d58:	08000d91 	.word	0x08000d91
 8000d5c:	08000da1 	.word	0x08000da1
 8000d60:	08000da1 	.word	0x08000da1
 8000d64:	08000da1 	.word	0x08000da1
 8000d68:	08000da5 	.word	0x08000da5
 8000d6c:	08000da5 	.word	0x08000da5
 8000d70:	08000da5 	.word	0x08000da5
 8000d74:	08000da5 	.word	0x08000da5
 8000d78:	08000da5 	.word	0x08000da5
 8000d7c:	08000da5 	.word	0x08000da5
 8000d80:	08000da5 	.word	0x08000da5
 8000d84:	08000da5 	.word	0x08000da5
 8000d88:	08000da1 	.word	0x08000da1
 8000d8c:	08000d99 	.word	0x08000d99
	}
	case READ_DISCRETE_INPUT:{
		break;
	}
	case READ_HOLDING_REGISTER:{
		hDev->signal = READ_MULTIPLE_HOLDING_REGISTER_HANDLER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2203      	movs	r2, #3
 8000d94:	705a      	strb	r2, [r3, #1]
		break;
 8000d96:	e004      	b.n	8000da2 <CommandParser_handler+0x6e>
	}
	case WRITE_MULTIPLE_COIL:{
		break;
	}
	case WRITE_MULTIPLE_HOLDING_REGISTER:{
		hDev->signal = READ_MULTIPLE_HOLDING_REGISTER_HANDLER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	705a      	strb	r2, [r3, #1]
		break;
 8000d9e:	e000      	b.n	8000da2 <CommandParser_handler+0x6e>
		break;
 8000da0:	bf00      	nop
	}
	}
	return;
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
}
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	2000039c 	.word	0x2000039c

08000db4 <splitFloat>:

void splitFloat(float input, uint8_t *integerPart, uint8_t *decimalPart) {
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	ed87 0a03 	vstr	s0, [r7, #12]
 8000dbe:	60b8      	str	r0, [r7, #8]
 8000dc0:	6079      	str	r1, [r7, #4]
    // Lấy phần nguyên
    *integerPart = (uint8_t)input;
 8000dc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dca:	edc7 7a00 	vstr	s15, [r7]
 8000dce:	783b      	ldrb	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	701a      	strb	r2, [r3, #0]

    // Lấy phần thập phân
    float fractional = input - *integerPart; // Tính phần thập phân
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	ee07 3a90 	vmov	s15, r3
 8000dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dea:	edc7 7a05 	vstr	s15, [r7, #20]
    *decimalPart = (uint8_t)(fractional * 100); // Chuyển thành số nguyên trong khoảng 0-99
 8000dee:	edd7 7a05 	vldr	s15, [r7, #20]
 8000df2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000e18 <splitFloat+0x64>
 8000df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dfe:	edc7 7a00 	vstr	s15, [r7]
 8000e02:	783b      	ldrb	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	701a      	strb	r2, [r3, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	42c80000 	.word	0x42c80000

08000e1c <splitUint16>:

void splitUint16(uint16_t input, uint8_t *higherByte, uint8_t *lowerByte) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	81fb      	strh	r3, [r7, #14]
    *higherByte = (input >> 8) & 0xFF; // Lấy 8 bit cao
 8000e2a:	89fb      	ldrh	r3, [r7, #14]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	701a      	strb	r2, [r3, #0]
    *lowerByte = input & 0xFF;        // Lấy 8 bit thấp
 8000e36:	89fb      	ldrh	r3, [r7, #14]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	701a      	strb	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <Read_multiple_holding_register_handler>:


void Read_multiple_holding_register_handler(Slave_Device* hDev){
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	6078      	str	r0, [r7, #4]
	uint16_t startReg = (uint16_t)(slave.Rx_buf[2]) << 8 | (uint16_t)(slave.Rx_buf[3]);
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <Read_multiple_holding_register_handler+0x6c>)
 8000e56:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	4b16      	ldr	r3, [pc, #88]	@ (8000eb8 <Read_multiple_holding_register_handler+0x6c>)
 8000e60:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	81fb      	strh	r3, [r7, #14]
	uint16_t numberOfReg = (uint16_t)(slave.Rx_buf[4]) << 8 | (uint16_t)(slave.Rx_buf[5]);
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <Read_multiple_holding_register_handler+0x6c>)
 8000e6e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	b21a      	sxth	r2, r3
 8000e76:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <Read_multiple_holding_register_handler+0x6c>)
 8000e78:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	81bb      	strh	r3, [r7, #12]
	Modbus_Transmit_Slave(&slave, hDev->Address, slave.Rx_buf[1], &hDev->Register[startReg], numberOfReg * 2, 100);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7b19      	ldrb	r1, [r3, #12]
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <Read_multiple_holding_register_handler+0x6c>)
 8000e8a:	f893 0109 	ldrb.w	r0, [r3, #265]	@ 0x109
 8000e8e:	89fb      	ldrh	r3, [r7, #14]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	1c9a      	adds	r2, r3, #2
 8000e96:	89bb      	ldrh	r3, [r7, #12]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2464      	movs	r4, #100	@ 0x64
 8000ea0:	9401      	str	r4, [sp, #4]
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	4803      	ldr	r0, [pc, #12]	@ (8000eb8 <Read_multiple_holding_register_handler+0x6c>)
 8000eaa:	f001 fc2a 	bl	8002702 <Modbus_Transmit_Slave>
	return;
 8000eae:	bf00      	nop
}
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd90      	pop	{r4, r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000039c 	.word	0x2000039c

08000ebc <Read_single_register_handler>:

void Read_single_register_handler(Slave_Device* hDev){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	6078      	str	r0, [r7, #4]
	uint8_t data[3];
	data[0] = 3;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	733b      	strb	r3, [r7, #12]
	data[1] = hDev->Register[slave.Rx_buf[2]];
 8000ec8:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <Read_single_register_handler+0x50>)
 8000eca:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	789b      	ldrb	r3, [r3, #2]
 8000ed6:	737b      	strb	r3, [r7, #13]
	data[2] = hDev->Register[slave.Rx_buf[2] + 1];
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <Read_single_register_handler+0x50>)
 8000eda:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8000ede:	3301      	adds	r3, #1
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	789b      	ldrb	r3, [r3, #2]
 8000ee6:	73bb      	strb	r3, [r7, #14]
	Modbus_Transmit_Slave(&slave, hDev->Address, slave.Rx_buf[1], data, 3, 100);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7b19      	ldrb	r1, [r3, #12]
 8000eec:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <Read_single_register_handler+0x50>)
 8000eee:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	2064      	movs	r0, #100	@ 0x64
 8000ef8:	9001      	str	r0, [sp, #4]
 8000efa:	2003      	movs	r0, #3
 8000efc:	9000      	str	r0, [sp, #0]
 8000efe:	4803      	ldr	r0, [pc, #12]	@ (8000f0c <Read_single_register_handler+0x50>)
 8000f00:	f001 fbff 	bl	8002702 <Modbus_Transmit_Slave>
	return;
 8000f04:	bf00      	nop
}
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000039c 	.word	0x2000039c

08000f10 <ReadData>:

static void ReadData(Slave_Device* hDev){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	float tempCur = sensor_get_current();
 8000f18:	f001 fd42 	bl	80029a0 <sensor_get_current>
 8000f1c:	ed87 0a05 	vstr	s0, [r7, #20]
	uint16_t tempLt = sensor_get_light();
 8000f20:	f001 fce8 	bl	80028f4 <sensor_get_light>
 8000f24:	4603      	mov	r3, r0
 8000f26:	827b      	strh	r3, [r7, #18]
	uint16_t tempPt =sensor_get_potentiometer();
 8000f28:	f001 fcf0 	bl	800290c <sensor_get_potentiometer>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	823b      	strh	r3, [r7, #16]
	float tempT = sensor_get_temperature();
 8000f30:	f001 fd92 	bl	8002a58 <sensor_get_temperature>
 8000f34:	ed87 0a03 	vstr	s0, [r7, #12]
	float tempVol = sensor_get_voltage();
 8000f38:	f001 fcf6 	bl	8002928 <sensor_get_voltage>
 8000f3c:	ed87 0a02 	vstr	s0, [r7, #8]

	// Current
	splitFloat(tempCur, &hDev->Register[CURRENT_REGISTER_ADDRESS], &hDev->Register[CURRENT_REGISTER_ADDRESS + 1]);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	1d9a      	adds	r2, r3, #6
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3307      	adds	r3, #7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f50:	f7ff ff30 	bl	8000db4 <splitFloat>
	// Temperature
	splitFloat(tempT, &hDev->Register[TEMPERATURE_REGISTER_ADDRESS], &hDev->Register[TEMPERATURE_REGISTER_ADDRESS + 1]);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	1c9a      	adds	r2, r3, #2
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3303      	adds	r3, #3
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4610      	mov	r0, r2
 8000f60:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f64:	f7ff ff26 	bl	8000db4 <splitFloat>
	// Voltage
	splitFloat(tempVol, &hDev->Register[VOLTAGE_REGISTER_ADDRESS], &hDev->Register[VOLTAGE_REGISTER_ADDRESS + 1]);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f103 0208 	add.w	r2, r3, #8
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3309      	adds	r3, #9
 8000f72:	4619      	mov	r1, r3
 8000f74:	4610      	mov	r0, r2
 8000f76:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f7a:	f7ff ff1b 	bl	8000db4 <splitFloat>
	// Light
	splitUint16(tempLt, &hDev->Register[LIGHT_REGISTER_ADDRESS], &hDev->Register[LIGHT_REGISTER_ADDRESS + 1]);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	1d19      	adds	r1, r3, #4
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	1d5a      	adds	r2, r3, #5
 8000f86:	8a7b      	ldrh	r3, [r7, #18]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff47 	bl	8000e1c <splitUint16>
	// Potentiometer
	splitUint16(tempPt, &hDev->Register[POTENTIOMETER_REGISTER_ADDRESS], &hDev->Register[POTENTIOMETER_REGISTER_ADDRESS + 1]);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f103 010a 	add.w	r1, r3, #10
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f103 020b 	add.w	r2, r3, #11
 8000f9a:	8a3b      	ldrh	r3, [r7, #16]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff3d 	bl	8000e1c <splitUint16>

}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <slave_behavior>:

void slave_behavior(Slave_Device* hDev){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af04      	add	r7, sp, #16
 8000fb2:	6078      	str	r0, [r7, #4]
	switch(hDev->signal){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d859      	bhi.n	8001070 <slave_behavior+0xc4>
 8000fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc4 <slave_behavior+0x18>)
 8000fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc2:	bf00      	nop
 8000fc4:	08000fd9 	.word	0x08000fd9
 8000fc8:	08000ffb 	.word	0x08000ffb
 8000fcc:	0800104b 	.word	0x0800104b
 8000fd0:	08001061 	.word	0x08001061
 8000fd4:	08001053 	.word	0x08001053
	case IDLE:{
		lcd_show_string(10, 10, "watting for cmd", RED, BLACK, 16, 0);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	2310      	movs	r3, #16
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000fe8:	4a23      	ldr	r2, [pc, #140]	@ (8001078 <slave_behavior+0xcc>)
 8000fea:	210a      	movs	r1, #10
 8000fec:	200a      	movs	r0, #10
 8000fee:	f001 f859 	bl	80020a4 <lcd_show_string>
		hDev->signal = WAITTING_FOR_CMD;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	705a      	strb	r2, [r3, #1]
		break;
 8000ff8:	e03a      	b.n	8001070 <slave_behavior+0xc4>
	}
	case WAITTING_FOR_CMD:{
		ReadData(hDev);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ff88 	bl	8000f10 <ReadData>
//			HAL_UART_Transmit(&huart1, (uint8_t*)"hehe", 4, 100);
//		}else{
//			HAL_UART_Transmit(&huart1, (uint8_t*)"0 hehe", 6, 100);
//		}

		if(Receive_Flag){
 8001000:	4b1e      	ldr	r3, [pc, #120]	@ (800107c <slave_behavior+0xd0>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d032      	beq.n	800106e <slave_behavior+0xc2>
			lcd_show_string(10, 10, "                      ", RED, BLACK, 16, 0);
 8001008:	2300      	movs	r3, #0
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	2310      	movs	r3, #16
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	2300      	movs	r3, #0
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001018:	4a19      	ldr	r2, [pc, #100]	@ (8001080 <slave_behavior+0xd4>)
 800101a:	210a      	movs	r1, #10
 800101c:	200a      	movs	r0, #10
 800101e:	f001 f841 	bl	80020a4 <lcd_show_string>
			lcd_show_string(10, 30, "valid cmd", RED, BLACK, 16, 0);
 8001022:	2300      	movs	r3, #0
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2310      	movs	r3, #16
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	2300      	movs	r3, #0
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001032:	4a14      	ldr	r2, [pc, #80]	@ (8001084 <slave_behavior+0xd8>)
 8001034:	211e      	movs	r1, #30
 8001036:	200a      	movs	r0, #10
 8001038:	f001 f834 	bl	80020a4 <lcd_show_string>
			hDev->signal = COMMAND_PARSER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2202      	movs	r2, #2
 8001040:	705a      	strb	r2, [r3, #1]
			Receive_Flag = 0;
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <slave_behavior+0xd0>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
			break;
 8001048:	e012      	b.n	8001070 <slave_behavior+0xc4>
		}
		break;
	}
	case COMMAND_PARSER:{
		CommandParser_handler(hDev);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fe72 	bl	8000d34 <CommandParser_handler>
		break;
 8001050:	e00e      	b.n	8001070 <slave_behavior+0xc4>
	}
	case READ_SINGLE_REGISTER_HANDLER:{
		Read_single_register_handler(hDev);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff32 	bl	8000ebc <Read_single_register_handler>
		hDev->signal = IDLE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	705a      	strb	r2, [r3, #1]
		break;
 800105e:	e007      	b.n	8001070 <slave_behavior+0xc4>
	}
	case READ_MULTIPLE_HOLDING_REGISTER_HANDLER:{
		Read_multiple_holding_register_handler(hDev);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fef3 	bl	8000e4c <Read_multiple_holding_register_handler>
		hDev->signal = IDLE;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	705a      	strb	r2, [r3, #1]
		break;
 800106c:	e000      	b.n	8001070 <slave_behavior+0xc4>
		break;
 800106e:	bf00      	nop
	}
	}
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	08007fec 	.word	0x08007fec
 800107c:	20000399 	.word	0x20000399
 8001080:	08007ffc 	.word	0x08007ffc
 8001084:	08008014 	.word	0x08008014

08001088 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108e:	463b      	mov	r3, r7
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800109a:	4b3d      	ldr	r3, [pc, #244]	@ (8001190 <MX_ADC1_Init+0x108>)
 800109c:	4a3d      	ldr	r2, [pc, #244]	@ (8001194 <MX_ADC1_Init+0x10c>)
 800109e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001190 <MX_ADC1_Init+0x108>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001190 <MX_ADC1_Init+0x108>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010ac:	4b38      	ldr	r3, [pc, #224]	@ (8001190 <MX_ADC1_Init+0x108>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010b2:	4b37      	ldr	r3, [pc, #220]	@ (8001190 <MX_ADC1_Init+0x108>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b8:	4b35      	ldr	r3, [pc, #212]	@ (8001190 <MX_ADC1_Init+0x108>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c0:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <MX_ADC1_Init+0x108>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c6:	4b32      	ldr	r3, [pc, #200]	@ (8001190 <MX_ADC1_Init+0x108>)
 80010c8:	4a33      	ldr	r2, [pc, #204]	@ (8001198 <MX_ADC1_Init+0x110>)
 80010ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010cc:	4b30      	ldr	r3, [pc, #192]	@ (8001190 <MX_ADC1_Init+0x108>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80010d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <MX_ADC1_Init+0x108>)
 80010d4:	2205      	movs	r2, #5
 80010d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001190 <MX_ADC1_Init+0x108>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <MX_ADC1_Init+0x108>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e6:	482a      	ldr	r0, [pc, #168]	@ (8001190 <MX_ADC1_Init+0x108>)
 80010e8:	f002 f9f0 	bl	80034cc <HAL_ADC_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010f2:	f001 fa8f 	bl	8002614 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010f6:	2308      	movs	r3, #8
 80010f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010fa:	2301      	movs	r3, #1
 80010fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001102:	463b      	mov	r3, r7
 8001104:	4619      	mov	r1, r3
 8001106:	4822      	ldr	r0, [pc, #136]	@ (8001190 <MX_ADC1_Init+0x108>)
 8001108:	f002 fb52 	bl	80037b0 <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001112:	f001 fa7f 	bl	8002614 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001116:	2309      	movs	r3, #9
 8001118:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	481b      	ldr	r0, [pc, #108]	@ (8001190 <MX_ADC1_Init+0x108>)
 8001124:	f002 fb44 	bl	80037b0 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800112e:	f001 fa71 	bl	8002614 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001132:	230a      	movs	r3, #10
 8001134:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001136:	2303      	movs	r3, #3
 8001138:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4814      	ldr	r0, [pc, #80]	@ (8001190 <MX_ADC1_Init+0x108>)
 8001140:	f002 fb36 	bl	80037b0 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800114a:	f001 fa63 	bl	8002614 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800114e:	230b      	movs	r3, #11
 8001150:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001152:	2304      	movs	r3, #4
 8001154:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	@ (8001190 <MX_ADC1_Init+0x108>)
 800115c:	f002 fb28 	bl	80037b0 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001166:	f001 fa55 	bl	8002614 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800116a:	230c      	movs	r3, #12
 800116c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800116e:	2305      	movs	r3, #5
 8001170:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	@ (8001190 <MX_ADC1_Init+0x108>)
 8001178:	f002 fb1a 	bl	80037b0 <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001182:	f001 fa47 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000240 	.word	0x20000240
 8001194:	40012000 	.word	0x40012000
 8001198:	0f000001 	.word	0x0f000001

0800119c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a3c      	ldr	r2, [pc, #240]	@ (80012ac <HAL_ADC_MspInit+0x110>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d171      	bne.n	80012a2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b3b      	ldr	r3, [pc, #236]	@ (80012b0 <HAL_ADC_MspInit+0x114>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c6:	4a3a      	ldr	r2, [pc, #232]	@ (80012b0 <HAL_ADC_MspInit+0x114>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ce:	4b38      	ldr	r3, [pc, #224]	@ (80012b0 <HAL_ADC_MspInit+0x114>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b34      	ldr	r3, [pc, #208]	@ (80012b0 <HAL_ADC_MspInit+0x114>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a33      	ldr	r2, [pc, #204]	@ (80012b0 <HAL_ADC_MspInit+0x114>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b31      	ldr	r3, [pc, #196]	@ (80012b0 <HAL_ADC_MspInit+0x114>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <HAL_ADC_MspInit+0x114>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a2c      	ldr	r2, [pc, #176]	@ (80012b0 <HAL_ADC_MspInit+0x114>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <HAL_ADC_MspInit+0x114>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001212:	2307      	movs	r3, #7
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001216:	2303      	movs	r3, #3
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4823      	ldr	r0, [pc, #140]	@ (80012b4 <HAL_ADC_MspInit+0x118>)
 8001226:	f003 fa77 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800122a:	2303      	movs	r3, #3
 800122c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122e:	2303      	movs	r3, #3
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	481e      	ldr	r0, [pc, #120]	@ (80012b8 <HAL_ADC_MspInit+0x11c>)
 800123e:	f003 fa6b 	bl	8004718 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001242:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <HAL_ADC_MspInit+0x120>)
 8001244:	4a1e      	ldr	r2, [pc, #120]	@ (80012c0 <HAL_ADC_MspInit+0x124>)
 8001246:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001248:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <HAL_ADC_MspInit+0x120>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800124e:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <HAL_ADC_MspInit+0x120>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <HAL_ADC_MspInit+0x120>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800125a:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <HAL_ADC_MspInit+0x120>)
 800125c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001260:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001262:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <HAL_ADC_MspInit+0x120>)
 8001264:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001268:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800126a:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <HAL_ADC_MspInit+0x120>)
 800126c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001270:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_ADC_MspInit+0x120>)
 8001274:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001278:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <HAL_ADC_MspInit+0x120>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001280:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <HAL_ADC_MspInit+0x120>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001286:	480d      	ldr	r0, [pc, #52]	@ (80012bc <HAL_ADC_MspInit+0x120>)
 8001288:	f002 fe44 	bl	8003f14 <HAL_DMA_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001292:	f001 f9bf 	bl	8002614 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <HAL_ADC_MspInit+0x120>)
 800129a:	639a      	str	r2, [r3, #56]	@ 0x38
 800129c:	4a07      	ldr	r2, [pc, #28]	@ (80012bc <HAL_ADC_MspInit+0x120>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	@ 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40012000 	.word	0x40012000
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020400 	.word	0x40020400
 80012bc:	20000288 	.word	0x20000288
 80012c0:	40026410 	.word	0x40026410

080012c4 <button_init>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void button_init() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2108      	movs	r1, #8
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <button_init+0x14>)
 80012ce:	f003 fbbf 	bl	8004a50 <HAL_GPIO_WritePin>
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40020c00 	.word	0x40020c00

080012dc <buzzer_init>:

/* Variables */
uint8_t buzzerduty_cycle = 0;

/* Functions */
void buzzer_init() {
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80012e0:	2100      	movs	r1, #0
 80012e2:	4802      	ldr	r0, [pc, #8]	@ (80012ec <buzzer_init+0x10>)
 80012e4:	f004 fdd0 	bl	8005e88 <HAL_TIM_PWM_Start>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200006c4 	.word	0x200006c4

080012f0 <crc16>:
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
    0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

uint16_t crc16(const uint8_t *data, uint16_t num_bytes)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 80012fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001300:	82fb      	strh	r3, [r7, #22]
    const uint8_t *ptr = data;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	613b      	str	r3, [r7, #16]

    if (ptr != NULL)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d018      	beq.n	800133e <crc16+0x4e>
    {
        for (uint16_t i = 0; i < num_bytes; i++)
 800130c:	2300      	movs	r3, #0
 800130e:	81fb      	strh	r3, [r7, #14]
 8001310:	e011      	b.n	8001336 <crc16+0x46>
        {
            crc = (crc >> 8) ^ crc16_lookup_table[(crc ^ (uint16_t)*ptr++) & 0x00FF];
 8001312:	8afb      	ldrh	r3, [r7, #22]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	b29a      	uxth	r2, r3
 8001318:	8af9      	ldrh	r1, [r7, #22]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1c58      	adds	r0, r3, #1
 800131e:	6138      	str	r0, [r7, #16]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	404b      	eors	r3, r1
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4909      	ldr	r1, [pc, #36]	@ (800134c <crc16+0x5c>)
 8001328:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800132c:	4053      	eors	r3, r2
 800132e:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < num_bytes; i++)
 8001330:	89fb      	ldrh	r3, [r7, #14]
 8001332:	3301      	adds	r3, #1
 8001334:	81fb      	strh	r3, [r7, #14]
 8001336:	89fa      	ldrh	r2, [r7, #14]
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	429a      	cmp	r2, r3
 800133c:	d3e9      	bcc.n	8001312 <crc16+0x22>
        }
    }

    return crc;
 800133e:	8afb      	ldrh	r3, [r7, #22]
}
 8001340:	4618      	mov	r0, r3
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	20000000 	.word	0x20000000

08001350 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_DMA_Init+0x3c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a0b      	ldr	r2, [pc, #44]	@ (800138c <MX_DMA_Init+0x3c>)
 8001360:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <MX_DMA_Init+0x3c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2038      	movs	r0, #56	@ 0x38
 8001378:	f002 fd95 	bl	8003ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800137c:	2038      	movs	r0, #56	@ 0x38
 800137e:	f002 fdae 	bl	8003ede <HAL_NVIC_EnableIRQ>

}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	@ 0x38
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]
 80013a6:	615a      	str	r2, [r3, #20]
 80013a8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80013aa:	463b      	mov	r3, r7
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	615a      	str	r2, [r3, #20]
 80013ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80013bc:	4b2f      	ldr	r3, [pc, #188]	@ (800147c <MX_FSMC_Init+0xec>)
 80013be:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80013c2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80013c4:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <MX_FSMC_Init+0xec>)
 80013c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001480 <MX_FSMC_Init+0xf0>)
 80013c8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80013ca:	4b2c      	ldr	r3, [pc, #176]	@ (800147c <MX_FSMC_Init+0xec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80013d0:	4b2a      	ldr	r3, [pc, #168]	@ (800147c <MX_FSMC_Init+0xec>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80013d6:	4b29      	ldr	r3, [pc, #164]	@ (800147c <MX_FSMC_Init+0xec>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80013dc:	4b27      	ldr	r3, [pc, #156]	@ (800147c <MX_FSMC_Init+0xec>)
 80013de:	2210      	movs	r2, #16
 80013e0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80013e2:	4b26      	ldr	r3, [pc, #152]	@ (800147c <MX_FSMC_Init+0xec>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80013e8:	4b24      	ldr	r3, [pc, #144]	@ (800147c <MX_FSMC_Init+0xec>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80013ee:	4b23      	ldr	r3, [pc, #140]	@ (800147c <MX_FSMC_Init+0xec>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80013f4:	4b21      	ldr	r3, [pc, #132]	@ (800147c <MX_FSMC_Init+0xec>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <MX_FSMC_Init+0xec>)
 80013fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001400:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001402:	4b1e      	ldr	r3, [pc, #120]	@ (800147c <MX_FSMC_Init+0xec>)
 8001404:	2200      	movs	r2, #0
 8001406:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001408:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <MX_FSMC_Init+0xec>)
 800140a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800140e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001410:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <MX_FSMC_Init+0xec>)
 8001412:	2200      	movs	r2, #0
 8001414:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001416:	4b19      	ldr	r3, [pc, #100]	@ (800147c <MX_FSMC_Init+0xec>)
 8001418:	2200      	movs	r2, #0
 800141a:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800141c:	4b17      	ldr	r3, [pc, #92]	@ (800147c <MX_FSMC_Init+0xec>)
 800141e:	2200      	movs	r2, #0
 8001420:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001422:	230f      	movs	r3, #15
 8001424:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001426:	230f      	movs	r3, #15
 8001428:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800142a:	233c      	movs	r3, #60	@ 0x3c
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8001432:	2310      	movs	r3, #16
 8001434:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8001436:	2311      	movs	r3, #17
 8001438:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800143a:	2300      	movs	r3, #0
 800143c:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800143e:	2308      	movs	r3, #8
 8001440:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001442:	230f      	movs	r3, #15
 8001444:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001446:	2309      	movs	r3, #9
 8001448:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800144e:	2310      	movs	r3, #16
 8001450:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001452:	2311      	movs	r3, #17
 8001454:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800145a:	463a      	mov	r2, r7
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	4806      	ldr	r0, [pc, #24]	@ (800147c <MX_FSMC_Init+0xec>)
 8001464:	f004 fbae 	bl	8005bc4 <HAL_SRAM_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800146e:	f001 f8d1 	bl	8002614 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001472:	bf00      	nop
 8001474:	3738      	adds	r7, #56	@ 0x38
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200002e8 	.word	0x200002e8
 8001480:	a0000104 	.word	0xa0000104

08001484 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001498:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <HAL_FSMC_MspInit+0x88>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d131      	bne.n	8001504 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <HAL_FSMC_MspInit+0x88>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <HAL_FSMC_MspInit+0x8c>)
 80014ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ae:	4a18      	ldr	r2, [pc, #96]	@ (8001510 <HAL_FSMC_MspInit+0x8c>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6393      	str	r3, [r2, #56]	@ 0x38
 80014b6:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <HAL_FSMC_MspInit+0x8c>)
 80014b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80014c2:	f64f 7388 	movw	r3, #65416	@ 0xff88
 80014c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014d4:	230c      	movs	r3, #12
 80014d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	480d      	ldr	r0, [pc, #52]	@ (8001514 <HAL_FSMC_MspInit+0x90>)
 80014de:	f003 f91b 	bl	8004718 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80014e2:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80014e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014f4:	230c      	movs	r3, #12
 80014f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4806      	ldr	r0, [pc, #24]	@ (8001518 <HAL_FSMC_MspInit+0x94>)
 80014fe:	f003 f90b 	bl	8004718 <HAL_GPIO_Init>
 8001502:	e000      	b.n	8001506 <HAL_FSMC_MspInit+0x82>
    return;
 8001504:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000338 	.word	0x20000338
 8001510:	40023800 	.word	0x40023800
 8001514:	40021000 	.word	0x40021000
 8001518:	40020c00 	.word	0x40020c00

0800151c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001524:	f7ff ffae 	bl	8001484 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08e      	sub	sp, #56	@ 0x38
 8001534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
 800154a:	4b76      	ldr	r3, [pc, #472]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a75      	ldr	r2, [pc, #468]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 8001550:	f043 0310 	orr.w	r3, r3, #16
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b73      	ldr	r3, [pc, #460]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	623b      	str	r3, [r7, #32]
 8001560:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	4b6f      	ldr	r3, [pc, #444]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a6e      	ldr	r2, [pc, #440]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b6c      	ldr	r3, [pc, #432]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	4b68      	ldr	r3, [pc, #416]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a67      	ldr	r2, [pc, #412]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 8001588:	f043 0320 	orr.w	r3, r3, #32
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b65      	ldr	r3, [pc, #404]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0320 	and.w	r3, r3, #32
 8001596:	61bb      	str	r3, [r7, #24]
 8001598:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	4b61      	ldr	r3, [pc, #388]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a60      	ldr	r2, [pc, #384]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 80015a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b5e      	ldr	r3, [pc, #376]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a59      	ldr	r2, [pc, #356]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b57      	ldr	r3, [pc, #348]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a52      	ldr	r2, [pc, #328]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b50      	ldr	r3, [pc, #320]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a4b      	ldr	r2, [pc, #300]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b49      	ldr	r3, [pc, #292]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b45      	ldr	r3, [pc, #276]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a44      	ldr	r2, [pc, #272]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 8001614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b42      	ldr	r3, [pc, #264]	@ (8001724 <MX_GPIO_Init+0x1f4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	2170      	movs	r1, #112	@ 0x70
 800162a:	483f      	ldr	r0, [pc, #252]	@ (8001728 <MX_GPIO_Init+0x1f8>)
 800162c:	f003 fa10 	bl	8004a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001636:	483d      	ldr	r0, [pc, #244]	@ (800172c <MX_GPIO_Init+0x1fc>)
 8001638:	f003 fa0a 	bl	8004a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	2140      	movs	r1, #64	@ 0x40
 8001640:	483b      	ldr	r0, [pc, #236]	@ (8001730 <MX_GPIO_Init+0x200>)
 8001642:	f003 fa05 	bl	8004a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FSMC_BLK_Pin|MODBUS_EN_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 800164c:	4839      	ldr	r0, [pc, #228]	@ (8001734 <MX_GPIO_Init+0x204>)
 800164e:	f003 f9ff 	bl	8004a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	2108      	movs	r1, #8
 8001656:	4838      	ldr	r0, [pc, #224]	@ (8001738 <MX_GPIO_Init+0x208>)
 8001658:	f003 f9fa 	bl	8004a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800165c:	2370      	movs	r3, #112	@ 0x70
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800166c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001670:	4619      	mov	r1, r3
 8001672:	482d      	ldr	r0, [pc, #180]	@ (8001728 <MX_GPIO_Init+0x1f8>)
 8001674:	f003 f850 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001678:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	4826      	ldr	r0, [pc, #152]	@ (800172c <MX_GPIO_Init+0x1fc>)
 8001692:	f003 f841 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001696:	23c0      	movs	r3, #192	@ 0xc0
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169a:	2300      	movs	r3, #0
 800169c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	4822      	ldr	r0, [pc, #136]	@ (8001734 <MX_GPIO_Init+0x204>)
 80016aa:	f003 f835 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80016ae:	2330      	movs	r3, #48	@ 0x30
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016be:	4619      	mov	r1, r3
 80016c0:	481a      	ldr	r0, [pc, #104]	@ (800172c <MX_GPIO_Init+0x1fc>)
 80016c2:	f003 f829 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80016c6:	2340      	movs	r3, #64	@ 0x40
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	4814      	ldr	r0, [pc, #80]	@ (8001730 <MX_GPIO_Init+0x200>)
 80016de:	f003 f81b 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin|MODBUS_EN_Pin;
 80016e2:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	480e      	ldr	r0, [pc, #56]	@ (8001734 <MX_GPIO_Init+0x204>)
 80016fc:	f003 f80c 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001700:	2308      	movs	r3, #8
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	4808      	ldr	r0, [pc, #32]	@ (8001738 <MX_GPIO_Init+0x208>)
 8001718:	f002 fffe 	bl	8004718 <HAL_GPIO_Init>

}
 800171c:	bf00      	nop
 800171e:	3738      	adds	r7, #56	@ 0x38
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	40021000 	.word	0x40021000
 800172c:	40020800 	.word	0x40020800
 8001730:	40021800 	.word	0x40021800
 8001734:	40020000 	.word	0x40020000
 8001738:	40020c00 	.word	0x40020c00

0800173c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001740:	4b12      	ldr	r3, [pc, #72]	@ (800178c <MX_I2C1_Init+0x50>)
 8001742:	4a13      	ldr	r2, [pc, #76]	@ (8001790 <MX_I2C1_Init+0x54>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001746:	4b11      	ldr	r3, [pc, #68]	@ (800178c <MX_I2C1_Init+0x50>)
 8001748:	4a12      	ldr	r2, [pc, #72]	@ (8001794 <MX_I2C1_Init+0x58>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <MX_I2C1_Init+0x50>)
 800175a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800175e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001760:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <MX_I2C1_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <MX_I2C1_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176c:	4b07      	ldr	r3, [pc, #28]	@ (800178c <MX_I2C1_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <MX_I2C1_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	@ (800178c <MX_I2C1_Init+0x50>)
 800177a:	f003 f99d 	bl	8004ab8 <HAL_I2C_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001784:	f000 ff46 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	2000033c 	.word	0x2000033c
 8001790:	40005400 	.word	0x40005400
 8001794:	000186a0 	.word	0x000186a0

08001798 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a19      	ldr	r2, [pc, #100]	@ (800181c <HAL_I2C_MspInit+0x84>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d12b      	bne.n	8001812 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a17      	ldr	r2, [pc, #92]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017d6:	23c0      	movs	r3, #192	@ 0xc0
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017da:	2312      	movs	r3, #18
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e6:	2304      	movs	r3, #4
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	480c      	ldr	r0, [pc, #48]	@ (8001824 <HAL_I2C_MspInit+0x8c>)
 80017f2:	f002 ff91 	bl	8004718 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	4a08      	ldr	r2, [pc, #32]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 8001800:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001804:	6413      	str	r3, [r2, #64]	@ 0x40
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	@ 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40005400 	.word	0x40005400
 8001820:	40023800 	.word	0x40023800
 8001824:	40020400 	.word	0x40020400

08001828 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 8001832:	4a04      	ldr	r2, [pc, #16]	@ (8001844 <LCD_WR_REG+0x1c>)
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	8013      	strh	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	600ffffe 	.word	0x600ffffe

08001848 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 8001852:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <LCD_WR_DATA+0x1c>)
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	8053      	strh	r3, [r2, #2]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	600ffffe 	.word	0x600ffffe

08001868 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <LCD_RD_DATA+0x20>)
 8001870:	885b      	ldrh	r3, [r3, #2]
 8001872:	b29b      	uxth	r3, r3
 8001874:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	b29b      	uxth	r3, r3
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	600ffffe 	.word	0x600ffffe

0800188c <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4604      	mov	r4, r0
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4623      	mov	r3, r4
 800189c:	80fb      	strh	r3, [r7, #6]
 800189e:	4603      	mov	r3, r0
 80018a0:	80bb      	strh	r3, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	807b      	strh	r3, [r7, #2]
 80018a6:	4613      	mov	r3, r2
 80018a8:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 80018aa:	202a      	movs	r0, #42	@ 0x2a
 80018ac:	f7ff ffbc 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ffc6 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ffc0 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ffba 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ffb4 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 80018e0:	202b      	movs	r0, #43	@ 0x2b
 80018e2:	f7ff ffa1 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 80018e6:	88bb      	ldrh	r3, [r7, #4]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ffab 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 80018f2:	88bb      	ldrh	r3, [r7, #4]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ffa5 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 80018fe:	883b      	ldrh	r3, [r7, #0]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	b29b      	uxth	r3, r3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff9f 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 800190a:	883b      	ldrh	r3, [r7, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	b29b      	uxth	r3, r3
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff99 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8001916:	202c      	movs	r0, #44	@ 0x2c
 8001918:	f7ff ff86 	bl	8001828 <LCD_WR_REG>
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bd90      	pop	{r4, r7, pc}

08001924 <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <lcd_clear+0x60>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	3b01      	subs	r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <lcd_clear+0x60>)
 8001938:	885b      	ldrh	r3, [r3, #2]
 800193a:	3b01      	subs	r3, #1
 800193c:	b29b      	uxth	r3, r3
 800193e:	2100      	movs	r1, #0
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff ffa3 	bl	800188c <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 8001946:	2300      	movs	r3, #0
 8001948:	81fb      	strh	r3, [r7, #14]
 800194a:	e011      	b.n	8001970 <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 800194c:	2300      	movs	r3, #0
 800194e:	81bb      	strh	r3, [r7, #12]
 8001950:	e006      	b.n	8001960 <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff77 	bl	8001848 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 800195a:	89bb      	ldrh	r3, [r7, #12]
 800195c:	3301      	adds	r3, #1
 800195e:	81bb      	strh	r3, [r7, #12]
 8001960:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <lcd_clear+0x60>)
 8001962:	885b      	ldrh	r3, [r3, #2]
 8001964:	89ba      	ldrh	r2, [r7, #12]
 8001966:	429a      	cmp	r2, r3
 8001968:	d3f3      	bcc.n	8001952 <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 800196a:	89fb      	ldrh	r3, [r7, #14]
 800196c:	3301      	adds	r3, #1
 800196e:	81fb      	strh	r3, [r7, #14]
 8001970:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <lcd_clear+0x60>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	89fa      	ldrh	r2, [r7, #14]
 8001976:	429a      	cmp	r2, r3
 8001978:	d3e8      	bcc.n	800194c <lcd_clear+0x28>
		}
	}
}
 800197a:	bf00      	nop
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000390 	.word	0x20000390

08001988 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
 8001992:	460b      	mov	r3, r1
 8001994:	80bb      	strh	r3, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 800199a:	88bb      	ldrh	r3, [r7, #4]
 800199c:	88fa      	ldrh	r2, [r7, #6]
 800199e:	88b9      	ldrh	r1, [r7, #4]
 80019a0:	88f8      	ldrh	r0, [r7, #6]
 80019a2:	f7ff ff73 	bl	800188c <lcd_set_address>
	LCD_WR_DATA(color);
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff4d 	bl	8001848 <LCD_WR_DATA>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4604      	mov	r4, r0
 80019c0:	4608      	mov	r0, r1
 80019c2:	4611      	mov	r1, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	4623      	mov	r3, r4
 80019c8:	80fb      	strh	r3, [r7, #6]
 80019ca:	4603      	mov	r3, r0
 80019cc:	80bb      	strh	r3, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	70fb      	strb	r3, [r7, #3]
 80019d2:	4613      	mov	r3, r2
 80019d4:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 80019de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	08db      	lsrs	r3, r3, #3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	bf14      	ite	ne
 80019fa:	2301      	movne	r3, #1
 80019fc:	2300      	moveq	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	fb12 f303 	smulbb	r3, r2, r3
 8001a0e:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	3b20      	subs	r3, #32
 8001a14:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	3b01      	subs	r3, #1
 8001a22:	b29c      	uxth	r4, r3
 8001a24:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	88bb      	ldrh	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	88b9      	ldrh	r1, [r7, #4]
 8001a36:	88f8      	ldrh	r0, [r7, #6]
 8001a38:	4622      	mov	r2, r4
 8001a3a:	f7ff ff27 	bl	800188c <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8001a3e:	2300      	movs	r3, #0
 8001a40:	827b      	strh	r3, [r7, #18]
 8001a42:	e07a      	b.n	8001b3a <lcd_show_char+0x182>
		if (sizey == 12)
 8001a44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	d028      	beq.n	8001a9e <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8001a4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a50:	2b10      	cmp	r3, #16
 8001a52:	d108      	bne.n	8001a66 <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	8a7b      	ldrh	r3, [r7, #18]
 8001a58:	493c      	ldr	r1, [pc, #240]	@ (8001b4c <lcd_show_char+0x194>)
 8001a5a:	0112      	lsls	r2, r2, #4
 8001a5c:	440a      	add	r2, r1
 8001a5e:	4413      	add	r3, r2
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	75fb      	strb	r3, [r7, #23]
 8001a64:	e01b      	b.n	8001a9e <lcd_show_char+0xe6>
		else if (sizey == 24)
 8001a66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a6a:	2b18      	cmp	r3, #24
 8001a6c:	d10b      	bne.n	8001a86 <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	8a79      	ldrh	r1, [r7, #18]
 8001a72:	4837      	ldr	r0, [pc, #220]	@ (8001b50 <lcd_show_char+0x198>)
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	4403      	add	r3, r0
 8001a7e:	440b      	add	r3, r1
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	75fb      	strb	r3, [r7, #23]
 8001a84:	e00b      	b.n	8001a9e <lcd_show_char+0xe6>
		else if (sizey == 32)
 8001a86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d15a      	bne.n	8001b44 <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8001a8e:	78fa      	ldrb	r2, [r7, #3]
 8001a90:	8a7b      	ldrh	r3, [r7, #18]
 8001a92:	4930      	ldr	r1, [pc, #192]	@ (8001b54 <lcd_show_char+0x19c>)
 8001a94:	0192      	lsls	r2, r2, #6
 8001a96:	440a      	add	r2, r1
 8001a98:	4413      	add	r3, r2
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	75bb      	strb	r3, [r7, #22]
 8001aa2:	e044      	b.n	8001b2e <lcd_show_char+0x176>
			if (!mode) {
 8001aa4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d120      	bne.n	8001aee <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8001aac:	7dfa      	ldrb	r2, [r7, #23]
 8001aae:	7dbb      	ldrb	r3, [r7, #22]
 8001ab0:	fa42 f303 	asr.w	r3, r2, r3
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d004      	beq.n	8001ac6 <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8001abc:	883b      	ldrh	r3, [r7, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fec2 	bl	8001848 <LCD_WR_DATA>
 8001ac4:	e003      	b.n	8001ace <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8001ac6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff febd 	bl	8001848 <LCD_WR_DATA>
				m++;
 8001ace:	7d7b      	ldrb	r3, [r7, #21]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8001ad4:	7d7b      	ldrb	r3, [r7, #21]
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001adc:	fb01 f202 	mul.w	r2, r1, r2
 8001ae0:	1a9b      	subs	r3, r3, r2
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d11f      	bne.n	8001b28 <lcd_show_char+0x170>
					m = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	757b      	strb	r3, [r7, #21]
					break;
 8001aec:	e022      	b.n	8001b34 <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8001aee:	7dfa      	ldrb	r2, [r7, #23]
 8001af0:	7dbb      	ldrb	r3, [r7, #22]
 8001af2:	fa42 f303 	asr.w	r3, r2, r3
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8001afe:	883a      	ldrh	r2, [r7, #0]
 8001b00:	88b9      	ldrh	r1, [r7, #4]
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff3f 	bl	8001988 <lcd_draw_point>
				x++;
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8001b10:	88fa      	ldrh	r2, [r7, #6]
 8001b12:	8a3b      	ldrh	r3, [r7, #16]
 8001b14:	1ad2      	subs	r2, r2, r3
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d105      	bne.n	8001b28 <lcd_show_char+0x170>
					x = x0;
 8001b1c:	8a3b      	ldrh	r3, [r7, #16]
 8001b1e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001b20:	88bb      	ldrh	r3, [r7, #4]
 8001b22:	3301      	adds	r3, #1
 8001b24:	80bb      	strh	r3, [r7, #4]
					break;
 8001b26:	e005      	b.n	8001b34 <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8001b28:	7dbb      	ldrb	r3, [r7, #22]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	75bb      	strb	r3, [r7, #22]
 8001b2e:	7dbb      	ldrb	r3, [r7, #22]
 8001b30:	2b07      	cmp	r3, #7
 8001b32:	d9b7      	bls.n	8001aa4 <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8001b34:	8a7b      	ldrh	r3, [r7, #18]
 8001b36:	3301      	adds	r3, #1
 8001b38:	827b      	strh	r3, [r7, #18]
 8001b3a:	8a7a      	ldrh	r2, [r7, #18]
 8001b3c:	89bb      	ldrh	r3, [r7, #12]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d380      	bcc.n	8001a44 <lcd_show_char+0x8c>
 8001b42:	e000      	b.n	8001b46 <lcd_show_char+0x18e>
			return;
 8001b44:	bf00      	nop
				}
			}
		}
	}
}
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}
 8001b4c:	08008078 	.word	0x08008078
 8001b50:	08008668 	.word	0x08008668
 8001b54:	08009838 	.word	0x08009838

08001b58 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	460a      	mov	r2, r1
 8001b62:	71fb      	strb	r3, [r7, #7]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001b6c:	e004      	b.n	8001b78 <mypow+0x20>
		result *= m;
 8001b6e:	79fa      	ldrb	r2, [r7, #7]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001b78:	79bb      	ldrb	r3, [r7, #6]
 8001b7a:	1e5a      	subs	r2, r3, #1
 8001b7c:	71ba      	strb	r2, [r7, #6]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f5      	bne.n	8001b6e <mypow+0x16>
	return result;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b089      	sub	sp, #36	@ 0x24
 8001b94:	af04      	add	r7, sp, #16
 8001b96:	4604      	mov	r4, r0
 8001b98:	4608      	mov	r0, r1
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4623      	mov	r3, r4
 8001ba0:	80fb      	strh	r3, [r7, #6]
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	80bb      	strh	r3, [r7, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	807b      	strh	r3, [r7, #2]
 8001baa:	4613      	mov	r3, r2
 8001bac:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 8001bb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001bb6:	085b      	lsrs	r3, r3, #1
 8001bb8:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	e059      	b.n	8001c74 <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 8001bc0:	887c      	ldrh	r4, [r7, #2]
 8001bc2:	787a      	ldrb	r2, [r7, #1]
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	4619      	mov	r1, r3
 8001bd0:	200a      	movs	r0, #10
 8001bd2:	f7ff ffc1 	bl	8001b58 <mypow>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	fbb4 f1f3 	udiv	r1, r4, r3
 8001bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8001c88 <lcd_show_int_num+0xf8>)
 8001bde:	fba3 2301 	umull	r2, r3, r3, r1
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	1aca      	subs	r2, r1, r3
 8001bee:	4613      	mov	r3, r2
 8001bf0:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8001bf2:	7bbb      	ldrb	r3, [r7, #14]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d121      	bne.n	8001c3c <lcd_show_int_num+0xac>
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	787b      	ldrb	r3, [r7, #1]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	da1c      	bge.n	8001c3c <lcd_show_int_num+0xac>
			if (temp == 0) {
 8001c02:	7b3b      	ldrb	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d117      	bne.n	8001c38 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	7b7b      	ldrb	r3, [r7, #13]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	fb12 f303 	smulbb	r3, r2, r3
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	4413      	add	r3, r2
 8001c1a:	b298      	uxth	r0, r3
 8001c1c:	8c3a      	ldrh	r2, [r7, #32]
 8001c1e:	88b9      	ldrh	r1, [r7, #4]
 8001c20:	2300      	movs	r3, #0
 8001c22:	9302      	str	r3, [sp, #8]
 8001c24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	2220      	movs	r2, #32
 8001c32:	f7ff fec1 	bl	80019b8 <lcd_show_char>
				continue;
 8001c36:	e01a      	b.n	8001c6e <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	7b7b      	ldrb	r3, [r7, #13]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	fb12 f303 	smulbb	r3, r2, r3
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b298      	uxth	r0, r3
 8001c50:	7b3b      	ldrb	r3, [r7, #12]
 8001c52:	3330      	adds	r3, #48	@ 0x30
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	8c3c      	ldrh	r4, [r7, #32]
 8001c58:	88b9      	ldrh	r1, [r7, #4]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9302      	str	r3, [sp, #8]
 8001c5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	4623      	mov	r3, r4
 8001c6a:	f7ff fea5 	bl	80019b8 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	3301      	adds	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	787b      	ldrb	r3, [r7, #1]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d3a1      	bcc.n	8001bc0 <lcd_show_int_num+0x30>
	}
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	cccccccd 	.word	0xcccccccd

08001c8c <lcd_show_float_num>:

void lcd_show_float_num(uint16_t x, uint16_t y, float num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b08b      	sub	sp, #44	@ 0x2c
 8001c90:	af04      	add	r7, sp, #16
 8001c92:	4604      	mov	r4, r0
 8001c94:	4608      	mov	r0, r1
 8001c96:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4623      	mov	r3, r4
 8001ca0:	81fb      	strh	r3, [r7, #14]
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	81bb      	strh	r3, [r7, #12]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	71fb      	strb	r3, [r7, #7]
 8001caa:	4613      	mov	r3, r2
 8001cac:	80bb      	strh	r3, [r7, #4]
	uint8_t t, temp, sizex;
	uint16_t num1;
	sizex = sizey / 2;
 8001cae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cb2:	085b      	lsrs	r3, r3, #1
 8001cb4:	75bb      	strb	r3, [r7, #22]
	num1 = num * 100;
 8001cb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cba:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001d94 <lcd_show_float_num+0x108>
 8001cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cc6:	ee17 3a90 	vmov	r3, s15
 8001cca:	82bb      	strh	r3, [r7, #20]
	for (t = 0; t < len; t++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	75fb      	strb	r3, [r7, #23]
 8001cd0:	e057      	b.n	8001d82 <lcd_show_float_num+0xf6>
		temp = (num1 / mypow(10, len - t - 1)) % 10;
 8001cd2:	8abc      	ldrh	r4, [r7, #20]
 8001cd4:	79fa      	ldrb	r2, [r7, #7]
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	200a      	movs	r0, #10
 8001ce4:	f7ff ff38 	bl	8001b58 <mypow>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	fbb4 f1f3 	udiv	r1, r4, r3
 8001cee:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <lcd_show_float_num+0x10c>)
 8001cf0:	fba3 2301 	umull	r2, r3, r3, r1
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	1aca      	subs	r2, r1, r3
 8001d00:	4613      	mov	r3, r2
 8001d02:	74fb      	strb	r3, [r7, #19]
		if (t == (len - 2)) {
 8001d04:	7dfa      	ldrb	r2, [r7, #23]
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	3b02      	subs	r3, #2
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d11d      	bne.n	8001d4a <lcd_show_float_num+0xbe>
			lcd_show_char(x + (len - 2) * sizex, y, '.', fc, bc, sizey, 0);
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	3b02      	subs	r3, #2
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	7dbb      	ldrb	r3, [r7, #22]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	fb12 f303 	smulbb	r3, r2, r3
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	89fb      	ldrh	r3, [r7, #14]
 8001d20:	4413      	add	r3, r2
 8001d22:	b298      	uxth	r0, r3
 8001d24:	88ba      	ldrh	r2, [r7, #4]
 8001d26:	89b9      	ldrh	r1, [r7, #12]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9302      	str	r3, [sp, #8]
 8001d2c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	4613      	mov	r3, r2
 8001d38:	222e      	movs	r2, #46	@ 0x2e
 8001d3a:	f7ff fe3d 	bl	80019b8 <lcd_show_char>
			t++;
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
 8001d40:	3301      	adds	r3, #1
 8001d42:	75fb      	strb	r3, [r7, #23]
			len += 1;
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	3301      	adds	r3, #1
 8001d48:	71fb      	strb	r3, [r7, #7]
		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	7dbb      	ldrb	r3, [r7, #22]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	fb12 f303 	smulbb	r3, r2, r3
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	89fb      	ldrh	r3, [r7, #14]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b298      	uxth	r0, r3
 8001d5e:	7cfb      	ldrb	r3, [r7, #19]
 8001d60:	3330      	adds	r3, #48	@ 0x30
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	88bc      	ldrh	r4, [r7, #4]
 8001d66:	89b9      	ldrh	r1, [r7, #12]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	4623      	mov	r3, r4
 8001d78:	f7ff fe1e 	bl	80019b8 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	75fb      	strb	r3, [r7, #23]
 8001d82:	7dfa      	ldrb	r2, [r7, #23]
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d3a3      	bcc.n	8001cd2 <lcd_show_float_num+0x46>
	}
}
 8001d8a:	bf00      	nop
 8001d8c:	bf00      	nop
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}
 8001d94:	42c80000 	.word	0x42c80000
 8001d98:	cccccccd 	.word	0xcccccccd

08001d9c <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <lcd_set_direction+0x44>)
 8001db8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001dbc:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <lcd_set_direction+0x44>)
 8001dc0:	22f0      	movs	r2, #240	@ 0xf0
 8001dc2:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8001dc4:	e006      	b.n	8001dd4 <lcd_set_direction+0x38>
		lcddev.width = 240;
 8001dc6:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <lcd_set_direction+0x44>)
 8001dc8:	22f0      	movs	r2, #240	@ 0xf0
 8001dca:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001dcc:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <lcd_set_direction+0x44>)
 8001dce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001dd2:	805a      	strh	r2, [r3, #2]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	20000390 	.word	0x20000390

08001de4 <lcd_init>:

void lcd_init(void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dee:	48aa      	ldr	r0, [pc, #680]	@ (8002098 <lcd_init+0x2b4>)
 8001df0:	f002 fe2e 	bl	8004a50 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001df4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001df8:	f001 fb44 	bl	8003484 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e02:	48a5      	ldr	r0, [pc, #660]	@ (8002098 <lcd_init+0x2b4>)
 8001e04:	f002 fe24 	bl	8004a50 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e0c:	f001 fb3a 	bl	8003484 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff ffc3 	bl	8001d9c <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8001e16:	20d3      	movs	r0, #211	@ 0xd3
 8001e18:	f7ff fd06 	bl	8001828 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001e1c:	f7ff fd24 	bl	8001868 <LCD_RD_DATA>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	4b9d      	ldr	r3, [pc, #628]	@ (800209c <lcd_init+0x2b8>)
 8001e26:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001e28:	f7ff fd1e 	bl	8001868 <LCD_RD_DATA>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b9a      	ldr	r3, [pc, #616]	@ (800209c <lcd_init+0x2b8>)
 8001e32:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001e34:	f7ff fd18 	bl	8001868 <LCD_RD_DATA>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4b97      	ldr	r3, [pc, #604]	@ (800209c <lcd_init+0x2b8>)
 8001e3e:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8001e40:	4b96      	ldr	r3, [pc, #600]	@ (800209c <lcd_init+0x2b8>)
 8001e42:	889b      	ldrh	r3, [r3, #4]
 8001e44:	021b      	lsls	r3, r3, #8
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	4b94      	ldr	r3, [pc, #592]	@ (800209c <lcd_init+0x2b8>)
 8001e4a:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8001e4c:	f7ff fd0c 	bl	8001868 <LCD_RD_DATA>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461a      	mov	r2, r3
 8001e54:	4b91      	ldr	r3, [pc, #580]	@ (800209c <lcd_init+0x2b8>)
 8001e56:	889b      	ldrh	r3, [r3, #4]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b8f      	ldr	r3, [pc, #572]	@ (800209c <lcd_init+0x2b8>)
 8001e5e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001e60:	20cf      	movs	r0, #207	@ 0xcf
 8001e62:	f7ff fce1 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7ff fcee 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001e6c:	20c1      	movs	r0, #193	@ 0xc1
 8001e6e:	f7ff fceb 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001e72:	2030      	movs	r0, #48	@ 0x30
 8001e74:	f7ff fce8 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001e78:	20ed      	movs	r0, #237	@ 0xed
 8001e7a:	f7ff fcd5 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001e7e:	2064      	movs	r0, #100	@ 0x64
 8001e80:	f7ff fce2 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f7ff fcdf 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001e8a:	2012      	movs	r0, #18
 8001e8c:	f7ff fcdc 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001e90:	2081      	movs	r0, #129	@ 0x81
 8001e92:	f7ff fcd9 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001e96:	20e8      	movs	r0, #232	@ 0xe8
 8001e98:	f7ff fcc6 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001e9c:	2085      	movs	r0, #133	@ 0x85
 8001e9e:	f7ff fcd3 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ea2:	2010      	movs	r0, #16
 8001ea4:	f7ff fcd0 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001ea8:	207a      	movs	r0, #122	@ 0x7a
 8001eaa:	f7ff fccd 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001eae:	20cb      	movs	r0, #203	@ 0xcb
 8001eb0:	f7ff fcba 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001eb4:	2039      	movs	r0, #57	@ 0x39
 8001eb6:	f7ff fcc7 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001eba:	202c      	movs	r0, #44	@ 0x2c
 8001ebc:	f7ff fcc4 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff fcc1 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001ec6:	2034      	movs	r0, #52	@ 0x34
 8001ec8:	f7ff fcbe 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001ecc:	2002      	movs	r0, #2
 8001ece:	f7ff fcbb 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001ed2:	20f7      	movs	r0, #247	@ 0xf7
 8001ed4:	f7ff fca8 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001ed8:	2020      	movs	r0, #32
 8001eda:	f7ff fcb5 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001ede:	20ea      	movs	r0, #234	@ 0xea
 8001ee0:	f7ff fca2 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff fcaf 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f7ff fcac 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001ef0:	20c0      	movs	r0, #192	@ 0xc0
 8001ef2:	f7ff fc99 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001ef6:	201b      	movs	r0, #27
 8001ef8:	f7ff fca6 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001efc:	20c1      	movs	r0, #193	@ 0xc1
 8001efe:	f7ff fc93 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001f02:	2001      	movs	r0, #1
 8001f04:	f7ff fca0 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001f08:	20c5      	movs	r0, #197	@ 0xc5
 8001f0a:	f7ff fc8d 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001f0e:	2030      	movs	r0, #48	@ 0x30
 8001f10:	f7ff fc9a 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001f14:	2030      	movs	r0, #48	@ 0x30
 8001f16:	f7ff fc97 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001f1a:	20c7      	movs	r0, #199	@ 0xc7
 8001f1c:	f7ff fc84 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001f20:	20b7      	movs	r0, #183	@ 0xb7
 8001f22:	f7ff fc91 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001f26:	2036      	movs	r0, #54	@ 0x36
 8001f28:	f7ff fc7e 	bl	8001828 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8001f2c:	2008      	movs	r0, #8
 8001f2e:	f7ff fc8b 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001f32:	203a      	movs	r0, #58	@ 0x3a
 8001f34:	f7ff fc78 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001f38:	2055      	movs	r0, #85	@ 0x55
 8001f3a:	f7ff fc85 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001f3e:	20b1      	movs	r0, #177	@ 0xb1
 8001f40:	f7ff fc72 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f7ff fc7f 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001f4a:	201a      	movs	r0, #26
 8001f4c:	f7ff fc7c 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001f50:	20b6      	movs	r0, #182	@ 0xb6
 8001f52:	f7ff fc69 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001f56:	200a      	movs	r0, #10
 8001f58:	f7ff fc76 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001f5c:	20a2      	movs	r0, #162	@ 0xa2
 8001f5e:	f7ff fc73 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001f62:	20f2      	movs	r0, #242	@ 0xf2
 8001f64:	f7ff fc60 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7ff fc6d 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001f6e:	2026      	movs	r0, #38	@ 0x26
 8001f70:	f7ff fc5a 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001f74:	2001      	movs	r0, #1
 8001f76:	f7ff fc67 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001f7a:	20e0      	movs	r0, #224	@ 0xe0
 8001f7c:	f7ff fc54 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001f80:	200f      	movs	r0, #15
 8001f82:	f7ff fc61 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001f86:	202a      	movs	r0, #42	@ 0x2a
 8001f88:	f7ff fc5e 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001f8c:	2028      	movs	r0, #40	@ 0x28
 8001f8e:	f7ff fc5b 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001f92:	2008      	movs	r0, #8
 8001f94:	f7ff fc58 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001f98:	200e      	movs	r0, #14
 8001f9a:	f7ff fc55 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001f9e:	2008      	movs	r0, #8
 8001fa0:	f7ff fc52 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001fa4:	2054      	movs	r0, #84	@ 0x54
 8001fa6:	f7ff fc4f 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001faa:	20a9      	movs	r0, #169	@ 0xa9
 8001fac:	f7ff fc4c 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001fb0:	2043      	movs	r0, #67	@ 0x43
 8001fb2:	f7ff fc49 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001fb6:	200a      	movs	r0, #10
 8001fb8:	f7ff fc46 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001fbc:	200f      	movs	r0, #15
 8001fbe:	f7ff fc43 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff fc40 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7ff fc3d 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7ff fc3a 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7ff fc37 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001fda:	20e1      	movs	r0, #225	@ 0xe1
 8001fdc:	f7ff fc24 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff fc31 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001fe6:	2015      	movs	r0, #21
 8001fe8:	f7ff fc2e 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001fec:	2017      	movs	r0, #23
 8001fee:	f7ff fc2b 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001ff2:	2007      	movs	r0, #7
 8001ff4:	f7ff fc28 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001ff8:	2011      	movs	r0, #17
 8001ffa:	f7ff fc25 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001ffe:	2006      	movs	r0, #6
 8002000:	f7ff fc22 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002004:	202b      	movs	r0, #43	@ 0x2b
 8002006:	f7ff fc1f 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800200a:	2056      	movs	r0, #86	@ 0x56
 800200c:	f7ff fc1c 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002010:	203c      	movs	r0, #60	@ 0x3c
 8002012:	f7ff fc19 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002016:	2005      	movs	r0, #5
 8002018:	f7ff fc16 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800201c:	2010      	movs	r0, #16
 800201e:	f7ff fc13 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002022:	200f      	movs	r0, #15
 8002024:	f7ff fc10 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002028:	203f      	movs	r0, #63	@ 0x3f
 800202a:	f7ff fc0d 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800202e:	203f      	movs	r0, #63	@ 0x3f
 8002030:	f7ff fc0a 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002034:	200f      	movs	r0, #15
 8002036:	f7ff fc07 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800203a:	202b      	movs	r0, #43	@ 0x2b
 800203c:	f7ff fbf4 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fc01 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002046:	2000      	movs	r0, #0
 8002048:	f7ff fbfe 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800204c:	2001      	movs	r0, #1
 800204e:	f7ff fbfb 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002052:	203f      	movs	r0, #63	@ 0x3f
 8002054:	f7ff fbf8 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002058:	202a      	movs	r0, #42	@ 0x2a
 800205a:	f7ff fbe5 	bl	8001828 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800205e:	2000      	movs	r0, #0
 8002060:	f7ff fbf2 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff fbef 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800206a:	2000      	movs	r0, #0
 800206c:	f7ff fbec 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002070:	20ef      	movs	r0, #239	@ 0xef
 8002072:	f7ff fbe9 	bl	8001848 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8002076:	2011      	movs	r0, #17
 8002078:	f7ff fbd6 	bl	8001828 <LCD_WR_REG>
	HAL_Delay(120);
 800207c:	2078      	movs	r0, #120	@ 0x78
 800207e:	f001 fa01 	bl	8003484 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 8002082:	2029      	movs	r0, #41	@ 0x29
 8002084:	f7ff fbd0 	bl	8001828 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002088:	2201      	movs	r2, #1
 800208a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800208e:	4804      	ldr	r0, [pc, #16]	@ (80020a0 <lcd_init+0x2bc>)
 8002090:	f002 fcde 	bl	8004a50 <HAL_GPIO_WritePin>
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40020800 	.word	0x40020800
 800209c:	20000390 	.word	0x20000390
 80020a0:	40020000 	.word	0x40020000

080020a4 <lcd_show_string>:
		}
	}
}

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b08b      	sub	sp, #44	@ 0x2c
 80020a8:	af04      	add	r7, sp, #16
 80020aa:	60ba      	str	r2, [r7, #8]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4603      	mov	r3, r0
 80020b0:	81fb      	strh	r3, [r7, #14]
 80020b2:	460b      	mov	r3, r1
 80020b4:	81bb      	strh	r3, [r7, #12]
 80020b6:	4613      	mov	r3, r2
 80020b8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 80020ba:	89fb      	ldrh	r3, [r7, #14]
 80020bc:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 80020c2:	e048      	b.n	8002156 <lcd_show_string+0xb2>
		if (!bHz) {
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d145      	bne.n	8002156 <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 80020ca:	89fa      	ldrh	r2, [r7, #14]
 80020cc:	4b26      	ldr	r3, [pc, #152]	@ (8002168 <lcd_show_string+0xc4>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	1acb      	subs	r3, r1, r3
 80020dc:	429a      	cmp	r2, r3
 80020de:	dc3f      	bgt.n	8002160 <lcd_show_string+0xbc>
 80020e0:	89ba      	ldrh	r2, [r7, #12]
 80020e2:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <lcd_show_string+0xc4>)
 80020e4:	885b      	ldrh	r3, [r3, #2]
 80020e6:	4619      	mov	r1, r3
 80020e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80020ec:	1acb      	subs	r3, r1, r3
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dc36      	bgt.n	8002160 <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b80      	cmp	r3, #128	@ 0x80
 80020f8:	d902      	bls.n	8002100 <lcd_show_string+0x5c>
				bHz = 1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	75fb      	strb	r3, [r7, #23]
 80020fe:	e02a      	b.n	8002156 <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b0d      	cmp	r3, #13
 8002106:	d10b      	bne.n	8002120 <lcd_show_string+0x7c>
					y += sizey;
 8002108:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800210c:	b29a      	uxth	r2, r3
 800210e:	89bb      	ldrh	r3, [r7, #12]
 8002110:	4413      	add	r3, r2
 8002112:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8002114:	8abb      	ldrh	r3, [r7, #20]
 8002116:	81fb      	strh	r3, [r7, #14]
					str++;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	3301      	adds	r3, #1
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	e017      	b.n	8002150 <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	781a      	ldrb	r2, [r3, #0]
 8002124:	88fc      	ldrh	r4, [r7, #6]
 8002126:	89b9      	ldrh	r1, [r7, #12]
 8002128:	89f8      	ldrh	r0, [r7, #14]
 800212a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	4623      	mov	r3, r4
 800213c:	f7ff fc3c 	bl	80019b8 <lcd_show_char>
					x += sizey / 2;
 8002140:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002144:	085b      	lsrs	r3, r3, #1
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	4413      	add	r3, r2
 800214e:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	3301      	adds	r3, #1
 8002154:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1b2      	bne.n	80020c4 <lcd_show_string+0x20>
 800215e:	e000      	b.n	8002162 <lcd_show_string+0xbe>
				return;
 8002160:	bf00      	nop
			}
		}
	}
}
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	bd90      	pop	{r4, r7, pc}
 8002168:	20000390 	.word	0x20000390

0800216c <led_7seg_display>:
 * @brief	Scan led 7 segment
 * @param	None
 * @note	Call in 1ms interrupt
 * @retval 	None
 */
void led_7seg_display() {
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002170:	4b3f      	ldr	r3, [pc, #252]	@ (8002270 <led_7seg_display+0x104>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	b29a      	uxth	r2, r3
 8002178:	4b3d      	ldr	r3, [pc, #244]	@ (8002270 <led_7seg_display+0x104>)
 800217a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 800217c:	4b3d      	ldr	r3, [pc, #244]	@ (8002274 <led_7seg_display+0x108>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b3d      	ldr	r3, [pc, #244]	@ (8002278 <led_7seg_display+0x10c>)
 8002184:	5c9b      	ldrb	r3, [r3, r2]
 8002186:	021b      	lsls	r3, r3, #8
 8002188:	b21a      	sxth	r2, r3
 800218a:	4b39      	ldr	r3, [pc, #228]	@ (8002270 <led_7seg_display+0x104>)
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b21b      	sxth	r3, r3
 8002190:	4313      	orrs	r3, r2
 8002192:	b21b      	sxth	r3, r3
 8002194:	b29a      	uxth	r2, r3
 8002196:	4b36      	ldr	r3, [pc, #216]	@ (8002270 <led_7seg_display+0x104>)
 8002198:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 800219a:	4b36      	ldr	r3, [pc, #216]	@ (8002274 <led_7seg_display+0x108>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d846      	bhi.n	8002230 <led_7seg_display+0xc4>
 80021a2:	a201      	add	r2, pc, #4	@ (adr r2, 80021a8 <led_7seg_display+0x3c>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	080021d7 	.word	0x080021d7
 80021b0:	080021f5 	.word	0x080021f5
 80021b4:	08002213 	.word	0x08002213
	case 0:
		spi_buffer |= 0x00b0;
 80021b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002270 <led_7seg_display+0x104>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002270 <led_7seg_display+0x104>)
 80021c4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80021c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002270 <led_7seg_display+0x104>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b27      	ldr	r3, [pc, #156]	@ (8002270 <led_7seg_display+0x104>)
 80021d2:	801a      	strh	r2, [r3, #0]
		break;
 80021d4:	e02d      	b.n	8002232 <led_7seg_display+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80021d6:	4b26      	ldr	r3, [pc, #152]	@ (8002270 <led_7seg_display+0x104>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <led_7seg_display+0x104>)
 80021e2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80021e4:	4b22      	ldr	r3, [pc, #136]	@ (8002270 <led_7seg_display+0x104>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	f023 0320 	bic.w	r3, r3, #32
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <led_7seg_display+0x104>)
 80021f0:	801a      	strh	r2, [r3, #0]
		break;
 80021f2:	e01e      	b.n	8002232 <led_7seg_display+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80021f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002270 <led_7seg_display+0x104>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <led_7seg_display+0x104>)
 8002200:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8002202:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <led_7seg_display+0x104>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	f023 0310 	bic.w	r3, r3, #16
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <led_7seg_display+0x104>)
 800220e:	801a      	strh	r2, [r3, #0]
		break;
 8002210:	e00f      	b.n	8002232 <led_7seg_display+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002212:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <led_7seg_display+0x104>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800221a:	b29a      	uxth	r2, r3
 800221c:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <led_7seg_display+0x104>)
 800221e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8002220:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <led_7seg_display+0x104>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002228:	b29a      	uxth	r2, r3
 800222a:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <led_7seg_display+0x104>)
 800222c:	801a      	strh	r2, [r3, #0]
		break;
 800222e:	e000      	b.n	8002232 <led_7seg_display+0xc6>
	default:
		break;
 8002230:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <led_7seg_display+0x108>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	425a      	negs	r2, r3
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	f002 0203 	and.w	r2, r2, #3
 8002242:	bf58      	it	pl
 8002244:	4253      	negpl	r3, r2
 8002246:	b29a      	uxth	r2, r3
 8002248:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <led_7seg_display+0x108>)
 800224a:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2140      	movs	r1, #64	@ 0x40
 8002250:	480a      	ldr	r0, [pc, #40]	@ (800227c <led_7seg_display+0x110>)
 8002252:	f002 fbfd 	bl	8004a50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 8002256:	2301      	movs	r3, #1
 8002258:	2202      	movs	r2, #2
 800225a:	4905      	ldr	r1, [pc, #20]	@ (8002270 <led_7seg_display+0x104>)
 800225c:	4808      	ldr	r0, [pc, #32]	@ (8002280 <led_7seg_display+0x114>)
 800225e:	f003 fa90 	bl	8005782 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002262:	2201      	movs	r2, #1
 8002264:	2140      	movs	r1, #64	@ 0x40
 8002266:	4805      	ldr	r0, [pc, #20]	@ (800227c <led_7seg_display+0x110>)
 8002268:	f002 fbf2 	bl	8004a50 <HAL_GPIO_WritePin>
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000204 	.word	0x20000204
 8002274:	20000396 	.word	0x20000396
 8002278:	20000200 	.word	0x20000200
 800227c:	40021800 	.word	0x40021800
 8002280:	200005dc 	.word	0x200005dc

08002284 <HAL_UARTEx_RxEventCallback>:
void TestADC();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
	Modbus_CallBack(&slave, huart, Size);
 8002290:	887b      	ldrh	r3, [r7, #2]
 8002292:	461a      	mov	r2, r3
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4803      	ldr	r0, [pc, #12]	@ (80022a4 <HAL_UARTEx_RxEventCallback+0x20>)
 8002298:	f000 faac 	bl	80027f4 <Modbus_CallBack>
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	2000039c 	.word	0x2000039c

080022a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022ae:	f001 f877 	bl	80033a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022b2:	f000 f873 	bl	800239c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022b6:	f7ff f93b 	bl	8001530 <MX_GPIO_Init>
  MX_DMA_Init();
 80022ba:	f7ff f849 	bl	8001350 <MX_DMA_Init>
  MX_SPI1_Init();
 80022be:	f000 fccb 	bl	8002c58 <MX_SPI1_Init>
  MX_FSMC_Init();
 80022c2:	f7ff f865 	bl	8001390 <MX_FSMC_Init>
  MX_I2C1_Init();
 80022c6:	f7ff fa39 	bl	800173c <MX_I2C1_Init>
  MX_TIM13_Init();
 80022ca:	f000 fe79 	bl	8002fc0 <MX_TIM13_Init>
  MX_TIM2_Init();
 80022ce:	f000 fddd 	bl	8002e8c <MX_TIM2_Init>
  MX_ADC1_Init();
 80022d2:	f7fe fed9 	bl	8001088 <MX_ADC1_Init>
  MX_TIM4_Init();
 80022d6:	f000 fe25 	bl	8002f24 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80022da:	f000 ff53 	bl	8003184 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80022de:	f000 ff7b 	bl	80031d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	system_init();
 80022e2:	f000 f8c5 	bl	8002470 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	InitSlave(&BKIT01);
 80022e6:	4828      	ldr	r0, [pc, #160]	@ (8002388 <main+0xe0>)
 80022e8:	f7fe fd04 	bl	8000cf4 <InitSlave>
	slave.Tx_buf[0] = 1;
 80022ec:	4b27      	ldr	r3, [pc, #156]	@ (800238c <main+0xe4>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	715a      	strb	r2, [r3, #5]
	slave.Tx_size = 1;
 80022f2:	4b26      	ldr	r3, [pc, #152]	@ (800238c <main+0xe4>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	Modbus_Send(&slave);
 80022fa:	4824      	ldr	r0, [pc, #144]	@ (800238c <main+0xe4>)
 80022fc:	f000 f990 	bl	8002620 <Modbus_Send>
	InitTimer();
 8002300:	f000 fbee 	bl	8002ae0 <InitTimer>
	lcd_clear(BLACK);
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff fb0d 	bl	8001924 <lcd_clear>
	set_timer(10, 0);
 800230a:	2100      	movs	r1, #0
 800230c:	200a      	movs	r0, #10
 800230e:	f000 fc09 	bl	8002b24 <set_timer>
	set_timer(1000, 1);
 8002312:	2101      	movs	r1, #1
 8002314:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002318:	f000 fc04 	bl	8002b24 <set_timer>
	set_timer(500, 2);
 800231c:	2102      	movs	r1, #2
 800231e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002322:	f000 fbff 	bl	8002b24 <set_timer>


	while (1) {
		if(timer_flag[0]){
 8002326:	4b1a      	ldr	r3, [pc, #104]	@ (8002390 <main+0xe8>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <main+0x98>
			slave_behavior(&BKIT01);
 800232e:	4816      	ldr	r0, [pc, #88]	@ (8002388 <main+0xe0>)
 8002330:	f7fe fe3c 	bl	8000fac <slave_behavior>
			TestADC();
 8002334:	f000 f8ae 	bl	8002494 <TestADC>
			set_timer(10, 0);
 8002338:	2100      	movs	r1, #0
 800233a:	200a      	movs	r0, #10
 800233c:	f000 fbf2 	bl	8002b24 <set_timer>
		}
		if(timer_flag[1]){
 8002340:	4b13      	ldr	r3, [pc, #76]	@ (8002390 <main+0xe8>)
 8002342:	785b      	ldrb	r3, [r3, #1]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <main+0xb2>
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002348:	2110      	movs	r1, #16
 800234a:	4812      	ldr	r0, [pc, #72]	@ (8002394 <main+0xec>)
 800234c:	f002 fb99 	bl	8004a82 <HAL_GPIO_TogglePin>
			set_timer(1000, 1);
 8002350:	2101      	movs	r1, #1
 8002352:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002356:	f000 fbe5 	bl	8002b24 <set_timer>
		}
		if(timer_flag[2]){
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <main+0xe8>)
 800235c:	789b      	ldrb	r3, [r3, #2]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0e1      	beq.n	8002326 <main+0x7e>
			lcd_show_string(10, 30, "                      ", RED, BLACK, 16, 0);
 8002362:	2300      	movs	r3, #0
 8002364:	9302      	str	r3, [sp, #8]
 8002366:	2310      	movs	r3, #16
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	2300      	movs	r3, #0
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002372:	4a09      	ldr	r2, [pc, #36]	@ (8002398 <main+0xf0>)
 8002374:	211e      	movs	r1, #30
 8002376:	200a      	movs	r0, #10
 8002378:	f7ff fe94 	bl	80020a4 <lcd_show_string>
			set_timer(10, 2);
 800237c:	2102      	movs	r1, #2
 800237e:	200a      	movs	r0, #10
 8002380:	f000 fbd0 	bl	8002b24 <set_timer>
		if(timer_flag[0]){
 8002384:	e7cf      	b.n	8002326 <main+0x7e>
 8002386:	bf00      	nop
 8002388:	20000230 	.word	0x20000230
 800238c:	2000039c 	.word	0x2000039c
 8002390:	200005b4 	.word	0x200005b4
 8002394:	40021000 	.word	0x40021000
 8002398:	08008020 	.word	0x08008020

0800239c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b094      	sub	sp, #80	@ 0x50
 80023a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023a2:	f107 0320 	add.w	r3, r7, #32
 80023a6:	2230      	movs	r2, #48	@ 0x30
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f005 fde6 	bl	8007f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	4b28      	ldr	r3, [pc, #160]	@ (8002468 <SystemClock_Config+0xcc>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	4a27      	ldr	r2, [pc, #156]	@ (8002468 <SystemClock_Config+0xcc>)
 80023ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d0:	4b25      	ldr	r3, [pc, #148]	@ (8002468 <SystemClock_Config+0xcc>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023dc:	2300      	movs	r3, #0
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	4b22      	ldr	r3, [pc, #136]	@ (800246c <SystemClock_Config+0xd0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a21      	ldr	r2, [pc, #132]	@ (800246c <SystemClock_Config+0xd0>)
 80023e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <SystemClock_Config+0xd0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023f8:	2302      	movs	r3, #2
 80023fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023fc:	2301      	movs	r3, #1
 80023fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002400:	2310      	movs	r3, #16
 8002402:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002404:	2302      	movs	r3, #2
 8002406:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002408:	2300      	movs	r3, #0
 800240a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800240c:	2308      	movs	r3, #8
 800240e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002410:	23a8      	movs	r3, #168	@ 0xa8
 8002412:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002414:	2302      	movs	r3, #2
 8002416:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002418:	2304      	movs	r3, #4
 800241a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800241c:	f107 0320 	add.w	r3, r7, #32
 8002420:	4618      	mov	r0, r3
 8002422:	f002 fc8d 	bl	8004d40 <HAL_RCC_OscConfig>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800242c:	f000 f8f2 	bl	8002614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002430:	230f      	movs	r3, #15
 8002432:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002434:	2302      	movs	r3, #2
 8002436:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800243c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002440:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002442:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002446:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	2105      	movs	r1, #5
 800244e:	4618      	mov	r0, r3
 8002450:	f002 feee 	bl	8005230 <HAL_RCC_ClockConfig>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800245a:	f000 f8db 	bl	8002614 <Error_Handler>
  }
}
 800245e:	bf00      	nop
 8002460:	3750      	adds	r7, #80	@ 0x50
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	40007000 	.word	0x40007000

08002470 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
	button_init();
 8002474:	f7fe ff26 	bl	80012c4 <button_init>
	lcd_init();
 8002478:	f7ff fcb4 	bl	8001de4 <lcd_init>

	sensor_init();
 800247c:	f000 fa1e 	bl	80028bc <sensor_init>
	buzzer_init();
 8002480:	f7fe ff2c 	bl	80012dc <buzzer_init>

	timer2_init();
 8002484:	f000 fb06 	bl	8002a94 <timer2_init>
	timer2_set(500);
 8002488:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800248c:	f000 fb0c 	bl	8002aa8 <timer2_set>
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}

08002494 <TestADC>:
	else
		return 0;
}

uint8_t count_adc = 0;
void TestADC() {
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1) % 20;
 800249a:	4b57      	ldr	r3, [pc, #348]	@ (80025f8 <TestADC+0x164>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	4b56      	ldr	r3, [pc, #344]	@ (80025fc <TestADC+0x168>)
 80024a2:	fb83 1302 	smull	r1, r3, r3, r2
 80024a6:	10d9      	asrs	r1, r3, #3
 80024a8:	17d3      	asrs	r3, r2, #31
 80024aa:	1ac9      	subs	r1, r1, r3
 80024ac:	460b      	mov	r3, r1
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	1ad1      	subs	r1, r2, r3
 80024b6:	b2ca      	uxtb	r2, r1
 80024b8:	4b4f      	ldr	r3, [pc, #316]	@ (80025f8 <TestADC+0x164>)
 80024ba:	701a      	strb	r2, [r3, #0]
	if (count_adc == 0) {
 80024bc:	4b4e      	ldr	r3, [pc, #312]	@ (80025f8 <TestADC+0x164>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f040 8096 	bne.w	80025f2 <TestADC+0x15e>
		sensor_read();
 80024c6:	f000 fa07 	bl	80028d8 <sensor_read>
		lcd_show_string(10, 100, "Voltage:", RED, BLACK, 16, 0);
 80024ca:	2300      	movs	r3, #0
 80024cc:	9302      	str	r3, [sp, #8]
 80024ce:	2310      	movs	r3, #16
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	2300      	movs	r3, #0
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80024da:	4a49      	ldr	r2, [pc, #292]	@ (8002600 <TestADC+0x16c>)
 80024dc:	2164      	movs	r1, #100	@ 0x64
 80024de:	200a      	movs	r0, #10
 80024e0:	f7ff fde0 	bl	80020a4 <lcd_show_string>
		lcd_show_float_num(130, 100, sensor_get_voltage(), 4, RED, BLACK, 16);
 80024e4:	f000 fa20 	bl	8002928 <sensor_get_voltage>
 80024e8:	eef0 7a40 	vmov.f32	s15, s0
 80024ec:	2310      	movs	r3, #16
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	2300      	movs	r3, #0
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80024f8:	2204      	movs	r2, #4
 80024fa:	eeb0 0a67 	vmov.f32	s0, s15
 80024fe:	2164      	movs	r1, #100	@ 0x64
 8002500:	2082      	movs	r0, #130	@ 0x82
 8002502:	f7ff fbc3 	bl	8001c8c <lcd_show_float_num>
		lcd_show_string(10, 120, "Current:", RED, BLACK, 16, 0);
 8002506:	2300      	movs	r3, #0
 8002508:	9302      	str	r3, [sp, #8]
 800250a:	2310      	movs	r3, #16
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	2300      	movs	r3, #0
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002516:	4a3b      	ldr	r2, [pc, #236]	@ (8002604 <TestADC+0x170>)
 8002518:	2178      	movs	r1, #120	@ 0x78
 800251a:	200a      	movs	r0, #10
 800251c:	f7ff fdc2 	bl	80020a4 <lcd_show_string>
		lcd_show_float_num(130, 120, sensor_get_current(), 4, RED, BLACK, 16);
 8002520:	f000 fa3e 	bl	80029a0 <sensor_get_current>
 8002524:	eef0 7a40 	vmov.f32	s15, s0
 8002528:	2310      	movs	r3, #16
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	2300      	movs	r3, #0
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002534:	2204      	movs	r2, #4
 8002536:	eeb0 0a67 	vmov.f32	s0, s15
 800253a:	2178      	movs	r1, #120	@ 0x78
 800253c:	2082      	movs	r0, #130	@ 0x82
 800253e:	f7ff fba5 	bl	8001c8c <lcd_show_float_num>
		lcd_show_string(10, 140, "Light:", RED, BLACK, 16, 0);
 8002542:	2300      	movs	r3, #0
 8002544:	9302      	str	r3, [sp, #8]
 8002546:	2310      	movs	r3, #16
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	2300      	movs	r3, #0
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002552:	4a2d      	ldr	r2, [pc, #180]	@ (8002608 <TestADC+0x174>)
 8002554:	218c      	movs	r1, #140	@ 0x8c
 8002556:	200a      	movs	r0, #10
 8002558:	f7ff fda4 	bl	80020a4 <lcd_show_string>
		lcd_show_int_num(130, 140, sensor_get_light(), 4, RED, BLACK, 16);
 800255c:	f000 f9ca 	bl	80028f4 <sensor_get_light>
 8002560:	4603      	mov	r3, r0
 8002562:	461a      	mov	r2, r3
 8002564:	2310      	movs	r3, #16
 8002566:	9302      	str	r3, [sp, #8]
 8002568:	2300      	movs	r3, #0
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	2304      	movs	r3, #4
 8002574:	218c      	movs	r1, #140	@ 0x8c
 8002576:	2082      	movs	r0, #130	@ 0x82
 8002578:	f7ff fb0a 	bl	8001b90 <lcd_show_int_num>
		lcd_show_string(10, 160, "Potentiometer:", RED, BLACK, 16, 0);
 800257c:	2300      	movs	r3, #0
 800257e:	9302      	str	r3, [sp, #8]
 8002580:	2310      	movs	r3, #16
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	2300      	movs	r3, #0
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800258c:	4a1f      	ldr	r2, [pc, #124]	@ (800260c <TestADC+0x178>)
 800258e:	21a0      	movs	r1, #160	@ 0xa0
 8002590:	200a      	movs	r0, #10
 8002592:	f7ff fd87 	bl	80020a4 <lcd_show_string>
		lcd_show_int_num(130, 160, sensor_get_potentiometer(), 4, RED, BLACK,
 8002596:	f000 f9b9 	bl	800290c <sensor_get_potentiometer>
 800259a:	4603      	mov	r3, r0
 800259c:	461a      	mov	r2, r3
 800259e:	2310      	movs	r3, #16
 80025a0:	9302      	str	r3, [sp, #8]
 80025a2:	2300      	movs	r3, #0
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2304      	movs	r3, #4
 80025ae:	21a0      	movs	r1, #160	@ 0xa0
 80025b0:	2082      	movs	r0, #130	@ 0x82
 80025b2:	f7ff faed 	bl	8001b90 <lcd_show_int_num>
				16);
		lcd_show_string(10, 180, "Temperature:", RED, BLACK, 16, 0);
 80025b6:	2300      	movs	r3, #0
 80025b8:	9302      	str	r3, [sp, #8]
 80025ba:	2310      	movs	r3, #16
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	2300      	movs	r3, #0
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80025c6:	4a12      	ldr	r2, [pc, #72]	@ (8002610 <TestADC+0x17c>)
 80025c8:	21b4      	movs	r1, #180	@ 0xb4
 80025ca:	200a      	movs	r0, #10
 80025cc:	f7ff fd6a 	bl	80020a4 <lcd_show_string>
		lcd_show_float_num(130, 180, sensor_get_temperature(), 4, RED, BLACK,
 80025d0:	f000 fa42 	bl	8002a58 <sensor_get_temperature>
 80025d4:	eef0 7a40 	vmov.f32	s15, s0
 80025d8:	2310      	movs	r3, #16
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	2300      	movs	r3, #0
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80025e4:	2204      	movs	r2, #4
 80025e6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ea:	21b4      	movs	r1, #180	@ 0xb4
 80025ec:	2082      	movs	r0, #130	@ 0x82
 80025ee:	f7ff fb4d 	bl	8001c8c <lcd_show_float_num>
				16);
	}
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000398 	.word	0x20000398
 80025fc:	66666667 	.word	0x66666667
 8002600:	08008038 	.word	0x08008038
 8002604:	08008044 	.word	0x08008044
 8002608:	08008050 	.word	0x08008050
 800260c:	08008058 	.word	0x08008058
 8002610:	08008068 	.word	0x08008068

08002614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002618:	b672      	cpsid	i
}
 800261a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <Error_Handler+0x8>

08002620 <Modbus_Send>:

Modbus_HandleTypeDef master;
Modbus_HandleTypeDef slave;


HAL_StatusTypeDef Modbus_Send(Modbus_HandleTypeDef* hModbus){
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,SET);
 8002628:	2201      	movs	r2, #1
 800262a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800262e:	4817      	ldr	r0, [pc, #92]	@ (800268c <Modbus_Send+0x6c>)
 8002630:	f002 fa0e 	bl	8004a50 <HAL_GPIO_WritePin>
	if(HAL_UART_Transmit(hModbus->huart,hModbus->Tx_buf,hModbus->Tx_size,HAL_MAX_DELAY) != HAL_OK){
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	1d59      	adds	r1, r3, #5
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
 8002646:	f004 fb85 	bl	8006d54 <HAL_UART_Transmit>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <Modbus_Send+0x40>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 8002650:	2200      	movs	r2, #0
 8002652:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002656:	480d      	ldr	r0, [pc, #52]	@ (800268c <Modbus_Send+0x6c>)
 8002658:	f002 f9fa 	bl	8004a50 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e010      	b.n	8002682 <Modbus_Send+0x62>
	};
	HAL_UART_Transmit(&huart1,hModbus->Tx_buf,hModbus->Tx_size,HAL_MAX_DELAY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	1d59      	adds	r1, r3, #5
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	4808      	ldr	r0, [pc, #32]	@ (8002690 <Modbus_Send+0x70>)
 8002670:	f004 fb70 	bl	8006d54 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 8002674:	2200      	movs	r2, #0
 8002676:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800267a:	4804      	ldr	r0, [pc, #16]	@ (800268c <Modbus_Send+0x6c>)
 800267c:	f002 f9e8 	bl	8004a50 <HAL_GPIO_WritePin>
	return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40020000 	.word	0x40020000
 8002690:	2000070c 	.word	0x2000070c

08002694 <Modbus_CheckData>:

unsigned char Modbus_CheckData(Modbus_HandleTypeDef* hModbus){
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	uint16_t rx_crc = crc16(hModbus->Rx_buf, hModbus->Rx_size - 2);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80026a8:	3b02      	subs	r3, #2
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	4619      	mov	r1, r3
 80026ae:	4610      	mov	r0, r2
 80026b0:	f7fe fe1e 	bl	80012f0 <crc16>
 80026b4:	4603      	mov	r3, r0
 80026b6:	81fb      	strh	r3, [r7, #14]
	uint16_t high_crc = hModbus->Rx_buf[hModbus->Rx_size - 1];
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80026be:	3b01      	subs	r3, #1
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80026c8:	81bb      	strh	r3, [r7, #12]
	uint16_t low_crc =  hModbus->Rx_buf[hModbus->Rx_size - 2];
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80026d0:	3b02      	subs	r3, #2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 80026da:	817b      	strh	r3, [r7, #10]
	uint16_t receive_crc = (high_crc<<8)|(low_crc);
 80026dc:	89bb      	ldrh	r3, [r7, #12]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	b21a      	sxth	r2, r3
 80026e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	b21b      	sxth	r3, r3
 80026ea:	813b      	strh	r3, [r7, #8]
//	if(status){
//		HAL_UART_Transmit(&huart1, (uint8_t*)"oke", 3, 100);
//	}else{
//		HAL_UART_Transmit(&huart1, (uint8_t*)"NO", 2, 100);
//	}
	return (receive_crc == rx_crc) ? 1 : 0;
 80026ec:	893a      	ldrh	r2, [r7, #8]
 80026ee:	89fb      	ldrh	r3, [r7, #14]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <Modbus_Transmit_Slave>:
	hModbus->RxFlag = 0;
	HAL_Delay(5);
	return MODBUS_OKE;
}

Modbus_Status Modbus_Transmit_Slave(Modbus_HandleTypeDef* hModbus, uint8_t Address, uint8_t Function, uint8_t* Data, uint8_t Size, uint32_t Timeout){
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	72fb      	strb	r3, [r7, #11]
 8002710:	4613      	mov	r3, r2
 8002712:	72bb      	strb	r3, [r7, #10]
	hModbus->Tx_buf[0] = Address;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	7afa      	ldrb	r2, [r7, #11]
 8002718:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_buf[1] = Function;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	7aba      	ldrb	r2, [r7, #10]
 800271e:	719a      	strb	r2, [r3, #6]
	int i;
	uint16_t crc = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	827b      	strh	r3, [r7, #18]
	for(i=0; i<Size; i++){
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	e00c      	b.n	8002744 <Modbus_Transmit_Slave+0x42>
		hModbus->Tx_buf[i+2] = *(Data + i);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	441a      	add	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3302      	adds	r3, #2
 8002734:	7811      	ldrb	r1, [r2, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4413      	add	r3, r2
 800273a:	460a      	mov	r2, r1
 800273c:	715a      	strb	r2, [r3, #5]
	for(i=0; i<Size; i++){
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3301      	adds	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	429a      	cmp	r2, r3
 800274c:	dbed      	blt.n	800272a <Modbus_Transmit_Slave+0x28>
	}
	crc = crc16(hModbus->Tx_buf, i+2);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1d5a      	adds	r2, r3, #5
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	b29b      	uxth	r3, r3
 8002756:	3302      	adds	r3, #2
 8002758:	b29b      	uxth	r3, r3
 800275a:	4619      	mov	r1, r3
 800275c:	4610      	mov	r0, r2
 800275e:	f7fe fdc7 	bl	80012f0 <crc16>
 8002762:	4603      	mov	r3, r0
 8002764:	827b      	strh	r3, [r7, #18]
	hModbus->Tx_buf[i+2] = crc & 0x00FF; // LOW
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3302      	adds	r3, #2
 800276a:	8a7a      	ldrh	r2, [r7, #18]
 800276c:	b2d1      	uxtb	r1, r2
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4413      	add	r3, r2
 8002772:	460a      	mov	r2, r1
 8002774:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_buf[i+3] = crc >> 8; //HIGH
 8002776:	8a7b      	ldrh	r3, [r7, #18]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	b29a      	uxth	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	3303      	adds	r3, #3
 8002780:	b2d1      	uxtb	r1, r2
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4413      	add	r3, r2
 8002786:	460a      	mov	r2, r1
 8002788:	715a      	strb	r2, [r3, #5]
	hModbus->Tx_size = Size + 4;
 800278a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800278e:	b29b      	uxth	r3, r3
 8002790:	3304      	adds	r3, #4
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	if(Modbus_Send(hModbus) == HAL_OK){
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff ff40 	bl	8002620 <Modbus_Send>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <Modbus_Transmit_Slave+0xa8>
		return MODBUS_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e003      	b.n	80027b2 <Modbus_Transmit_Slave+0xb0>
	}
	HAL_Delay(5);
 80027aa:	2005      	movs	r0, #5
 80027ac:	f000 fe6a 	bl	8003484 <HAL_Delay>
	return MODBUS_OKE;
 80027b0:	2302      	movs	r3, #2
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <Modbus_Receive>:

Modbus_Status Modbus_Receive(Modbus_HandleTypeDef* hModbus){ //Thieu timeout
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80027ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027d2:	4619      	mov	r1, r3
 80027d4:	f004 fb49 	bl	8006e6a <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,RESET);
 80027d8:	2200      	movs	r2, #0
 80027da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027de:	4804      	ldr	r0, [pc, #16]	@ (80027f0 <Modbus_Receive+0x34>)
 80027e0:	f002 f936 	bl	8004a50 <HAL_GPIO_WritePin>
	return MODBUS_OKE;
 80027e4:	2302      	movs	r3, #2
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40020000 	.word	0x40020000

080027f4 <Modbus_CallBack>:

void Modbus_CallBack(Modbus_HandleTypeDef* hModbus, UART_HandleTypeDef* huart, uint16_t Size){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
	hModbus->Rx_size = Size;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	88fa      	ldrh	r2, [r7, #6]
 8002806:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	hModbus->RxFlag = 1;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
	Receive_Flag = Modbus_CheckData(hModbus);
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff ff3e 	bl	8002694 <Modbus_CheckData>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	4b0d      	ldr	r3, [pc, #52]	@ (8002854 <Modbus_CallBack+0x60>)
 800281e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, hModbus->Rx_buf, hModbus->Rx_size, HAL_MAX_DELAY);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f503 7184 	add.w	r1, r3, #264	@ 0x108
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f8b3 2208 	ldrh.w	r2, [r3, #520]	@ 0x208
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	4809      	ldr	r0, [pc, #36]	@ (8002858 <Modbus_CallBack+0x64>)
 8002832:	f004 fa8f 	bl	8006d54 <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle_IT(hModbus->huart, hModbus->Rx_buf, MAX_SIZE);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002840:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002844:	4619      	mov	r1, r3
 8002846:	f004 fb10 	bl	8006e6a <HAL_UARTEx_ReceiveToIdle_IT>
}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000399 	.word	0x20000399
 8002858:	2000070c 	.word	0x2000070c

0800285c <Modbus_Init>:

void Modbus_Init(Modbus_HandleTypeDef* hModbus, UART_HandleTypeDef* huart){
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
	hModbus->huart = huart;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	601a      	str	r2, [r3, #0]
	hModbus->Address = 0;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	711a      	strb	r2, [r3, #4]
	memset(hModbus->Rx_buf,0,sizeof(hModbus->Rx_buf));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f005 fb7c 	bl	8007f7c <memset>
	hModbus->Rx_size = 256;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800288a:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	memset(hModbus->Tx_buf,0,sizeof(hModbus->Tx_buf));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3305      	adds	r3, #5
 8002892:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f005 fb6f 	bl	8007f7c <memset>
	hModbus->Tx_size = 0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	hModbus->RxFlag = 0;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
	Modbus_Receive(hModbus);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ff84 	bl	80027bc <Modbus_Receive>
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <sensor_init>:

/* Variables */
uint16_t adc_receive[5];

/* Functions */
void sensor_init() {
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (void*) adc_receive, 5);
 80028c0:	2205      	movs	r2, #5
 80028c2:	4903      	ldr	r1, [pc, #12]	@ (80028d0 <sensor_init+0x14>)
 80028c4:	4803      	ldr	r0, [pc, #12]	@ (80028d4 <sensor_init+0x18>)
 80028c6:	f000 fe45 	bl	8003554 <HAL_ADC_Start_DMA>
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200005a8 	.word	0x200005a8
 80028d4:	20000240 	.word	0x20000240

080028d8 <sensor_read>:

void sensor_read() {
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_receive, 5);
 80028dc:	2205      	movs	r2, #5
 80028de:	4903      	ldr	r1, [pc, #12]	@ (80028ec <sensor_read+0x14>)
 80028e0:	4803      	ldr	r0, [pc, #12]	@ (80028f0 <sensor_read+0x18>)
 80028e2:	f000 fe37 	bl	8003554 <HAL_ADC_Start_DMA>
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200005a8 	.word	0x200005a8
 80028f0:	20000240 	.word	0x20000240

080028f4 <sensor_get_light>:

uint16_t sensor_get_light() {
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
	return adc_receive[2];
 80028f8:	4b03      	ldr	r3, [pc, #12]	@ (8002908 <sensor_get_light+0x14>)
 80028fa:	889b      	ldrh	r3, [r3, #4]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	200005a8 	.word	0x200005a8

0800290c <sensor_get_potentiometer>:

uint16_t sensor_get_potentiometer() {
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002910:	4b03      	ldr	r3, [pc, #12]	@ (8002920 <sensor_get_potentiometer+0x14>)
 8002912:	88db      	ldrh	r3, [r3, #6]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	200005a8 	.word	0x200005a8
 8002924:	00000000 	.word	0x00000000

08002928 <sensor_get_voltage>:

float sensor_get_voltage() {
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
	return ((float) adc_receive[0] * 3.3 * 12) / (4095 * 1.565);
 800292c:	4b1a      	ldr	r3, [pc, #104]	@ (8002998 <sensor_get_voltage+0x70>)
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002938:	ee17 0a90 	vmov	r0, s15
 800293c:	f7fd fda8 	bl	8000490 <__aeabi_f2d>
 8002940:	a311      	add	r3, pc, #68	@ (adr r3, 8002988 <sensor_get_voltage+0x60>)
 8002942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002946:	f7fd fdfb 	bl	8000540 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	4b11      	ldr	r3, [pc, #68]	@ (800299c <sensor_get_voltage+0x74>)
 8002958:	f7fd fdf2 	bl	8000540 <__aeabi_dmul>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4610      	mov	r0, r2
 8002962:	4619      	mov	r1, r3
 8002964:	a30a      	add	r3, pc, #40	@ (adr r3, 8002990 <sensor_get_voltage+0x68>)
 8002966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296a:	f7fd ff13 	bl	8000794 <__aeabi_ddiv>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4610      	mov	r0, r2
 8002974:	4619      	mov	r1, r3
 8002976:	f7fd fff5 	bl	8000964 <__aeabi_d2f>
 800297a:	4603      	mov	r3, r0
 800297c:	ee07 3a90 	vmov	s15, r3
}
 8002980:	eeb0 0a67 	vmov.f32	s0, s15
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	66666666 	.word	0x66666666
 800298c:	400a6666 	.word	0x400a6666
 8002990:	cccccccd 	.word	0xcccccccd
 8002994:	40b908ac 	.word	0x40b908ac
 8002998:	200005a8 	.word	0x200005a8
 800299c:	40280000 	.word	0x40280000

080029a0 <sensor_get_current>:

float sensor_get_current() {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
	return (((float) adc_receive[1] * 3.3 * 1000) / (4095 * 0.647) - 2.5) * 5
 80029a4:	4b28      	ldr	r3, [pc, #160]	@ (8002a48 <sensor_get_current+0xa8>)
 80029a6:	885b      	ldrh	r3, [r3, #2]
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b0:	ee17 0a90 	vmov	r0, s15
 80029b4:	f7fd fd6c 	bl	8000490 <__aeabi_f2d>
 80029b8:	a31f      	add	r3, pc, #124	@ (adr r3, 8002a38 <sensor_get_current+0x98>)
 80029ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029be:	f7fd fdbf 	bl	8000540 <__aeabi_dmul>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4610      	mov	r0, r2
 80029c8:	4619      	mov	r1, r3
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	4b1f      	ldr	r3, [pc, #124]	@ (8002a4c <sensor_get_current+0xac>)
 80029d0:	f7fd fdb6 	bl	8000540 <__aeabi_dmul>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	a318      	add	r3, pc, #96	@ (adr r3, 8002a40 <sensor_get_current+0xa0>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fd fed7 	bl	8000794 <__aeabi_ddiv>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	4b17      	ldr	r3, [pc, #92]	@ (8002a50 <sensor_get_current+0xb0>)
 80029f4:	f7fd fbec 	bl	80001d0 <__aeabi_dsub>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	4b13      	ldr	r3, [pc, #76]	@ (8002a54 <sensor_get_current+0xb4>)
 8002a06:	f7fd fd9b 	bl	8000540 <__aeabi_dmul>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
			/ 2.5;
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <sensor_get_current+0xb0>)
 8002a18:	f7fd febc 	bl	8000794 <__aeabi_ddiv>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fd ff9e 	bl	8000964 <__aeabi_d2f>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	ee07 3a90 	vmov	s15, r3
}
 8002a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	f3af 8000 	nop.w
 8002a38:	66666666 	.word	0x66666666
 8002a3c:	400a6666 	.word	0x400a6666
 8002a40:	147ae148 	.word	0x147ae148
 8002a44:	40a4b2ee 	.word	0x40a4b2ee
 8002a48:	200005a8 	.word	0x200005a8
 8002a4c:	408f4000 	.word	0x408f4000
 8002a50:	40040000 	.word	0x40040000
 8002a54:	40140000 	.word	0x40140000

08002a58 <sensor_get_temperature>:

float sensor_get_temperature() {
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
	return ((float) adc_receive[4] * 330) / (4095);
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a88 <sensor_get_temperature+0x30>)
 8002a5e:	891b      	ldrh	r3, [r3, #8]
 8002a60:	ee07 3a90 	vmov	s15, r3
 8002a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a68:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002a8c <sensor_get_temperature+0x34>
 8002a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a70:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002a90 <sensor_get_temperature+0x38>
 8002a74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a78:	eef0 7a66 	vmov.f32	s15, s13
}
 8002a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	200005a8 	.word	0x200005a8
 8002a8c:	43a50000 	.word	0x43a50000
 8002a90:	457ff000 	.word	0x457ff000

08002a94 <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002a98:	4802      	ldr	r0, [pc, #8]	@ (8002aa4 <timer2_init+0x10>)
 8002a9a:	f003 f92b 	bl	8005cf4 <HAL_TIM_Base_Start_IT>
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000634 	.word	0x20000634

08002aa8 <timer2_set>:
	timer1_mul = ms / TIMER_CYCLE_2;
	timer1_counter = timer2_mul;
	timer1_flag = 0;
}

void timer2_set(int ms) {
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	timer2_mul = ms / TIMER_CYCLE_2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <timer2_set+0x2c>)
 8002ab6:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_mul;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <timer2_set+0x2c>)
 8002aba:	881a      	ldrh	r2, [r3, #0]
 8002abc:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <timer2_set+0x30>)
 8002abe:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <timer2_set+0x34>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	200005d4 	.word	0x200005d4
 8002ad8:	200005d2 	.word	0x200005d2
 8002adc:	200005d0 	.word	0x200005d0

08002ae0 <InitTimer>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void InitTimer(void){
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
	for(int i = 0; i < __MAX_TIM; i++){
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	e00c      	b.n	8002b06 <InitTimer+0x26>
		timer_counter[i] = 0;
 8002aec:	4a0b      	ldr	r2, [pc, #44]	@ (8002b1c <InitTimer+0x3c>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2100      	movs	r1, #0
 8002af2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timer_flag[i] = 0;
 8002af6:	4a0a      	ldr	r2, [pc, #40]	@ (8002b20 <InitTimer+0x40>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4413      	add	r3, r2
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < __MAX_TIM; i++){
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3301      	adds	r3, #1
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	ddef      	ble.n	8002aec <InitTimer+0xc>
	}
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	200005bc 	.word	0x200005bc
 8002b20:	200005b4 	.word	0x200005b4

08002b24 <set_timer>:

void set_timer(uint32_t ms, uint8_t idx){
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
	timer_flag[idx] = 0;
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	4a07      	ldr	r2, [pc, #28]	@ (8002b50 <set_timer+0x2c>)
 8002b34:	2100      	movs	r1, #0
 8002b36:	54d1      	strb	r1, [r2, r3]
	timer_counter[idx] = ms;
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	4906      	ldr	r1, [pc, #24]	@ (8002b54 <set_timer+0x30>)
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	200005b4 	.word	0x200005b4
 8002b54:	200005bc 	.word	0x200005bc

08002b58 <TimerRun>:

void TimerRun(void){
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
	for(int i = 0; i < __MAX_TIM; i++){
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	e01c      	b.n	8002b9e <TimerRun+0x46>
		if(timer_counter[i] > 0){
 8002b64:	4a13      	ldr	r2, [pc, #76]	@ (8002bb4 <TimerRun+0x5c>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <TimerRun+0x40>
			timer_counter[i]--;
 8002b70:	4a10      	ldr	r2, [pc, #64]	@ (8002bb4 <TimerRun+0x5c>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	1e5a      	subs	r2, r3, #1
 8002b7a:	490e      	ldr	r1, [pc, #56]	@ (8002bb4 <TimerRun+0x5c>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] == 0){
 8002b82:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb4 <TimerRun+0x5c>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d104      	bne.n	8002b98 <TimerRun+0x40>
				timer_flag[i] = 1;
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb8 <TimerRun+0x60>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < __MAX_TIM; i++){
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	dddf      	ble.n	8002b64 <TimerRun+0xc>
			}
		}
	}
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	200005bc 	.word	0x200005bc
 8002bb8:	200005b4 	.word	0x200005b4

08002bbc <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bcc:	d116      	bne.n	8002bfc <HAL_TIM_PeriodElapsedCallback+0x40>
		TimerRun();
 8002bce:	f7ff ffc3 	bl	8002b58 <TimerRun>
		if (timer2_counter > 0) {
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d010      	beq.n	8002bfc <HAL_TIM_PeriodElapsedCallback+0x40>
			timer2_counter--;
 8002bda:	4b18      	ldr	r3, [pc, #96]	@ (8002c3c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	4b16      	ldr	r3, [pc, #88]	@ (8002c3c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002be4:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 8002be6:	4b15      	ldr	r3, [pc, #84]	@ (8002c3c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_TIM_PeriodElapsedCallback+0x40>
				timer2_flag = 1;
 8002bee:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
				timer2_counter = timer2_mul;
 8002bf4:	4b13      	ldr	r3, [pc, #76]	@ (8002c44 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002bf6:	881a      	ldrh	r2, [r3, #0]
 8002bf8:	4b10      	ldr	r3, [pc, #64]	@ (8002c3c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002bfa:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	if (htim->Instance == TIM4) {
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a11      	ldr	r2, [pc, #68]	@ (8002c48 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d116      	bne.n	8002c34 <HAL_TIM_PeriodElapsedCallback+0x78>
		if (timer4_counter > 0) {
 8002c06:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <HAL_TIM_PeriodElapsedCallback+0x74>
			timer4_counter--;
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c4c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c18:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_TIM_PeriodElapsedCallback+0x74>
				timer4_flag = 1;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
				timer4_counter = timer4_mul;
 8002c28:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002c2a:	881a      	ldrh	r2, [r3, #0]
 8002c2c:	4b07      	ldr	r3, [pc, #28]	@ (8002c4c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c2e:	801a      	strh	r2, [r3, #0]
			}
		}

		led_7seg_display();
 8002c30:	f7ff fa9c 	bl	800216c <led_7seg_display>
	}
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	200005d2 	.word	0x200005d2
 8002c40:	200005d0 	.word	0x200005d0
 8002c44:	200005d4 	.word	0x200005d4
 8002c48:	40000800 	.word	0x40000800
 8002c4c:	200005d8 	.word	0x200005d8
 8002c50:	200005d6 	.word	0x200005d6
 8002c54:	200005da 	.word	0x200005da

08002c58 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c5c:	4b17      	ldr	r3, [pc, #92]	@ (8002cbc <MX_SPI1_Init+0x64>)
 8002c5e:	4a18      	ldr	r2, [pc, #96]	@ (8002cc0 <MX_SPI1_Init+0x68>)
 8002c60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c62:	4b16      	ldr	r3, [pc, #88]	@ (8002cbc <MX_SPI1_Init+0x64>)
 8002c64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c6a:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <MX_SPI1_Init+0x64>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c70:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <MX_SPI1_Init+0x64>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c76:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <MX_SPI1_Init+0x64>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cbc <MX_SPI1_Init+0x64>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c82:	4b0e      	ldr	r3, [pc, #56]	@ (8002cbc <MX_SPI1_Init+0x64>)
 8002c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002cbc <MX_SPI1_Init+0x64>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c90:	4b0a      	ldr	r3, [pc, #40]	@ (8002cbc <MX_SPI1_Init+0x64>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c96:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <MX_SPI1_Init+0x64>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c9c:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <MX_SPI1_Init+0x64>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <MX_SPI1_Init+0x64>)
 8002ca4:	220a      	movs	r2, #10
 8002ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ca8:	4804      	ldr	r0, [pc, #16]	@ (8002cbc <MX_SPI1_Init+0x64>)
 8002caa:	f002 fce1 	bl	8005670 <HAL_SPI_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002cb4:	f7ff fcae 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200005dc 	.word	0x200005dc
 8002cc0:	40013000 	.word	0x40013000

08002cc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	@ 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a19      	ldr	r2, [pc, #100]	@ (8002d48 <HAL_SPI_MspInit+0x84>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d12b      	bne.n	8002d3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	4b18      	ldr	r3, [pc, #96]	@ (8002d4c <HAL_SPI_MspInit+0x88>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	4a17      	ldr	r2, [pc, #92]	@ (8002d4c <HAL_SPI_MspInit+0x88>)
 8002cf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cf6:	4b15      	ldr	r3, [pc, #84]	@ (8002d4c <HAL_SPI_MspInit+0x88>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <HAL_SPI_MspInit+0x88>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	4a10      	ldr	r2, [pc, #64]	@ (8002d4c <HAL_SPI_MspInit+0x88>)
 8002d0c:	f043 0302 	orr.w	r3, r3, #2
 8002d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d12:	4b0e      	ldr	r3, [pc, #56]	@ (8002d4c <HAL_SPI_MspInit+0x88>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002d1e:	2338      	movs	r3, #56	@ 0x38
 8002d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d2e:	2305      	movs	r3, #5
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	4619      	mov	r1, r3
 8002d38:	4805      	ldr	r0, [pc, #20]	@ (8002d50 <HAL_SPI_MspInit+0x8c>)
 8002d3a:	f001 fced 	bl	8004718 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d3e:	bf00      	nop
 8002d40:	3728      	adds	r7, #40	@ 0x28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40013000 	.word	0x40013000
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40020400 	.word	0x40020400

08002d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	4b10      	ldr	r3, [pc, #64]	@ (8002da0 <HAL_MspInit+0x4c>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d62:	4a0f      	ldr	r2, [pc, #60]	@ (8002da0 <HAL_MspInit+0x4c>)
 8002d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002da0 <HAL_MspInit+0x4c>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	4b09      	ldr	r3, [pc, #36]	@ (8002da0 <HAL_MspInit+0x4c>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	4a08      	ldr	r2, [pc, #32]	@ (8002da0 <HAL_MspInit+0x4c>)
 8002d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d86:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_MspInit+0x4c>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40023800 	.word	0x40023800

08002da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002da8:	bf00      	nop
 8002daa:	e7fd      	b.n	8002da8 <NMI_Handler+0x4>

08002dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db0:	bf00      	nop
 8002db2:	e7fd      	b.n	8002db0 <HardFault_Handler+0x4>

08002db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db8:	bf00      	nop
 8002dba:	e7fd      	b.n	8002db8 <MemManage_Handler+0x4>

08002dbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <BusFault_Handler+0x4>

08002dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <UsageFault_Handler+0x4>

08002dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dfa:	f000 fb23 	bl	8003444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e08:	4802      	ldr	r0, [pc, #8]	@ (8002e14 <TIM2_IRQHandler+0x10>)
 8002e0a:	f003 f905 	bl	8006018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000634 	.word	0x20000634

08002e18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e1c:	4802      	ldr	r0, [pc, #8]	@ (8002e28 <TIM4_IRQHandler+0x10>)
 8002e1e:	f003 f8fb 	bl	8006018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	2000067c 	.word	0x2000067c

08002e2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e30:	4802      	ldr	r0, [pc, #8]	@ (8002e3c <USART1_IRQHandler+0x10>)
 8002e32:	f004 f877 	bl	8006f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000070c 	.word	0x2000070c

08002e40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e44:	4802      	ldr	r0, [pc, #8]	@ (8002e50 <USART3_IRQHandler+0x10>)
 8002e46:	f004 f86d 	bl	8006f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000754 	.word	0x20000754

08002e54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e58:	4802      	ldr	r0, [pc, #8]	@ (8002e64 <DMA2_Stream0_IRQHandler+0x10>)
 8002e5a:	f001 f9f3 	bl	8004244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000288 	.word	0x20000288

08002e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <SystemInit+0x20>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e72:	4a05      	ldr	r2, [pc, #20]	@ (8002e88 <SystemInit+0x20>)
 8002e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e92:	f107 0308 	add.w	r3, r7, #8
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea0:	463b      	mov	r3, r7
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f20 <MX_TIM2_Init+0x94>)
 8002eaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002eae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <MX_TIM2_Init+0x94>)
 8002eb2:	f240 3247 	movw	r2, #839	@ 0x347
 8002eb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb8:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <MX_TIM2_Init+0x94>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002ebe:	4b18      	ldr	r3, [pc, #96]	@ (8002f20 <MX_TIM2_Init+0x94>)
 8002ec0:	2263      	movs	r2, #99	@ 0x63
 8002ec2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec4:	4b16      	ldr	r3, [pc, #88]	@ (8002f20 <MX_TIM2_Init+0x94>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eca:	4b15      	ldr	r3, [pc, #84]	@ (8002f20 <MX_TIM2_Init+0x94>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ed0:	4813      	ldr	r0, [pc, #76]	@ (8002f20 <MX_TIM2_Init+0x94>)
 8002ed2:	f002 febf 	bl	8005c54 <HAL_TIM_Base_Init>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002edc:	f7ff fb9a 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ee4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ee6:	f107 0308 	add.w	r3, r7, #8
 8002eea:	4619      	mov	r1, r3
 8002eec:	480c      	ldr	r0, [pc, #48]	@ (8002f20 <MX_TIM2_Init+0x94>)
 8002eee:	f003 fa45 	bl	800637c <HAL_TIM_ConfigClockSource>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002ef8:	f7ff fb8c 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002efc:	2300      	movs	r3, #0
 8002efe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f00:	2300      	movs	r3, #0
 8002f02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f04:	463b      	mov	r3, r7
 8002f06:	4619      	mov	r1, r3
 8002f08:	4805      	ldr	r0, [pc, #20]	@ (8002f20 <MX_TIM2_Init+0x94>)
 8002f0a:	f003 fe43 	bl	8006b94 <HAL_TIMEx_MasterConfigSynchronization>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f14:	f7ff fb7e 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f18:	bf00      	nop
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000634 	.word	0x20000634

08002f24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f2a:	f107 0308 	add.w	r3, r7, #8
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	609a      	str	r2, [r3, #8]
 8002f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f38:	463b      	mov	r3, r7
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f40:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb8 <MX_TIM4_Init+0x94>)
 8002f42:	4a1e      	ldr	r2, [pc, #120]	@ (8002fbc <MX_TIM4_Init+0x98>)
 8002f44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8002f46:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb8 <MX_TIM4_Init+0x94>)
 8002f48:	f240 3247 	movw	r2, #839	@ 0x347
 8002f4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb8 <MX_TIM4_Init+0x94>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002f54:	4b18      	ldr	r3, [pc, #96]	@ (8002fb8 <MX_TIM4_Init+0x94>)
 8002f56:	2263      	movs	r2, #99	@ 0x63
 8002f58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f5a:	4b17      	ldr	r3, [pc, #92]	@ (8002fb8 <MX_TIM4_Init+0x94>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f60:	4b15      	ldr	r3, [pc, #84]	@ (8002fb8 <MX_TIM4_Init+0x94>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f66:	4814      	ldr	r0, [pc, #80]	@ (8002fb8 <MX_TIM4_Init+0x94>)
 8002f68:	f002 fe74 	bl	8005c54 <HAL_TIM_Base_Init>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002f72:	f7ff fb4f 	bl	8002614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f7c:	f107 0308 	add.w	r3, r7, #8
 8002f80:	4619      	mov	r1, r3
 8002f82:	480d      	ldr	r0, [pc, #52]	@ (8002fb8 <MX_TIM4_Init+0x94>)
 8002f84:	f003 f9fa 	bl	800637c <HAL_TIM_ConfigClockSource>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002f8e:	f7ff fb41 	bl	8002614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f9a:	463b      	mov	r3, r7
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4806      	ldr	r0, [pc, #24]	@ (8002fb8 <MX_TIM4_Init+0x94>)
 8002fa0:	f003 fdf8 	bl	8006b94 <HAL_TIMEx_MasterConfigSynchronization>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002faa:	f7ff fb33 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000067c 	.word	0x2000067c
 8002fbc:	40000800 	.word	0x40000800

08002fc0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
 8002fd4:	615a      	str	r2, [r3, #20]
 8002fd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003054 <MX_TIM13_Init+0x94>)
 8002fda:	4a1f      	ldr	r2, [pc, #124]	@ (8003058 <MX_TIM13_Init+0x98>)
 8002fdc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002fde:	4b1d      	ldr	r3, [pc, #116]	@ (8003054 <MX_TIM13_Init+0x94>)
 8002fe0:	f240 3247 	movw	r2, #839	@ 0x347
 8002fe4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8003054 <MX_TIM13_Init+0x94>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002fec:	4b19      	ldr	r3, [pc, #100]	@ (8003054 <MX_TIM13_Init+0x94>)
 8002fee:	2263      	movs	r2, #99	@ 0x63
 8002ff0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff2:	4b18      	ldr	r3, [pc, #96]	@ (8003054 <MX_TIM13_Init+0x94>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff8:	4b16      	ldr	r3, [pc, #88]	@ (8003054 <MX_TIM13_Init+0x94>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002ffe:	4815      	ldr	r0, [pc, #84]	@ (8003054 <MX_TIM13_Init+0x94>)
 8003000:	f002 fe28 	bl	8005c54 <HAL_TIM_Base_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800300a:	f7ff fb03 	bl	8002614 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800300e:	4811      	ldr	r0, [pc, #68]	@ (8003054 <MX_TIM13_Init+0x94>)
 8003010:	f002 fee0 	bl	8005dd4 <HAL_TIM_PWM_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800301a:	f7ff fafb 	bl	8002614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800301e:	2360      	movs	r3, #96	@ 0x60
 8003020:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800302e:	1d3b      	adds	r3, r7, #4
 8003030:	2200      	movs	r2, #0
 8003032:	4619      	mov	r1, r3
 8003034:	4807      	ldr	r0, [pc, #28]	@ (8003054 <MX_TIM13_Init+0x94>)
 8003036:	f003 f8df 	bl	80061f8 <HAL_TIM_PWM_ConfigChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003040:	f7ff fae8 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003044:	4803      	ldr	r0, [pc, #12]	@ (8003054 <MX_TIM13_Init+0x94>)
 8003046:	f000 f863 	bl	8003110 <HAL_TIM_MspPostInit>

}
 800304a:	bf00      	nop
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200006c4 	.word	0x200006c4
 8003058:	40001c00 	.word	0x40001c00

0800305c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800306c:	d116      	bne.n	800309c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	4b24      	ldr	r3, [pc, #144]	@ (8003104 <HAL_TIM_Base_MspInit+0xa8>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	4a23      	ldr	r2, [pc, #140]	@ (8003104 <HAL_TIM_Base_MspInit+0xa8>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6413      	str	r3, [r2, #64]	@ 0x40
 800307e:	4b21      	ldr	r3, [pc, #132]	@ (8003104 <HAL_TIM_Base_MspInit+0xa8>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800308a:	2200      	movs	r2, #0
 800308c:	2100      	movs	r1, #0
 800308e:	201c      	movs	r0, #28
 8003090:	f000 ff09 	bl	8003ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003094:	201c      	movs	r0, #28
 8003096:	f000 ff22 	bl	8003ede <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800309a:	e02e      	b.n	80030fa <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a19      	ldr	r2, [pc, #100]	@ (8003108 <HAL_TIM_Base_MspInit+0xac>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d116      	bne.n	80030d4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	4b16      	ldr	r3, [pc, #88]	@ (8003104 <HAL_TIM_Base_MspInit+0xa8>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	4a15      	ldr	r2, [pc, #84]	@ (8003104 <HAL_TIM_Base_MspInit+0xa8>)
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b6:	4b13      	ldr	r3, [pc, #76]	@ (8003104 <HAL_TIM_Base_MspInit+0xa8>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2100      	movs	r1, #0
 80030c6:	201e      	movs	r0, #30
 80030c8:	f000 feed 	bl	8003ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030cc:	201e      	movs	r0, #30
 80030ce:	f000 ff06 	bl	8003ede <HAL_NVIC_EnableIRQ>
}
 80030d2:	e012      	b.n	80030fa <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM13)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0c      	ldr	r2, [pc, #48]	@ (800310c <HAL_TIM_Base_MspInit+0xb0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d10d      	bne.n	80030fa <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <HAL_TIM_Base_MspInit+0xa8>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	4a07      	ldr	r2, [pc, #28]	@ (8003104 <HAL_TIM_Base_MspInit+0xa8>)
 80030e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ee:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <HAL_TIM_Base_MspInit+0xa8>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
}
 80030fa:	bf00      	nop
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
 8003108:	40000800 	.word	0x40000800
 800310c:	40001c00 	.word	0x40001c00

08003110 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a12      	ldr	r2, [pc, #72]	@ (8003178 <HAL_TIM_MspPostInit+0x68>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d11e      	bne.n	8003170 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	4b11      	ldr	r3, [pc, #68]	@ (800317c <HAL_TIM_MspPostInit+0x6c>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	4a10      	ldr	r2, [pc, #64]	@ (800317c <HAL_TIM_MspPostInit+0x6c>)
 800313c:	f043 0320 	orr.w	r3, r3, #32
 8003140:	6313      	str	r3, [r2, #48]	@ 0x30
 8003142:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <HAL_TIM_MspPostInit+0x6c>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800314e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003152:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003154:	2302      	movs	r3, #2
 8003156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315c:	2300      	movs	r3, #0
 800315e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003160:	2309      	movs	r3, #9
 8003162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	4619      	mov	r1, r3
 800316a:	4805      	ldr	r0, [pc, #20]	@ (8003180 <HAL_TIM_MspPostInit+0x70>)
 800316c:	f001 fad4 	bl	8004718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003170:	bf00      	nop
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40001c00 	.word	0x40001c00
 800317c:	40023800 	.word	0x40023800
 8003180:	40021400 	.word	0x40021400

08003184 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003188:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <MX_USART1_UART_Init+0x4c>)
 800318a:	4a12      	ldr	r2, [pc, #72]	@ (80031d4 <MX_USART1_UART_Init+0x50>)
 800318c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800318e:	4b10      	ldr	r3, [pc, #64]	@ (80031d0 <MX_USART1_UART_Init+0x4c>)
 8003190:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003194:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003196:	4b0e      	ldr	r3, [pc, #56]	@ (80031d0 <MX_USART1_UART_Init+0x4c>)
 8003198:	2200      	movs	r2, #0
 800319a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800319c:	4b0c      	ldr	r3, [pc, #48]	@ (80031d0 <MX_USART1_UART_Init+0x4c>)
 800319e:	2200      	movs	r2, #0
 80031a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031a2:	4b0b      	ldr	r3, [pc, #44]	@ (80031d0 <MX_USART1_UART_Init+0x4c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031a8:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <MX_USART1_UART_Init+0x4c>)
 80031aa:	220c      	movs	r2, #12
 80031ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ae:	4b08      	ldr	r3, [pc, #32]	@ (80031d0 <MX_USART1_UART_Init+0x4c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031b4:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <MX_USART1_UART_Init+0x4c>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031ba:	4805      	ldr	r0, [pc, #20]	@ (80031d0 <MX_USART1_UART_Init+0x4c>)
 80031bc:	f003 fd7a 	bl	8006cb4 <HAL_UART_Init>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031c6:	f7ff fa25 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	2000070c 	.word	0x2000070c
 80031d4:	40011000 	.word	0x40011000

080031d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80031dc:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <MX_USART3_UART_Init+0x4c>)
 80031de:	4a12      	ldr	r2, [pc, #72]	@ (8003228 <MX_USART3_UART_Init+0x50>)
 80031e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4800;
 80031e2:	4b10      	ldr	r3, [pc, #64]	@ (8003224 <MX_USART3_UART_Init+0x4c>)
 80031e4:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 80031e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003224 <MX_USART3_UART_Init+0x4c>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <MX_USART3_UART_Init+0x4c>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003224 <MX_USART3_UART_Init+0x4c>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031fc:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <MX_USART3_UART_Init+0x4c>)
 80031fe:	220c      	movs	r2, #12
 8003200:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003202:	4b08      	ldr	r3, [pc, #32]	@ (8003224 <MX_USART3_UART_Init+0x4c>)
 8003204:	2200      	movs	r2, #0
 8003206:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003208:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <MX_USART3_UART_Init+0x4c>)
 800320a:	2200      	movs	r2, #0
 800320c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800320e:	4805      	ldr	r0, [pc, #20]	@ (8003224 <MX_USART3_UART_Init+0x4c>)
 8003210:	f003 fd50 	bl	8006cb4 <HAL_UART_Init>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800321a:	f7ff f9fb 	bl	8002614 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000754 	.word	0x20000754
 8003228:	40004800 	.word	0x40004800

0800322c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08c      	sub	sp, #48	@ 0x30
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a3b      	ldr	r2, [pc, #236]	@ (8003338 <HAL_UART_MspInit+0x10c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d135      	bne.n	80032ba <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	4b3a      	ldr	r3, [pc, #232]	@ (800333c <HAL_UART_MspInit+0x110>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003256:	4a39      	ldr	r2, [pc, #228]	@ (800333c <HAL_UART_MspInit+0x110>)
 8003258:	f043 0310 	orr.w	r3, r3, #16
 800325c:	6453      	str	r3, [r2, #68]	@ 0x44
 800325e:	4b37      	ldr	r3, [pc, #220]	@ (800333c <HAL_UART_MspInit+0x110>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	4b33      	ldr	r3, [pc, #204]	@ (800333c <HAL_UART_MspInit+0x110>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	4a32      	ldr	r2, [pc, #200]	@ (800333c <HAL_UART_MspInit+0x110>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6313      	str	r3, [r2, #48]	@ 0x30
 800327a:	4b30      	ldr	r3, [pc, #192]	@ (800333c <HAL_UART_MspInit+0x110>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003286:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800328a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328c:	2302      	movs	r3, #2
 800328e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003294:	2303      	movs	r3, #3
 8003296:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003298:	2307      	movs	r3, #7
 800329a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329c:	f107 031c 	add.w	r3, r7, #28
 80032a0:	4619      	mov	r1, r3
 80032a2:	4827      	ldr	r0, [pc, #156]	@ (8003340 <HAL_UART_MspInit+0x114>)
 80032a4:	f001 fa38 	bl	8004718 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80032a8:	2200      	movs	r2, #0
 80032aa:	2100      	movs	r1, #0
 80032ac:	2025      	movs	r0, #37	@ 0x25
 80032ae:	f000 fdfa 	bl	8003ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032b2:	2025      	movs	r0, #37	@ 0x25
 80032b4:	f000 fe13 	bl	8003ede <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80032b8:	e039      	b.n	800332e <HAL_UART_MspInit+0x102>
  else if(uartHandle->Instance==USART3)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a21      	ldr	r2, [pc, #132]	@ (8003344 <HAL_UART_MspInit+0x118>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d134      	bne.n	800332e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032c4:	2300      	movs	r3, #0
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	4b1c      	ldr	r3, [pc, #112]	@ (800333c <HAL_UART_MspInit+0x110>)
 80032ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032cc:	4a1b      	ldr	r2, [pc, #108]	@ (800333c <HAL_UART_MspInit+0x110>)
 80032ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80032d4:	4b19      	ldr	r3, [pc, #100]	@ (800333c <HAL_UART_MspInit+0x110>)
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	4b15      	ldr	r3, [pc, #84]	@ (800333c <HAL_UART_MspInit+0x110>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	4a14      	ldr	r2, [pc, #80]	@ (800333c <HAL_UART_MspInit+0x110>)
 80032ea:	f043 0304 	orr.w	r3, r3, #4
 80032ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f0:	4b12      	ldr	r3, [pc, #72]	@ (800333c <HAL_UART_MspInit+0x110>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032fc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003302:	2302      	movs	r3, #2
 8003304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330a:	2303      	movs	r3, #3
 800330c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800330e:	2307      	movs	r3, #7
 8003310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003312:	f107 031c 	add.w	r3, r7, #28
 8003316:	4619      	mov	r1, r3
 8003318:	480b      	ldr	r0, [pc, #44]	@ (8003348 <HAL_UART_MspInit+0x11c>)
 800331a:	f001 f9fd 	bl	8004718 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800331e:	2200      	movs	r2, #0
 8003320:	2100      	movs	r1, #0
 8003322:	2027      	movs	r0, #39	@ 0x27
 8003324:	f000 fdbf 	bl	8003ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003328:	2027      	movs	r0, #39	@ 0x27
 800332a:	f000 fdd8 	bl	8003ede <HAL_NVIC_EnableIRQ>
}
 800332e:	bf00      	nop
 8003330:	3730      	adds	r7, #48	@ 0x30
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40011000 	.word	0x40011000
 800333c:	40023800 	.word	0x40023800
 8003340:	40020000 	.word	0x40020000
 8003344:	40004800 	.word	0x40004800
 8003348:	40020800 	.word	0x40020800

0800334c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800334c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003384 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003350:	480d      	ldr	r0, [pc, #52]	@ (8003388 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003352:	490e      	ldr	r1, [pc, #56]	@ (800338c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003354:	4a0e      	ldr	r2, [pc, #56]	@ (8003390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003358:	e002      	b.n	8003360 <LoopCopyDataInit>

0800335a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800335a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800335c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800335e:	3304      	adds	r3, #4

08003360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003364:	d3f9      	bcc.n	800335a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003366:	4a0b      	ldr	r2, [pc, #44]	@ (8003394 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003368:	4c0b      	ldr	r4, [pc, #44]	@ (8003398 <LoopFillZerobss+0x26>)
  movs r3, #0
 800336a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800336c:	e001      	b.n	8003372 <LoopFillZerobss>

0800336e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800336e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003370:	3204      	adds	r2, #4

08003372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003374:	d3fb      	bcc.n	800336e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003376:	f7ff fd77 	bl	8002e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800337a:	f004 fe07 	bl	8007f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800337e:	f7fe ff93 	bl	80022a8 <main>
  bx  lr    
 8003382:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800338c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8003390:	0800b028 	.word	0x0800b028
  ldr r2, =_sbss
 8003394:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8003398:	200007a0 	.word	0x200007a0

0800339c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800339c:	e7fe      	b.n	800339c <ADC_IRQHandler>
	...

080033a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033a4:	4b0e      	ldr	r3, [pc, #56]	@ (80033e0 <HAL_Init+0x40>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0d      	ldr	r2, [pc, #52]	@ (80033e0 <HAL_Init+0x40>)
 80033aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033b0:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <HAL_Init+0x40>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0a      	ldr	r2, [pc, #40]	@ (80033e0 <HAL_Init+0x40>)
 80033b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033bc:	4b08      	ldr	r3, [pc, #32]	@ (80033e0 <HAL_Init+0x40>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a07      	ldr	r2, [pc, #28]	@ (80033e0 <HAL_Init+0x40>)
 80033c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c8:	2003      	movs	r0, #3
 80033ca:	f000 fd61 	bl	8003e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ce:	200f      	movs	r0, #15
 80033d0:	f000 f808 	bl	80033e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033d4:	f7ff fcbe 	bl	8002d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023c00 	.word	0x40023c00

080033e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033ec:	4b12      	ldr	r3, [pc, #72]	@ (8003438 <HAL_InitTick+0x54>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b12      	ldr	r3, [pc, #72]	@ (800343c <HAL_InitTick+0x58>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	4619      	mov	r1, r3
 80033f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fd79 	bl	8003efa <HAL_SYSTICK_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e00e      	b.n	8003430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b0f      	cmp	r3, #15
 8003416:	d80a      	bhi.n	800342e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003418:	2200      	movs	r2, #0
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	f04f 30ff 	mov.w	r0, #4294967295
 8003420:	f000 fd41 	bl	8003ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003424:	4a06      	ldr	r2, [pc, #24]	@ (8003440 <HAL_InitTick+0x5c>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20000208 	.word	0x20000208
 800343c:	20000210 	.word	0x20000210
 8003440:	2000020c 	.word	0x2000020c

08003444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003448:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <HAL_IncTick+0x20>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <HAL_IncTick+0x24>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4413      	add	r3, r2
 8003454:	4a04      	ldr	r2, [pc, #16]	@ (8003468 <HAL_IncTick+0x24>)
 8003456:	6013      	str	r3, [r2, #0]
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000210 	.word	0x20000210
 8003468:	2000079c 	.word	0x2000079c

0800346c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return uwTick;
 8003470:	4b03      	ldr	r3, [pc, #12]	@ (8003480 <HAL_GetTick+0x14>)
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	2000079c 	.word	0x2000079c

08003484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7ff ffee 	bl	800346c <HAL_GetTick>
 8003490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d005      	beq.n	80034aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800349e:	4b0a      	ldr	r3, [pc, #40]	@ (80034c8 <HAL_Delay+0x44>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034aa:	bf00      	nop
 80034ac:	f7ff ffde 	bl	800346c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d8f7      	bhi.n	80034ac <HAL_Delay+0x28>
  {
  }
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000210 	.word	0x20000210

080034cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e033      	b.n	800354a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd fe56 	bl	800119c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	d118      	bne.n	800353c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003512:	f023 0302 	bic.w	r3, r3, #2
 8003516:	f043 0202 	orr.w	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fa68 	bl	80039f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	f043 0201 	orr.w	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	641a      	str	r2, [r3, #64]	@ 0x40
 800353a:	e001      	b.n	8003540 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_ADC_Start_DMA+0x1e>
 800356e:	2302      	movs	r3, #2
 8003570:	e0e9      	b.n	8003746 <HAL_ADC_Start_DMA+0x1f2>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b01      	cmp	r3, #1
 8003586:	d018      	beq.n	80035ba <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003598:	4b6d      	ldr	r3, [pc, #436]	@ (8003750 <HAL_ADC_Start_DMA+0x1fc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a6d      	ldr	r2, [pc, #436]	@ (8003754 <HAL_ADC_Start_DMA+0x200>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	0c9a      	lsrs	r2, r3, #18
 80035a4:	4613      	mov	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80035ac:	e002      	b.n	80035b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f9      	bne.n	80035ae <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035c8:	d107      	bne.n	80035da <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035d8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	f040 80a1 	bne.w	800372c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003610:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003614:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003628:	d106      	bne.n	8003638 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	f023 0206 	bic.w	r2, r3, #6
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	645a      	str	r2, [r3, #68]	@ 0x44
 8003636:	e002      	b.n	800363e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003646:	4b44      	ldr	r3, [pc, #272]	@ (8003758 <HAL_ADC_Start_DMA+0x204>)
 8003648:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364e:	4a43      	ldr	r2, [pc, #268]	@ (800375c <HAL_ADC_Start_DMA+0x208>)
 8003650:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003656:	4a42      	ldr	r2, [pc, #264]	@ (8003760 <HAL_ADC_Start_DMA+0x20c>)
 8003658:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365e:	4a41      	ldr	r2, [pc, #260]	@ (8003764 <HAL_ADC_Start_DMA+0x210>)
 8003660:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800366a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800367a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800368a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	334c      	adds	r3, #76	@ 0x4c
 8003696:	4619      	mov	r1, r3
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f000 fce8 	bl	8004070 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d12a      	bne.n	8003702 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003768 <HAL_ADC_Start_DMA+0x214>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d015      	beq.n	80036e2 <HAL_ADC_Start_DMA+0x18e>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2c      	ldr	r2, [pc, #176]	@ (800376c <HAL_ADC_Start_DMA+0x218>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d105      	bne.n	80036cc <HAL_ADC_Start_DMA+0x178>
 80036c0:	4b25      	ldr	r3, [pc, #148]	@ (8003758 <HAL_ADC_Start_DMA+0x204>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a27      	ldr	r2, [pc, #156]	@ (8003770 <HAL_ADC_Start_DMA+0x21c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d136      	bne.n	8003744 <HAL_ADC_Start_DMA+0x1f0>
 80036d6:	4b20      	ldr	r3, [pc, #128]	@ (8003758 <HAL_ADC_Start_DMA+0x204>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d130      	bne.n	8003744 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d129      	bne.n	8003744 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	e020      	b.n	8003744 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a18      	ldr	r2, [pc, #96]	@ (8003768 <HAL_ADC_Start_DMA+0x214>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d11b      	bne.n	8003744 <HAL_ADC_Start_DMA+0x1f0>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d114      	bne.n	8003744 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003728:	609a      	str	r2, [r3, #8]
 800372a:	e00b      	b.n	8003744 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	f043 0210 	orr.w	r2, r3, #16
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373c:	f043 0201 	orr.w	r2, r3, #1
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000208 	.word	0x20000208
 8003754:	431bde83 	.word	0x431bde83
 8003758:	40012300 	.word	0x40012300
 800375c:	08003bed 	.word	0x08003bed
 8003760:	08003ca7 	.word	0x08003ca7
 8003764:	08003cc3 	.word	0x08003cc3
 8003768:	40012000 	.word	0x40012000
 800376c:	40012100 	.word	0x40012100
 8003770:	40012200 	.word	0x40012200

08003774 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x1c>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e105      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x228>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b09      	cmp	r3, #9
 80037da:	d925      	bls.n	8003828 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68d9      	ldr	r1, [r3, #12]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	4613      	mov	r3, r2
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4413      	add	r3, r2
 80037f0:	3b1e      	subs	r3, #30
 80037f2:	2207      	movs	r2, #7
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43da      	mvns	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	400a      	ands	r2, r1
 8003800:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68d9      	ldr	r1, [r3, #12]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	4618      	mov	r0, r3
 8003814:	4603      	mov	r3, r0
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4403      	add	r3, r0
 800381a:	3b1e      	subs	r3, #30
 800381c:	409a      	lsls	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	e022      	b.n	800386e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6919      	ldr	r1, [r3, #16]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	b29b      	uxth	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	4613      	mov	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4413      	add	r3, r2
 800383c:	2207      	movs	r2, #7
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	400a      	ands	r2, r1
 800384a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6919      	ldr	r1, [r3, #16]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	b29b      	uxth	r3, r3
 800385c:	4618      	mov	r0, r3
 800385e:	4603      	mov	r3, r0
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4403      	add	r3, r0
 8003864:	409a      	lsls	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b06      	cmp	r3, #6
 8003874:	d824      	bhi.n	80038c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	3b05      	subs	r3, #5
 8003888:	221f      	movs	r2, #31
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	400a      	ands	r2, r1
 8003896:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	4618      	mov	r0, r3
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	3b05      	subs	r3, #5
 80038b2:	fa00 f203 	lsl.w	r2, r0, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80038be:	e04c      	b.n	800395a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b0c      	cmp	r3, #12
 80038c6:	d824      	bhi.n	8003912 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	3b23      	subs	r3, #35	@ 0x23
 80038da:	221f      	movs	r2, #31
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43da      	mvns	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	400a      	ands	r2, r1
 80038e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	4618      	mov	r0, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	3b23      	subs	r3, #35	@ 0x23
 8003904:	fa00 f203 	lsl.w	r2, r0, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003910:	e023      	b.n	800395a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	3b41      	subs	r3, #65	@ 0x41
 8003924:	221f      	movs	r2, #31
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43da      	mvns	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	400a      	ands	r2, r1
 8003932:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	4618      	mov	r0, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	3b41      	subs	r3, #65	@ 0x41
 800394e:	fa00 f203 	lsl.w	r2, r0, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800395a:	4b22      	ldr	r3, [pc, #136]	@ (80039e4 <HAL_ADC_ConfigChannel+0x234>)
 800395c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a21      	ldr	r2, [pc, #132]	@ (80039e8 <HAL_ADC_ConfigChannel+0x238>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d109      	bne.n	800397c <HAL_ADC_ConfigChannel+0x1cc>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b12      	cmp	r3, #18
 800396e:	d105      	bne.n	800397c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a19      	ldr	r2, [pc, #100]	@ (80039e8 <HAL_ADC_ConfigChannel+0x238>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d123      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x21e>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b10      	cmp	r3, #16
 800398c:	d003      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x1e6>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b11      	cmp	r3, #17
 8003994:	d11b      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b10      	cmp	r3, #16
 80039a8:	d111      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039aa:	4b10      	ldr	r3, [pc, #64]	@ (80039ec <HAL_ADC_ConfigChannel+0x23c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a10      	ldr	r2, [pc, #64]	@ (80039f0 <HAL_ADC_ConfigChannel+0x240>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	0c9a      	lsrs	r2, r3, #18
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039c0:	e002      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f9      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	40012300 	.word	0x40012300
 80039e8:	40012000 	.word	0x40012000
 80039ec:	20000208 	.word	0x20000208
 80039f0:	431bde83 	.word	0x431bde83

080039f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039fc:	4b79      	ldr	r3, [pc, #484]	@ (8003be4 <ADC_Init+0x1f0>)
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	021a      	lsls	r2, r3, #8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6859      	ldr	r1, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6899      	ldr	r1, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a86:	4a58      	ldr	r2, [pc, #352]	@ (8003be8 <ADC_Init+0x1f4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d022      	beq.n	8003ad2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6899      	ldr	r1, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6899      	ldr	r1, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	e00f      	b.n	8003af2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003af0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0202 	bic.w	r2, r2, #2
 8003b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6899      	ldr	r1, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7e1b      	ldrb	r3, [r3, #24]
 8003b0c:	005a      	lsls	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01b      	beq.n	8003b58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b2e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6859      	ldr	r1, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	035a      	lsls	r2, r3, #13
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	e007      	b.n	8003b68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b66:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	051a      	lsls	r2, r3, #20
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6899      	ldr	r1, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003baa:	025a      	lsls	r2, r3, #9
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6899      	ldr	r1, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	029a      	lsls	r2, r3, #10
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40012300 	.word	0x40012300
 8003be8:	0f000001 	.word	0x0f000001

08003bec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d13c      	bne.n	8003c80 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d12b      	bne.n	8003c78 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d127      	bne.n	8003c78 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d006      	beq.n	8003c44 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d119      	bne.n	8003c78 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0220 	bic.w	r2, r2, #32
 8003c52:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	f043 0201 	orr.w	r2, r3, #1
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff fd7b 	bl	8003774 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c7e:	e00e      	b.n	8003c9e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff fd85 	bl	800379c <HAL_ADC_ErrorCallback>
}
 8003c92:	e004      	b.n	8003c9e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	4798      	blx	r3
}
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f7ff fd67 	bl	8003788 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cce:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2240      	movs	r2, #64	@ 0x40
 8003cd4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	f043 0204 	orr.w	r2, r3, #4
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7ff fd5a 	bl	800379c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d00:	4b0c      	ldr	r3, [pc, #48]	@ (8003d34 <__NVIC_SetPriorityGrouping+0x44>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d22:	4a04      	ldr	r2, [pc, #16]	@ (8003d34 <__NVIC_SetPriorityGrouping+0x44>)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	60d3      	str	r3, [r2, #12]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d3c:	4b04      	ldr	r3, [pc, #16]	@ (8003d50 <__NVIC_GetPriorityGrouping+0x18>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	0a1b      	lsrs	r3, r3, #8
 8003d42:	f003 0307 	and.w	r3, r3, #7
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	db0b      	blt.n	8003d7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	f003 021f 	and.w	r2, r3, #31
 8003d6c:	4907      	ldr	r1, [pc, #28]	@ (8003d8c <__NVIC_EnableIRQ+0x38>)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2001      	movs	r0, #1
 8003d76:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	e000e100 	.word	0xe000e100

08003d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	6039      	str	r1, [r7, #0]
 8003d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	db0a      	blt.n	8003dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	490c      	ldr	r1, [pc, #48]	@ (8003ddc <__NVIC_SetPriority+0x4c>)
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	0112      	lsls	r2, r2, #4
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	440b      	add	r3, r1
 8003db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003db8:	e00a      	b.n	8003dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	4908      	ldr	r1, [pc, #32]	@ (8003de0 <__NVIC_SetPriority+0x50>)
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	3b04      	subs	r3, #4
 8003dc8:	0112      	lsls	r2, r2, #4
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	440b      	add	r3, r1
 8003dce:	761a      	strb	r2, [r3, #24]
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	e000e100 	.word	0xe000e100
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b089      	sub	sp, #36	@ 0x24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f1c3 0307 	rsb	r3, r3, #7
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	bf28      	it	cs
 8003e02:	2304      	movcs	r3, #4
 8003e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d902      	bls.n	8003e14 <NVIC_EncodePriority+0x30>
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3b03      	subs	r3, #3
 8003e12:	e000      	b.n	8003e16 <NVIC_EncodePriority+0x32>
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e18:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43da      	mvns	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	401a      	ands	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	fa01 f303 	lsl.w	r3, r1, r3
 8003e36:	43d9      	mvns	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e3c:	4313      	orrs	r3, r2
         );
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3724      	adds	r7, #36	@ 0x24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e5c:	d301      	bcc.n	8003e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e00f      	b.n	8003e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e62:	4a0a      	ldr	r2, [pc, #40]	@ (8003e8c <SysTick_Config+0x40>)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e6a:	210f      	movs	r1, #15
 8003e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e70:	f7ff ff8e 	bl	8003d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e74:	4b05      	ldr	r3, [pc, #20]	@ (8003e8c <SysTick_Config+0x40>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e7a:	4b04      	ldr	r3, [pc, #16]	@ (8003e8c <SysTick_Config+0x40>)
 8003e7c:	2207      	movs	r2, #7
 8003e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	e000e010 	.word	0xe000e010

08003e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ff29 	bl	8003cf0 <__NVIC_SetPriorityGrouping>
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b086      	sub	sp, #24
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	4603      	mov	r3, r0
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003eb8:	f7ff ff3e 	bl	8003d38 <__NVIC_GetPriorityGrouping>
 8003ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	6978      	ldr	r0, [r7, #20]
 8003ec4:	f7ff ff8e 	bl	8003de4 <NVIC_EncodePriority>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff ff5d 	bl	8003d90 <__NVIC_SetPriority>
}
 8003ed6:	bf00      	nop
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff ff31 	bl	8003d54 <__NVIC_EnableIRQ>
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff ffa2 	bl	8003e4c <SysTick_Config>
 8003f08:	4603      	mov	r3, r0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f20:	f7ff faa4 	bl	800346c <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e099      	b.n	8004064 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f50:	e00f      	b.n	8003f72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f52:	f7ff fa8b 	bl	800346c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d908      	bls.n	8003f72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e078      	b.n	8004064 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e8      	bne.n	8003f52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4b38      	ldr	r3, [pc, #224]	@ (800406c <HAL_DMA_Init+0x158>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d107      	bne.n	8003fdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0307 	bic.w	r3, r3, #7
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	2b04      	cmp	r3, #4
 8004004:	d117      	bne.n	8004036 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00e      	beq.n	8004036 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fb01 	bl	8004620 <DMA_CheckFifoParam>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2240      	movs	r2, #64	@ 0x40
 8004028:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004032:	2301      	movs	r3, #1
 8004034:	e016      	b.n	8004064 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fab8 	bl	80045b4 <DMA_CalcBaseAndBitshift>
 8004044:	4603      	mov	r3, r0
 8004046:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404c:	223f      	movs	r2, #63	@ 0x3f
 800404e:	409a      	lsls	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	f010803f 	.word	0xf010803f

08004070 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004086:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_DMA_Start_IT+0x26>
 8004092:	2302      	movs	r3, #2
 8004094:	e040      	b.n	8004118 <HAL_DMA_Start_IT+0xa8>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d12f      	bne.n	800410a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2202      	movs	r2, #2
 80040ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 fa4a 	bl	8004558 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c8:	223f      	movs	r2, #63	@ 0x3f
 80040ca:	409a      	lsls	r2, r3
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0216 	orr.w	r2, r2, #22
 80040de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0208 	orr.w	r2, r2, #8
 80040f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e005      	b.n	8004116 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004112:	2302      	movs	r3, #2
 8004114:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004116:	7dfb      	ldrb	r3, [r7, #23]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800412e:	f7ff f99d 	bl	800346c <HAL_GetTick>
 8004132:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d008      	beq.n	8004152 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2280      	movs	r2, #128	@ 0x80
 8004144:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e052      	b.n	80041f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0216 	bic.w	r2, r2, #22
 8004160:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004170:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d103      	bne.n	8004182 <HAL_DMA_Abort+0x62>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0208 	bic.w	r2, r2, #8
 8004190:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041a2:	e013      	b.n	80041cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041a4:	f7ff f962 	bl	800346c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b05      	cmp	r3, #5
 80041b0:	d90c      	bls.n	80041cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2203      	movs	r2, #3
 80041bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e015      	b.n	80041f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e4      	bne.n	80041a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041de:	223f      	movs	r2, #63	@ 0x3f
 80041e0:	409a      	lsls	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d004      	beq.n	800421e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2280      	movs	r2, #128	@ 0x80
 8004218:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e00c      	b.n	8004238 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2205      	movs	r2, #5
 8004222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004250:	4b8e      	ldr	r3, [pc, #568]	@ (800448c <HAL_DMA_IRQHandler+0x248>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a8e      	ldr	r2, [pc, #568]	@ (8004490 <HAL_DMA_IRQHandler+0x24c>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	0a9b      	lsrs	r3, r3, #10
 800425c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004262:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800426e:	2208      	movs	r2, #8
 8004270:	409a      	lsls	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01a      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d013      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0204 	bic.w	r2, r2, #4
 8004296:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800429c:	2208      	movs	r2, #8
 800429e:	409a      	lsls	r2, r3
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a8:	f043 0201 	orr.w	r2, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b4:	2201      	movs	r2, #1
 80042b6:	409a      	lsls	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d012      	beq.n	80042e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d2:	2201      	movs	r2, #1
 80042d4:	409a      	lsls	r2, r3
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042de:	f043 0202 	orr.w	r2, r3, #2
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ea:	2204      	movs	r2, #4
 80042ec:	409a      	lsls	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d012      	beq.n	800431c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00b      	beq.n	800431c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004308:	2204      	movs	r2, #4
 800430a:	409a      	lsls	r2, r3
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004314:	f043 0204 	orr.w	r2, r3, #4
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004320:	2210      	movs	r2, #16
 8004322:	409a      	lsls	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4013      	ands	r3, r2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d043      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d03c      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433e:	2210      	movs	r2, #16
 8004340:	409a      	lsls	r2, r3
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d018      	beq.n	8004386 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d108      	bne.n	8004374 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d024      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
 8004372:	e01f      	b.n	80043b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004378:	2b00      	cmp	r3, #0
 800437a:	d01b      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	4798      	blx	r3
 8004384:	e016      	b.n	80043b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d107      	bne.n	80043a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0208 	bic.w	r2, r2, #8
 80043a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b8:	2220      	movs	r2, #32
 80043ba:	409a      	lsls	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 808f 	beq.w	80044e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8087 	beq.w	80044e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043da:	2220      	movs	r2, #32
 80043dc:	409a      	lsls	r2, r3
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	d136      	bne.n	800445c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0216 	bic.w	r2, r2, #22
 80043fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695a      	ldr	r2, [r3, #20]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800440c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d103      	bne.n	800441e <HAL_DMA_IRQHandler+0x1da>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800441a:	2b00      	cmp	r3, #0
 800441c:	d007      	beq.n	800442e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0208 	bic.w	r2, r2, #8
 800442c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004432:	223f      	movs	r2, #63	@ 0x3f
 8004434:	409a      	lsls	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800444e:	2b00      	cmp	r3, #0
 8004450:	d07e      	beq.n	8004550 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4798      	blx	r3
        }
        return;
 800445a:	e079      	b.n	8004550 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01d      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10d      	bne.n	8004494 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447c:	2b00      	cmp	r3, #0
 800447e:	d031      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	4798      	blx	r3
 8004488:	e02c      	b.n	80044e4 <HAL_DMA_IRQHandler+0x2a0>
 800448a:	bf00      	nop
 800448c:	20000208 	.word	0x20000208
 8004490:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d023      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
 80044a4:	e01e      	b.n	80044e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10f      	bne.n	80044d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0210 	bic.w	r2, r2, #16
 80044c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d032      	beq.n	8004552 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d022      	beq.n	800453e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2205      	movs	r2, #5
 80044fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	3301      	adds	r3, #1
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	429a      	cmp	r2, r3
 800451a:	d307      	bcc.n	800452c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f2      	bne.n	8004510 <HAL_DMA_IRQHandler+0x2cc>
 800452a:	e000      	b.n	800452e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800452c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	4798      	blx	r3
 800454e:	e000      	b.n	8004552 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004550:	bf00      	nop
    }
  }
}
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004574:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b40      	cmp	r3, #64	@ 0x40
 8004584:	d108      	bne.n	8004598 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004596:	e007      	b.n	80045a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	60da      	str	r2, [r3, #12]
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	3b10      	subs	r3, #16
 80045c4:	4a14      	ldr	r2, [pc, #80]	@ (8004618 <DMA_CalcBaseAndBitshift+0x64>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	091b      	lsrs	r3, r3, #4
 80045cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045ce:	4a13      	ldr	r2, [pc, #76]	@ (800461c <DMA_CalcBaseAndBitshift+0x68>)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d909      	bls.n	80045f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045ea:	f023 0303 	bic.w	r3, r3, #3
 80045ee:	1d1a      	adds	r2, r3, #4
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80045f4:	e007      	b.n	8004606 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045fe:	f023 0303 	bic.w	r3, r3, #3
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	aaaaaaab 	.word	0xaaaaaaab
 800461c:	0800b010 	.word	0x0800b010

08004620 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004630:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d11f      	bne.n	800467a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d856      	bhi.n	80046ee <DMA_CheckFifoParam+0xce>
 8004640:	a201      	add	r2, pc, #4	@ (adr r2, 8004648 <DMA_CheckFifoParam+0x28>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	08004659 	.word	0x08004659
 800464c:	0800466b 	.word	0x0800466b
 8004650:	08004659 	.word	0x08004659
 8004654:	080046ef 	.word	0x080046ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d046      	beq.n	80046f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004668:	e043      	b.n	80046f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004672:	d140      	bne.n	80046f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004678:	e03d      	b.n	80046f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004682:	d121      	bne.n	80046c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b03      	cmp	r3, #3
 8004688:	d837      	bhi.n	80046fa <DMA_CheckFifoParam+0xda>
 800468a:	a201      	add	r2, pc, #4	@ (adr r2, 8004690 <DMA_CheckFifoParam+0x70>)
 800468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004690:	080046a1 	.word	0x080046a1
 8004694:	080046a7 	.word	0x080046a7
 8004698:	080046a1 	.word	0x080046a1
 800469c:	080046b9 	.word	0x080046b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      break;
 80046a4:	e030      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d025      	beq.n	80046fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b6:	e022      	b.n	80046fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80046c0:	d11f      	bne.n	8004702 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046c6:	e01c      	b.n	8004702 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d903      	bls.n	80046d6 <DMA_CheckFifoParam+0xb6>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d003      	beq.n	80046dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046d4:	e018      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	73fb      	strb	r3, [r7, #15]
      break;
 80046da:	e015      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00e      	beq.n	8004706 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
      break;
 80046ec:	e00b      	b.n	8004706 <DMA_CheckFifoParam+0xe6>
      break;
 80046ee:	bf00      	nop
 80046f0:	e00a      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      break;
 80046f2:	bf00      	nop
 80046f4:	e008      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      break;
 80046f6:	bf00      	nop
 80046f8:	e006      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      break;
 80046fa:	bf00      	nop
 80046fc:	e004      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      break;
 80046fe:	bf00      	nop
 8004700:	e002      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      break;   
 8004702:	bf00      	nop
 8004704:	e000      	b.n	8004708 <DMA_CheckFifoParam+0xe8>
      break;
 8004706:	bf00      	nop
    }
  } 
  
  return status; 
 8004708:	7bfb      	ldrb	r3, [r7, #15]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop

08004718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004718:	b480      	push	{r7}
 800471a:	b089      	sub	sp, #36	@ 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800472a:	2300      	movs	r3, #0
 800472c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	e16b      	b.n	8004a0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004734:	2201      	movs	r2, #1
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	429a      	cmp	r2, r3
 800474e:	f040 815a 	bne.w	8004a06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	2b01      	cmp	r3, #1
 800475c:	d005      	beq.n	800476a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004766:	2b02      	cmp	r3, #2
 8004768:	d130      	bne.n	80047cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	2203      	movs	r2, #3
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4013      	ands	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047a0:	2201      	movs	r2, #1
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	f003 0201 	and.w	r2, r3, #1
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d017      	beq.n	8004808 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	2203      	movs	r2, #3
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4313      	orrs	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d123      	bne.n	800485c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	08da      	lsrs	r2, r3, #3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3208      	adds	r2, #8
 800481c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004820:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	220f      	movs	r2, #15
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	43db      	mvns	r3, r3
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4013      	ands	r3, r2
 8004836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4313      	orrs	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	08da      	lsrs	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3208      	adds	r2, #8
 8004856:	69b9      	ldr	r1, [r7, #24]
 8004858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	2203      	movs	r2, #3
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4013      	ands	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 0203 	and.w	r2, r3, #3
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80b4 	beq.w	8004a06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	4b60      	ldr	r3, [pc, #384]	@ (8004a24 <HAL_GPIO_Init+0x30c>)
 80048a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a6:	4a5f      	ldr	r2, [pc, #380]	@ (8004a24 <HAL_GPIO_Init+0x30c>)
 80048a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80048ae:	4b5d      	ldr	r3, [pc, #372]	@ (8004a24 <HAL_GPIO_Init+0x30c>)
 80048b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ba:	4a5b      	ldr	r2, [pc, #364]	@ (8004a28 <HAL_GPIO_Init+0x310>)
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	089b      	lsrs	r3, r3, #2
 80048c0:	3302      	adds	r3, #2
 80048c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	220f      	movs	r2, #15
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43db      	mvns	r3, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4013      	ands	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a52      	ldr	r2, [pc, #328]	@ (8004a2c <HAL_GPIO_Init+0x314>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d02b      	beq.n	800493e <HAL_GPIO_Init+0x226>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a51      	ldr	r2, [pc, #324]	@ (8004a30 <HAL_GPIO_Init+0x318>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d025      	beq.n	800493a <HAL_GPIO_Init+0x222>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a50      	ldr	r2, [pc, #320]	@ (8004a34 <HAL_GPIO_Init+0x31c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d01f      	beq.n	8004936 <HAL_GPIO_Init+0x21e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a4f      	ldr	r2, [pc, #316]	@ (8004a38 <HAL_GPIO_Init+0x320>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d019      	beq.n	8004932 <HAL_GPIO_Init+0x21a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a4e      	ldr	r2, [pc, #312]	@ (8004a3c <HAL_GPIO_Init+0x324>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <HAL_GPIO_Init+0x216>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a4d      	ldr	r2, [pc, #308]	@ (8004a40 <HAL_GPIO_Init+0x328>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00d      	beq.n	800492a <HAL_GPIO_Init+0x212>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a4c      	ldr	r2, [pc, #304]	@ (8004a44 <HAL_GPIO_Init+0x32c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d007      	beq.n	8004926 <HAL_GPIO_Init+0x20e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a4b      	ldr	r2, [pc, #300]	@ (8004a48 <HAL_GPIO_Init+0x330>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d101      	bne.n	8004922 <HAL_GPIO_Init+0x20a>
 800491e:	2307      	movs	r3, #7
 8004920:	e00e      	b.n	8004940 <HAL_GPIO_Init+0x228>
 8004922:	2308      	movs	r3, #8
 8004924:	e00c      	b.n	8004940 <HAL_GPIO_Init+0x228>
 8004926:	2306      	movs	r3, #6
 8004928:	e00a      	b.n	8004940 <HAL_GPIO_Init+0x228>
 800492a:	2305      	movs	r3, #5
 800492c:	e008      	b.n	8004940 <HAL_GPIO_Init+0x228>
 800492e:	2304      	movs	r3, #4
 8004930:	e006      	b.n	8004940 <HAL_GPIO_Init+0x228>
 8004932:	2303      	movs	r3, #3
 8004934:	e004      	b.n	8004940 <HAL_GPIO_Init+0x228>
 8004936:	2302      	movs	r3, #2
 8004938:	e002      	b.n	8004940 <HAL_GPIO_Init+0x228>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <HAL_GPIO_Init+0x228>
 800493e:	2300      	movs	r3, #0
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	f002 0203 	and.w	r2, r2, #3
 8004946:	0092      	lsls	r2, r2, #2
 8004948:	4093      	lsls	r3, r2
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4313      	orrs	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004950:	4935      	ldr	r1, [pc, #212]	@ (8004a28 <HAL_GPIO_Init+0x310>)
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	089b      	lsrs	r3, r3, #2
 8004956:	3302      	adds	r3, #2
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800495e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a4c <HAL_GPIO_Init+0x334>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	43db      	mvns	r3, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4013      	ands	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004982:	4a32      	ldr	r2, [pc, #200]	@ (8004a4c <HAL_GPIO_Init+0x334>)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004988:	4b30      	ldr	r3, [pc, #192]	@ (8004a4c <HAL_GPIO_Init+0x334>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	43db      	mvns	r3, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049ac:	4a27      	ldr	r2, [pc, #156]	@ (8004a4c <HAL_GPIO_Init+0x334>)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049b2:	4b26      	ldr	r3, [pc, #152]	@ (8004a4c <HAL_GPIO_Init+0x334>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049d6:	4a1d      	ldr	r2, [pc, #116]	@ (8004a4c <HAL_GPIO_Init+0x334>)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049dc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a4c <HAL_GPIO_Init+0x334>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4013      	ands	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a00:	4a12      	ldr	r2, [pc, #72]	@ (8004a4c <HAL_GPIO_Init+0x334>)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b0f      	cmp	r3, #15
 8004a10:	f67f ae90 	bls.w	8004734 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	3724      	adds	r7, #36	@ 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800
 8004a28:	40013800 	.word	0x40013800
 8004a2c:	40020000 	.word	0x40020000
 8004a30:	40020400 	.word	0x40020400
 8004a34:	40020800 	.word	0x40020800
 8004a38:	40020c00 	.word	0x40020c00
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	40021400 	.word	0x40021400
 8004a44:	40021800 	.word	0x40021800
 8004a48:	40021c00 	.word	0x40021c00
 8004a4c:	40013c00 	.word	0x40013c00

08004a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	807b      	strh	r3, [r7, #2]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a60:	787b      	ldrb	r3, [r7, #1]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a66:	887a      	ldrh	r2, [r7, #2]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a6c:	e003      	b.n	8004a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a6e:	887b      	ldrh	r3, [r7, #2]
 8004a70:	041a      	lsls	r2, r3, #16
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	619a      	str	r2, [r3, #24]
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b085      	sub	sp, #20
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a94:	887a      	ldrh	r2, [r7, #2]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	041a      	lsls	r2, r3, #16
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	43d9      	mvns	r1, r3
 8004aa0:	887b      	ldrh	r3, [r7, #2]
 8004aa2:	400b      	ands	r3, r1
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	619a      	str	r2, [r3, #24]
}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e12b      	b.n	8004d22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fc fe5a 	bl	8001798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2224      	movs	r2, #36	@ 0x24
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b1c:	f000 fd80 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 8004b20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	4a81      	ldr	r2, [pc, #516]	@ (8004d2c <HAL_I2C_Init+0x274>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d807      	bhi.n	8004b3c <HAL_I2C_Init+0x84>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4a80      	ldr	r2, [pc, #512]	@ (8004d30 <HAL_I2C_Init+0x278>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	bf94      	ite	ls
 8004b34:	2301      	movls	r3, #1
 8004b36:	2300      	movhi	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	e006      	b.n	8004b4a <HAL_I2C_Init+0x92>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a7d      	ldr	r2, [pc, #500]	@ (8004d34 <HAL_I2C_Init+0x27c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	bf94      	ite	ls
 8004b44:	2301      	movls	r3, #1
 8004b46:	2300      	movhi	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e0e7      	b.n	8004d22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4a78      	ldr	r2, [pc, #480]	@ (8004d38 <HAL_I2C_Init+0x280>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	0c9b      	lsrs	r3, r3, #18
 8004b5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4a6a      	ldr	r2, [pc, #424]	@ (8004d2c <HAL_I2C_Init+0x274>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d802      	bhi.n	8004b8c <HAL_I2C_Init+0xd4>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	e009      	b.n	8004ba0 <HAL_I2C_Init+0xe8>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b92:	fb02 f303 	mul.w	r3, r2, r3
 8004b96:	4a69      	ldr	r2, [pc, #420]	@ (8004d3c <HAL_I2C_Init+0x284>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	099b      	lsrs	r3, r3, #6
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004bb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	495c      	ldr	r1, [pc, #368]	@ (8004d2c <HAL_I2C_Init+0x274>)
 8004bbc:	428b      	cmp	r3, r1
 8004bbe:	d819      	bhi.n	8004bf4 <HAL_I2C_Init+0x13c>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1e59      	subs	r1, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bce:	1c59      	adds	r1, r3, #1
 8004bd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004bd4:	400b      	ands	r3, r1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_I2C_Init+0x138>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1e59      	subs	r1, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004be8:	3301      	adds	r3, #1
 8004bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bee:	e051      	b.n	8004c94 <HAL_I2C_Init+0x1dc>
 8004bf0:	2304      	movs	r3, #4
 8004bf2:	e04f      	b.n	8004c94 <HAL_I2C_Init+0x1dc>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d111      	bne.n	8004c20 <HAL_I2C_Init+0x168>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	1e58      	subs	r0, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6859      	ldr	r1, [r3, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	440b      	add	r3, r1
 8004c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e012      	b.n	8004c46 <HAL_I2C_Init+0x18e>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1e58      	subs	r0, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6859      	ldr	r1, [r3, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	0099      	lsls	r1, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c36:	3301      	adds	r3, #1
 8004c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_I2C_Init+0x196>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e022      	b.n	8004c94 <HAL_I2C_Init+0x1dc>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10e      	bne.n	8004c74 <HAL_I2C_Init+0x1bc>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1e58      	subs	r0, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6859      	ldr	r1, [r3, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	440b      	add	r3, r1
 8004c64:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c68:	3301      	adds	r3, #1
 8004c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c72:	e00f      	b.n	8004c94 <HAL_I2C_Init+0x1dc>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1e58      	subs	r0, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6859      	ldr	r1, [r3, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	0099      	lsls	r1, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	6809      	ldr	r1, [r1, #0]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004cc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6911      	ldr	r1, [r2, #16]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68d2      	ldr	r2, [r2, #12]
 8004cce:	4311      	orrs	r1, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695a      	ldr	r2, [r3, #20]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	000186a0 	.word	0x000186a0
 8004d30:	001e847f 	.word	0x001e847f
 8004d34:	003d08ff 	.word	0x003d08ff
 8004d38:	431bde83 	.word	0x431bde83
 8004d3c:	10624dd3 	.word	0x10624dd3

08004d40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e267      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d075      	beq.n	8004e4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d5e:	4b88      	ldr	r3, [pc, #544]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d00c      	beq.n	8004d84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d6a:	4b85      	ldr	r3, [pc, #532]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d112      	bne.n	8004d9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d76:	4b82      	ldr	r3, [pc, #520]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d82:	d10b      	bne.n	8004d9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d84:	4b7e      	ldr	r3, [pc, #504]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d05b      	beq.n	8004e48 <HAL_RCC_OscConfig+0x108>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d157      	bne.n	8004e48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e242      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da4:	d106      	bne.n	8004db4 <HAL_RCC_OscConfig+0x74>
 8004da6:	4b76      	ldr	r3, [pc, #472]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a75      	ldr	r2, [pc, #468]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e01d      	b.n	8004df0 <HAL_RCC_OscConfig+0xb0>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x98>
 8004dbe:	4b70      	ldr	r3, [pc, #448]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a6f      	ldr	r2, [pc, #444]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	4b6d      	ldr	r3, [pc, #436]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a6c      	ldr	r2, [pc, #432]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	e00b      	b.n	8004df0 <HAL_RCC_OscConfig+0xb0>
 8004dd8:	4b69      	ldr	r3, [pc, #420]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a68      	ldr	r2, [pc, #416]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	4b66      	ldr	r3, [pc, #408]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a65      	ldr	r2, [pc, #404]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004dea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d013      	beq.n	8004e20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df8:	f7fe fb38 	bl	800346c <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e00:	f7fe fb34 	bl	800346c <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b64      	cmp	r3, #100	@ 0x64
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e207      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e12:	4b5b      	ldr	r3, [pc, #364]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0xc0>
 8004e1e:	e014      	b.n	8004e4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7fe fb24 	bl	800346c <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e28:	f7fe fb20 	bl	800346c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	@ 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e1f3      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e3a:	4b51      	ldr	r3, [pc, #324]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0xe8>
 8004e46:	e000      	b.n	8004e4a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d063      	beq.n	8004f1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e56:	4b4a      	ldr	r3, [pc, #296]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e62:	4b47      	ldr	r3, [pc, #284]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d11c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e6e:	4b44      	ldr	r3, [pc, #272]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d116      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e7a:	4b41      	ldr	r3, [pc, #260]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <HAL_RCC_OscConfig+0x152>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d001      	beq.n	8004e92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e1c7      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e92:	4b3b      	ldr	r3, [pc, #236]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	4937      	ldr	r1, [pc, #220]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea6:	e03a      	b.n	8004f1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d020      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eb0:	4b34      	ldr	r3, [pc, #208]	@ (8004f84 <HAL_RCC_OscConfig+0x244>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fe fad9 	bl	800346c <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ebe:	f7fe fad5 	bl	800346c <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e1a8      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004edc:	4b28      	ldr	r3, [pc, #160]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4925      	ldr	r1, [pc, #148]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	600b      	str	r3, [r1, #0]
 8004ef0:	e015      	b.n	8004f1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ef2:	4b24      	ldr	r3, [pc, #144]	@ (8004f84 <HAL_RCC_OscConfig+0x244>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fe fab8 	bl	800346c <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f00:	f7fe fab4 	bl	800346c <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e187      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f12:	4b1b      	ldr	r3, [pc, #108]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d036      	beq.n	8004f98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d016      	beq.n	8004f60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f32:	4b15      	ldr	r3, [pc, #84]	@ (8004f88 <HAL_RCC_OscConfig+0x248>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7fe fa98 	bl	800346c <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f40:	f7fe fa94 	bl	800346c <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e167      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f52:	4b0b      	ldr	r3, [pc, #44]	@ (8004f80 <HAL_RCC_OscConfig+0x240>)
 8004f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0x200>
 8004f5e:	e01b      	b.n	8004f98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f60:	4b09      	ldr	r3, [pc, #36]	@ (8004f88 <HAL_RCC_OscConfig+0x248>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f66:	f7fe fa81 	bl	800346c <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f6c:	e00e      	b.n	8004f8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6e:	f7fe fa7d 	bl	800346c <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d907      	bls.n	8004f8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e150      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
 8004f80:	40023800 	.word	0x40023800
 8004f84:	42470000 	.word	0x42470000
 8004f88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f8c:	4b88      	ldr	r3, [pc, #544]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1ea      	bne.n	8004f6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8097 	beq.w	80050d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004faa:	4b81      	ldr	r3, [pc, #516]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10f      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	4b7d      	ldr	r3, [pc, #500]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	4a7c      	ldr	r2, [pc, #496]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fc6:	4b7a      	ldr	r3, [pc, #488]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd6:	4b77      	ldr	r3, [pc, #476]	@ (80051b4 <HAL_RCC_OscConfig+0x474>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d118      	bne.n	8005014 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fe2:	4b74      	ldr	r3, [pc, #464]	@ (80051b4 <HAL_RCC_OscConfig+0x474>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a73      	ldr	r2, [pc, #460]	@ (80051b4 <HAL_RCC_OscConfig+0x474>)
 8004fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fee:	f7fe fa3d 	bl	800346c <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff6:	f7fe fa39 	bl	800346c <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e10c      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005008:	4b6a      	ldr	r3, [pc, #424]	@ (80051b4 <HAL_RCC_OscConfig+0x474>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d106      	bne.n	800502a <HAL_RCC_OscConfig+0x2ea>
 800501c:	4b64      	ldr	r3, [pc, #400]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005020:	4a63      	ldr	r2, [pc, #396]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	6713      	str	r3, [r2, #112]	@ 0x70
 8005028:	e01c      	b.n	8005064 <HAL_RCC_OscConfig+0x324>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b05      	cmp	r3, #5
 8005030:	d10c      	bne.n	800504c <HAL_RCC_OscConfig+0x30c>
 8005032:	4b5f      	ldr	r3, [pc, #380]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005036:	4a5e      	ldr	r2, [pc, #376]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005038:	f043 0304 	orr.w	r3, r3, #4
 800503c:	6713      	str	r3, [r2, #112]	@ 0x70
 800503e:	4b5c      	ldr	r3, [pc, #368]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005042:	4a5b      	ldr	r2, [pc, #364]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6713      	str	r3, [r2, #112]	@ 0x70
 800504a:	e00b      	b.n	8005064 <HAL_RCC_OscConfig+0x324>
 800504c:	4b58      	ldr	r3, [pc, #352]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 800504e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005050:	4a57      	ldr	r2, [pc, #348]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	6713      	str	r3, [r2, #112]	@ 0x70
 8005058:	4b55      	ldr	r3, [pc, #340]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 800505a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505c:	4a54      	ldr	r2, [pc, #336]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 800505e:	f023 0304 	bic.w	r3, r3, #4
 8005062:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d015      	beq.n	8005098 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506c:	f7fe f9fe 	bl	800346c <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005072:	e00a      	b.n	800508a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005074:	f7fe f9fa 	bl	800346c <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e0cb      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800508a:	4b49      	ldr	r3, [pc, #292]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0ee      	beq.n	8005074 <HAL_RCC_OscConfig+0x334>
 8005096:	e014      	b.n	80050c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005098:	f7fe f9e8 	bl	800346c <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800509e:	e00a      	b.n	80050b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a0:	f7fe f9e4 	bl	800346c <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e0b5      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b6:	4b3e      	ldr	r3, [pc, #248]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1ee      	bne.n	80050a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d105      	bne.n	80050d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c8:	4b39      	ldr	r3, [pc, #228]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	4a38      	ldr	r2, [pc, #224]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 80050ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 80a1 	beq.w	8005220 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050de:	4b34      	ldr	r3, [pc, #208]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d05c      	beq.n	80051a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d141      	bne.n	8005176 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f2:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <HAL_RCC_OscConfig+0x478>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f8:	f7fe f9b8 	bl	800346c <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005100:	f7fe f9b4 	bl	800346c <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e087      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005112:	4b27      	ldr	r3, [pc, #156]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69da      	ldr	r2, [r3, #28]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	019b      	lsls	r3, r3, #6
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	3b01      	subs	r3, #1
 8005138:	041b      	lsls	r3, r3, #16
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	061b      	lsls	r3, r3, #24
 8005142:	491b      	ldr	r1, [pc, #108]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005144:	4313      	orrs	r3, r2
 8005146:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005148:	4b1b      	ldr	r3, [pc, #108]	@ (80051b8 <HAL_RCC_OscConfig+0x478>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514e:	f7fe f98d 	bl	800346c <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005156:	f7fe f989 	bl	800346c <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e05c      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005168:	4b11      	ldr	r3, [pc, #68]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0x416>
 8005174:	e054      	b.n	8005220 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005176:	4b10      	ldr	r3, [pc, #64]	@ (80051b8 <HAL_RCC_OscConfig+0x478>)
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7fe f976 	bl	800346c <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005184:	f7fe f972 	bl	800346c <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e045      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005196:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <HAL_RCC_OscConfig+0x470>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x444>
 80051a2:	e03d      	b.n	8005220 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d107      	bne.n	80051bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e038      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
 80051b0:	40023800 	.word	0x40023800
 80051b4:	40007000 	.word	0x40007000
 80051b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051bc:	4b1b      	ldr	r3, [pc, #108]	@ (800522c <HAL_RCC_OscConfig+0x4ec>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d028      	beq.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d121      	bne.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d11a      	bne.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051ec:	4013      	ands	r3, r2
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d111      	bne.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	3b01      	subs	r3, #1
 8005206:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005208:	429a      	cmp	r2, r3
 800520a:	d107      	bne.n	800521c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005216:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005218:	429a      	cmp	r2, r3
 800521a:	d001      	beq.n	8005220 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40023800 	.word	0x40023800

08005230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e0cc      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005244:	4b68      	ldr	r3, [pc, #416]	@ (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d90c      	bls.n	800526c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005252:	4b65      	ldr	r3, [pc, #404]	@ (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800525a:	4b63      	ldr	r3, [pc, #396]	@ (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d001      	beq.n	800526c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0b8      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d020      	beq.n	80052ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005284:	4b59      	ldr	r3, [pc, #356]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4a58      	ldr	r2, [pc, #352]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800528e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800529c:	4b53      	ldr	r3, [pc, #332]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4a52      	ldr	r2, [pc, #328]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a8:	4b50      	ldr	r3, [pc, #320]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	494d      	ldr	r1, [pc, #308]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d044      	beq.n	8005350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d107      	bne.n	80052de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ce:	4b47      	ldr	r3, [pc, #284]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d119      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e07f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d003      	beq.n	80052ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d107      	bne.n	80052fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ee:	4b3f      	ldr	r3, [pc, #252]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e06f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fe:	4b3b      	ldr	r3, [pc, #236]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e067      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800530e:	4b37      	ldr	r3, [pc, #220]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f023 0203 	bic.w	r2, r3, #3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4934      	ldr	r1, [pc, #208]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	4313      	orrs	r3, r2
 800531e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005320:	f7fe f8a4 	bl	800346c <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005326:	e00a      	b.n	800533e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005328:	f7fe f8a0 	bl	800346c <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e04f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533e:	4b2b      	ldr	r3, [pc, #172]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 020c 	and.w	r2, r3, #12
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	429a      	cmp	r2, r3
 800534e:	d1eb      	bne.n	8005328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005350:	4b25      	ldr	r3, [pc, #148]	@ (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d20c      	bcs.n	8005378 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b22      	ldr	r3, [pc, #136]	@ (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	4b20      	ldr	r3, [pc, #128]	@ (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e032      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005384:	4b19      	ldr	r3, [pc, #100]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4916      	ldr	r1, [pc, #88]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	4313      	orrs	r3, r2
 8005394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053a2:	4b12      	ldr	r3, [pc, #72]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	490e      	ldr	r1, [pc, #56]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053b6:	f000 f821 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 80053ba:	4602      	mov	r2, r0
 80053bc:	4b0b      	ldr	r3, [pc, #44]	@ (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	490a      	ldr	r1, [pc, #40]	@ (80053f0 <HAL_RCC_ClockConfig+0x1c0>)
 80053c8:	5ccb      	ldrb	r3, [r1, r3]
 80053ca:	fa22 f303 	lsr.w	r3, r2, r3
 80053ce:	4a09      	ldr	r2, [pc, #36]	@ (80053f4 <HAL_RCC_ClockConfig+0x1c4>)
 80053d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80053d2:	4b09      	ldr	r3, [pc, #36]	@ (80053f8 <HAL_RCC_ClockConfig+0x1c8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fe f804 	bl	80033e4 <HAL_InitTick>

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40023c00 	.word	0x40023c00
 80053ec:	40023800 	.word	0x40023800
 80053f0:	0800aff8 	.word	0x0800aff8
 80053f4:	20000208 	.word	0x20000208
 80053f8:	2000020c 	.word	0x2000020c

080053fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005400:	b094      	sub	sp, #80	@ 0x50
 8005402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005414:	4b79      	ldr	r3, [pc, #484]	@ (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 030c 	and.w	r3, r3, #12
 800541c:	2b08      	cmp	r3, #8
 800541e:	d00d      	beq.n	800543c <HAL_RCC_GetSysClockFreq+0x40>
 8005420:	2b08      	cmp	r3, #8
 8005422:	f200 80e1 	bhi.w	80055e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <HAL_RCC_GetSysClockFreq+0x34>
 800542a:	2b04      	cmp	r3, #4
 800542c:	d003      	beq.n	8005436 <HAL_RCC_GetSysClockFreq+0x3a>
 800542e:	e0db      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005430:	4b73      	ldr	r3, [pc, #460]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x204>)
 8005432:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005434:	e0db      	b.n	80055ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005436:	4b73      	ldr	r3, [pc, #460]	@ (8005604 <HAL_RCC_GetSysClockFreq+0x208>)
 8005438:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800543a:	e0d8      	b.n	80055ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800543c:	4b6f      	ldr	r3, [pc, #444]	@ (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005444:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005446:	4b6d      	ldr	r3, [pc, #436]	@ (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d063      	beq.n	800551a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005452:	4b6a      	ldr	r3, [pc, #424]	@ (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	099b      	lsrs	r3, r3, #6
 8005458:	2200      	movs	r2, #0
 800545a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800545c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800545e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005464:	633b      	str	r3, [r7, #48]	@ 0x30
 8005466:	2300      	movs	r3, #0
 8005468:	637b      	str	r3, [r7, #52]	@ 0x34
 800546a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800546e:	4622      	mov	r2, r4
 8005470:	462b      	mov	r3, r5
 8005472:	f04f 0000 	mov.w	r0, #0
 8005476:	f04f 0100 	mov.w	r1, #0
 800547a:	0159      	lsls	r1, r3, #5
 800547c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005480:	0150      	lsls	r0, r2, #5
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4621      	mov	r1, r4
 8005488:	1a51      	subs	r1, r2, r1
 800548a:	6139      	str	r1, [r7, #16]
 800548c:	4629      	mov	r1, r5
 800548e:	eb63 0301 	sbc.w	r3, r3, r1
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054a0:	4659      	mov	r1, fp
 80054a2:	018b      	lsls	r3, r1, #6
 80054a4:	4651      	mov	r1, sl
 80054a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054aa:	4651      	mov	r1, sl
 80054ac:	018a      	lsls	r2, r1, #6
 80054ae:	4651      	mov	r1, sl
 80054b0:	ebb2 0801 	subs.w	r8, r2, r1
 80054b4:	4659      	mov	r1, fp
 80054b6:	eb63 0901 	sbc.w	r9, r3, r1
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054ce:	4690      	mov	r8, r2
 80054d0:	4699      	mov	r9, r3
 80054d2:	4623      	mov	r3, r4
 80054d4:	eb18 0303 	adds.w	r3, r8, r3
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	462b      	mov	r3, r5
 80054dc:	eb49 0303 	adc.w	r3, r9, r3
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054ee:	4629      	mov	r1, r5
 80054f0:	024b      	lsls	r3, r1, #9
 80054f2:	4621      	mov	r1, r4
 80054f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054f8:	4621      	mov	r1, r4
 80054fa:	024a      	lsls	r2, r1, #9
 80054fc:	4610      	mov	r0, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005502:	2200      	movs	r2, #0
 8005504:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005506:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005508:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800550c:	f7fb fa7a 	bl	8000a04 <__aeabi_uldivmod>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4613      	mov	r3, r2
 8005516:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005518:	e058      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800551a:	4b38      	ldr	r3, [pc, #224]	@ (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	099b      	lsrs	r3, r3, #6
 8005520:	2200      	movs	r2, #0
 8005522:	4618      	mov	r0, r3
 8005524:	4611      	mov	r1, r2
 8005526:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800552a:	623b      	str	r3, [r7, #32]
 800552c:	2300      	movs	r3, #0
 800552e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005530:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	f04f 0000 	mov.w	r0, #0
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	0159      	lsls	r1, r3, #5
 8005542:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005546:	0150      	lsls	r0, r2, #5
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4641      	mov	r1, r8
 800554e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005552:	4649      	mov	r1, r9
 8005554:	eb63 0b01 	sbc.w	fp, r3, r1
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005564:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005568:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800556c:	ebb2 040a 	subs.w	r4, r2, sl
 8005570:	eb63 050b 	sbc.w	r5, r3, fp
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	00eb      	lsls	r3, r5, #3
 800557e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005582:	00e2      	lsls	r2, r4, #3
 8005584:	4614      	mov	r4, r2
 8005586:	461d      	mov	r5, r3
 8005588:	4643      	mov	r3, r8
 800558a:	18e3      	adds	r3, r4, r3
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	464b      	mov	r3, r9
 8005590:	eb45 0303 	adc.w	r3, r5, r3
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055a2:	4629      	mov	r1, r5
 80055a4:	028b      	lsls	r3, r1, #10
 80055a6:	4621      	mov	r1, r4
 80055a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055ac:	4621      	mov	r1, r4
 80055ae:	028a      	lsls	r2, r1, #10
 80055b0:	4610      	mov	r0, r2
 80055b2:	4619      	mov	r1, r3
 80055b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055b6:	2200      	movs	r2, #0
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	61fa      	str	r2, [r7, #28]
 80055bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055c0:	f7fb fa20 	bl	8000a04 <__aeabi_uldivmod>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4613      	mov	r3, r2
 80055ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80055cc:	4b0b      	ldr	r3, [pc, #44]	@ (80055fc <HAL_RCC_GetSysClockFreq+0x200>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	3301      	adds	r3, #1
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80055dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055e6:	e002      	b.n	80055ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055e8:	4b05      	ldr	r3, [pc, #20]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x204>)
 80055ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3750      	adds	r7, #80	@ 0x50
 80055f4:	46bd      	mov	sp, r7
 80055f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800
 8005600:	00f42400 	.word	0x00f42400
 8005604:	007a1200 	.word	0x007a1200

08005608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800560c:	4b03      	ldr	r3, [pc, #12]	@ (800561c <HAL_RCC_GetHCLKFreq+0x14>)
 800560e:	681b      	ldr	r3, [r3, #0]
}
 8005610:	4618      	mov	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000208 	.word	0x20000208

08005620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005624:	f7ff fff0 	bl	8005608 <HAL_RCC_GetHCLKFreq>
 8005628:	4602      	mov	r2, r0
 800562a:	4b05      	ldr	r3, [pc, #20]	@ (8005640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	0a9b      	lsrs	r3, r3, #10
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	4903      	ldr	r1, [pc, #12]	@ (8005644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800563c:	4618      	mov	r0, r3
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40023800 	.word	0x40023800
 8005644:	0800b008 	.word	0x0800b008

08005648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800564c:	f7ff ffdc 	bl	8005608 <HAL_RCC_GetHCLKFreq>
 8005650:	4602      	mov	r2, r0
 8005652:	4b05      	ldr	r3, [pc, #20]	@ (8005668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	0b5b      	lsrs	r3, r3, #13
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	4903      	ldr	r1, [pc, #12]	@ (800566c <HAL_RCC_GetPCLK2Freq+0x24>)
 800565e:	5ccb      	ldrb	r3, [r1, r3]
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40023800 	.word	0x40023800
 800566c:	0800b008 	.word	0x0800b008

08005670 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e07b      	b.n	800577a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d108      	bne.n	800569c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005692:	d009      	beq.n	80056a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	61da      	str	r2, [r3, #28]
 800569a:	e005      	b.n	80056a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fd fafe 	bl	8002cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572c:	ea42 0103 	orr.w	r1, r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005734:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	0c1b      	lsrs	r3, r3, #16
 8005746:	f003 0104 	and.w	r1, r3, #4
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574e:	f003 0210 	and.w	r2, r3, #16
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005768:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b088      	sub	sp, #32
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005792:	f7fd fe6b 	bl	800346c <HAL_GetTick>
 8005796:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d001      	beq.n	80057ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80057a8:	2302      	movs	r3, #2
 80057aa:	e12a      	b.n	8005a02 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_SPI_Transmit+0x36>
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e122      	b.n	8005a02 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_SPI_Transmit+0x48>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e11b      	b.n	8005a02 <HAL_SPI_Transmit+0x280>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2203      	movs	r2, #3
 80057d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	88fa      	ldrh	r2, [r7, #6]
 80057ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	88fa      	ldrh	r2, [r7, #6]
 80057f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005818:	d10f      	bne.n	800583a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005828:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005838:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005844:	2b40      	cmp	r3, #64	@ 0x40
 8005846:	d007      	beq.n	8005858 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005860:	d152      	bne.n	8005908 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_SPI_Transmit+0xee>
 800586a:	8b7b      	ldrh	r3, [r7, #26]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d145      	bne.n	80058fc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005874:	881a      	ldrh	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005880:	1c9a      	adds	r2, r3, #2
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005894:	e032      	b.n	80058fc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d112      	bne.n	80058ca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a8:	881a      	ldrh	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	1c9a      	adds	r2, r3, #2
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80058c8:	e018      	b.n	80058fc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ca:	f7fd fdcf 	bl	800346c <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d803      	bhi.n	80058e2 <HAL_SPI_Transmit+0x160>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e0:	d102      	bne.n	80058e8 <HAL_SPI_Transmit+0x166>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d109      	bne.n	80058fc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e082      	b.n	8005a02 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1c7      	bne.n	8005896 <HAL_SPI_Transmit+0x114>
 8005906:	e053      	b.n	80059b0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <HAL_SPI_Transmit+0x194>
 8005910:	8b7b      	ldrh	r3, [r7, #26]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d147      	bne.n	80059a6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	330c      	adds	r3, #12
 8005920:	7812      	ldrb	r2, [r2, #0]
 8005922:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800593c:	e033      	b.n	80059a6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b02      	cmp	r3, #2
 800594a:	d113      	bne.n	8005974 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	7812      	ldrb	r2, [r2, #0]
 8005958:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005972:	e018      	b.n	80059a6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005974:	f7fd fd7a 	bl	800346c <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d803      	bhi.n	800598c <HAL_SPI_Transmit+0x20a>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598a:	d102      	bne.n	8005992 <HAL_SPI_Transmit+0x210>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d109      	bne.n	80059a6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e02d      	b.n	8005a02 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1c6      	bne.n	800593e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f8b1 	bl	8005b1c <SPI_EndRxTxTransaction>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005a00:	2300      	movs	r3, #0
  }
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3720      	adds	r7, #32
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a1c:	f7fd fd26 	bl	800346c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a24:	1a9b      	subs	r3, r3, r2
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	4413      	add	r3, r2
 8005a2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a2c:	f7fd fd1e 	bl	800346c <HAL_GetTick>
 8005a30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a32:	4b39      	ldr	r3, [pc, #228]	@ (8005b18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	015b      	lsls	r3, r3, #5
 8005a38:	0d1b      	lsrs	r3, r3, #20
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	fb02 f303 	mul.w	r3, r2, r3
 8005a40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a42:	e054      	b.n	8005aee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4a:	d050      	beq.n	8005aee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a4c:	f7fd fd0e 	bl	800346c <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d902      	bls.n	8005a62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d13d      	bne.n	8005ade <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a7a:	d111      	bne.n	8005aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a84:	d004      	beq.n	8005a90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a8e:	d107      	bne.n	8005aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa8:	d10f      	bne.n	8005aca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e017      	b.n	8005b0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4013      	ands	r3, r2
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	bf0c      	ite	eq
 8005afe:	2301      	moveq	r3, #1
 8005b00:	2300      	movne	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d19b      	bne.n	8005a44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000208 	.word	0x20000208

08005b1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	2102      	movs	r1, #2
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff ff6a 	bl	8005a0c <SPI_WaitFlagStateUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d007      	beq.n	8005b4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b42:	f043 0220 	orr.w	r2, r3, #32
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e032      	b.n	8005bb4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8005bbc <SPI_EndRxTxTransaction+0xa0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc0 <SPI_EndRxTxTransaction+0xa4>)
 8005b54:	fba2 2303 	umull	r2, r3, r2, r3
 8005b58:	0d5b      	lsrs	r3, r3, #21
 8005b5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005b5e:	fb02 f303 	mul.w	r3, r2, r3
 8005b62:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b6c:	d112      	bne.n	8005b94 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2200      	movs	r2, #0
 8005b76:	2180      	movs	r1, #128	@ 0x80
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff ff47 	bl	8005a0c <SPI_WaitFlagStateUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d016      	beq.n	8005bb2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b88:	f043 0220 	orr.w	r2, r3, #32
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e00f      	b.n	8005bb4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005baa:	2b80      	cmp	r3, #128	@ 0x80
 8005bac:	d0f2      	beq.n	8005b94 <SPI_EndRxTxTransaction+0x78>
 8005bae:	e000      	b.n	8005bb2 <SPI_EndRxTxTransaction+0x96>
        break;
 8005bb0:	bf00      	nop
  }

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20000208 	.word	0x20000208
 8005bc0:	165e9f81 	.word	0x165e9f81

08005bc4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e038      	b.n	8005c4c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7fb fc94 	bl	800151c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4610      	mov	r0, r2
 8005c00:	f002 f8e4 	bl	8007dcc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	68b9      	ldr	r1, [r7, #8]
 8005c10:	f002 f946 	bl	8007ea0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6858      	ldr	r0, [r3, #4]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	f002 f973 	bl	8007f0c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	6892      	ldr	r2, [r2, #8]
 8005c2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	6892      	ldr	r2, [r2, #8]
 8005c3a:	f041 0101 	orr.w	r1, r1, #1
 8005c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e041      	b.n	8005cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fd f9ee 	bl	800305c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f000 fc62 	bl	800655c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d001      	beq.n	8005d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e04e      	b.n	8005daa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a23      	ldr	r2, [pc, #140]	@ (8005db8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d022      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d36:	d01d      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8005dbc <HAL_TIM_Base_Start_IT+0xc8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d018      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1e      	ldr	r2, [pc, #120]	@ (8005dc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d013      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00e      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005dc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d009      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a19      	ldr	r2, [pc, #100]	@ (8005dcc <HAL_TIM_Base_Start_IT+0xd8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a18      	ldr	r2, [pc, #96]	@ (8005dd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d111      	bne.n	8005d98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b06      	cmp	r3, #6
 8005d84:	d010      	beq.n	8005da8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0201 	orr.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d96:	e007      	b.n	8005da8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40010000 	.word	0x40010000
 8005dbc:	40000400 	.word	0x40000400
 8005dc0:	40000800 	.word	0x40000800
 8005dc4:	40000c00 	.word	0x40000c00
 8005dc8:	40010400 	.word	0x40010400
 8005dcc:	40014000 	.word	0x40014000
 8005dd0:	40001800 	.word	0x40001800

08005dd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e041      	b.n	8005e6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f839 	bl	8005e72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4619      	mov	r1, r3
 8005e12:	4610      	mov	r0, r2
 8005e14:	f000 fba2 	bl	800655c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
	...

08005e88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d109      	bne.n	8005eac <HAL_TIM_PWM_Start+0x24>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	bf14      	ite	ne
 8005ea4:	2301      	movne	r3, #1
 8005ea6:	2300      	moveq	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	e022      	b.n	8005ef2 <HAL_TIM_PWM_Start+0x6a>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d109      	bne.n	8005ec6 <HAL_TIM_PWM_Start+0x3e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	bf14      	ite	ne
 8005ebe:	2301      	movne	r3, #1
 8005ec0:	2300      	moveq	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	e015      	b.n	8005ef2 <HAL_TIM_PWM_Start+0x6a>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d109      	bne.n	8005ee0 <HAL_TIM_PWM_Start+0x58>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	bf14      	ite	ne
 8005ed8:	2301      	movne	r3, #1
 8005eda:	2300      	moveq	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	e008      	b.n	8005ef2 <HAL_TIM_PWM_Start+0x6a>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	bf14      	ite	ne
 8005eec:	2301      	movne	r3, #1
 8005eee:	2300      	moveq	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e07c      	b.n	8005ff4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Start+0x82>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f08:	e013      	b.n	8005f32 <HAL_TIM_PWM_Start+0xaa>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d104      	bne.n	8005f1a <HAL_TIM_PWM_Start+0x92>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f18:	e00b      	b.n	8005f32 <HAL_TIM_PWM_Start+0xaa>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d104      	bne.n	8005f2a <HAL_TIM_PWM_Start+0xa2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f28:	e003      	b.n	8005f32 <HAL_TIM_PWM_Start+0xaa>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2201      	movs	r2, #1
 8005f38:	6839      	ldr	r1, [r7, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fe04 	bl	8006b48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a2d      	ldr	r2, [pc, #180]	@ (8005ffc <HAL_TIM_PWM_Start+0x174>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d004      	beq.n	8005f54 <HAL_TIM_PWM_Start+0xcc>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8006000 <HAL_TIM_PWM_Start+0x178>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d101      	bne.n	8005f58 <HAL_TIM_PWM_Start+0xd0>
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <HAL_TIM_PWM_Start+0xd2>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a22      	ldr	r2, [pc, #136]	@ (8005ffc <HAL_TIM_PWM_Start+0x174>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d022      	beq.n	8005fbe <HAL_TIM_PWM_Start+0x136>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f80:	d01d      	beq.n	8005fbe <HAL_TIM_PWM_Start+0x136>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1f      	ldr	r2, [pc, #124]	@ (8006004 <HAL_TIM_PWM_Start+0x17c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d018      	beq.n	8005fbe <HAL_TIM_PWM_Start+0x136>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1d      	ldr	r2, [pc, #116]	@ (8006008 <HAL_TIM_PWM_Start+0x180>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d013      	beq.n	8005fbe <HAL_TIM_PWM_Start+0x136>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800600c <HAL_TIM_PWM_Start+0x184>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00e      	beq.n	8005fbe <HAL_TIM_PWM_Start+0x136>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a16      	ldr	r2, [pc, #88]	@ (8006000 <HAL_TIM_PWM_Start+0x178>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d009      	beq.n	8005fbe <HAL_TIM_PWM_Start+0x136>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a18      	ldr	r2, [pc, #96]	@ (8006010 <HAL_TIM_PWM_Start+0x188>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d004      	beq.n	8005fbe <HAL_TIM_PWM_Start+0x136>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a16      	ldr	r2, [pc, #88]	@ (8006014 <HAL_TIM_PWM_Start+0x18c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d111      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b06      	cmp	r3, #6
 8005fce:	d010      	beq.n	8005ff2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe0:	e007      	b.n	8005ff2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f042 0201 	orr.w	r2, r2, #1
 8005ff0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40010400 	.word	0x40010400
 8006004:	40000400 	.word	0x40000400
 8006008:	40000800 	.word	0x40000800
 800600c:	40000c00 	.word	0x40000c00
 8006010:	40014000 	.word	0x40014000
 8006014:	40001800 	.word	0x40001800

08006018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d020      	beq.n	800607c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01b      	beq.n	800607c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0202 	mvn.w	r2, #2
 800604c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fa5b 	bl	800651e <HAL_TIM_IC_CaptureCallback>
 8006068:	e005      	b.n	8006076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fa4d 	bl	800650a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fa5e 	bl	8006532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d020      	beq.n	80060c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01b      	beq.n	80060c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0204 	mvn.w	r2, #4
 8006098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2202      	movs	r2, #2
 800609e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa35 	bl	800651e <HAL_TIM_IC_CaptureCallback>
 80060b4:	e005      	b.n	80060c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fa27 	bl	800650a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fa38 	bl	8006532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d020      	beq.n	8006114 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01b      	beq.n	8006114 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0208 	mvn.w	r2, #8
 80060e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2204      	movs	r2, #4
 80060ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fa0f 	bl	800651e <HAL_TIM_IC_CaptureCallback>
 8006100:	e005      	b.n	800610e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fa01 	bl	800650a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fa12 	bl	8006532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 0310 	and.w	r3, r3, #16
 800611a:	2b00      	cmp	r3, #0
 800611c:	d020      	beq.n	8006160 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01b      	beq.n	8006160 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0210 	mvn.w	r2, #16
 8006130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2208      	movs	r2, #8
 8006136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f9e9 	bl	800651e <HAL_TIM_IC_CaptureCallback>
 800614c:	e005      	b.n	800615a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f9db 	bl	800650a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f9ec 	bl	8006532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00c      	beq.n	8006184 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0201 	mvn.w	r2, #1
 800617c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fc fd1c 	bl	8002bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00c      	beq.n	80061a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006194:	2b00      	cmp	r3, #0
 8006196:	d007      	beq.n	80061a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fd7c 	bl	8006ca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00c      	beq.n	80061cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d007      	beq.n	80061cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f9bd 	bl	8006546 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00c      	beq.n	80061f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0220 	mvn.w	r2, #32
 80061e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fd4e 	bl	8006c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006212:	2302      	movs	r3, #2
 8006214:	e0ae      	b.n	8006374 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b0c      	cmp	r3, #12
 8006222:	f200 809f 	bhi.w	8006364 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006226:	a201      	add	r2, pc, #4	@ (adr r2, 800622c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	08006261 	.word	0x08006261
 8006230:	08006365 	.word	0x08006365
 8006234:	08006365 	.word	0x08006365
 8006238:	08006365 	.word	0x08006365
 800623c:	080062a1 	.word	0x080062a1
 8006240:	08006365 	.word	0x08006365
 8006244:	08006365 	.word	0x08006365
 8006248:	08006365 	.word	0x08006365
 800624c:	080062e3 	.word	0x080062e3
 8006250:	08006365 	.word	0x08006365
 8006254:	08006365 	.word	0x08006365
 8006258:	08006365 	.word	0x08006365
 800625c:	08006323 	.word	0x08006323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68b9      	ldr	r1, [r7, #8]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fa24 	bl	80066b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0208 	orr.w	r2, r2, #8
 800627a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0204 	bic.w	r2, r2, #4
 800628a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6999      	ldr	r1, [r3, #24]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	619a      	str	r2, [r3, #24]
      break;
 800629e:	e064      	b.n	800636a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68b9      	ldr	r1, [r7, #8]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fa74 	bl	8006794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6999      	ldr	r1, [r3, #24]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	021a      	lsls	r2, r3, #8
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	619a      	str	r2, [r3, #24]
      break;
 80062e0:	e043      	b.n	800636a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fac9 	bl	8006880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69da      	ldr	r2, [r3, #28]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0208 	orr.w	r2, r2, #8
 80062fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0204 	bic.w	r2, r2, #4
 800630c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69d9      	ldr	r1, [r3, #28]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	61da      	str	r2, [r3, #28]
      break;
 8006320:	e023      	b.n	800636a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fb1d 	bl	8006968 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69da      	ldr	r2, [r3, #28]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800633c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69da      	ldr	r2, [r3, #28]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800634c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69d9      	ldr	r1, [r3, #28]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	021a      	lsls	r2, r3, #8
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	61da      	str	r2, [r3, #28]
      break;
 8006362:	e002      	b.n	800636a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	75fb      	strb	r3, [r7, #23]
      break;
 8006368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_TIM_ConfigClockSource+0x1c>
 8006394:	2302      	movs	r3, #2
 8006396:	e0b4      	b.n	8006502 <HAL_TIM_ConfigClockSource+0x186>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063d0:	d03e      	beq.n	8006450 <HAL_TIM_ConfigClockSource+0xd4>
 80063d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063d6:	f200 8087 	bhi.w	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 80063da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063de:	f000 8086 	beq.w	80064ee <HAL_TIM_ConfigClockSource+0x172>
 80063e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e6:	d87f      	bhi.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 80063e8:	2b70      	cmp	r3, #112	@ 0x70
 80063ea:	d01a      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0xa6>
 80063ec:	2b70      	cmp	r3, #112	@ 0x70
 80063ee:	d87b      	bhi.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 80063f0:	2b60      	cmp	r3, #96	@ 0x60
 80063f2:	d050      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x11a>
 80063f4:	2b60      	cmp	r3, #96	@ 0x60
 80063f6:	d877      	bhi.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 80063f8:	2b50      	cmp	r3, #80	@ 0x50
 80063fa:	d03c      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0xfa>
 80063fc:	2b50      	cmp	r3, #80	@ 0x50
 80063fe:	d873      	bhi.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006400:	2b40      	cmp	r3, #64	@ 0x40
 8006402:	d058      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x13a>
 8006404:	2b40      	cmp	r3, #64	@ 0x40
 8006406:	d86f      	bhi.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006408:	2b30      	cmp	r3, #48	@ 0x30
 800640a:	d064      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0x15a>
 800640c:	2b30      	cmp	r3, #48	@ 0x30
 800640e:	d86b      	bhi.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006410:	2b20      	cmp	r3, #32
 8006412:	d060      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006414:	2b20      	cmp	r3, #32
 8006416:	d867      	bhi.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d05c      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0x15a>
 800641c:	2b10      	cmp	r3, #16
 800641e:	d05a      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006420:	e062      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006432:	f000 fb69 	bl	8006b08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006444:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	609a      	str	r2, [r3, #8]
      break;
 800644e:	e04f      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006460:	f000 fb52 	bl	8006b08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006472:	609a      	str	r2, [r3, #8]
      break;
 8006474:	e03c      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006482:	461a      	mov	r2, r3
 8006484:	f000 fac6 	bl	8006a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2150      	movs	r1, #80	@ 0x50
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fb1f 	bl	8006ad2 <TIM_ITRx_SetConfig>
      break;
 8006494:	e02c      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064a2:	461a      	mov	r2, r3
 80064a4:	f000 fae5 	bl	8006a72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2160      	movs	r1, #96	@ 0x60
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fb0f 	bl	8006ad2 <TIM_ITRx_SetConfig>
      break;
 80064b4:	e01c      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c2:	461a      	mov	r2, r3
 80064c4:	f000 faa6 	bl	8006a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2140      	movs	r1, #64	@ 0x40
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 faff 	bl	8006ad2 <TIM_ITRx_SetConfig>
      break;
 80064d4:	e00c      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4619      	mov	r1, r3
 80064e0:	4610      	mov	r0, r2
 80064e2:	f000 faf6 	bl	8006ad2 <TIM_ITRx_SetConfig>
      break;
 80064e6:	e003      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	73fb      	strb	r3, [r7, #15]
      break;
 80064ec:	e000      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006512:	bf00      	nop
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
	...

0800655c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a46      	ldr	r2, [pc, #280]	@ (8006688 <TIM_Base_SetConfig+0x12c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d013      	beq.n	800659c <TIM_Base_SetConfig+0x40>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800657a:	d00f      	beq.n	800659c <TIM_Base_SetConfig+0x40>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a43      	ldr	r2, [pc, #268]	@ (800668c <TIM_Base_SetConfig+0x130>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d00b      	beq.n	800659c <TIM_Base_SetConfig+0x40>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a42      	ldr	r2, [pc, #264]	@ (8006690 <TIM_Base_SetConfig+0x134>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d007      	beq.n	800659c <TIM_Base_SetConfig+0x40>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a41      	ldr	r2, [pc, #260]	@ (8006694 <TIM_Base_SetConfig+0x138>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d003      	beq.n	800659c <TIM_Base_SetConfig+0x40>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a40      	ldr	r2, [pc, #256]	@ (8006698 <TIM_Base_SetConfig+0x13c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d108      	bne.n	80065ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a35      	ldr	r2, [pc, #212]	@ (8006688 <TIM_Base_SetConfig+0x12c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d02b      	beq.n	800660e <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065bc:	d027      	beq.n	800660e <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a32      	ldr	r2, [pc, #200]	@ (800668c <TIM_Base_SetConfig+0x130>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d023      	beq.n	800660e <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a31      	ldr	r2, [pc, #196]	@ (8006690 <TIM_Base_SetConfig+0x134>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d01f      	beq.n	800660e <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a30      	ldr	r2, [pc, #192]	@ (8006694 <TIM_Base_SetConfig+0x138>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d01b      	beq.n	800660e <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a2f      	ldr	r2, [pc, #188]	@ (8006698 <TIM_Base_SetConfig+0x13c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d017      	beq.n	800660e <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a2e      	ldr	r2, [pc, #184]	@ (800669c <TIM_Base_SetConfig+0x140>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d013      	beq.n	800660e <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a2d      	ldr	r2, [pc, #180]	@ (80066a0 <TIM_Base_SetConfig+0x144>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00f      	beq.n	800660e <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a2c      	ldr	r2, [pc, #176]	@ (80066a4 <TIM_Base_SetConfig+0x148>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00b      	beq.n	800660e <TIM_Base_SetConfig+0xb2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a2b      	ldr	r2, [pc, #172]	@ (80066a8 <TIM_Base_SetConfig+0x14c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d007      	beq.n	800660e <TIM_Base_SetConfig+0xb2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a2a      	ldr	r2, [pc, #168]	@ (80066ac <TIM_Base_SetConfig+0x150>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d003      	beq.n	800660e <TIM_Base_SetConfig+0xb2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a29      	ldr	r2, [pc, #164]	@ (80066b0 <TIM_Base_SetConfig+0x154>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d108      	bne.n	8006620 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a10      	ldr	r2, [pc, #64]	@ (8006688 <TIM_Base_SetConfig+0x12c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d003      	beq.n	8006654 <TIM_Base_SetConfig+0xf8>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a12      	ldr	r2, [pc, #72]	@ (8006698 <TIM_Base_SetConfig+0x13c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d103      	bne.n	800665c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b01      	cmp	r3, #1
 800666c:	d105      	bne.n	800667a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f023 0201 	bic.w	r2, r3, #1
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	611a      	str	r2, [r3, #16]
  }
}
 800667a:	bf00      	nop
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	40010000 	.word	0x40010000
 800668c:	40000400 	.word	0x40000400
 8006690:	40000800 	.word	0x40000800
 8006694:	40000c00 	.word	0x40000c00
 8006698:	40010400 	.word	0x40010400
 800669c:	40014000 	.word	0x40014000
 80066a0:	40014400 	.word	0x40014400
 80066a4:	40014800 	.word	0x40014800
 80066a8:	40001800 	.word	0x40001800
 80066ac:	40001c00 	.word	0x40001c00
 80066b0:	40002000 	.word	0x40002000

080066b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	f023 0201 	bic.w	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0303 	bic.w	r3, r3, #3
 80066ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 0302 	bic.w	r3, r3, #2
 80066fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a20      	ldr	r2, [pc, #128]	@ (800678c <TIM_OC1_SetConfig+0xd8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d003      	beq.n	8006718 <TIM_OC1_SetConfig+0x64>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a1f      	ldr	r2, [pc, #124]	@ (8006790 <TIM_OC1_SetConfig+0xdc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d10c      	bne.n	8006732 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f023 0308 	bic.w	r3, r3, #8
 800671e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f023 0304 	bic.w	r3, r3, #4
 8006730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a15      	ldr	r2, [pc, #84]	@ (800678c <TIM_OC1_SetConfig+0xd8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d003      	beq.n	8006742 <TIM_OC1_SetConfig+0x8e>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a14      	ldr	r2, [pc, #80]	@ (8006790 <TIM_OC1_SetConfig+0xdc>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d111      	bne.n	8006766 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	621a      	str	r2, [r3, #32]
}
 8006780:	bf00      	nop
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	40010000 	.word	0x40010000
 8006790:	40010400 	.word	0x40010400

08006794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f023 0210 	bic.w	r2, r3, #16
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f023 0320 	bic.w	r3, r3, #32
 80067de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a22      	ldr	r2, [pc, #136]	@ (8006878 <TIM_OC2_SetConfig+0xe4>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_OC2_SetConfig+0x68>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a21      	ldr	r2, [pc, #132]	@ (800687c <TIM_OC2_SetConfig+0xe8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d10d      	bne.n	8006818 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	4313      	orrs	r3, r2
 800680e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006816:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a17      	ldr	r2, [pc, #92]	@ (8006878 <TIM_OC2_SetConfig+0xe4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d003      	beq.n	8006828 <TIM_OC2_SetConfig+0x94>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a16      	ldr	r2, [pc, #88]	@ (800687c <TIM_OC2_SetConfig+0xe8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d113      	bne.n	8006850 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800682e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	621a      	str	r2, [r3, #32]
}
 800686a:	bf00      	nop
 800686c:	371c      	adds	r7, #28
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	40010000 	.word	0x40010000
 800687c:	40010400 	.word	0x40010400

08006880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 0303 	bic.w	r3, r3, #3
 80068b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a21      	ldr	r2, [pc, #132]	@ (8006960 <TIM_OC3_SetConfig+0xe0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d003      	beq.n	80068e6 <TIM_OC3_SetConfig+0x66>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a20      	ldr	r2, [pc, #128]	@ (8006964 <TIM_OC3_SetConfig+0xe4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d10d      	bne.n	8006902 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a16      	ldr	r2, [pc, #88]	@ (8006960 <TIM_OC3_SetConfig+0xe0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d003      	beq.n	8006912 <TIM_OC3_SetConfig+0x92>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a15      	ldr	r2, [pc, #84]	@ (8006964 <TIM_OC3_SetConfig+0xe4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d113      	bne.n	800693a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	4313      	orrs	r3, r2
 8006938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	621a      	str	r2, [r3, #32]
}
 8006954:	bf00      	nop
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	40010000 	.word	0x40010000
 8006964:	40010400 	.word	0x40010400

08006968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800699e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	031b      	lsls	r3, r3, #12
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a12      	ldr	r2, [pc, #72]	@ (8006a0c <TIM_OC4_SetConfig+0xa4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d003      	beq.n	80069d0 <TIM_OC4_SetConfig+0x68>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a11      	ldr	r2, [pc, #68]	@ (8006a10 <TIM_OC4_SetConfig+0xa8>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d109      	bne.n	80069e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	019b      	lsls	r3, r3, #6
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40010000 	.word	0x40010000
 8006a10:	40010400 	.word	0x40010400

08006a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	f023 0201 	bic.w	r2, r3, #1
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f023 030a 	bic.w	r3, r3, #10
 8006a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	621a      	str	r2, [r3, #32]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b087      	sub	sp, #28
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f023 0210 	bic.w	r2, r3, #16
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	031b      	lsls	r3, r3, #12
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006aae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	621a      	str	r2, [r3, #32]
}
 8006ac6:	bf00      	nop
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f043 0307 	orr.w	r3, r3, #7
 8006af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	609a      	str	r2, [r3, #8]
}
 8006afc:	bf00      	nop
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	021a      	lsls	r2, r3, #8
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	609a      	str	r2, [r3, #8]
}
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f003 031f 	and.w	r3, r3, #31
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a1a      	ldr	r2, [r3, #32]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	43db      	mvns	r3, r3
 8006b6a:	401a      	ands	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a1a      	ldr	r2, [r3, #32]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b80:	431a      	orrs	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	621a      	str	r2, [r3, #32]
}
 8006b86:	bf00      	nop
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
	...

08006b94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d101      	bne.n	8006bac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e05a      	b.n	8006c62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a21      	ldr	r2, [pc, #132]	@ (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d022      	beq.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf8:	d01d      	beq.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d018      	beq.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a1b      	ldr	r2, [pc, #108]	@ (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d013      	beq.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a1a      	ldr	r2, [pc, #104]	@ (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d00e      	beq.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a18      	ldr	r2, [pc, #96]	@ (8006c80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d009      	beq.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a17      	ldr	r2, [pc, #92]	@ (8006c84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d004      	beq.n	8006c36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a15      	ldr	r2, [pc, #84]	@ (8006c88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d10c      	bne.n	8006c50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40000c00 	.word	0x40000c00
 8006c80:	40010400 	.word	0x40010400
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40001800 	.word	0x40001800

08006c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e042      	b.n	8006d4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d106      	bne.n	8006ce0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7fc faa6 	bl	800322c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2224      	movs	r2, #36	@ 0x24
 8006ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fdf3 	bl	80078e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	691a      	ldr	r2, [r3, #16]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	695a      	ldr	r2, [r3, #20]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08a      	sub	sp, #40	@ 0x28
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	4613      	mov	r3, r2
 8006d62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d175      	bne.n	8006e60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <HAL_UART_Transmit+0x2c>
 8006d7a:	88fb      	ldrh	r3, [r7, #6]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e06e      	b.n	8006e62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2221      	movs	r2, #33	@ 0x21
 8006d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d92:	f7fc fb6b 	bl	800346c <HAL_GetTick>
 8006d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	88fa      	ldrh	r2, [r7, #6]
 8006d9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	88fa      	ldrh	r2, [r7, #6]
 8006da2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dac:	d108      	bne.n	8006dc0 <HAL_UART_Transmit+0x6c>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d104      	bne.n	8006dc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	61bb      	str	r3, [r7, #24]
 8006dbe:	e003      	b.n	8006dc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006dc8:	e02e      	b.n	8006e28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2180      	movs	r1, #128	@ 0x80
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 fb55 	bl	8007484 <UART_WaitOnFlagUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d005      	beq.n	8006dec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e03a      	b.n	8006e62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10b      	bne.n	8006e0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	461a      	mov	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	3302      	adds	r3, #2
 8006e06:	61bb      	str	r3, [r7, #24]
 8006e08:	e007      	b.n	8006e1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	781a      	ldrb	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	3301      	adds	r3, #1
 8006e18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	3b01      	subs	r3, #1
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1cb      	bne.n	8006dca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2140      	movs	r1, #64	@ 0x40
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 fb21 	bl	8007484 <UART_WaitOnFlagUntilTimeout>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e006      	b.n	8006e62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2220      	movs	r2, #32
 8006e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e000      	b.n	8006e62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006e60:	2302      	movs	r3, #2
  }
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3720      	adds	r7, #32
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b08c      	sub	sp, #48	@ 0x30
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	4613      	mov	r3, r2
 8006e76:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b20      	cmp	r3, #32
 8006e82:	d14a      	bne.n	8006f1a <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8006e8a:	88fb      	ldrh	r3, [r7, #6]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e043      	b.n	8006f1c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fb45 	bl	8007536 <UART_Start_Receive_IT>
 8006eac:	4603      	mov	r3, r0
 8006eae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d12c      	bne.n	8006f14 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d125      	bne.n	8006f0e <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	613b      	str	r3, [r7, #16]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	613b      	str	r3, [r7, #16]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	613b      	str	r3, [r7, #16]
 8006ed6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	330c      	adds	r3, #12
 8006ede:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f043 0310 	orr.w	r3, r3, #16
 8006eee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ef8:	627a      	str	r2, [r7, #36]	@ 0x24
 8006efa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6a39      	ldr	r1, [r7, #32]
 8006efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e5      	bne.n	8006ed8 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8006f0c:	e002      	b.n	8006f14 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006f14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f18:	e000      	b.n	8006f1c <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006f1a:	2302      	movs	r3, #2
  }
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3730      	adds	r7, #48	@ 0x30
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b0ba      	sub	sp, #232	@ 0xe8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f5a:	f003 030f 	and.w	r3, r3, #15
 8006f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006f62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10f      	bne.n	8006f8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d009      	beq.n	8006f8a <HAL_UART_IRQHandler+0x66>
 8006f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fbf0 	bl	8007768 <UART_Receive_IT>
      return;
 8006f88:	e25b      	b.n	8007442 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 80de 	beq.w	8007150 <HAL_UART_IRQHandler+0x22c>
 8006f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d106      	bne.n	8006fae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fa4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80d1 	beq.w	8007150 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00b      	beq.n	8006fd2 <HAL_UART_IRQHandler+0xae>
 8006fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d005      	beq.n	8006fd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fca:	f043 0201 	orr.w	r2, r3, #1
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fd6:	f003 0304 	and.w	r3, r3, #4
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00b      	beq.n	8006ff6 <HAL_UART_IRQHandler+0xd2>
 8006fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d005      	beq.n	8006ff6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fee:	f043 0202 	orr.w	r2, r3, #2
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00b      	beq.n	800701a <HAL_UART_IRQHandler+0xf6>
 8007002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007012:	f043 0204 	orr.w	r2, r3, #4
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800701a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800701e:	f003 0308 	and.w	r3, r3, #8
 8007022:	2b00      	cmp	r3, #0
 8007024:	d011      	beq.n	800704a <HAL_UART_IRQHandler+0x126>
 8007026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b00      	cmp	r3, #0
 8007030:	d105      	bne.n	800703e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007042:	f043 0208 	orr.w	r2, r3, #8
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 81f2 	beq.w	8007438 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007058:	f003 0320 	and.w	r3, r3, #32
 800705c:	2b00      	cmp	r3, #0
 800705e:	d008      	beq.n	8007072 <HAL_UART_IRQHandler+0x14e>
 8007060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007064:	f003 0320 	and.w	r3, r3, #32
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fb7b 	bl	8007768 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800707c:	2b40      	cmp	r3, #64	@ 0x40
 800707e:	bf0c      	ite	eq
 8007080:	2301      	moveq	r3, #1
 8007082:	2300      	movne	r3, #0
 8007084:	b2db      	uxtb	r3, r3
 8007086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d103      	bne.n	800709e <HAL_UART_IRQHandler+0x17a>
 8007096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800709a:	2b00      	cmp	r3, #0
 800709c:	d04f      	beq.n	800713e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa83 	bl	80075aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ae:	2b40      	cmp	r3, #64	@ 0x40
 80070b0:	d141      	bne.n	8007136 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3314      	adds	r3, #20
 80070b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80070c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3314      	adds	r3, #20
 80070da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80070de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80070e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80070ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80070f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1d9      	bne.n	80070b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007102:	2b00      	cmp	r3, #0
 8007104:	d013      	beq.n	800712e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710a:	4a7e      	ldr	r2, [pc, #504]	@ (8007304 <HAL_UART_IRQHandler+0x3e0>)
 800710c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007112:	4618      	mov	r0, r3
 8007114:	f7fd f874 	bl	8004200 <HAL_DMA_Abort_IT>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d016      	beq.n	800714c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007128:	4610      	mov	r0, r2
 800712a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712c:	e00e      	b.n	800714c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f99e 	bl	8007470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007134:	e00a      	b.n	800714c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f99a 	bl	8007470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800713c:	e006      	b.n	800714c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f996 	bl	8007470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800714a:	e175      	b.n	8007438 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800714c:	bf00      	nop
    return;
 800714e:	e173      	b.n	8007438 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007154:	2b01      	cmp	r3, #1
 8007156:	f040 814f 	bne.w	80073f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800715a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800715e:	f003 0310 	and.w	r3, r3, #16
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 8148 	beq.w	80073f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800716c:	f003 0310 	and.w	r3, r3, #16
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 8141 	beq.w	80073f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007176:	2300      	movs	r3, #0
 8007178:	60bb      	str	r3, [r7, #8]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	60bb      	str	r3, [r7, #8]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	60bb      	str	r3, [r7, #8]
 800718a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007196:	2b40      	cmp	r3, #64	@ 0x40
 8007198:	f040 80b6 	bne.w	8007308 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 8145 	beq.w	800743c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071ba:	429a      	cmp	r2, r3
 80071bc:	f080 813e 	bcs.w	800743c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071d2:	f000 8088 	beq.w	80072e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	330c      	adds	r3, #12
 80071dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80071ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80071f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	330c      	adds	r3, #12
 80071fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007202:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800720e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800721a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1d9      	bne.n	80071d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3314      	adds	r3, #20
 8007228:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007232:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3314      	adds	r3, #20
 8007242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007246:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800724a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800724e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007252:	e841 2300 	strex	r3, r2, [r1]
 8007256:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007258:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1e1      	bne.n	8007222 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3314      	adds	r3, #20
 8007264:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007266:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800726e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007270:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007274:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3314      	adds	r3, #20
 800727e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007282:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007284:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007288:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007290:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e3      	bne.n	800725e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2220      	movs	r2, #32
 800729a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	330c      	adds	r3, #12
 80072aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072ae:	e853 3f00 	ldrex	r3, [r3]
 80072b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072b6:	f023 0310 	bic.w	r3, r3, #16
 80072ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	330c      	adds	r3, #12
 80072c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80072c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80072ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072d0:	e841 2300 	strex	r3, r2, [r1]
 80072d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e3      	bne.n	80072a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fc ff1d 	bl	8004120 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2202      	movs	r2, #2
 80072ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7fa ffc1 	bl	8002284 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007302:	e09b      	b.n	800743c <HAL_UART_IRQHandler+0x518>
 8007304:	08007671 	.word	0x08007671
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007310:	b29b      	uxth	r3, r3
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800731c:	b29b      	uxth	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 808e 	beq.w	8007440 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 8089 	beq.w	8007440 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	330c      	adds	r3, #12
 8007334:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800733e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007340:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007344:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	330c      	adds	r3, #12
 800734e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007352:	647a      	str	r2, [r7, #68]	@ 0x44
 8007354:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007358:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e3      	bne.n	800732e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3314      	adds	r3, #20
 800736c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	e853 3f00 	ldrex	r3, [r3]
 8007374:	623b      	str	r3, [r7, #32]
   return(result);
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	f023 0301 	bic.w	r3, r3, #1
 800737c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3314      	adds	r3, #20
 8007386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800738a:	633a      	str	r2, [r7, #48]	@ 0x30
 800738c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e3      	bne.n	8007366 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	330c      	adds	r3, #12
 80073b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0310 	bic.w	r3, r3, #16
 80073c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	330c      	adds	r3, #12
 80073cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80073d0:	61fa      	str	r2, [r7, #28]
 80073d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	69b9      	ldr	r1, [r7, #24]
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	617b      	str	r3, [r7, #20]
   return(result);
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e3      	bne.n	80073ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7fa ff47 	bl	8002284 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073f6:	e023      	b.n	8007440 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007400:	2b00      	cmp	r3, #0
 8007402:	d009      	beq.n	8007418 <HAL_UART_IRQHandler+0x4f4>
 8007404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f941 	bl	8007698 <UART_Transmit_IT>
    return;
 8007416:	e014      	b.n	8007442 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800741c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00e      	beq.n	8007442 <HAL_UART_IRQHandler+0x51e>
 8007424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800742c:	2b00      	cmp	r3, #0
 800742e:	d008      	beq.n	8007442 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f981 	bl	8007738 <UART_EndTransmit_IT>
    return;
 8007436:	e004      	b.n	8007442 <HAL_UART_IRQHandler+0x51e>
    return;
 8007438:	bf00      	nop
 800743a:	e002      	b.n	8007442 <HAL_UART_IRQHandler+0x51e>
      return;
 800743c:	bf00      	nop
 800743e:	e000      	b.n	8007442 <HAL_UART_IRQHandler+0x51e>
      return;
 8007440:	bf00      	nop
  }
}
 8007442:	37e8      	adds	r7, #232	@ 0xe8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	603b      	str	r3, [r7, #0]
 8007490:	4613      	mov	r3, r2
 8007492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007494:	e03b      	b.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d037      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800749e:	f7fb ffe5 	bl	800346c <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	6a3a      	ldr	r2, [r7, #32]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d302      	bcc.n	80074b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e03a      	b.n	800752e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f003 0304 	and.w	r3, r3, #4
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d023      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2b80      	cmp	r3, #128	@ 0x80
 80074ca:	d020      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b40      	cmp	r3, #64	@ 0x40
 80074d0:	d01d      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0308 	and.w	r3, r3, #8
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d116      	bne.n	800750e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80074e0:	2300      	movs	r3, #0
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 f857 	bl	80075aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2208      	movs	r2, #8
 8007500:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e00f      	b.n	800752e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4013      	ands	r3, r2
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	429a      	cmp	r2, r3
 800751c:	bf0c      	ite	eq
 800751e:	2301      	moveq	r3, #1
 8007520:	2300      	movne	r3, #0
 8007522:	b2db      	uxtb	r3, r3
 8007524:	461a      	mov	r2, r3
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	429a      	cmp	r2, r3
 800752a:	d0b4      	beq.n	8007496 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007536:	b480      	push	{r7}
 8007538:	b085      	sub	sp, #20
 800753a:	af00      	add	r7, sp, #0
 800753c:	60f8      	str	r0, [r7, #12]
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	4613      	mov	r3, r2
 8007542:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2222      	movs	r2, #34	@ 0x22
 8007560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d007      	beq.n	800757c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800757a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	695a      	ldr	r2, [r3, #20]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0201 	orr.w	r2, r2, #1
 800758a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0220 	orr.w	r2, r2, #32
 800759a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b095      	sub	sp, #84	@ 0x54
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330c      	adds	r3, #12
 80075b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	330c      	adds	r3, #12
 80075d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80075d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e5      	bne.n	80075b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3314      	adds	r3, #20
 80075ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	f023 0301 	bic.w	r3, r3, #1
 80075fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3314      	adds	r3, #20
 8007604:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007606:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007608:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800760c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e5      	bne.n	80075e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761e:	2b01      	cmp	r3, #1
 8007620:	d119      	bne.n	8007656 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	330c      	adds	r3, #12
 8007628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	e853 3f00 	ldrex	r3, [r3]
 8007630:	60bb      	str	r3, [r7, #8]
   return(result);
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f023 0310 	bic.w	r3, r3, #16
 8007638:	647b      	str	r3, [r7, #68]	@ 0x44
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	330c      	adds	r3, #12
 8007640:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007642:	61ba      	str	r2, [r7, #24]
 8007644:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	6979      	ldr	r1, [r7, #20]
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	613b      	str	r3, [r7, #16]
   return(result);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e5      	bne.n	8007622 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007664:	bf00      	nop
 8007666:	3754      	adds	r7, #84	@ 0x54
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f7ff fef0 	bl	8007470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007690:	bf00      	nop
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b21      	cmp	r3, #33	@ 0x21
 80076aa:	d13e      	bne.n	800772a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076b4:	d114      	bne.n	80076e0 <UART_Transmit_IT+0x48>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d110      	bne.n	80076e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	1c9a      	adds	r2, r3, #2
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	621a      	str	r2, [r3, #32]
 80076de:	e008      	b.n	80076f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	1c59      	adds	r1, r3, #1
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	6211      	str	r1, [r2, #32]
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	4619      	mov	r1, r3
 8007700:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10f      	bne.n	8007726 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007714:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007724:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	e000      	b.n	800772c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800772a:	2302      	movs	r3, #2
  }
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800774e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2220      	movs	r2, #32
 8007754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff fe75 	bl	8007448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08c      	sub	sp, #48	@ 0x30
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b22      	cmp	r3, #34	@ 0x22
 800777a:	f040 80ae 	bne.w	80078da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007786:	d117      	bne.n	80077b8 <UART_Receive_IT+0x50>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d113      	bne.n	80077b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007790:	2300      	movs	r3, #0
 8007792:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007798:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b0:	1c9a      	adds	r2, r3, #2
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80077b6:	e026      	b.n	8007806 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ca:	d007      	beq.n	80077dc <UART_Receive_IT+0x74>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10a      	bne.n	80077ea <UART_Receive_IT+0x82>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d106      	bne.n	80077ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e6:	701a      	strb	r2, [r3, #0]
 80077e8:	e008      	b.n	80077fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800780a:	b29b      	uxth	r3, r3
 800780c:	3b01      	subs	r3, #1
 800780e:	b29b      	uxth	r3, r3
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	4619      	mov	r1, r3
 8007814:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007816:	2b00      	cmp	r3, #0
 8007818:	d15d      	bne.n	80078d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0220 	bic.w	r2, r2, #32
 8007828:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007838:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695a      	ldr	r2, [r3, #20]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0201 	bic.w	r2, r2, #1
 8007848:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2220      	movs	r2, #32
 800784e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785c:	2b01      	cmp	r3, #1
 800785e:	d135      	bne.n	80078cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	330c      	adds	r3, #12
 800786c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	613b      	str	r3, [r7, #16]
   return(result);
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f023 0310 	bic.w	r3, r3, #16
 800787c:	627b      	str	r3, [r7, #36]	@ 0x24
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	330c      	adds	r3, #12
 8007884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007886:	623a      	str	r2, [r7, #32]
 8007888:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	69f9      	ldr	r1, [r7, #28]
 800788c:	6a3a      	ldr	r2, [r7, #32]
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	61bb      	str	r3, [r7, #24]
   return(result);
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e5      	bne.n	8007866 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0310 	and.w	r3, r3, #16
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d10a      	bne.n	80078be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7fa fcdd 	bl	8002284 <HAL_UARTEx_RxEventCallback>
 80078ca:	e002      	b.n	80078d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff fdc5 	bl	800745c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	e002      	b.n	80078dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e000      	b.n	80078dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80078da:	2302      	movs	r3, #2
  }
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3730      	adds	r7, #48	@ 0x30
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078e8:	b0c0      	sub	sp, #256	@ 0x100
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80078fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007900:	68d9      	ldr	r1, [r3, #12]
 8007902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	ea40 0301 	orr.w	r3, r0, r1
 800790c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800790e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	431a      	orrs	r2, r3
 800791c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	431a      	orrs	r2, r3
 8007924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	4313      	orrs	r3, r2
 800792c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800793c:	f021 010c 	bic.w	r1, r1, #12
 8007940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800794a:	430b      	orrs	r3, r1
 800794c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800794e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800795a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800795e:	6999      	ldr	r1, [r3, #24]
 8007960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	ea40 0301 	orr.w	r3, r0, r1
 800796a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800796c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	4b8f      	ldr	r3, [pc, #572]	@ (8007bb0 <UART_SetConfig+0x2cc>)
 8007974:	429a      	cmp	r2, r3
 8007976:	d005      	beq.n	8007984 <UART_SetConfig+0xa0>
 8007978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	4b8d      	ldr	r3, [pc, #564]	@ (8007bb4 <UART_SetConfig+0x2d0>)
 8007980:	429a      	cmp	r2, r3
 8007982:	d104      	bne.n	800798e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007984:	f7fd fe60 	bl	8005648 <HAL_RCC_GetPCLK2Freq>
 8007988:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800798c:	e003      	b.n	8007996 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800798e:	f7fd fe47 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 8007992:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079a0:	f040 810c 	bne.w	8007bbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80079b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80079b6:	4622      	mov	r2, r4
 80079b8:	462b      	mov	r3, r5
 80079ba:	1891      	adds	r1, r2, r2
 80079bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80079be:	415b      	adcs	r3, r3
 80079c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80079c6:	4621      	mov	r1, r4
 80079c8:	eb12 0801 	adds.w	r8, r2, r1
 80079cc:	4629      	mov	r1, r5
 80079ce:	eb43 0901 	adc.w	r9, r3, r1
 80079d2:	f04f 0200 	mov.w	r2, #0
 80079d6:	f04f 0300 	mov.w	r3, #0
 80079da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079e6:	4690      	mov	r8, r2
 80079e8:	4699      	mov	r9, r3
 80079ea:	4623      	mov	r3, r4
 80079ec:	eb18 0303 	adds.w	r3, r8, r3
 80079f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079f4:	462b      	mov	r3, r5
 80079f6:	eb49 0303 	adc.w	r3, r9, r3
 80079fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007a0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a12:	460b      	mov	r3, r1
 8007a14:	18db      	adds	r3, r3, r3
 8007a16:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a18:	4613      	mov	r3, r2
 8007a1a:	eb42 0303 	adc.w	r3, r2, r3
 8007a1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007a24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007a28:	f7f8 ffec 	bl	8000a04 <__aeabi_uldivmod>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4b61      	ldr	r3, [pc, #388]	@ (8007bb8 <UART_SetConfig+0x2d4>)
 8007a32:	fba3 2302 	umull	r2, r3, r3, r2
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	011c      	lsls	r4, r3, #4
 8007a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007a48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007a4c:	4642      	mov	r2, r8
 8007a4e:	464b      	mov	r3, r9
 8007a50:	1891      	adds	r1, r2, r2
 8007a52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a54:	415b      	adcs	r3, r3
 8007a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a5c:	4641      	mov	r1, r8
 8007a5e:	eb12 0a01 	adds.w	sl, r2, r1
 8007a62:	4649      	mov	r1, r9
 8007a64:	eb43 0b01 	adc.w	fp, r3, r1
 8007a68:	f04f 0200 	mov.w	r2, #0
 8007a6c:	f04f 0300 	mov.w	r3, #0
 8007a70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a7c:	4692      	mov	sl, r2
 8007a7e:	469b      	mov	fp, r3
 8007a80:	4643      	mov	r3, r8
 8007a82:	eb1a 0303 	adds.w	r3, sl, r3
 8007a86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a8a:	464b      	mov	r3, r9
 8007a8c:	eb4b 0303 	adc.w	r3, fp, r3
 8007a90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007aa0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007aa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	18db      	adds	r3, r3, r3
 8007aac:	643b      	str	r3, [r7, #64]	@ 0x40
 8007aae:	4613      	mov	r3, r2
 8007ab0:	eb42 0303 	adc.w	r3, r2, r3
 8007ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ab6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007aba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007abe:	f7f8 ffa1 	bl	8000a04 <__aeabi_uldivmod>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8007bb8 <UART_SetConfig+0x2d4>)
 8007aca:	fba3 2301 	umull	r2, r3, r3, r1
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	2264      	movs	r2, #100	@ 0x64
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
 8007ad6:	1acb      	subs	r3, r1, r3
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007ade:	4b36      	ldr	r3, [pc, #216]	@ (8007bb8 <UART_SetConfig+0x2d4>)
 8007ae0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ae4:	095b      	lsrs	r3, r3, #5
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007aec:	441c      	add	r4, r3
 8007aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007af8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007afc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b00:	4642      	mov	r2, r8
 8007b02:	464b      	mov	r3, r9
 8007b04:	1891      	adds	r1, r2, r2
 8007b06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007b08:	415b      	adcs	r3, r3
 8007b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007b10:	4641      	mov	r1, r8
 8007b12:	1851      	adds	r1, r2, r1
 8007b14:	6339      	str	r1, [r7, #48]	@ 0x30
 8007b16:	4649      	mov	r1, r9
 8007b18:	414b      	adcs	r3, r1
 8007b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007b28:	4659      	mov	r1, fp
 8007b2a:	00cb      	lsls	r3, r1, #3
 8007b2c:	4651      	mov	r1, sl
 8007b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b32:	4651      	mov	r1, sl
 8007b34:	00ca      	lsls	r2, r1, #3
 8007b36:	4610      	mov	r0, r2
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	4642      	mov	r2, r8
 8007b3e:	189b      	adds	r3, r3, r2
 8007b40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b44:	464b      	mov	r3, r9
 8007b46:	460a      	mov	r2, r1
 8007b48:	eb42 0303 	adc.w	r3, r2, r3
 8007b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b64:	460b      	mov	r3, r1
 8007b66:	18db      	adds	r3, r3, r3
 8007b68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	eb42 0303 	adc.w	r3, r2, r3
 8007b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b7a:	f7f8 ff43 	bl	8000a04 <__aeabi_uldivmod>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb8 <UART_SetConfig+0x2d4>)
 8007b84:	fba3 1302 	umull	r1, r3, r3, r2
 8007b88:	095b      	lsrs	r3, r3, #5
 8007b8a:	2164      	movs	r1, #100	@ 0x64
 8007b8c:	fb01 f303 	mul.w	r3, r1, r3
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	3332      	adds	r3, #50	@ 0x32
 8007b96:	4a08      	ldr	r2, [pc, #32]	@ (8007bb8 <UART_SetConfig+0x2d4>)
 8007b98:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9c:	095b      	lsrs	r3, r3, #5
 8007b9e:	f003 0207 	and.w	r2, r3, #7
 8007ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4422      	add	r2, r4
 8007baa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007bac:	e106      	b.n	8007dbc <UART_SetConfig+0x4d8>
 8007bae:	bf00      	nop
 8007bb0:	40011000 	.word	0x40011000
 8007bb4:	40011400 	.word	0x40011400
 8007bb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bc6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007bca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007bce:	4642      	mov	r2, r8
 8007bd0:	464b      	mov	r3, r9
 8007bd2:	1891      	adds	r1, r2, r2
 8007bd4:	6239      	str	r1, [r7, #32]
 8007bd6:	415b      	adcs	r3, r3
 8007bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bde:	4641      	mov	r1, r8
 8007be0:	1854      	adds	r4, r2, r1
 8007be2:	4649      	mov	r1, r9
 8007be4:	eb43 0501 	adc.w	r5, r3, r1
 8007be8:	f04f 0200 	mov.w	r2, #0
 8007bec:	f04f 0300 	mov.w	r3, #0
 8007bf0:	00eb      	lsls	r3, r5, #3
 8007bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bf6:	00e2      	lsls	r2, r4, #3
 8007bf8:	4614      	mov	r4, r2
 8007bfa:	461d      	mov	r5, r3
 8007bfc:	4643      	mov	r3, r8
 8007bfe:	18e3      	adds	r3, r4, r3
 8007c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c04:	464b      	mov	r3, r9
 8007c06:	eb45 0303 	adc.w	r3, r5, r3
 8007c0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c1e:	f04f 0200 	mov.w	r2, #0
 8007c22:	f04f 0300 	mov.w	r3, #0
 8007c26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	008b      	lsls	r3, r1, #2
 8007c2e:	4621      	mov	r1, r4
 8007c30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c34:	4621      	mov	r1, r4
 8007c36:	008a      	lsls	r2, r1, #2
 8007c38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c3c:	f7f8 fee2 	bl	8000a04 <__aeabi_uldivmod>
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	4b60      	ldr	r3, [pc, #384]	@ (8007dc8 <UART_SetConfig+0x4e4>)
 8007c46:	fba3 2302 	umull	r2, r3, r3, r2
 8007c4a:	095b      	lsrs	r3, r3, #5
 8007c4c:	011c      	lsls	r4, r3, #4
 8007c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c60:	4642      	mov	r2, r8
 8007c62:	464b      	mov	r3, r9
 8007c64:	1891      	adds	r1, r2, r2
 8007c66:	61b9      	str	r1, [r7, #24]
 8007c68:	415b      	adcs	r3, r3
 8007c6a:	61fb      	str	r3, [r7, #28]
 8007c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c70:	4641      	mov	r1, r8
 8007c72:	1851      	adds	r1, r2, r1
 8007c74:	6139      	str	r1, [r7, #16]
 8007c76:	4649      	mov	r1, r9
 8007c78:	414b      	adcs	r3, r1
 8007c7a:	617b      	str	r3, [r7, #20]
 8007c7c:	f04f 0200 	mov.w	r2, #0
 8007c80:	f04f 0300 	mov.w	r3, #0
 8007c84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c88:	4659      	mov	r1, fp
 8007c8a:	00cb      	lsls	r3, r1, #3
 8007c8c:	4651      	mov	r1, sl
 8007c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c92:	4651      	mov	r1, sl
 8007c94:	00ca      	lsls	r2, r1, #3
 8007c96:	4610      	mov	r0, r2
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	189b      	adds	r3, r3, r2
 8007ca0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ca4:	464b      	mov	r3, r9
 8007ca6:	460a      	mov	r2, r1
 8007ca8:	eb42 0303 	adc.w	r3, r2, r3
 8007cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007cbc:	f04f 0200 	mov.w	r2, #0
 8007cc0:	f04f 0300 	mov.w	r3, #0
 8007cc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007cc8:	4649      	mov	r1, r9
 8007cca:	008b      	lsls	r3, r1, #2
 8007ccc:	4641      	mov	r1, r8
 8007cce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cd2:	4641      	mov	r1, r8
 8007cd4:	008a      	lsls	r2, r1, #2
 8007cd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007cda:	f7f8 fe93 	bl	8000a04 <__aeabi_uldivmod>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	4b38      	ldr	r3, [pc, #224]	@ (8007dc8 <UART_SetConfig+0x4e4>)
 8007ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8007cea:	095b      	lsrs	r3, r3, #5
 8007cec:	2264      	movs	r2, #100	@ 0x64
 8007cee:	fb02 f303 	mul.w	r3, r2, r3
 8007cf2:	1acb      	subs	r3, r1, r3
 8007cf4:	011b      	lsls	r3, r3, #4
 8007cf6:	3332      	adds	r3, #50	@ 0x32
 8007cf8:	4a33      	ldr	r2, [pc, #204]	@ (8007dc8 <UART_SetConfig+0x4e4>)
 8007cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfe:	095b      	lsrs	r3, r3, #5
 8007d00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d04:	441c      	add	r4, r3
 8007d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007d14:	4642      	mov	r2, r8
 8007d16:	464b      	mov	r3, r9
 8007d18:	1891      	adds	r1, r2, r2
 8007d1a:	60b9      	str	r1, [r7, #8]
 8007d1c:	415b      	adcs	r3, r3
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d24:	4641      	mov	r1, r8
 8007d26:	1851      	adds	r1, r2, r1
 8007d28:	6039      	str	r1, [r7, #0]
 8007d2a:	4649      	mov	r1, r9
 8007d2c:	414b      	adcs	r3, r1
 8007d2e:	607b      	str	r3, [r7, #4]
 8007d30:	f04f 0200 	mov.w	r2, #0
 8007d34:	f04f 0300 	mov.w	r3, #0
 8007d38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d3c:	4659      	mov	r1, fp
 8007d3e:	00cb      	lsls	r3, r1, #3
 8007d40:	4651      	mov	r1, sl
 8007d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d46:	4651      	mov	r1, sl
 8007d48:	00ca      	lsls	r2, r1, #3
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4603      	mov	r3, r0
 8007d50:	4642      	mov	r2, r8
 8007d52:	189b      	adds	r3, r3, r2
 8007d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d56:	464b      	mov	r3, r9
 8007d58:	460a      	mov	r2, r1
 8007d5a:	eb42 0303 	adc.w	r3, r2, r3
 8007d5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d6c:	f04f 0200 	mov.w	r2, #0
 8007d70:	f04f 0300 	mov.w	r3, #0
 8007d74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d78:	4649      	mov	r1, r9
 8007d7a:	008b      	lsls	r3, r1, #2
 8007d7c:	4641      	mov	r1, r8
 8007d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d82:	4641      	mov	r1, r8
 8007d84:	008a      	lsls	r2, r1, #2
 8007d86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d8a:	f7f8 fe3b 	bl	8000a04 <__aeabi_uldivmod>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc8 <UART_SetConfig+0x4e4>)
 8007d94:	fba3 1302 	umull	r1, r3, r3, r2
 8007d98:	095b      	lsrs	r3, r3, #5
 8007d9a:	2164      	movs	r1, #100	@ 0x64
 8007d9c:	fb01 f303 	mul.w	r3, r1, r3
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	011b      	lsls	r3, r3, #4
 8007da4:	3332      	adds	r3, #50	@ 0x32
 8007da6:	4a08      	ldr	r2, [pc, #32]	@ (8007dc8 <UART_SetConfig+0x4e4>)
 8007da8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dac:	095b      	lsrs	r3, r3, #5
 8007dae:	f003 020f 	and.w	r2, r3, #15
 8007db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4422      	add	r2, r4
 8007dba:	609a      	str	r2, [r3, #8]
}
 8007dbc:	bf00      	nop
 8007dbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dc8:	51eb851f 	.word	0x51eb851f

08007dcc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	6812      	ldr	r2, [r2, #0]
 8007de4:	f023 0101 	bic.w	r1, r3, #1
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	2b08      	cmp	r3, #8
 8007df4:	d102      	bne.n	8007dfc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007df6:	2340      	movs	r3, #64	@ 0x40
 8007df8:	617b      	str	r3, [r7, #20]
 8007dfa:	e001      	b.n	8007e00 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007e0c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007e12:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007e18:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007e1e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007e24:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007e2a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8007e30:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8007e36:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8007e3c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8007e42:	4313      	orrs	r3, r2
 8007e44:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8007e5a:	4b10      	ldr	r3, [pc, #64]	@ (8007e9c <FSMC_NORSRAM_Init+0xd0>)
 8007e5c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007e64:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8007e6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	43db      	mvns	r3, r3
 8007e7c:	ea02 0103 	and.w	r1, r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	4319      	orrs	r1, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	0008fb7f 	.word	0x0008fb7f

08007ea0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	1c5a      	adds	r2, r3, #1
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb6:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	011b      	lsls	r3, r3, #4
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	021b      	lsls	r3, r3, #8
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	041b      	lsls	r3, r3, #16
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	051b      	lsls	r3, r3, #20
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	3b02      	subs	r3, #2
 8007ee6:	061b      	lsls	r3, r3, #24
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	3201      	adds	r2, #1
 8007ef4:	4319      	orrs	r1, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
	...

08007f0c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f20:	d11d      	bne.n	8007f5e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f2a:	4b13      	ldr	r3, [pc, #76]	@ (8007f78 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	6811      	ldr	r1, [r2, #0]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	6852      	ldr	r2, [r2, #4]
 8007f36:	0112      	lsls	r2, r2, #4
 8007f38:	4311      	orrs	r1, r2
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	6892      	ldr	r2, [r2, #8]
 8007f3e:	0212      	lsls	r2, r2, #8
 8007f40:	4311      	orrs	r1, r2
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	6992      	ldr	r2, [r2, #24]
 8007f46:	4311      	orrs	r1, r2
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	68d2      	ldr	r2, [r2, #12]
 8007f4c:	0412      	lsls	r2, r2, #16
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	ea43 0102 	orr.w	r1, r3, r2
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007f5c:	e005      	b.n	8007f6a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8007f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	cff00000 	.word	0xcff00000

08007f7c <memset>:
 8007f7c:	4402      	add	r2, r0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d100      	bne.n	8007f86 <memset+0xa>
 8007f84:	4770      	bx	lr
 8007f86:	f803 1b01 	strb.w	r1, [r3], #1
 8007f8a:	e7f9      	b.n	8007f80 <memset+0x4>

08007f8c <__libc_init_array>:
 8007f8c:	b570      	push	{r4, r5, r6, lr}
 8007f8e:	4d0d      	ldr	r5, [pc, #52]	@ (8007fc4 <__libc_init_array+0x38>)
 8007f90:	4c0d      	ldr	r4, [pc, #52]	@ (8007fc8 <__libc_init_array+0x3c>)
 8007f92:	1b64      	subs	r4, r4, r5
 8007f94:	10a4      	asrs	r4, r4, #2
 8007f96:	2600      	movs	r6, #0
 8007f98:	42a6      	cmp	r6, r4
 8007f9a:	d109      	bne.n	8007fb0 <__libc_init_array+0x24>
 8007f9c:	4d0b      	ldr	r5, [pc, #44]	@ (8007fcc <__libc_init_array+0x40>)
 8007f9e:	4c0c      	ldr	r4, [pc, #48]	@ (8007fd0 <__libc_init_array+0x44>)
 8007fa0:	f000 f818 	bl	8007fd4 <_init>
 8007fa4:	1b64      	subs	r4, r4, r5
 8007fa6:	10a4      	asrs	r4, r4, #2
 8007fa8:	2600      	movs	r6, #0
 8007faa:	42a6      	cmp	r6, r4
 8007fac:	d105      	bne.n	8007fba <__libc_init_array+0x2e>
 8007fae:	bd70      	pop	{r4, r5, r6, pc}
 8007fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fb4:	4798      	blx	r3
 8007fb6:	3601      	adds	r6, #1
 8007fb8:	e7ee      	b.n	8007f98 <__libc_init_array+0xc>
 8007fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fbe:	4798      	blx	r3
 8007fc0:	3601      	adds	r6, #1
 8007fc2:	e7f2      	b.n	8007faa <__libc_init_array+0x1e>
 8007fc4:	0800b020 	.word	0x0800b020
 8007fc8:	0800b020 	.word	0x0800b020
 8007fcc:	0800b020 	.word	0x0800b020
 8007fd0:	0800b024 	.word	0x0800b024

08007fd4 <_init>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	bf00      	nop
 8007fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fda:	bc08      	pop	{r3}
 8007fdc:	469e      	mov	lr, r3
 8007fde:	4770      	bx	lr

08007fe0 <_fini>:
 8007fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe2:	bf00      	nop
 8007fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fe6:	bc08      	pop	{r3}
 8007fe8:	469e      	mov	lr, r3
 8007fea:	4770      	bx	lr
